
TileLinkTrafficAdapter-H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a930  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800abfc  0800abfc  0001abfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac3c  0800ac3c  0001ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac44  0800ac44  0001ac44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ac48  0800ac48  0001ac48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800ac4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d0  24000018  0800ac60  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240004e8  0800ac60  000204e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016a01  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002937  00000000  00000000  00036a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000010f8  00000000  00000000  000393c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d4b  00000000  00000000  0003a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000339a3  00000000  00000000  0003b203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000185f0  00000000  00000000  0006eba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014d0ba  00000000  00000000  00087196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000480c  00000000  00000000  001d4250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  001d8a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000018 	.word	0x24000018
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800abe4 	.word	0x0800abe4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400001c 	.word	0x2400001c
 8000308:	0800abe4 	.word	0x0800abe4

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_UARTEx_RxEventCallback>:
AppState app_state = APP_STATE_INVALID;

GPIO_PinState tl_in_ready_prev_state = GPIO_PIN_RESET;
GPIO_PinState tl_in_ready_state = GPIO_PIN_RESET;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	8079      	strh	r1, [r7, #2]
  if (app_state != APP_STATE_IDLE) {
 8000612:	4925      	ldr	r1, [pc, #148]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000614:	f991 1000 	ldrsb.w	r1, [r1]
 8000618:	2900      	cmp	r1, #0
 800061a:	d140      	bne.n	800069e <HAL_UARTEx_RxEventCallback+0x96>
    return;
  }

  if (huart == &huart3) {
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	4823      	ldr	r0, [pc, #140]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000620:	4281      	cmp	r1, r0
 8000622:	d136      	bne.n	8000692 <HAL_UARTEx_RxEventCallback+0x8a>
    tl.tx_frame.chanid  = *(serial_rx_buffer);
 8000624:	4922      	ldr	r1, [pc, #136]	; (80006b0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000626:	7808      	ldrb	r0, [r1, #0]
 8000628:	4922      	ldr	r1, [pc, #136]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 800062a:	7008      	strb	r0, [r1, #0]
    tl.tx_frame.opcode  = (*(serial_rx_buffer + 1)) & 0b111;
 800062c:	4920      	ldr	r1, [pc, #128]	; (80006b0 <HAL_UARTEx_RxEventCallback+0xa8>)
 800062e:	7849      	ldrb	r1, [r1, #1]
 8000630:	f001 0107 	and.w	r1, r1, #7
 8000634:	b2c8      	uxtb	r0, r1
 8000636:	491f      	ldr	r1, [pc, #124]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 8000638:	7048      	strb	r0, [r1, #1]
    tl.tx_frame.param   = (*(serial_rx_buffer + 1)) >> 4;
 800063a:	491d      	ldr	r1, [pc, #116]	; (80006b0 <HAL_UARTEx_RxEventCallback+0xa8>)
 800063c:	7849      	ldrb	r1, [r1, #1]
 800063e:	0909      	lsrs	r1, r1, #4
 8000640:	b2c8      	uxtb	r0, r1
 8000642:	491c      	ldr	r1, [pc, #112]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 8000644:	7088      	strb	r0, [r1, #2]
    tl.tx_frame.size    = *(serial_rx_buffer + 2);
 8000646:	491a      	ldr	r1, [pc, #104]	; (80006b0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000648:	7888      	ldrb	r0, [r1, #2]
 800064a:	491a      	ldr	r1, [pc, #104]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 800064c:	70c8      	strb	r0, [r1, #3]
    tl.tx_frame.source  = 0;
 800064e:	4919      	ldr	r1, [pc, #100]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 8000650:	2000      	movs	r0, #0
 8000652:	7108      	strb	r0, [r1, #4]
    tl.tx_frame.address = *(uint32_t *)(serial_rx_buffer + 4);
 8000654:	4918      	ldr	r1, [pc, #96]	; (80006b8 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000656:	6809      	ldr	r1, [r1, #0]
 8000658:	2000      	movs	r0, #0
 800065a:	460a      	mov	r2, r1
 800065c:	4603      	mov	r3, r0
 800065e:	4915      	ldr	r1, [pc, #84]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 8000660:	e9c1 2302 	strd	r2, r3, [r1, #8]
    tl.tx_frame.data    = *(uint64_t *)(serial_rx_buffer + 8);
 8000664:	4912      	ldr	r1, [pc, #72]	; (80006b0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000666:	688a      	ldr	r2, [r1, #8]
 8000668:	68cb      	ldr	r3, [r1, #12]
 800066a:	4912      	ldr	r1, [pc, #72]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 800066c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    tl.tx_frame.corrupt = (*(serial_rx_buffer + 1) >> 7) & 0b1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000672:	785b      	ldrb	r3, [r3, #1]
 8000674:	09db      	lsrs	r3, r3, #7
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 800067a:	761a      	strb	r2, [r3, #24]
    tl.tx_frame.tl_union    = *(serial_rx_buffer + 3);
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_UARTEx_RxEventCallback+0xa8>)
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 8000684:	835a      	strh	r2, [r3, #26]
    tl.tx_frame.last    = 1;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <HAL_UARTEx_RxEventCallback+0xac>)
 8000688:	2201      	movs	r2, #1
 800068a:	771a      	strb	r2, [r3, #28]

    app_state = APP_STATE_FRAME_PENDING;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 8000692:	2220      	movs	r2, #32
 8000694:	4906      	ldr	r1, [pc, #24]	; (80006b0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000698:	f00a f9d5 	bl	800aa46 <HAL_UARTEx_ReceiveToIdle_DMA>
 800069c:	e000      	b.n	80006a0 <HAL_UARTEx_RxEventCallback+0x98>
    return;
 800069e:	bf00      	nop
}
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	24000000 	.word	0x24000000
 80006ac:	24000360 	.word	0x24000360
 80006b0:	24000290 	.word	0x24000290
 80006b4:	24000038 	.word	0x24000038
 80006b8:	24000294 	.word	0x24000294

080006bc <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006c0:	2100      	movs	r1, #0
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <APP_init+0x20>)
 80006c4:	f007 f8e6 	bl	8007894 <HAL_TIM_PWM_Start>
  app_state = APP_STATE_IDLE;
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <APP_init+0x24>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 80006ce:	2220      	movs	r2, #32
 80006d0:	4904      	ldr	r1, [pc, #16]	; (80006e4 <APP_init+0x28>)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <APP_init+0x2c>)
 80006d4:	f00a f9b7 	bl	800aa46 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	24000314 	.word	0x24000314
 80006e0:	24000000 	.word	0x24000000
 80006e4:	24000290 	.word	0x24000290
 80006e8:	24000360 	.word	0x24000360

080006ec <APP_main>:


void APP_main() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  // Poll the TL clock.
  GPIO_PinState tl_clk_state = HAL_GPIO_ReadPin(TL_CLK_GPIO_Port, TL_CLK_Pin);
 80006f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f6:	4840      	ldr	r0, [pc, #256]	; (80007f8 <APP_main+0x10c>)
 80006f8:	f004 fa80 	bl	8004bfc <HAL_GPIO_ReadPin>
 80006fc:	4603      	mov	r3, r0
 80006fe:	71fb      	strb	r3, [r7, #7]


  // Process TL transactions on the positive clock edge.
  if (tl_clk_state == GPIO_PIN_SET && tl_clk_prev_state == GPIO_PIN_RESET) {
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d118      	bne.n	8000738 <APP_main+0x4c>
 8000706:	4b3d      	ldr	r3, [pc, #244]	; (80007fc <APP_main+0x110>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d114      	bne.n	8000738 <APP_main+0x4c>
    tl_in_ready_state = HAL_GPIO_ReadPin(TL_IN_READY_GPIO_Port, TL_IN_READY_Pin);
 800070e:	2102      	movs	r1, #2
 8000710:	483b      	ldr	r0, [pc, #236]	; (8000800 <APP_main+0x114>)
 8000712:	f004 fa73 	bl	8004bfc <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <APP_main+0x118>)
 800071c:	701a      	strb	r2, [r3, #0]
    
    tl.tl_in_ready_prev_state = (uint16_t)tl_in_ready_prev_state;
 800071e:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <APP_main+0x11c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b39      	ldr	r3, [pc, #228]	; (800080c <APP_main+0x120>)
 8000726:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
    TL_update(&tl);
 800072a:	4838      	ldr	r0, [pc, #224]	; (800080c <APP_main+0x120>)
 800072c:	f000 fd20 	bl	8001170 <TL_update>
    tl_in_ready_prev_state = tl_in_ready_state;
 8000730:	4b34      	ldr	r3, [pc, #208]	; (8000804 <APP_main+0x118>)
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	4b34      	ldr	r3, [pc, #208]	; (8000808 <APP_main+0x11c>)
 8000736:	701a      	strb	r2, [r3, #0]
  }

  if (tl_clk_state != tl_clk_prev_state) {
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <APP_main+0x110>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	429a      	cmp	r2, r3
 8000740:	d002      	beq.n	8000748 <APP_main+0x5c>
    tl_clk_prev_state = tl_clk_state;
 8000742:	4a2e      	ldr	r2, [pc, #184]	; (80007fc <APP_main+0x110>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	7013      	strb	r3, [r2, #0]
  }

  // Process any pending TL frames.
  switch (app_state) {
 8000748:	4b31      	ldr	r3, [pc, #196]	; (8000810 <APP_main+0x124>)
 800074a:	f993 3000 	ldrsb.w	r3, [r3]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d002      	beq.n	8000758 <APP_main+0x6c>
 8000752:	2b02      	cmp	r3, #2
 8000754:	d007      	beq.n	8000766 <APP_main+0x7a>
      }
      break;
    }
    case APP_STATE_IDLE:
    default: {
      break;
 8000756:	e04a      	b.n	80007ee <APP_main+0x102>
      TL_transmit(&tl);
 8000758:	482c      	ldr	r0, [pc, #176]	; (800080c <APP_main+0x120>)
 800075a:	f001 f873 	bl	8001844 <TL_transmit>
      app_state = APP_STATE_WAITING_FOR_RX;
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <APP_main+0x124>)
 8000760:	2202      	movs	r2, #2
 8000762:	701a      	strb	r2, [r3, #0]
      break;
 8000764:	e043      	b.n	80007ee <APP_main+0x102>
      if (tl.rx_finished) {
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <APP_main+0x120>)
 8000768:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 800076c:	2b00      	cmp	r3, #0
 800076e:	d03d      	beq.n	80007ec <APP_main+0x100>
        TL_deserialize(&tl.rx_frame);
 8000770:	4828      	ldr	r0, [pc, #160]	; (8000814 <APP_main+0x128>)
 8000772:	f000 feae 	bl	80014d2 <TL_deserialize>
        *(serial_tx_buffer) = tl.rx_frame.chanid;
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <APP_main+0x120>)
 8000778:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <APP_main+0x12c>)
 800077e:	701a      	strb	r2, [r3, #0]
        *(serial_tx_buffer + 1) = (tl.rx_frame.corrupt << 7) | (tl.rx_frame.param << 4) | tl.rx_frame.opcode;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <APP_main+0x120>)
 8000782:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8000786:	01db      	lsls	r3, r3, #7
 8000788:	b25a      	sxtb	r2, r3
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <APP_main+0x120>)
 800078c:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	b25b      	sxtb	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b25a      	sxtb	r2, r3
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <APP_main+0x120>)
 800079a:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <APP_main+0x12c>)
 80007a8:	705a      	strb	r2, [r3, #1]
        *(serial_tx_buffer + 2) = tl.rx_frame.size;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <APP_main+0x120>)
 80007ac:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <APP_main+0x12c>)
 80007b2:	709a      	strb	r2, [r3, #2]
        *(serial_tx_buffer + 3) = tl.rx_frame.tl_union;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <APP_main+0x120>)
 80007b6:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <APP_main+0x12c>)
 80007be:	70da      	strb	r2, [r3, #3]
        *(uint32_t *)(serial_tx_buffer + 4) = (uint32_t)tl.rx_frame.address;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <APP_main+0x120>)
 80007c2:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 80007c6:	4915      	ldr	r1, [pc, #84]	; (800081c <APP_main+0x130>)
 80007c8:	4613      	mov	r3, r2
 80007ca:	600b      	str	r3, [r1, #0]
        *(uint64_t *)(serial_tx_buffer + 8) = tl.rx_frame.data;
 80007cc:	4914      	ldr	r1, [pc, #80]	; (8000820 <APP_main+0x134>)
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <APP_main+0x120>)
 80007d0:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80007d4:	e9c1 2300 	strd	r2, r3, [r1]
        HAL_UART_Transmit(&huart3, serial_tx_buffer, 16, 1000);
 80007d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007dc:	2210      	movs	r2, #16
 80007de:	490e      	ldr	r1, [pc, #56]	; (8000818 <APP_main+0x12c>)
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <APP_main+0x138>)
 80007e2:	f008 f94b 	bl	8008a7c <HAL_UART_Transmit>
        app_state = APP_STATE_IDLE;
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <APP_main+0x124>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
      break;
 80007ec:	bf00      	nop
    }
  }
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	58020c00 	.word	0x58020c00
 80007fc:	24000310 	.word	0x24000310
 8000800:	58020400 	.word	0x58020400
 8000804:	24000312 	.word	0x24000312
 8000808:	24000311 	.word	0x24000311
 800080c:	24000038 	.word	0x24000038
 8000810:	24000000 	.word	0x24000000
 8000814:	24000158 	.word	0x24000158
 8000818:	240002d0 	.word	0x240002d0
 800081c:	240002d4 	.word	0x240002d4
 8000820:	240002d8 	.word	0x240002d8
 8000824:	24000360 	.word	0x24000360

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f001 f864 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f80e 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f000 f99e 	bl	8000b74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000838:	f000 f974 	bl	8000b24 <MX_DMA_Init>
  MX_TIM1_Init();
 800083c:	f000 f878 	bl	8000930 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000840:	f000 f922 	bl	8000a88 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000844:	f7ff ff3a 	bl	80006bc <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	APP_main();
 8000848:	f7ff ff50 	bl	80006ec <APP_main>
 800084c:	e7fc      	b.n	8000848 <main+0x20>
	...

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b09c      	sub	sp, #112	; 0x70
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	224c      	movs	r2, #76	; 0x4c
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f00a f994 	bl	800ab8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2220      	movs	r2, #32
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00a f98e 	bl	800ab8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000870:	2002      	movs	r0, #2
 8000872:	f004 f9f5 	bl	8004c60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <SystemClock_Config+0xdc>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a2b      	ldr	r2, [pc, #172]	; (800092c <SystemClock_Config+0xdc>)
 8000880:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <SystemClock_Config+0xdc>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000892:	bf00      	nop
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <SystemClock_Config+0xdc>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a0:	d1f8      	bne.n	8000894 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a2:	2302      	movs	r3, #2
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b2:	2300      	movs	r3, #0
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b6:	2304      	movs	r3, #4
 80008b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80008ba:	231f      	movs	r3, #31
 80008bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ca:	230c      	movs	r3, #12
 80008cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 80008d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	4618      	mov	r0, r3
 80008de:	f004 f9f9 	bl	8004cd4 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008e8:	f000 fa2e 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	233f      	movs	r3, #63	; 0x3f
 80008ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2303      	movs	r3, #3
 80008f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008f8:	2308      	movs	r3, #8
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000900:	2340      	movs	r3, #64	; 0x40
 8000902:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2103      	movs	r1, #3
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fdb8 	bl	8005488 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800091e:	f000 fa13 	bl	8000d48 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3770      	adds	r7, #112	; 0x70
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	58024800 	.word	0x58024800

08000930 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b09c      	sub	sp, #112	; 0x70
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000950:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
 8000960:	615a      	str	r2, [r3, #20]
 8000962:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2234      	movs	r2, #52	; 0x34
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f00a f90e 	bl	800ab8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000970:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <MX_TIM1_Init+0x150>)
 8000972:	4a44      	ldr	r2, [pc, #272]	; (8000a84 <MX_TIM1_Init+0x154>)
 8000974:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <MX_TIM1_Init+0x150>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b40      	ldr	r3, [pc, #256]	; (8000a80 <MX_TIM1_Init+0x150>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000982:	4b3f      	ldr	r3, [pc, #252]	; (8000a80 <MX_TIM1_Init+0x150>)
 8000984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000988:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <MX_TIM1_Init+0x150>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000990:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <MX_TIM1_Init+0x150>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <MX_TIM1_Init+0x150>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800099c:	4838      	ldr	r0, [pc, #224]	; (8000a80 <MX_TIM1_Init+0x150>)
 800099e:	f006 fec1 	bl	8007724 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f9ce 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009b6:	4619      	mov	r1, r3
 80009b8:	4831      	ldr	r0, [pc, #196]	; (8000a80 <MX_TIM1_Init+0x150>)
 80009ba:	f007 f99b 	bl	8007cf4 <HAL_TIM_ConfigClockSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009c4:	f000 f9c0 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c8:	482d      	ldr	r0, [pc, #180]	; (8000a80 <MX_TIM1_Init+0x150>)
 80009ca:	f006 ff02 	bl	80077d2 <HAL_TIM_PWM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009d4:	f000 f9b8 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009e8:	4619      	mov	r1, r3
 80009ea:	4825      	ldr	r0, [pc, #148]	; (8000a80 <MX_TIM1_Init+0x150>)
 80009ec:	f007 feba 	bl	8008764 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009f6:	f000 f9a7 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fa:	2360      	movs	r3, #96	; 0x60
 80009fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a06:	2300      	movs	r3, #0
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4818      	ldr	r0, [pc, #96]	; (8000a80 <MX_TIM1_Init+0x150>)
 8000a20:	f007 f854 	bl	8007acc <HAL_TIM_PWM_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a2a:	f000 f98d 	bl	8000d48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM1_Init+0x150>)
 8000a64:	f007 ff1a 	bl	800889c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a6e:	f000 f96b 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM1_Init+0x150>)
 8000a74:	f000 f9aa 	bl	8000dcc <HAL_TIM_MspPostInit>

}
 8000a78:	bf00      	nop
 8000a7a:	3770      	adds	r7, #112	; 0x70
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24000314 	.word	0x24000314
 8000a84:	40010000 	.word	0x40010000

08000a88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <MX_USART3_UART_Init+0x94>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000a92:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <MX_USART3_UART_Init+0x98>)
 8000a96:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aac:	220c      	movs	r2, #12
 8000aae:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ace:	4812      	ldr	r0, [pc, #72]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ad0:	f007 ff84 	bl	80089dc <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000ada:	f000 f935 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000ae2:	f009 ff34 	bl	800a94e <HAL_UARTEx_SetTxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000aec:	f000 f92c 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000af4:	f009 ff69 	bl	800a9ca <HAL_UARTEx_SetRxFifoThreshold>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000afe:	f000 f923 	bl	8000d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART3_UART_Init+0x90>)
 8000b04:	f009 feea 	bl	800a8dc <HAL_UARTEx_DisableFifoMode>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000b0e:	f000 f91b 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	24000360 	.word	0x24000360
 8000b1c:	40004800 	.word	0x40004800
 8000b20:	001e8480 	.word	0x001e8480

08000b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_DMA_Init+0x4c>)
 8000b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b30:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <MX_DMA_Init+0x4c>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <MX_DMA_Init+0x4c>)
 8000b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2010      	movs	r0, #16
 8000b4e:	f001 f840 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b52:	2010      	movs	r0, #16
 8000b54:	f001 f857 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2011      	movs	r0, #17
 8000b5e:	f001 f838 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b62:	2011      	movs	r0, #17
 8000b64:	f001 f84f 	bl	8001c06 <HAL_NVIC_EnableIRQ>

}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	58024400 	.word	0x58024400

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08c      	sub	sp, #48	; 0x30
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b69      	ldr	r3, [pc, #420]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	4a67      	ldr	r2, [pc, #412]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9a:	4b65      	ldr	r3, [pc, #404]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba8:	4b61      	ldr	r3, [pc, #388]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	4a60      	ldr	r2, [pc, #384]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000bb0:	f043 0320 	orr.w	r3, r3, #32
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb8:	4b5d      	ldr	r3, [pc, #372]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	f003 0320 	and.w	r3, r3, #32
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b5a      	ldr	r3, [pc, #360]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	4a58      	ldr	r2, [pc, #352]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd6:	4b56      	ldr	r3, [pc, #344]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	4a51      	ldr	r2, [pc, #324]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf4:	4b4e      	ldr	r3, [pc, #312]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c02:	4b4b      	ldr	r3, [pc, #300]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a49      	ldr	r2, [pc, #292]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c20:	4b43      	ldr	r3, [pc, #268]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	4a42      	ldr	r2, [pc, #264]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c30:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <MX_GPIO_Init+0x1bc>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c44:	483b      	ldr	r0, [pc, #236]	; (8000d34 <MX_GPIO_Init+0x1c0>)
 8000c46:	f003 fff1 	bl	8004c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	483a      	ldr	r0, [pc, #232]	; (8000d38 <MX_GPIO_Init+0x1c4>)
 8000c50:	f003 ffec 	bl	8004c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2108      	movs	r1, #8
 8000c58:	4838      	ldr	r0, [pc, #224]	; (8000d3c <MX_GPIO_Init+0x1c8>)
 8000c5a:	f003 ffe7 	bl	8004c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2101      	movs	r1, #1
 8000c62:	4837      	ldr	r0, [pc, #220]	; (8000d40 <MX_GPIO_Init+0x1cc>)
 8000c64:	f003 ffe2 	bl	8004c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TL_OUT_VALID_Pin TL_OUT_DATA_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TL_OUT_VALID_Pin|TL_OUT_DATA_Pin;
 8000c68:	f242 0309 	movw	r3, #8201	; 0x2009
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	482e      	ldr	r0, [pc, #184]	; (8000d38 <MX_GPIO_Init+0x1c4>)
 8000c7e:	f003 fe15 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_DATA_Pin */
  GPIO_InitStruct.Pin = TL_IN_DATA_Pin;
 8000c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4826      	ldr	r0, [pc, #152]	; (8000d34 <MX_GPIO_Init+0x1c0>)
 8000c9c:	f003 fe06 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_VALID_Pin */
  GPIO_InitStruct.Pin = TL_IN_VALID_Pin;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_VALID_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4820      	ldr	r0, [pc, #128]	; (8000d38 <MX_GPIO_Init+0x1c4>)
 8000cb8:	f003 fdf8 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_OUT_READY_Pin */
  GPIO_InitStruct.Pin = TL_OUT_READY_Pin;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_OUT_READY_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481a      	ldr	r0, [pc, #104]	; (8000d3c <MX_GPIO_Init+0x1c8>)
 8000cd4:	f003 fdea 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4814      	ldr	r0, [pc, #80]	; (8000d40 <MX_GPIO_Init+0x1cc>)
 8000cf0:	f003 fddc 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_READY_Pin */
  GPIO_InitStruct.Pin = TL_IN_READY_Pin;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_IN_READY_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	480e      	ldr	r0, [pc, #56]	; (8000d40 <MX_GPIO_Init+0x1cc>)
 8000d08:	f003 fdd0 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_CLK_Pin */
  GPIO_InitStruct.Pin = TL_CLK_Pin;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <MX_GPIO_Init+0x1d0>)
 8000d22:	f003 fdc3 	bl	80048ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	58024400 	.word	0x58024400
 8000d34:	58021400 	.word	0x58021400
 8000d38:	58020800 	.word	0x58020800
 8000d3c:	58020000 	.word	0x58020000
 8000d40:	58020400 	.word	0x58020400
 8000d44:	58020c00 	.word	0x58020c00

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_MspInit+0x30>)
 8000d5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d60:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x30>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x30>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10e      	bne.n	8000db8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_TIM_Base_MspInit+0x40>)
 8000d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_TIM_Base_MspInit+0x40>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_TIM_Base_MspInit+0x40>)
 8000dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	58024400 	.word	0x58024400

08000dcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_TIM_MspPostInit+0x6c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d11f      	bne.n	8000e2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_TIM_MspPostInit+0x70>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <HAL_TIM_MspPostInit+0x70>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_TIM_MspPostInit+0x70>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <HAL_TIM_MspPostInit+0x74>)
 8000e2a:	f003 fd3f 	bl	80048ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58021000 	.word	0x58021000

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0b8      	sub	sp, #224	; 0xe0
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	22b8      	movs	r2, #184	; 0xb8
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f009 fe91 	bl	800ab8c <memset>
  if(huart->Instance==USART3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a59      	ldr	r2, [pc, #356]	; (8000fd4 <HAL_UART_MspInit+0x190>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	f040 80aa 	bne.w	8000fca <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e76:	f04f 0202 	mov.w	r2, #2
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fe87 	bl	8005ba0 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000e98:	f7ff ff56 	bl	8000d48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9c:	4b4e      	ldr	r3, [pc, #312]	; (8000fd8 <HAL_UART_MspInit+0x194>)
 8000e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ea2:	4a4d      	ldr	r2, [pc, #308]	; (8000fd8 <HAL_UART_MspInit+0x194>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eac:	4b4a      	ldr	r3, [pc, #296]	; (8000fd8 <HAL_UART_MspInit+0x194>)
 8000eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eba:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <HAL_UART_MspInit+0x194>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a45      	ldr	r2, [pc, #276]	; (8000fd8 <HAL_UART_MspInit+0x194>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <HAL_UART_MspInit+0x194>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ed8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000efc:	4619      	mov	r1, r3
 8000efe:	4837      	ldr	r0, [pc, #220]	; (8000fdc <HAL_UART_MspInit+0x198>)
 8000f00:	f003 fcd4 	bl	80048ac <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8000f04:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f06:	4a37      	ldr	r2, [pc, #220]	; (8000fe4 <HAL_UART_MspInit+0x1a0>)
 8000f08:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f0c:	222d      	movs	r2, #45	; 0x2d
 8000f0e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f10:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f22:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f24:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f42:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f44:	f000 fe7a 	bl	8001c3c <HAL_DMA_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f4e:	f7ff fefb 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f5a:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <HAL_UART_MspInit+0x19c>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream6;
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f62:	4a22      	ldr	r2, [pc, #136]	; (8000fec <HAL_UART_MspInit+0x1a8>)
 8000f64:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000f66:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f68:	222e      	movs	r2, #46	; 0x2e
 8000f6a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f6e:	2240      	movs	r2, #64	; 0x40
 8000f70:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000fa0:	f000 fe4c 	bl	8001c3c <HAL_DMA_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000faa:	f7ff fecd 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000fb2:	67da      	str	r2, [r3, #124]	; 0x7c
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <HAL_UART_MspInit+0x1a4>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2027      	movs	r0, #39	; 0x27
 8000fc0:	f000 fe07 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fc4:	2027      	movs	r0, #39	; 0x27
 8000fc6:	f000 fe1e 	bl	8001c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	37e0      	adds	r7, #224	; 0xe0
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40004800 	.word	0x40004800
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020c00 	.word	0x58020c00
 8000fe0:	240003f4 	.word	0x240003f4
 8000fe4:	40020088 	.word	0x40020088
 8000fe8:	2400046c 	.word	0x2400046c
 8000fec:	400200a0 	.word	0x400200a0

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 fcce 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DMA1_Stream5_IRQHandler+0x10>)
 800104a:	f002 f91d 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	240003f4 	.word	0x240003f4

08001058 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <DMA1_Stream6_IRQHandler+0x10>)
 800105e:	f002 f913 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2400046c 	.word	0x2400046c

0800106c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <USART3_IRQHandler+0x10>)
 8001072:	f007 fd91 	bl	8008b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	24000360 	.word	0x24000360

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <SystemInit+0xd0>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a31      	ldr	r2, [pc, #196]	; (8001150 <SystemInit+0xd0>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <SystemInit+0xd4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	2b06      	cmp	r3, #6
 800109e:	d807      	bhi.n	80010b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <SystemInit+0xd4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 030f 	bic.w	r3, r3, #15
 80010a8:	4a2a      	ldr	r2, [pc, #168]	; (8001154 <SystemInit+0xd4>)
 80010aa:	f043 0307 	orr.w	r3, r3, #7
 80010ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <SystemInit+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a28      	ldr	r2, [pc, #160]	; (8001158 <SystemInit+0xd8>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <SystemInit+0xd8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <SystemInit+0xd8>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4924      	ldr	r1, [pc, #144]	; (8001158 <SystemInit+0xd8>)
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <SystemInit+0xdc>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <SystemInit+0xd4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <SystemInit+0xd4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 030f 	bic.w	r3, r3, #15
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <SystemInit+0xd4>)
 80010e4:	f043 0307 	orr.w	r3, r3, #7
 80010e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <SystemInit+0xd8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <SystemInit+0xd8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <SystemInit+0xd8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <SystemInit+0xd8>)
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <SystemInit+0xe0>)
 8001100:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <SystemInit+0xd8>)
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <SystemInit+0xe4>)
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <SystemInit+0xd8>)
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <SystemInit+0xe8>)
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <SystemInit+0xd8>)
 8001110:	2200      	movs	r2, #0
 8001112:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <SystemInit+0xd8>)
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <SystemInit+0xe8>)
 8001118:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <SystemInit+0xd8>)
 800111c:	2200      	movs	r2, #0
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <SystemInit+0xd8>)
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <SystemInit+0xe8>)
 8001124:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <SystemInit+0xd8>)
 8001128:	2200      	movs	r2, #0
 800112a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <SystemInit+0xd8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <SystemInit+0xd8>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <SystemInit+0xd8>)
 800113a:	2200      	movs	r2, #0
 800113c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <SystemInit+0xec>)
 8001140:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001144:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	52002000 	.word	0x52002000
 8001158:	58024400 	.word	0x58024400
 800115c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001160:	02020200 	.word	0x02020200
 8001164:	01ff0000 	.word	0x01ff0000
 8001168:	01010280 	.word	0x01010280
 800116c:	52004000 	.word	0x52004000

08001170 <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800117e:	2b00      	cmp	r3, #0
 8001180:	d045      	beq.n	800120e <TL_update+0x9e>
    if (tl->tx_entry == 0) {
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001188:	2b00      	cmp	r3, #0
 800118a:	d10e      	bne.n	80011aa <TL_update+0x3a>
      tl->tx_entry = 1;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 1);
 8001194:	2201      	movs	r2, #1
 8001196:	2104      	movs	r1, #4
 8001198:	483d      	ldr	r0, [pc, #244]	; (8001290 <TL_update+0x120>)
 800119a:	f003 fd47 	bl	8004c2c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	2108      	movs	r1, #8
 80011a2:	483c      	ldr	r0, [pc, #240]	; (8001294 <TL_update+0x124>)
 80011a4:	f003 fd42 	bl	8004c2c <HAL_GPIO_WritePin>
      return;
 80011a8:	e06f      	b.n	800128a <TL_update+0x11a>
    }
    // Check if receiver is ready before sending the current bit
    if (tl->tl_in_ready_prev_state == 1) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d16a      	bne.n	800128a <TL_update+0x11a>
      // Send the current bit
      //HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, 0);
      HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8b3 3242 	ldrh.w	r3, [r3, #578]	; 0x242
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	7f5b      	ldrb	r3, [r3, #29]
 80011c2:	461a      	mov	r2, r3
 80011c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c8:	4833      	ldr	r0, [pc, #204]	; (8001298 <TL_update+0x128>)
 80011ca:	f003 fd2f 	bl	8004c2c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2104      	movs	r1, #4
 80011d2:	482f      	ldr	r0, [pc, #188]	; (8001290 <TL_update+0x120>)
 80011d4:	f003 fd2a 	bl	8004c2c <HAL_GPIO_WritePin>
//        // HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 1);
//        HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 1);
//      }

      // Increment offset after sending the bit
      tl->tx_bit_offset += 1;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8b3 3242 	ldrh.w	r3, [r3, #578]	; 0x242
 80011de:	3301      	adds	r3, #1
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242

      // Check if we've sent all bits
      if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8b3 3242 	ldrh.w	r3, [r3, #578]	; 0x242
 80011ee:	2ba4      	cmp	r3, #164	; 0xa4
 80011f0:	d14b      	bne.n	800128a <TL_update+0x11a>
        HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2104      	movs	r1, #4
 80011f6:	4826      	ldr	r0, [pc, #152]	; (8001290 <TL_update+0x120>)
 80011f8:	f003 fd18 	bl	8004c2c <HAL_GPIO_WritePin>
        tl->tx_pending = 0;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
        tl->tx_finished = 1;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
 800120c:	e03d      	b.n	800128a <TL_update+0x11a>
    	// HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 0);
    }
    // If receiver not ready, don't increment offset - will retry next call
  }

  else if (tl->rx_pending) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8b3 3252 	ldrh.w	r3, [r3, #594]	; 0x252
 8001214:	2b00      	cmp	r3, #0
 8001216:	d038      	beq.n	800128a <TL_update+0x11a>
    if (tl->rx_finished) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 800121e:	2b00      	cmp	r3, #0
 8001220:	d008      	beq.n	8001234 <TL_update+0xc4>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2108      	movs	r1, #8
 8001226:	481b      	ldr	r0, [pc, #108]	; (8001294 <TL_update+0x124>)
 8001228:	f003 fd00 	bl	8004c2c <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
    }
    HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	2108      	movs	r1, #8
 8001238:	4816      	ldr	r0, [pc, #88]	; (8001294 <TL_update+0x124>)
 800123a:	f003 fcf7 	bl	8004c2c <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(TL_OUT_VALID_GPIO_Port, TL_OUT_VALID_Pin) == GPIO_PIN_SET) {
 800123e:	2101      	movs	r1, #1
 8001240:	4813      	ldr	r0, [pc, #76]	; (8001290 <TL_update+0x120>)
 8001242:	f003 fcdb 	bl	8004bfc <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	2b01      	cmp	r3, #1
 800124a:	d11e      	bne.n	800128a <TL_update+0x11a>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_OUT_DATA_GPIO_Port, TL_OUT_DATA_Pin);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 8001252:	461c      	mov	r4, r3
 8001254:	2108      	movs	r1, #8
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <TL_update+0x120>)
 8001258:	f003 fcd0 	bl	8004bfc <HAL_GPIO_ReadPin>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4423      	add	r3, r4
 8001264:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d

      tl->rx_bit_offset += 1;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 800126e:	3301      	adds	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e

      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 800127e:	2ba4      	cmp	r3, #164	; 0xa4
 8001280:	d103      	bne.n	800128a <TL_update+0x11a>
        tl->rx_finished = 1;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
      }
    }
  }
}
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	58020800 	.word	0x58020800
 8001294:	58020000 	.word	0x58020000
 8001298:	58021400 	.word	0x58021400

0800129c <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80012a4:	2100      	movs	r1, #0
 80012a6:	83f9      	strh	r1, [r7, #30]
 80012a8:	e011      	b.n	80012ce <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	7f09      	ldrb	r1, [r1, #28]
 80012ae:	4608      	mov	r0, r1
 80012b0:	8bf9      	ldrh	r1, [r7, #30]
 80012b2:	fa40 f101 	asr.w	r1, r0, r1
 80012b6:	b2c8      	uxtb	r0, r1
 80012b8:	8bf9      	ldrh	r1, [r7, #30]
 80012ba:	f000 0001 	and.w	r0, r0, #1
 80012be:	b2c6      	uxtb	r6, r0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4401      	add	r1, r0
 80012c4:	4630      	mov	r0, r6
 80012c6:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80012c8:	8bf9      	ldrh	r1, [r7, #30]
 80012ca:	3101      	adds	r1, #1
 80012cc:	83f9      	strh	r1, [r7, #30]
 80012ce:	8bf9      	ldrh	r1, [r7, #30]
 80012d0:	2900      	cmp	r1, #0
 80012d2:	d0ea      	beq.n	80012aa <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_UNION_SIZE; i+=1) {
 80012d4:	2100      	movs	r1, #0
 80012d6:	83b9      	strh	r1, [r7, #28]
 80012d8:	e011      	b.n	80012fe <TL_serialize+0x62>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->tl_union >> i) & 0b1;
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	8b49      	ldrh	r1, [r1, #26]
 80012de:	4608      	mov	r0, r1
 80012e0:	8bb9      	ldrh	r1, [r7, #28]
 80012e2:	fa40 f101 	asr.w	r1, r0, r1
 80012e6:	b2c8      	uxtb	r0, r1
 80012e8:	8bb9      	ldrh	r1, [r7, #28]
 80012ea:	f000 0001 	and.w	r0, r0, #1
 80012ee:	b2c6      	uxtb	r6, r0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	4401      	add	r1, r0
 80012f4:	4630      	mov	r0, r6
 80012f6:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_UNION_SIZE; i+=1) {
 80012f8:	8bb9      	ldrh	r1, [r7, #28]
 80012fa:	3101      	adds	r1, #1
 80012fc:	83b9      	strh	r1, [r7, #28]
 80012fe:	8bb9      	ldrh	r1, [r7, #28]
 8001300:	2908      	cmp	r1, #8
 8001302:	d9ea      	bls.n	80012da <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001304:	2100      	movs	r1, #0
 8001306:	8379      	strh	r1, [r7, #26]
 8001308:	e012      	b.n	8001330 <TL_serialize+0x94>
    frame->buffer[i+TL_SERDES_UNION_OFFSET] = (frame->corrupt >> i) & 0b1;
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	7e09      	ldrb	r1, [r1, #24]
 800130e:	4608      	mov	r0, r1
 8001310:	8b79      	ldrh	r1, [r7, #26]
 8001312:	fa40 f101 	asr.w	r1, r0, r1
 8001316:	b2c8      	uxtb	r0, r1
 8001318:	8b79      	ldrh	r1, [r7, #26]
 800131a:	3101      	adds	r1, #1
 800131c:	f000 0001 	and.w	r0, r0, #1
 8001320:	b2c6      	uxtb	r6, r0
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	4401      	add	r1, r0
 8001326:	4630      	mov	r0, r6
 8001328:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800132a:	8b79      	ldrh	r1, [r7, #26]
 800132c:	3101      	adds	r1, #1
 800132e:	8379      	strh	r1, [r7, #26]
 8001330:	8b79      	ldrh	r1, [r7, #26]
 8001332:	2900      	cmp	r1, #0
 8001334:	d0e9      	beq.n	800130a <TL_serialize+0x6e>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001336:	2100      	movs	r1, #0
 8001338:	8339      	strh	r1, [r7, #24]
 800133a:	e020      	b.n	800137e <TL_serialize+0xe2>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001342:	8b3e      	ldrh	r6, [r7, #24]
 8001344:	f1c6 0e20 	rsb	lr, r6, #32
 8001348:	f1a6 0c20 	sub.w	ip, r6, #32
 800134c:	fa20 f406 	lsr.w	r4, r0, r6
 8001350:	fa01 fe0e 	lsl.w	lr, r1, lr
 8001354:	ea44 040e 	orr.w	r4, r4, lr
 8001358:	fa21 fc0c 	lsr.w	ip, r1, ip
 800135c:	ea44 040c 	orr.w	r4, r4, ip
 8001360:	fa21 f506 	lsr.w	r5, r1, r6
 8001364:	b2e0      	uxtb	r0, r4
 8001366:	8b39      	ldrh	r1, [r7, #24]
 8001368:	310a      	adds	r1, #10
 800136a:	f000 0001 	and.w	r0, r0, #1
 800136e:	b2c6      	uxtb	r6, r0
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4401      	add	r1, r0
 8001374:	4630      	mov	r0, r6
 8001376:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001378:	8b39      	ldrh	r1, [r7, #24]
 800137a:	3101      	adds	r1, #1
 800137c:	8339      	strh	r1, [r7, #24]
 800137e:	8b39      	ldrh	r1, [r7, #24]
 8001380:	293f      	cmp	r1, #63	; 0x3f
 8001382:	d9db      	bls.n	800133c <TL_serialize+0xa0>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001384:	2100      	movs	r1, #0
 8001386:	82f9      	strh	r1, [r7, #22]
 8001388:	e01e      	b.n	80013c8 <TL_serialize+0x12c>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->address >> i) & 0b1;
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001390:	8afc      	ldrh	r4, [r7, #22]
 8001392:	f1c4 0620 	rsb	r6, r4, #32
 8001396:	f1a4 0520 	sub.w	r5, r4, #32
 800139a:	fa20 f204 	lsr.w	r2, r0, r4
 800139e:	fa01 f606 	lsl.w	r6, r1, r6
 80013a2:	4332      	orrs	r2, r6
 80013a4:	fa21 f505 	lsr.w	r5, r1, r5
 80013a8:	432a      	orrs	r2, r5
 80013aa:	fa21 f304 	lsr.w	r3, r1, r4
 80013ae:	b2d0      	uxtb	r0, r2
 80013b0:	8af9      	ldrh	r1, [r7, #22]
 80013b2:	310b      	adds	r1, #11
 80013b4:	f000 0001 	and.w	r0, r0, #1
 80013b8:	b2c4      	uxtb	r4, r0
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	4401      	add	r1, r0
 80013be:	4620      	mov	r0, r4
 80013c0:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80013c2:	8af9      	ldrh	r1, [r7, #22]
 80013c4:	3101      	adds	r1, #1
 80013c6:	82f9      	strh	r1, [r7, #22]
 80013c8:	8af9      	ldrh	r1, [r7, #22]
 80013ca:	293f      	cmp	r1, #63	; 0x3f
 80013cc:	d9dd      	bls.n	800138a <TL_serialize+0xee>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	82bb      	strh	r3, [r7, #20]
 80013d2:	e012      	b.n	80013fa <TL_serialize+0x15e>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	791b      	ldrb	r3, [r3, #4]
 80013d8:	461a      	mov	r2, r3
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	fa42 f303 	asr.w	r3, r2, r3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	8abb      	ldrh	r3, [r7, #20]
 80013e4:	334b      	adds	r3, #75	; 0x4b
 80013e6:	f002 0201 	and.w	r2, r2, #1
 80013ea:	b2d1      	uxtb	r1, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	460a      	mov	r2, r1
 80013f2:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80013f4:	8abb      	ldrh	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	82bb      	strh	r3, [r7, #20]
 80013fa:	8abb      	ldrh	r3, [r7, #20]
 80013fc:	2b07      	cmp	r3, #7
 80013fe:	d9e9      	bls.n	80013d4 <TL_serialize+0x138>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001400:	2300      	movs	r3, #0
 8001402:	827b      	strh	r3, [r7, #18]
 8001404:	e012      	b.n	800142c <TL_serialize+0x190>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	78db      	ldrb	r3, [r3, #3]
 800140a:	461a      	mov	r2, r3
 800140c:	8a7b      	ldrh	r3, [r7, #18]
 800140e:	fa42 f303 	asr.w	r3, r2, r3
 8001412:	b2da      	uxtb	r2, r3
 8001414:	8a7b      	ldrh	r3, [r7, #18]
 8001416:	338b      	adds	r3, #139	; 0x8b
 8001418:	f002 0201 	and.w	r2, r2, #1
 800141c:	b2d1      	uxtb	r1, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	460a      	mov	r2, r1
 8001424:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001426:	8a7b      	ldrh	r3, [r7, #18]
 8001428:	3301      	adds	r3, #1
 800142a:	827b      	strh	r3, [r7, #18]
 800142c:	8a7b      	ldrh	r3, [r7, #18]
 800142e:	2b07      	cmp	r3, #7
 8001430:	d9e9      	bls.n	8001406 <TL_serialize+0x16a>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001432:	2300      	movs	r3, #0
 8001434:	823b      	strh	r3, [r7, #16]
 8001436:	e012      	b.n	800145e <TL_serialize+0x1c2>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	789b      	ldrb	r3, [r3, #2]
 800143c:	461a      	mov	r2, r3
 800143e:	8a3b      	ldrh	r3, [r7, #16]
 8001440:	fa42 f303 	asr.w	r3, r2, r3
 8001444:	b2da      	uxtb	r2, r3
 8001446:	8a3b      	ldrh	r3, [r7, #16]
 8001448:	3393      	adds	r3, #147	; 0x93
 800144a:	f002 0201 	and.w	r2, r2, #1
 800144e:	b2d1      	uxtb	r1, r2
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	460a      	mov	r2, r1
 8001456:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001458:	8a3b      	ldrh	r3, [r7, #16]
 800145a:	3301      	adds	r3, #1
 800145c:	823b      	strh	r3, [r7, #16]
 800145e:	8a3b      	ldrh	r3, [r7, #16]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d9e9      	bls.n	8001438 <TL_serialize+0x19c>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001464:	2300      	movs	r3, #0
 8001466:	81fb      	strh	r3, [r7, #14]
 8001468:	e012      	b.n	8001490 <TL_serialize+0x1f4>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	461a      	mov	r2, r3
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	fa42 f303 	asr.w	r3, r2, r3
 8001476:	b2da      	uxtb	r2, r3
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	339b      	adds	r3, #155	; 0x9b
 800147c:	f002 0201 	and.w	r2, r2, #1
 8001480:	b2d1      	uxtb	r1, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	460a      	mov	r2, r1
 8001488:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	3301      	adds	r3, #1
 800148e:	81fb      	strh	r3, [r7, #14]
 8001490:	89fb      	ldrh	r3, [r7, #14]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d9e9      	bls.n	800146a <TL_serialize+0x1ce>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001496:	2300      	movs	r3, #0
 8001498:	81bb      	strh	r3, [r7, #12]
 800149a:	e012      	b.n	80014c2 <TL_serialize+0x226>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	89bb      	ldrh	r3, [r7, #12]
 80014a4:	fa42 f303 	asr.w	r3, r2, r3
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	89bb      	ldrh	r3, [r7, #12]
 80014ac:	339e      	adds	r3, #158	; 0x9e
 80014ae:	f002 0201 	and.w	r2, r2, #1
 80014b2:	b2d1      	uxtb	r1, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	460a      	mov	r2, r1
 80014ba:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80014bc:	89bb      	ldrh	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	81bb      	strh	r3, [r7, #12]
 80014c2:	89bb      	ldrh	r3, [r7, #12]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d9e9      	bls.n	800149c <TL_serialize+0x200>
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d2 <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 80014d2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80014d6:	b095      	sub	sp, #84	; 0x54
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6378      	str	r0, [r7, #52]	; 0x34
  frame->chanid = 0;
 80014dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014de:	2300      	movs	r3, #0
 80014e0:	7013      	strb	r3, [r2, #0]
  frame->opcode = 0;
 80014e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e4:	2300      	movs	r3, #0
 80014e6:	7053      	strb	r3, [r2, #1]
  frame->param = 0;
 80014e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ea:	2300      	movs	r3, #0
 80014ec:	7093      	strb	r3, [r2, #2]
  frame->size = 0;
 80014ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014f0:	2300      	movs	r3, #0
 80014f2:	70d3      	strb	r3, [r2, #3]
  frame->source = 0;
 80014f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014f6:	2300      	movs	r3, #0
 80014f8:	7113      	strb	r3, [r2, #4]
  frame->address = 0;
 80014fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9c1 2302 	strd	r2, r3, [r1, #8]
  frame->data = 0;
 8001508:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c1 2304 	strd	r2, r3, [r1, #16]
  frame->corrupt = 0;
 8001516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001518:	2300      	movs	r3, #0
 800151a:	7613      	strb	r3, [r2, #24]
  frame->tl_union = 0;
 800151c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151e:	2300      	movs	r3, #0
 8001520:	8353      	strh	r3, [r2, #26]
  frame->last = 0;
 8001522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001524:	2300      	movs	r3, #0
 8001526:	7713      	strb	r3, [r2, #28]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001528:	2300      	movs	r3, #0
 800152a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800152e:	e018      	b.n	8001562 <TL_deserialize+0x90>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 8001530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001532:	7f1b      	ldrb	r3, [r3, #28]
 8001534:	b259      	sxtb	r1, r3
 8001536:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800153a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153c:	4413      	add	r3, r2
 800153e:	7f5b      	ldrb	r3, [r3, #29]
 8001540:	f003 0201 	and.w	r2, r3, #1
 8001544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	b25b      	sxtb	r3, r3
 800154e:	430b      	orrs	r3, r1
 8001550:	b25b      	sxtb	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001556:	7713      	strb	r3, [r2, #28]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001558:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800155c:	3301      	adds	r3, #1
 800155e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001562:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0e2      	beq.n	8001530 <TL_deserialize+0x5e>
  }
  for (uint16_t i=0; i<TL_SERDES_UNION_SIZE; i+=1) {
 800156a:	2300      	movs	r3, #0
 800156c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001570:	e018      	b.n	80015a4 <TL_deserialize+0xd2>
    frame->tl_union |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 8001572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001574:	8b5b      	ldrh	r3, [r3, #26]
 8001576:	b219      	sxth	r1, r3
 8001578:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800157c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800157e:	4413      	add	r3, r2
 8001580:	7f5b      	ldrb	r3, [r3, #29]
 8001582:	f003 0201 	and.w	r2, r3, #1
 8001586:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	b21b      	sxth	r3, r3
 8001590:	430b      	orrs	r3, r1
 8001592:	b21b      	sxth	r3, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001598:	8353      	strh	r3, [r2, #26]
  for (uint16_t i=0; i<TL_SERDES_UNION_SIZE; i+=1) {
 800159a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800159e:	3301      	adds	r3, #1
 80015a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80015a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d9e2      	bls.n	8001572 <TL_deserialize+0xa0>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80015b2:	e019      	b.n	80015e8 <TL_deserialize+0x116>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_UNION_OFFSET] & 0b1) << i);
 80015b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b6:	7e1b      	ldrb	r3, [r3, #24]
 80015b8:	b259      	sxtb	r1, r3
 80015ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c2:	4413      	add	r3, r2
 80015c4:	7f5b      	ldrb	r3, [r3, #29]
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	430b      	orrs	r3, r1
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015dc:	7613      	strb	r3, [r2, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80015de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015e2:	3301      	adds	r3, #1
 80015e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80015e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0e1      	beq.n	80015b4 <TL_deserialize+0xe2>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80015f6:	e039      	b.n	800166c <TL_deserialize+0x19a>
    frame->data |= ((uint64_t)(frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 80015f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fa:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80015fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001602:	f103 020a 	add.w	r2, r3, #10
 8001606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001608:	4413      	add	r3, r2
 800160a:	7f5b      	ldrb	r3, [r3, #29]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2200      	movs	r2, #0
 8001610:	623b      	str	r3, [r7, #32]
 8001612:	627a      	str	r2, [r7, #36]	; 0x24
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001620:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8001624:	f1a1 0320 	sub.w	r3, r1, #32
 8001628:	f1c1 0220 	rsb	r2, r1, #32
 800162c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800162e:	fa00 fb01 	lsl.w	fp, r0, r1
 8001632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001634:	fa00 f303 	lsl.w	r3, r0, r3
 8001638:	ea4b 0b03 	orr.w	fp, fp, r3
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	fa23 f202 	lsr.w	r2, r3, r2
 8001642:	ea4b 0b02 	orr.w	fp, fp, r2
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	fa03 fa01 	lsl.w	sl, r3, r1
 800164c:	ea44 030a 	orr.w	r3, r4, sl
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	ea45 030b 	orr.w	r3, r5, fp
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800165e:	e9c3 1204 	strd	r1, r2, [r3, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001662:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001666:	3301      	adds	r3, #1
 8001668:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800166c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001670:	2b3f      	cmp	r3, #63	; 0x3f
 8001672:	d9c1      	bls.n	80015f8 <TL_deserialize+0x126>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001674:	2300      	movs	r3, #0
 8001676:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800167a:	e03a      	b.n	80016f2 <TL_deserialize+0x220>
    frame->address |= ((uint64_t)(frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 800167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001682:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001686:	330b      	adds	r3, #11
 8001688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800168a:	4413      	add	r3, r2
 800168c:	7f5b      	ldrb	r3, [r3, #29]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2200      	movs	r2, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	617a      	str	r2, [r7, #20]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016a6:	f1a3 0420 	sub.w	r4, r3, #32
 80016aa:	f1c3 0220 	rsb	r2, r3, #32
 80016ae:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016b2:	465d      	mov	r5, fp
 80016b4:	fa05 f903 	lsl.w	r9, r5, r3
 80016b8:	4655      	mov	r5, sl
 80016ba:	fa05 f404 	lsl.w	r4, r5, r4
 80016be:	ea49 0904 	orr.w	r9, r9, r4
 80016c2:	4654      	mov	r4, sl
 80016c4:	fa24 f202 	lsr.w	r2, r4, r2
 80016c8:	ea49 0902 	orr.w	r9, r9, r2
 80016cc:	4652      	mov	r2, sl
 80016ce:	fa02 f803 	lsl.w	r8, r2, r3
 80016d2:	ea40 0308 	orr.w	r3, r0, r8
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	ea41 0309 	orr.w	r3, r1, r9
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80016e4:	e9c3 1202 	strd	r1, r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80016e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016ec:	3301      	adds	r3, #1
 80016ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80016f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016f6:	2b3f      	cmp	r3, #63	; 0x3f
 80016f8:	d9c0      	bls.n	800167c <TL_deserialize+0x1aa>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001700:	e019      	b.n	8001736 <TL_deserialize+0x264>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 8001702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001704:	791b      	ldrb	r3, [r3, #4]
 8001706:	b25a      	sxtb	r2, r3
 8001708:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800170c:	334b      	adds	r3, #75	; 0x4b
 800170e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001710:	440b      	add	r3, r1
 8001712:	7f5b      	ldrb	r3, [r3, #29]
 8001714:	f003 0101 	and.w	r1, r3, #1
 8001718:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	b25b      	sxtb	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b25b      	sxtb	r3, r3
 8001726:	b2da      	uxtb	r2, r3
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 800172c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001730:	3301      	adds	r3, #1
 8001732:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001736:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800173a:	2b07      	cmp	r3, #7
 800173c:	d9e1      	bls.n	8001702 <TL_deserialize+0x230>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800173e:	2300      	movs	r3, #0
 8001740:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001744:	e019      	b.n	800177a <TL_deserialize+0x2a8>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	78db      	ldrb	r3, [r3, #3]
 800174a:	b25a      	sxtb	r2, r3
 800174c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001750:	338b      	adds	r3, #139	; 0x8b
 8001752:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001754:	440b      	add	r3, r1
 8001756:	7f5b      	ldrb	r3, [r3, #29]
 8001758:	f003 0101 	and.w	r1, r3, #1
 800175c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	b25b      	sxtb	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b25b      	sxtb	r3, r3
 800176a:	b2da      	uxtb	r2, r3
 800176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176e:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001774:	3301      	adds	r3, #1
 8001776:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800177a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800177e:	2b07      	cmp	r3, #7
 8001780:	d9e1      	bls.n	8001746 <TL_deserialize+0x274>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001782:	2300      	movs	r3, #0
 8001784:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001788:	e019      	b.n	80017be <TL_deserialize+0x2ec>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	789b      	ldrb	r3, [r3, #2]
 800178e:	b25a      	sxtb	r2, r3
 8001790:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001794:	3393      	adds	r3, #147	; 0x93
 8001796:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001798:	440b      	add	r3, r1
 800179a:	7f5b      	ldrb	r3, [r3, #29]
 800179c:	f003 0101 	and.w	r1, r3, #1
 80017a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b2:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80017b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017b8:	3301      	adds	r3, #1
 80017ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80017be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d9e1      	bls.n	800178a <TL_deserialize+0x2b8>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80017c6:	2300      	movs	r3, #0
 80017c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80017ca:	e015      	b.n	80017f8 <TL_deserialize+0x326>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 80017cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ce:	785b      	ldrb	r3, [r3, #1]
 80017d0:	b25a      	sxtb	r2, r3
 80017d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80017d4:	339b      	adds	r3, #155	; 0x9b
 80017d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017d8:	440b      	add	r3, r1
 80017da:	7f5b      	ldrb	r3, [r3, #29]
 80017dc:	f003 0101 	and.w	r1, r3, #1
 80017e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f0:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80017f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80017f4:	3301      	adds	r3, #1
 80017f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80017f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d9e6      	bls.n	80017cc <TL_deserialize+0x2fa>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80017fe:	2300      	movs	r3, #0
 8001800:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001802:	e015      	b.n	8001830 <TL_deserialize+0x35e>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 8001804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b25a      	sxtb	r2, r3
 800180a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800180c:	339e      	adds	r3, #158	; 0x9e
 800180e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001810:	440b      	add	r3, r1
 8001812:	7f5b      	ldrb	r3, [r3, #29]
 8001814:	f003 0101 	and.w	r1, r3, #1
 8001818:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	b25b      	sxtb	r3, r3
 8001820:	4313      	orrs	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2da      	uxtb	r2, r3
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800182a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800182c:	3301      	adds	r3, #1
 800182e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001830:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001832:	2b02      	cmp	r3, #2
 8001834:	d9e6      	bls.n	8001804 <TL_deserialize+0x332>
  }
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	3754      	adds	r7, #84	; 0x54
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001842:	4770      	bx	lr

08001844 <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fd24 	bl	800129c <TL_serialize>

  // reset state
  tl->tx_entry = 0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->tx_bit_offset = 0;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_bit_offset = 0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
  tl->tx_finished = 0;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
  tl->rx_finished = 0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
  tl->tx_timeout_counter = 0;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
  tl->tx_timed_out = 0;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a

  // enable TX RX
  tl->rx_pending = 1;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
  tl->tx_pending = 1;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a8:	f7ff fbea 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ae:	490d      	ldr	r1, [pc, #52]	; (80018e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c4:	4c0a      	ldr	r4, [pc, #40]	; (80018f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f009 f963 	bl	800ab9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7fe ffa7 	bl	8000828 <main>
  bx  lr
 80018da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80018e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018e4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80018e8:	0800ac4c 	.word	0x0800ac4c
  ldr r2, =_sbss
 80018ec:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 80018f0:	240004e8 	.word	0x240004e8

080018f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC3_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fe:	2003      	movs	r0, #3
 8001900:	f000 f95c 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001904:	f003 ff76 	bl	80057f4 <HAL_RCC_GetSysClockFreq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_Init+0x68>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	4913      	ldr	r1, [pc, #76]	; (8001964 <HAL_Init+0x6c>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_Init+0x68>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_Init+0x6c>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_Init+0x70>)
 800193a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <HAL_Init+0x74>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001942:	200f      	movs	r0, #15
 8001944:	f000 f814 	bl	8001970 <HAL_InitTick>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e002      	b.n	8001958 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001952:	f7ff f9ff 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	58024400 	.word	0x58024400
 8001964:	0800abfc 	.word	0x0800abfc
 8001968:	24000008 	.word	0x24000008
 800196c:	24000004 	.word	0x24000004

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_InitTick+0x60>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e021      	b.n	80019c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_InitTick+0x64>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_InitTick+0x60>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f941 	bl	8001c22 <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 f90b 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <HAL_InitTick+0x68>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	24000010 	.word	0x24000010
 80019d4:	24000004 	.word	0x24000004
 80019d8:	2400000c 	.word	0x2400000c

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	24000010 	.word	0x24000010
 8001a00:	240004e4 	.word	0x240004e4

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	240004e4 	.word	0x240004e4

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <__NVIC_SetPriorityGrouping+0x40>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x40>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00
 8001a60:	05fa0000 	.word	0x05fa0000

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001be0:	f7ff ff40 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	6978      	ldr	r0, [r7, #20]
 8001bec:	f7ff ff90 	bl	8001b10 <NVIC_EncodePriority>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff5f 	bl	8001abc <__NVIC_SetPriority>
}
 8001bfe:	bf00      	nop
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff33 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffa4 	bl	8001b78 <SysTick_Config>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff fede 	bl	8001a04 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e312      	b.n	800227a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a66      	ldr	r2, [pc, #408]	; (8001df4 <HAL_DMA_Init+0x1b8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d04a      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a65      	ldr	r2, [pc, #404]	; (8001df8 <HAL_DMA_Init+0x1bc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d045      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a63      	ldr	r2, [pc, #396]	; (8001dfc <HAL_DMA_Init+0x1c0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d040      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a62      	ldr	r2, [pc, #392]	; (8001e00 <HAL_DMA_Init+0x1c4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d03b      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a60      	ldr	r2, [pc, #384]	; (8001e04 <HAL_DMA_Init+0x1c8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d036      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a5f      	ldr	r2, [pc, #380]	; (8001e08 <HAL_DMA_Init+0x1cc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d031      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a5d      	ldr	r2, [pc, #372]	; (8001e0c <HAL_DMA_Init+0x1d0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d02c      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a5c      	ldr	r2, [pc, #368]	; (8001e10 <HAL_DMA_Init+0x1d4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d027      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a5a      	ldr	r2, [pc, #360]	; (8001e14 <HAL_DMA_Init+0x1d8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d022      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a59      	ldr	r2, [pc, #356]	; (8001e18 <HAL_DMA_Init+0x1dc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d01d      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a57      	ldr	r2, [pc, #348]	; (8001e1c <HAL_DMA_Init+0x1e0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d018      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a56      	ldr	r2, [pc, #344]	; (8001e20 <HAL_DMA_Init+0x1e4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a54      	ldr	r2, [pc, #336]	; (8001e24 <HAL_DMA_Init+0x1e8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00e      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a53      	ldr	r2, [pc, #332]	; (8001e28 <HAL_DMA_Init+0x1ec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a51      	ldr	r2, [pc, #324]	; (8001e2c <HAL_DMA_Init+0x1f0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_Init+0xb8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <HAL_DMA_Init+0x1f4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_DMA_Init+0xbc>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_DMA_Init+0xbe>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 813c 	beq.w	8001f78 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <HAL_DMA_Init+0x1b8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d04a      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a36      	ldr	r2, [pc, #216]	; (8001df8 <HAL_DMA_Init+0x1bc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d045      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <HAL_DMA_Init+0x1c0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d040      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a33      	ldr	r2, [pc, #204]	; (8001e00 <HAL_DMA_Init+0x1c4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d03b      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <HAL_DMA_Init+0x1c8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d036      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a30      	ldr	r2, [pc, #192]	; (8001e08 <HAL_DMA_Init+0x1cc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d031      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2e      	ldr	r2, [pc, #184]	; (8001e0c <HAL_DMA_Init+0x1d0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d02c      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <HAL_DMA_Init+0x1d4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d027      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_DMA_Init+0x1d8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d022      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2a      	ldr	r2, [pc, #168]	; (8001e18 <HAL_DMA_Init+0x1dc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d01d      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a28      	ldr	r2, [pc, #160]	; (8001e1c <HAL_DMA_Init+0x1e0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d018      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <HAL_DMA_Init+0x1e4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d013      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <HAL_DMA_Init+0x1e8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d00e      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <HAL_DMA_Init+0x1ec>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a22      	ldr	r2, [pc, #136]	; (8001e2c <HAL_DMA_Init+0x1f0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d004      	beq.n	8001db0 <HAL_DMA_Init+0x174>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <HAL_DMA_Init+0x1f4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d108      	bne.n	8001dc2 <HAL_DMA_Init+0x186>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 0201 	bic.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e007      	b.n	8001dd2 <HAL_DMA_Init+0x196>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0201 	bic.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001dd2:	e02f      	b.n	8001e34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd4:	f7ff fe16 	bl	8001a04 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	d928      	bls.n	8001e34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2220      	movs	r2, #32
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e242      	b.n	800227a <HAL_DMA_Init+0x63e>
 8001df4:	40020010 	.word	0x40020010
 8001df8:	40020028 	.word	0x40020028
 8001dfc:	40020040 	.word	0x40020040
 8001e00:	40020058 	.word	0x40020058
 8001e04:	40020070 	.word	0x40020070
 8001e08:	40020088 	.word	0x40020088
 8001e0c:	400200a0 	.word	0x400200a0
 8001e10:	400200b8 	.word	0x400200b8
 8001e14:	40020410 	.word	0x40020410
 8001e18:	40020428 	.word	0x40020428
 8001e1c:	40020440 	.word	0x40020440
 8001e20:	40020458 	.word	0x40020458
 8001e24:	40020470 	.word	0x40020470
 8001e28:	40020488 	.word	0x40020488
 8001e2c:	400204a0 	.word	0x400204a0
 8001e30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1c8      	bne.n	8001dd4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4b83      	ldr	r3, [pc, #524]	; (800205c <HAL_DMA_Init+0x420>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4313      	orrs	r3, r2
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b28      	cmp	r3, #40	; 0x28
 8001e9e:	d903      	bls.n	8001ea8 <HAL_DMA_Init+0x26c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ea6:	d91f      	bls.n	8001ee8 <HAL_DMA_Init+0x2ac>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b3e      	cmp	r3, #62	; 0x3e
 8001eae:	d903      	bls.n	8001eb8 <HAL_DMA_Init+0x27c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b42      	cmp	r3, #66	; 0x42
 8001eb6:	d917      	bls.n	8001ee8 <HAL_DMA_Init+0x2ac>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b46      	cmp	r3, #70	; 0x46
 8001ebe:	d903      	bls.n	8001ec8 <HAL_DMA_Init+0x28c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b48      	cmp	r3, #72	; 0x48
 8001ec6:	d90f      	bls.n	8001ee8 <HAL_DMA_Init+0x2ac>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b4e      	cmp	r3, #78	; 0x4e
 8001ece:	d903      	bls.n	8001ed8 <HAL_DMA_Init+0x29c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b52      	cmp	r3, #82	; 0x52
 8001ed6:	d907      	bls.n	8001ee8 <HAL_DMA_Init+0x2ac>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b73      	cmp	r3, #115	; 0x73
 8001ede:	d905      	bls.n	8001eec <HAL_DMA_Init+0x2b0>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b77      	cmp	r3, #119	; 0x77
 8001ee6:	d801      	bhi.n	8001eec <HAL_DMA_Init+0x2b0>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_DMA_Init+0x2b2>
 8001eec:	2300      	movs	r3, #0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ef8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f023 0307 	bic.w	r3, r3, #7
 8001f10:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d117      	bne.n	8001f54 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00e      	beq.n	8001f54 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f002 fb2e 	bl	8004598 <DMA_CheckFifoParam>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e192      	b.n	800227a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f002 fa69 	bl	8004434 <DMA_CalcBaseAndBitshift>
 8001f62:	4603      	mov	r3, r0
 8001f64:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	f003 031f 	and.w	r3, r3, #31
 8001f6e:	223f      	movs	r2, #63	; 0x3f
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	e0c8      	b.n	800210a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a38      	ldr	r2, [pc, #224]	; (8002060 <HAL_DMA_Init+0x424>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d022      	beq.n	8001fc8 <HAL_DMA_Init+0x38c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a37      	ldr	r2, [pc, #220]	; (8002064 <HAL_DMA_Init+0x428>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d01d      	beq.n	8001fc8 <HAL_DMA_Init+0x38c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a35      	ldr	r2, [pc, #212]	; (8002068 <HAL_DMA_Init+0x42c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d018      	beq.n	8001fc8 <HAL_DMA_Init+0x38c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a34      	ldr	r2, [pc, #208]	; (800206c <HAL_DMA_Init+0x430>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_DMA_Init+0x38c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a32      	ldr	r2, [pc, #200]	; (8002070 <HAL_DMA_Init+0x434>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_DMA_Init+0x38c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a31      	ldr	r2, [pc, #196]	; (8002074 <HAL_DMA_Init+0x438>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_DMA_Init+0x38c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2f      	ldr	r2, [pc, #188]	; (8002078 <HAL_DMA_Init+0x43c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_DMA_Init+0x38c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2e      	ldr	r2, [pc, #184]	; (800207c <HAL_DMA_Init+0x440>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_DMA_Init+0x390>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_DMA_Init+0x392>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8092 	beq.w	80020f8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a21      	ldr	r2, [pc, #132]	; (8002060 <HAL_DMA_Init+0x424>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d021      	beq.n	8002022 <HAL_DMA_Init+0x3e6>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a20      	ldr	r2, [pc, #128]	; (8002064 <HAL_DMA_Init+0x428>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d01c      	beq.n	8002022 <HAL_DMA_Init+0x3e6>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_DMA_Init+0x42c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d017      	beq.n	8002022 <HAL_DMA_Init+0x3e6>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_DMA_Init+0x430>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d012      	beq.n	8002022 <HAL_DMA_Init+0x3e6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_DMA_Init+0x434>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_DMA_Init+0x3e6>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_DMA_Init+0x438>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d008      	beq.n	8002022 <HAL_DMA_Init+0x3e6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a18      	ldr	r2, [pc, #96]	; (8002078 <HAL_DMA_Init+0x43c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d003      	beq.n	8002022 <HAL_DMA_Init+0x3e6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_DMA_Init+0x440>)
 8002020:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_DMA_Init+0x444>)
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d01c      	beq.n	8002084 <HAL_DMA_Init+0x448>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b80      	cmp	r3, #128	; 0x80
 8002050:	d102      	bne.n	8002058 <HAL_DMA_Init+0x41c>
 8002052:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002056:	e016      	b.n	8002086 <HAL_DMA_Init+0x44a>
 8002058:	2300      	movs	r3, #0
 800205a:	e014      	b.n	8002086 <HAL_DMA_Init+0x44a>
 800205c:	fe10803f 	.word	0xfe10803f
 8002060:	58025408 	.word	0x58025408
 8002064:	5802541c 	.word	0x5802541c
 8002068:	58025430 	.word	0x58025430
 800206c:	58025444 	.word	0x58025444
 8002070:	58025458 	.word	0x58025458
 8002074:	5802546c 	.word	0x5802546c
 8002078:	58025480 	.word	0x58025480
 800207c:	58025494 	.word	0x58025494
 8002080:	fffe000f 	.word	0xfffe000f
 8002084:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68d2      	ldr	r2, [r2, #12]
 800208a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800208c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002094:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800209c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b6e      	ldr	r3, [pc, #440]	; (8002284 <HAL_DMA_Init+0x648>)
 80020cc:	4413      	add	r3, r2
 80020ce:	4a6e      	ldr	r2, [pc, #440]	; (8002288 <HAL_DMA_Init+0x64c>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	009a      	lsls	r2, r3, #2
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f002 f9a9 	bl	8004434 <DMA_CalcBaseAndBitshift>
 80020e2:	4603      	mov	r3, r0
 80020e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2201      	movs	r2, #1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	e008      	b.n	800210a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0b7      	b.n	800227a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a5f      	ldr	r2, [pc, #380]	; (800228c <HAL_DMA_Init+0x650>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d072      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a5d      	ldr	r2, [pc, #372]	; (8002290 <HAL_DMA_Init+0x654>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d06d      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5c      	ldr	r2, [pc, #368]	; (8002294 <HAL_DMA_Init+0x658>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d068      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a5a      	ldr	r2, [pc, #360]	; (8002298 <HAL_DMA_Init+0x65c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d063      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a59      	ldr	r2, [pc, #356]	; (800229c <HAL_DMA_Init+0x660>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d05e      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a57      	ldr	r2, [pc, #348]	; (80022a0 <HAL_DMA_Init+0x664>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d059      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a56      	ldr	r2, [pc, #344]	; (80022a4 <HAL_DMA_Init+0x668>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d054      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a54      	ldr	r2, [pc, #336]	; (80022a8 <HAL_DMA_Init+0x66c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d04f      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a53      	ldr	r2, [pc, #332]	; (80022ac <HAL_DMA_Init+0x670>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d04a      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_DMA_Init+0x674>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d045      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_DMA_Init+0x678>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d040      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a4e      	ldr	r2, [pc, #312]	; (80022b8 <HAL_DMA_Init+0x67c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d03b      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a4d      	ldr	r2, [pc, #308]	; (80022bc <HAL_DMA_Init+0x680>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d036      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <HAL_DMA_Init+0x684>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d031      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a4a      	ldr	r2, [pc, #296]	; (80022c4 <HAL_DMA_Init+0x688>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d02c      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a48      	ldr	r2, [pc, #288]	; (80022c8 <HAL_DMA_Init+0x68c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d027      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a47      	ldr	r2, [pc, #284]	; (80022cc <HAL_DMA_Init+0x690>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d022      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a45      	ldr	r2, [pc, #276]	; (80022d0 <HAL_DMA_Init+0x694>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01d      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a44      	ldr	r2, [pc, #272]	; (80022d4 <HAL_DMA_Init+0x698>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d018      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a42      	ldr	r2, [pc, #264]	; (80022d8 <HAL_DMA_Init+0x69c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a41      	ldr	r2, [pc, #260]	; (80022dc <HAL_DMA_Init+0x6a0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00e      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a3f      	ldr	r2, [pc, #252]	; (80022e0 <HAL_DMA_Init+0x6a4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d009      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a3e      	ldr	r2, [pc, #248]	; (80022e4 <HAL_DMA_Init+0x6a8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <HAL_DMA_Init+0x5be>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a3c      	ldr	r2, [pc, #240]	; (80022e8 <HAL_DMA_Init+0x6ac>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_DMA_Init+0x5c2>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_DMA_Init+0x5c4>
 80021fe:	2300      	movs	r3, #0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d032      	beq.n	800226a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f002 fa43 	bl	8004690 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b80      	cmp	r3, #128	; 0x80
 8002210:	d102      	bne.n	8002218 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800222c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d010      	beq.n	8002258 <HAL_DMA_Init+0x61c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b08      	cmp	r3, #8
 800223c:	d80c      	bhi.n	8002258 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f002 fac0 	bl	80047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	e008      	b.n	800226a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	a7fdabf8 	.word	0xa7fdabf8
 8002288:	cccccccd 	.word	0xcccccccd
 800228c:	40020010 	.word	0x40020010
 8002290:	40020028 	.word	0x40020028
 8002294:	40020040 	.word	0x40020040
 8002298:	40020058 	.word	0x40020058
 800229c:	40020070 	.word	0x40020070
 80022a0:	40020088 	.word	0x40020088
 80022a4:	400200a0 	.word	0x400200a0
 80022a8:	400200b8 	.word	0x400200b8
 80022ac:	40020410 	.word	0x40020410
 80022b0:	40020428 	.word	0x40020428
 80022b4:	40020440 	.word	0x40020440
 80022b8:	40020458 	.word	0x40020458
 80022bc:	40020470 	.word	0x40020470
 80022c0:	40020488 	.word	0x40020488
 80022c4:	400204a0 	.word	0x400204a0
 80022c8:	400204b8 	.word	0x400204b8
 80022cc:	58025408 	.word	0x58025408
 80022d0:	5802541c 	.word	0x5802541c
 80022d4:	58025430 	.word	0x58025430
 80022d8:	58025444 	.word	0x58025444
 80022dc:	58025458 	.word	0x58025458
 80022e0:	5802546c 	.word	0x5802546c
 80022e4:	58025480 	.word	0x58025480
 80022e8:	58025494 	.word	0x58025494

080022ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e226      	b.n	8002756 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_DMA_Start_IT+0x2a>
 8002312:	2302      	movs	r3, #2
 8002314:	e21f      	b.n	8002756 <HAL_DMA_Start_IT+0x46a>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b01      	cmp	r3, #1
 8002328:	f040 820a 	bne.w	8002740 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a68      	ldr	r2, [pc, #416]	; (80024e0 <HAL_DMA_Start_IT+0x1f4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d04a      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a66      	ldr	r2, [pc, #408]	; (80024e4 <HAL_DMA_Start_IT+0x1f8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d045      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a65      	ldr	r2, [pc, #404]	; (80024e8 <HAL_DMA_Start_IT+0x1fc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d040      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a63      	ldr	r2, [pc, #396]	; (80024ec <HAL_DMA_Start_IT+0x200>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d03b      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a62      	ldr	r2, [pc, #392]	; (80024f0 <HAL_DMA_Start_IT+0x204>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d036      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a60      	ldr	r2, [pc, #384]	; (80024f4 <HAL_DMA_Start_IT+0x208>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d031      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a5f      	ldr	r2, [pc, #380]	; (80024f8 <HAL_DMA_Start_IT+0x20c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d02c      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a5d      	ldr	r2, [pc, #372]	; (80024fc <HAL_DMA_Start_IT+0x210>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d027      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a5c      	ldr	r2, [pc, #368]	; (8002500 <HAL_DMA_Start_IT+0x214>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d022      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a5a      	ldr	r2, [pc, #360]	; (8002504 <HAL_DMA_Start_IT+0x218>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d01d      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a59      	ldr	r2, [pc, #356]	; (8002508 <HAL_DMA_Start_IT+0x21c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d018      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a57      	ldr	r2, [pc, #348]	; (800250c <HAL_DMA_Start_IT+0x220>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a56      	ldr	r2, [pc, #344]	; (8002510 <HAL_DMA_Start_IT+0x224>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00e      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <HAL_DMA_Start_IT+0x228>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d009      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a53      	ldr	r2, [pc, #332]	; (8002518 <HAL_DMA_Start_IT+0x22c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d004      	beq.n	80023da <HAL_DMA_Start_IT+0xee>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a51      	ldr	r2, [pc, #324]	; (800251c <HAL_DMA_Start_IT+0x230>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d108      	bne.n	80023ec <HAL_DMA_Start_IT+0x100>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e007      	b.n	80023fc <HAL_DMA_Start_IT+0x110>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68b9      	ldr	r1, [r7, #8]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f001 fe6a 	bl	80040dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a34      	ldr	r2, [pc, #208]	; (80024e0 <HAL_DMA_Start_IT+0x1f4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d04a      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a33      	ldr	r2, [pc, #204]	; (80024e4 <HAL_DMA_Start_IT+0x1f8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d045      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <HAL_DMA_Start_IT+0x1fc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d040      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a30      	ldr	r2, [pc, #192]	; (80024ec <HAL_DMA_Start_IT+0x200>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d03b      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <HAL_DMA_Start_IT+0x204>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d036      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2d      	ldr	r2, [pc, #180]	; (80024f4 <HAL_DMA_Start_IT+0x208>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d031      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_DMA_Start_IT+0x20c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02c      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2a      	ldr	r2, [pc, #168]	; (80024fc <HAL_DMA_Start_IT+0x210>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d027      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_DMA_Start_IT+0x214>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d022      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a27      	ldr	r2, [pc, #156]	; (8002504 <HAL_DMA_Start_IT+0x218>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d01d      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_DMA_Start_IT+0x21c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d018      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_DMA_Start_IT+0x220>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_DMA_Start_IT+0x224>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00e      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <HAL_DMA_Start_IT+0x228>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d009      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_DMA_Start_IT+0x22c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_DMA_Start_IT+0x1bc>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1e      	ldr	r2, [pc, #120]	; (800251c <HAL_DMA_Start_IT+0x230>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d101      	bne.n	80024ac <HAL_DMA_Start_IT+0x1c0>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_DMA_Start_IT+0x1c2>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d036      	beq.n	8002520 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 021e 	bic.w	r2, r3, #30
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0216 	orr.w	r2, r2, #22
 80024c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d03e      	beq.n	800254c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0208 	orr.w	r2, r2, #8
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e035      	b.n	800254c <HAL_DMA_Start_IT+0x260>
 80024e0:	40020010 	.word	0x40020010
 80024e4:	40020028 	.word	0x40020028
 80024e8:	40020040 	.word	0x40020040
 80024ec:	40020058 	.word	0x40020058
 80024f0:	40020070 	.word	0x40020070
 80024f4:	40020088 	.word	0x40020088
 80024f8:	400200a0 	.word	0x400200a0
 80024fc:	400200b8 	.word	0x400200b8
 8002500:	40020410 	.word	0x40020410
 8002504:	40020428 	.word	0x40020428
 8002508:	40020440 	.word	0x40020440
 800250c:	40020458 	.word	0x40020458
 8002510:	40020470 	.word	0x40020470
 8002514:	40020488 	.word	0x40020488
 8002518:	400204a0 	.word	0x400204a0
 800251c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 020e 	bic.w	r2, r3, #14
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 020a 	orr.w	r2, r2, #10
 8002532:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0204 	orr.w	r2, r2, #4
 800254a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a83      	ldr	r2, [pc, #524]	; (8002760 <HAL_DMA_Start_IT+0x474>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d072      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a82      	ldr	r2, [pc, #520]	; (8002764 <HAL_DMA_Start_IT+0x478>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d06d      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a80      	ldr	r2, [pc, #512]	; (8002768 <HAL_DMA_Start_IT+0x47c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d068      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7f      	ldr	r2, [pc, #508]	; (800276c <HAL_DMA_Start_IT+0x480>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d063      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a7d      	ldr	r2, [pc, #500]	; (8002770 <HAL_DMA_Start_IT+0x484>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d05e      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7c      	ldr	r2, [pc, #496]	; (8002774 <HAL_DMA_Start_IT+0x488>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d059      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a7a      	ldr	r2, [pc, #488]	; (8002778 <HAL_DMA_Start_IT+0x48c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d054      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a79      	ldr	r2, [pc, #484]	; (800277c <HAL_DMA_Start_IT+0x490>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d04f      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a77      	ldr	r2, [pc, #476]	; (8002780 <HAL_DMA_Start_IT+0x494>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d04a      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a76      	ldr	r2, [pc, #472]	; (8002784 <HAL_DMA_Start_IT+0x498>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d045      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a74      	ldr	r2, [pc, #464]	; (8002788 <HAL_DMA_Start_IT+0x49c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d040      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a73      	ldr	r2, [pc, #460]	; (800278c <HAL_DMA_Start_IT+0x4a0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d03b      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a71      	ldr	r2, [pc, #452]	; (8002790 <HAL_DMA_Start_IT+0x4a4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d036      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a70      	ldr	r2, [pc, #448]	; (8002794 <HAL_DMA_Start_IT+0x4a8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d031      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_DMA_Start_IT+0x4ac>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d02c      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6d      	ldr	r2, [pc, #436]	; (800279c <HAL_DMA_Start_IT+0x4b0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d027      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a6b      	ldr	r2, [pc, #428]	; (80027a0 <HAL_DMA_Start_IT+0x4b4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d022      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6a      	ldr	r2, [pc, #424]	; (80027a4 <HAL_DMA_Start_IT+0x4b8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d01d      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a68      	ldr	r2, [pc, #416]	; (80027a8 <HAL_DMA_Start_IT+0x4bc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d018      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a67      	ldr	r2, [pc, #412]	; (80027ac <HAL_DMA_Start_IT+0x4c0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d013      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a65      	ldr	r2, [pc, #404]	; (80027b0 <HAL_DMA_Start_IT+0x4c4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00e      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a64      	ldr	r2, [pc, #400]	; (80027b4 <HAL_DMA_Start_IT+0x4c8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a62      	ldr	r2, [pc, #392]	; (80027b8 <HAL_DMA_Start_IT+0x4cc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <HAL_DMA_Start_IT+0x350>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a61      	ldr	r2, [pc, #388]	; (80027bc <HAL_DMA_Start_IT+0x4d0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d101      	bne.n	8002640 <HAL_DMA_Start_IT+0x354>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_DMA_Start_IT+0x356>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01a      	beq.n	800267c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002662:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a37      	ldr	r2, [pc, #220]	; (8002760 <HAL_DMA_Start_IT+0x474>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d04a      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a36      	ldr	r2, [pc, #216]	; (8002764 <HAL_DMA_Start_IT+0x478>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d045      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a34      	ldr	r2, [pc, #208]	; (8002768 <HAL_DMA_Start_IT+0x47c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d040      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a33      	ldr	r2, [pc, #204]	; (800276c <HAL_DMA_Start_IT+0x480>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d03b      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a31      	ldr	r2, [pc, #196]	; (8002770 <HAL_DMA_Start_IT+0x484>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d036      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a30      	ldr	r2, [pc, #192]	; (8002774 <HAL_DMA_Start_IT+0x488>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d031      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2e      	ldr	r2, [pc, #184]	; (8002778 <HAL_DMA_Start_IT+0x48c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02c      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a2d      	ldr	r2, [pc, #180]	; (800277c <HAL_DMA_Start_IT+0x490>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d027      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_DMA_Start_IT+0x494>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d022      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_DMA_Start_IT+0x498>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01d      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a28      	ldr	r2, [pc, #160]	; (8002788 <HAL_DMA_Start_IT+0x49c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d018      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a27      	ldr	r2, [pc, #156]	; (800278c <HAL_DMA_Start_IT+0x4a0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a25      	ldr	r2, [pc, #148]	; (8002790 <HAL_DMA_Start_IT+0x4a4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00e      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a24      	ldr	r2, [pc, #144]	; (8002794 <HAL_DMA_Start_IT+0x4a8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a22      	ldr	r2, [pc, #136]	; (8002798 <HAL_DMA_Start_IT+0x4ac>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_DMA_Start_IT+0x430>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_DMA_Start_IT+0x4b0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <HAL_DMA_Start_IT+0x442>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e012      	b.n	8002754 <HAL_DMA_Start_IT+0x468>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0201 	orr.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e009      	b.n	8002754 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002746:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002754:	7dfb      	ldrb	r3, [r7, #23]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40020010 	.word	0x40020010
 8002764:	40020028 	.word	0x40020028
 8002768:	40020040 	.word	0x40020040
 800276c:	40020058 	.word	0x40020058
 8002770:	40020070 	.word	0x40020070
 8002774:	40020088 	.word	0x40020088
 8002778:	400200a0 	.word	0x400200a0
 800277c:	400200b8 	.word	0x400200b8
 8002780:	40020410 	.word	0x40020410
 8002784:	40020428 	.word	0x40020428
 8002788:	40020440 	.word	0x40020440
 800278c:	40020458 	.word	0x40020458
 8002790:	40020470 	.word	0x40020470
 8002794:	40020488 	.word	0x40020488
 8002798:	400204a0 	.word	0x400204a0
 800279c:	400204b8 	.word	0x400204b8
 80027a0:	58025408 	.word	0x58025408
 80027a4:	5802541c 	.word	0x5802541c
 80027a8:	58025430 	.word	0x58025430
 80027ac:	58025444 	.word	0x58025444
 80027b0:	58025458 	.word	0x58025458
 80027b4:	5802546c 	.word	0x5802546c
 80027b8:	58025480 	.word	0x58025480
 80027bc:	58025494 	.word	0x58025494

080027c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff f91c 	bl	8001a04 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e2dc      	b.n	8002d92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d008      	beq.n	80027f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e2cd      	b.n	8002d92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a76      	ldr	r2, [pc, #472]	; (80029d4 <HAL_DMA_Abort+0x214>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d04a      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a74      	ldr	r2, [pc, #464]	; (80029d8 <HAL_DMA_Abort+0x218>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d045      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a73      	ldr	r2, [pc, #460]	; (80029dc <HAL_DMA_Abort+0x21c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d040      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a71      	ldr	r2, [pc, #452]	; (80029e0 <HAL_DMA_Abort+0x220>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d03b      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a70      	ldr	r2, [pc, #448]	; (80029e4 <HAL_DMA_Abort+0x224>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d036      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a6e      	ldr	r2, [pc, #440]	; (80029e8 <HAL_DMA_Abort+0x228>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d031      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6d      	ldr	r2, [pc, #436]	; (80029ec <HAL_DMA_Abort+0x22c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d02c      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6b      	ldr	r2, [pc, #428]	; (80029f0 <HAL_DMA_Abort+0x230>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d027      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6a      	ldr	r2, [pc, #424]	; (80029f4 <HAL_DMA_Abort+0x234>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d022      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a68      	ldr	r2, [pc, #416]	; (80029f8 <HAL_DMA_Abort+0x238>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01d      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a67      	ldr	r2, [pc, #412]	; (80029fc <HAL_DMA_Abort+0x23c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d018      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <HAL_DMA_Abort+0x240>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a64      	ldr	r2, [pc, #400]	; (8002a04 <HAL_DMA_Abort+0x244>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00e      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a62      	ldr	r2, [pc, #392]	; (8002a08 <HAL_DMA_Abort+0x248>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a61      	ldr	r2, [pc, #388]	; (8002a0c <HAL_DMA_Abort+0x24c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d004      	beq.n	8002896 <HAL_DMA_Abort+0xd6>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a5f      	ldr	r2, [pc, #380]	; (8002a10 <HAL_DMA_Abort+0x250>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_DMA_Abort+0xda>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_DMA_Abort+0xdc>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 021e 	bic.w	r2, r2, #30
 80028ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e00a      	b.n	80028de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 020e 	bic.w	r2, r2, #14
 80028d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a3c      	ldr	r2, [pc, #240]	; (80029d4 <HAL_DMA_Abort+0x214>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d072      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <HAL_DMA_Abort+0x218>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d06d      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a39      	ldr	r2, [pc, #228]	; (80029dc <HAL_DMA_Abort+0x21c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d068      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a37      	ldr	r2, [pc, #220]	; (80029e0 <HAL_DMA_Abort+0x220>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d063      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a36      	ldr	r2, [pc, #216]	; (80029e4 <HAL_DMA_Abort+0x224>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d05e      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <HAL_DMA_Abort+0x228>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d059      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a33      	ldr	r2, [pc, #204]	; (80029ec <HAL_DMA_Abort+0x22c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d054      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <HAL_DMA_Abort+0x230>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d04f      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <HAL_DMA_Abort+0x234>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d04a      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <HAL_DMA_Abort+0x238>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d045      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <HAL_DMA_Abort+0x23c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d040      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2b      	ldr	r2, [pc, #172]	; (8002a00 <HAL_DMA_Abort+0x240>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d03b      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <HAL_DMA_Abort+0x244>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d036      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <HAL_DMA_Abort+0x248>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d031      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a27      	ldr	r2, [pc, #156]	; (8002a0c <HAL_DMA_Abort+0x24c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d02c      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <HAL_DMA_Abort+0x250>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d027      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <HAL_DMA_Abort+0x254>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <HAL_DMA_Abort+0x258>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01d      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a21      	ldr	r2, [pc, #132]	; (8002a1c <HAL_DMA_Abort+0x25c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <HAL_DMA_Abort+0x260>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_DMA_Abort+0x264>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <HAL_DMA_Abort+0x268>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <HAL_DMA_Abort+0x26c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_Abort+0x20e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_DMA_Abort+0x270>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d132      	bne.n	8002a34 <HAL_DMA_Abort+0x274>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e031      	b.n	8002a36 <HAL_DMA_Abort+0x276>
 80029d2:	bf00      	nop
 80029d4:	40020010 	.word	0x40020010
 80029d8:	40020028 	.word	0x40020028
 80029dc:	40020040 	.word	0x40020040
 80029e0:	40020058 	.word	0x40020058
 80029e4:	40020070 	.word	0x40020070
 80029e8:	40020088 	.word	0x40020088
 80029ec:	400200a0 	.word	0x400200a0
 80029f0:	400200b8 	.word	0x400200b8
 80029f4:	40020410 	.word	0x40020410
 80029f8:	40020428 	.word	0x40020428
 80029fc:	40020440 	.word	0x40020440
 8002a00:	40020458 	.word	0x40020458
 8002a04:	40020470 	.word	0x40020470
 8002a08:	40020488 	.word	0x40020488
 8002a0c:	400204a0 	.word	0x400204a0
 8002a10:	400204b8 	.word	0x400204b8
 8002a14:	58025408 	.word	0x58025408
 8002a18:	5802541c 	.word	0x5802541c
 8002a1c:	58025430 	.word	0x58025430
 8002a20:	58025444 	.word	0x58025444
 8002a24:	58025458 	.word	0x58025458
 8002a28:	5802546c 	.word	0x5802546c
 8002a2c:	58025480 	.word	0x58025480
 8002a30:	58025494 	.word	0x58025494
 8002a34:	2300      	movs	r3, #0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d007      	beq.n	8002a4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6d      	ldr	r2, [pc, #436]	; (8002c04 <HAL_DMA_Abort+0x444>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6b      	ldr	r2, [pc, #428]	; (8002c08 <HAL_DMA_Abort+0x448>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6a      	ldr	r2, [pc, #424]	; (8002c0c <HAL_DMA_Abort+0x44c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a68      	ldr	r2, [pc, #416]	; (8002c10 <HAL_DMA_Abort+0x450>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <HAL_DMA_Abort+0x454>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a65      	ldr	r2, [pc, #404]	; (8002c18 <HAL_DMA_Abort+0x458>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a64      	ldr	r2, [pc, #400]	; (8002c1c <HAL_DMA_Abort+0x45c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a62      	ldr	r2, [pc, #392]	; (8002c20 <HAL_DMA_Abort+0x460>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a61      	ldr	r2, [pc, #388]	; (8002c24 <HAL_DMA_Abort+0x464>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5f      	ldr	r2, [pc, #380]	; (8002c28 <HAL_DMA_Abort+0x468>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5e      	ldr	r2, [pc, #376]	; (8002c2c <HAL_DMA_Abort+0x46c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a5c      	ldr	r2, [pc, #368]	; (8002c30 <HAL_DMA_Abort+0x470>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a5b      	ldr	r2, [pc, #364]	; (8002c34 <HAL_DMA_Abort+0x474>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a59      	ldr	r2, [pc, #356]	; (8002c38 <HAL_DMA_Abort+0x478>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_DMA_Abort+0x47c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_Abort+0x32a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a56      	ldr	r2, [pc, #344]	; (8002c40 <HAL_DMA_Abort+0x480>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d108      	bne.n	8002afc <HAL_DMA_Abort+0x33c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e007      	b.n	8002b0c <HAL_DMA_Abort+0x34c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b0c:	e013      	b.n	8002b36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b0e:	f7fe ff79 	bl	8001a04 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d90c      	bls.n	8002b36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2203      	movs	r2, #3
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e12d      	b.n	8002d92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1e5      	bne.n	8002b0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <HAL_DMA_Abort+0x444>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d04a      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2d      	ldr	r2, [pc, #180]	; (8002c08 <HAL_DMA_Abort+0x448>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d045      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <HAL_DMA_Abort+0x44c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d040      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2a      	ldr	r2, [pc, #168]	; (8002c10 <HAL_DMA_Abort+0x450>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d03b      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <HAL_DMA_Abort+0x454>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d036      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a27      	ldr	r2, [pc, #156]	; (8002c18 <HAL_DMA_Abort+0x458>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d031      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a26      	ldr	r2, [pc, #152]	; (8002c1c <HAL_DMA_Abort+0x45c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d02c      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a24      	ldr	r2, [pc, #144]	; (8002c20 <HAL_DMA_Abort+0x460>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d027      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a23      	ldr	r2, [pc, #140]	; (8002c24 <HAL_DMA_Abort+0x464>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d022      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <HAL_DMA_Abort+0x468>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01d      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <HAL_DMA_Abort+0x46c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d018      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <HAL_DMA_Abort+0x470>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <HAL_DMA_Abort+0x474>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00e      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <HAL_DMA_Abort+0x478>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d009      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1a      	ldr	r2, [pc, #104]	; (8002c3c <HAL_DMA_Abort+0x47c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d004      	beq.n	8002be2 <HAL_DMA_Abort+0x422>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <HAL_DMA_Abort+0x480>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_DMA_Abort+0x426>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_DMA_Abort+0x428>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d02b      	beq.n	8002c44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	223f      	movs	r2, #63	; 0x3f
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	e02a      	b.n	8002c5a <HAL_DMA_Abort+0x49a>
 8002c04:	40020010 	.word	0x40020010
 8002c08:	40020028 	.word	0x40020028
 8002c0c:	40020040 	.word	0x40020040
 8002c10:	40020058 	.word	0x40020058
 8002c14:	40020070 	.word	0x40020070
 8002c18:	40020088 	.word	0x40020088
 8002c1c:	400200a0 	.word	0x400200a0
 8002c20:	400200b8 	.word	0x400200b8
 8002c24:	40020410 	.word	0x40020410
 8002c28:	40020428 	.word	0x40020428
 8002c2c:	40020440 	.word	0x40020440
 8002c30:	40020458 	.word	0x40020458
 8002c34:	40020470 	.word	0x40020470
 8002c38:	40020488 	.word	0x40020488
 8002c3c:	400204a0 	.word	0x400204a0
 8002c40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	2201      	movs	r2, #1
 8002c54:	409a      	lsls	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a4f      	ldr	r2, [pc, #316]	; (8002d9c <HAL_DMA_Abort+0x5dc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d072      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a4d      	ldr	r2, [pc, #308]	; (8002da0 <HAL_DMA_Abort+0x5e0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d06d      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_DMA_Abort+0x5e4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d068      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a4a      	ldr	r2, [pc, #296]	; (8002da8 <HAL_DMA_Abort+0x5e8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d063      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a49      	ldr	r2, [pc, #292]	; (8002dac <HAL_DMA_Abort+0x5ec>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d05e      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a47      	ldr	r2, [pc, #284]	; (8002db0 <HAL_DMA_Abort+0x5f0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d059      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a46      	ldr	r2, [pc, #280]	; (8002db4 <HAL_DMA_Abort+0x5f4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d054      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a44      	ldr	r2, [pc, #272]	; (8002db8 <HAL_DMA_Abort+0x5f8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d04f      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a43      	ldr	r2, [pc, #268]	; (8002dbc <HAL_DMA_Abort+0x5fc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04a      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a41      	ldr	r2, [pc, #260]	; (8002dc0 <HAL_DMA_Abort+0x600>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d045      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a40      	ldr	r2, [pc, #256]	; (8002dc4 <HAL_DMA_Abort+0x604>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d040      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <HAL_DMA_Abort+0x608>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d03b      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <HAL_DMA_Abort+0x60c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d036      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_DMA_Abort+0x610>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d031      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a3a      	ldr	r2, [pc, #232]	; (8002dd4 <HAL_DMA_Abort+0x614>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d02c      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a38      	ldr	r2, [pc, #224]	; (8002dd8 <HAL_DMA_Abort+0x618>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d027      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <HAL_DMA_Abort+0x61c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a35      	ldr	r2, [pc, #212]	; (8002de0 <HAL_DMA_Abort+0x620>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <HAL_DMA_Abort+0x624>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d018      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a32      	ldr	r2, [pc, #200]	; (8002de8 <HAL_DMA_Abort+0x628>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a31      	ldr	r2, [pc, #196]	; (8002dec <HAL_DMA_Abort+0x62c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2f      	ldr	r2, [pc, #188]	; (8002df0 <HAL_DMA_Abort+0x630>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2e      	ldr	r2, [pc, #184]	; (8002df4 <HAL_DMA_Abort+0x634>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_DMA_Abort+0x58a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2c      	ldr	r2, [pc, #176]	; (8002df8 <HAL_DMA_Abort+0x638>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_DMA_Abort+0x58e>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_DMA_Abort+0x590>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d015      	beq.n	8002d80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00c      	beq.n	8002d80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40020010 	.word	0x40020010
 8002da0:	40020028 	.word	0x40020028
 8002da4:	40020040 	.word	0x40020040
 8002da8:	40020058 	.word	0x40020058
 8002dac:	40020070 	.word	0x40020070
 8002db0:	40020088 	.word	0x40020088
 8002db4:	400200a0 	.word	0x400200a0
 8002db8:	400200b8 	.word	0x400200b8
 8002dbc:	40020410 	.word	0x40020410
 8002dc0:	40020428 	.word	0x40020428
 8002dc4:	40020440 	.word	0x40020440
 8002dc8:	40020458 	.word	0x40020458
 8002dcc:	40020470 	.word	0x40020470
 8002dd0:	40020488 	.word	0x40020488
 8002dd4:	400204a0 	.word	0x400204a0
 8002dd8:	400204b8 	.word	0x400204b8
 8002ddc:	58025408 	.word	0x58025408
 8002de0:	5802541c 	.word	0x5802541c
 8002de4:	58025430 	.word	0x58025430
 8002de8:	58025444 	.word	0x58025444
 8002dec:	58025458 	.word	0x58025458
 8002df0:	5802546c 	.word	0x5802546c
 8002df4:	58025480 	.word	0x58025480
 8002df8:	58025494 	.word	0x58025494

08002dfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e237      	b.n	800327e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d004      	beq.n	8002e24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2280      	movs	r2, #128	; 0x80
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e22c      	b.n	800327e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a5c      	ldr	r2, [pc, #368]	; (8002f9c <HAL_DMA_Abort_IT+0x1a0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d04a      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5b      	ldr	r2, [pc, #364]	; (8002fa0 <HAL_DMA_Abort_IT+0x1a4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d045      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a59      	ldr	r2, [pc, #356]	; (8002fa4 <HAL_DMA_Abort_IT+0x1a8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d040      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a58      	ldr	r2, [pc, #352]	; (8002fa8 <HAL_DMA_Abort_IT+0x1ac>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d03b      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a56      	ldr	r2, [pc, #344]	; (8002fac <HAL_DMA_Abort_IT+0x1b0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d036      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a55      	ldr	r2, [pc, #340]	; (8002fb0 <HAL_DMA_Abort_IT+0x1b4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d031      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a53      	ldr	r2, [pc, #332]	; (8002fb4 <HAL_DMA_Abort_IT+0x1b8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d02c      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a52      	ldr	r2, [pc, #328]	; (8002fb8 <HAL_DMA_Abort_IT+0x1bc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d027      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a50      	ldr	r2, [pc, #320]	; (8002fbc <HAL_DMA_Abort_IT+0x1c0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d022      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a4f      	ldr	r2, [pc, #316]	; (8002fc0 <HAL_DMA_Abort_IT+0x1c4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d01d      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a4d      	ldr	r2, [pc, #308]	; (8002fc4 <HAL_DMA_Abort_IT+0x1c8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d018      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4c      	ldr	r2, [pc, #304]	; (8002fc8 <HAL_DMA_Abort_IT+0x1cc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4a      	ldr	r2, [pc, #296]	; (8002fcc <HAL_DMA_Abort_IT+0x1d0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a49      	ldr	r2, [pc, #292]	; (8002fd0 <HAL_DMA_Abort_IT+0x1d4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a47      	ldr	r2, [pc, #284]	; (8002fd4 <HAL_DMA_Abort_IT+0x1d8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xc8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a46      	ldr	r2, [pc, #280]	; (8002fd8 <HAL_DMA_Abort_IT+0x1dc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_DMA_Abort_IT+0xcc>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_DMA_Abort_IT+0xce>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8086 	beq.w	8002fdc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <HAL_DMA_Abort_IT+0x1a0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d04a      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <HAL_DMA_Abort_IT+0x1a4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d045      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <HAL_DMA_Abort_IT+0x1a8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d040      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_DMA_Abort_IT+0x1ac>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d03b      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a29      	ldr	r2, [pc, #164]	; (8002fac <HAL_DMA_Abort_IT+0x1b0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d036      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_DMA_Abort_IT+0x1b4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d031      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <HAL_DMA_Abort_IT+0x1b8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d02c      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <HAL_DMA_Abort_IT+0x1bc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d027      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <HAL_DMA_Abort_IT+0x1c0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d022      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_DMA_Abort_IT+0x1c4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d01d      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <HAL_DMA_Abort_IT+0x1c8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d018      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_DMA_Abort_IT+0x1cc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <HAL_DMA_Abort_IT+0x1d0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <HAL_DMA_Abort_IT+0x1d4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d009      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1a      	ldr	r2, [pc, #104]	; (8002fd4 <HAL_DMA_Abort_IT+0x1d8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_DMA_Abort_IT+0x17c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_DMA_Abort_IT+0x1dc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <HAL_DMA_Abort_IT+0x18e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e178      	b.n	800327c <HAL_DMA_Abort_IT+0x480>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e16f      	b.n	800327c <HAL_DMA_Abort_IT+0x480>
 8002f9c:	40020010 	.word	0x40020010
 8002fa0:	40020028 	.word	0x40020028
 8002fa4:	40020040 	.word	0x40020040
 8002fa8:	40020058 	.word	0x40020058
 8002fac:	40020070 	.word	0x40020070
 8002fb0:	40020088 	.word	0x40020088
 8002fb4:	400200a0 	.word	0x400200a0
 8002fb8:	400200b8 	.word	0x400200b8
 8002fbc:	40020410 	.word	0x40020410
 8002fc0:	40020428 	.word	0x40020428
 8002fc4:	40020440 	.word	0x40020440
 8002fc8:	40020458 	.word	0x40020458
 8002fcc:	40020470 	.word	0x40020470
 8002fd0:	40020488 	.word	0x40020488
 8002fd4:	400204a0 	.word	0x400204a0
 8002fd8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 020e 	bic.w	r2, r2, #14
 8002fea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a6c      	ldr	r2, [pc, #432]	; (80031a4 <HAL_DMA_Abort_IT+0x3a8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d04a      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a6b      	ldr	r2, [pc, #428]	; (80031a8 <HAL_DMA_Abort_IT+0x3ac>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d045      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a69      	ldr	r2, [pc, #420]	; (80031ac <HAL_DMA_Abort_IT+0x3b0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d040      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a68      	ldr	r2, [pc, #416]	; (80031b0 <HAL_DMA_Abort_IT+0x3b4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d03b      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a66      	ldr	r2, [pc, #408]	; (80031b4 <HAL_DMA_Abort_IT+0x3b8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d036      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a65      	ldr	r2, [pc, #404]	; (80031b8 <HAL_DMA_Abort_IT+0x3bc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d031      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a63      	ldr	r2, [pc, #396]	; (80031bc <HAL_DMA_Abort_IT+0x3c0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02c      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a62      	ldr	r2, [pc, #392]	; (80031c0 <HAL_DMA_Abort_IT+0x3c4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d027      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a60      	ldr	r2, [pc, #384]	; (80031c4 <HAL_DMA_Abort_IT+0x3c8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d022      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5f      	ldr	r2, [pc, #380]	; (80031c8 <HAL_DMA_Abort_IT+0x3cc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01d      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5d      	ldr	r2, [pc, #372]	; (80031cc <HAL_DMA_Abort_IT+0x3d0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5c      	ldr	r2, [pc, #368]	; (80031d0 <HAL_DMA_Abort_IT+0x3d4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5a      	ldr	r2, [pc, #360]	; (80031d4 <HAL_DMA_Abort_IT+0x3d8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a59      	ldr	r2, [pc, #356]	; (80031d8 <HAL_DMA_Abort_IT+0x3dc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_DMA_Abort_IT+0x3e0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_DMA_Abort_IT+0x290>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_DMA_Abort_IT+0x3e4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <HAL_DMA_Abort_IT+0x2a2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e007      	b.n	80030ae <HAL_DMA_Abort_IT+0x2b2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a3c      	ldr	r2, [pc, #240]	; (80031a4 <HAL_DMA_Abort_IT+0x3a8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d072      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a3a      	ldr	r2, [pc, #232]	; (80031a8 <HAL_DMA_Abort_IT+0x3ac>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d06d      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a39      	ldr	r2, [pc, #228]	; (80031ac <HAL_DMA_Abort_IT+0x3b0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d068      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a37      	ldr	r2, [pc, #220]	; (80031b0 <HAL_DMA_Abort_IT+0x3b4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d063      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a36      	ldr	r2, [pc, #216]	; (80031b4 <HAL_DMA_Abort_IT+0x3b8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d05e      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a34      	ldr	r2, [pc, #208]	; (80031b8 <HAL_DMA_Abort_IT+0x3bc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d059      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a33      	ldr	r2, [pc, #204]	; (80031bc <HAL_DMA_Abort_IT+0x3c0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d054      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a31      	ldr	r2, [pc, #196]	; (80031c0 <HAL_DMA_Abort_IT+0x3c4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d04f      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a30      	ldr	r2, [pc, #192]	; (80031c4 <HAL_DMA_Abort_IT+0x3c8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d04a      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <HAL_DMA_Abort_IT+0x3cc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d045      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2d      	ldr	r2, [pc, #180]	; (80031cc <HAL_DMA_Abort_IT+0x3d0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d040      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <HAL_DMA_Abort_IT+0x3d4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d03b      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <HAL_DMA_Abort_IT+0x3d8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d036      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a28      	ldr	r2, [pc, #160]	; (80031d8 <HAL_DMA_Abort_IT+0x3dc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d031      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a27      	ldr	r2, [pc, #156]	; (80031dc <HAL_DMA_Abort_IT+0x3e0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d02c      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <HAL_DMA_Abort_IT+0x3e4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d027      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a24      	ldr	r2, [pc, #144]	; (80031e4 <HAL_DMA_Abort_IT+0x3e8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d022      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_DMA_Abort_IT+0x3ec>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01d      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a21      	ldr	r2, [pc, #132]	; (80031ec <HAL_DMA_Abort_IT+0x3f0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d018      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1f      	ldr	r2, [pc, #124]	; (80031f0 <HAL_DMA_Abort_IT+0x3f4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <HAL_DMA_Abort_IT+0x3f8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00e      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_DMA_Abort_IT+0x3fc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d009      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <HAL_DMA_Abort_IT+0x400>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_DMA_Abort_IT+0x3a2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_DMA_Abort_IT+0x404>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d132      	bne.n	8003204 <HAL_DMA_Abort_IT+0x408>
 800319e:	2301      	movs	r3, #1
 80031a0:	e031      	b.n	8003206 <HAL_DMA_Abort_IT+0x40a>
 80031a2:	bf00      	nop
 80031a4:	40020010 	.word	0x40020010
 80031a8:	40020028 	.word	0x40020028
 80031ac:	40020040 	.word	0x40020040
 80031b0:	40020058 	.word	0x40020058
 80031b4:	40020070 	.word	0x40020070
 80031b8:	40020088 	.word	0x40020088
 80031bc:	400200a0 	.word	0x400200a0
 80031c0:	400200b8 	.word	0x400200b8
 80031c4:	40020410 	.word	0x40020410
 80031c8:	40020428 	.word	0x40020428
 80031cc:	40020440 	.word	0x40020440
 80031d0:	40020458 	.word	0x40020458
 80031d4:	40020470 	.word	0x40020470
 80031d8:	40020488 	.word	0x40020488
 80031dc:	400204a0 	.word	0x400204a0
 80031e0:	400204b8 	.word	0x400204b8
 80031e4:	58025408 	.word	0x58025408
 80031e8:	5802541c 	.word	0x5802541c
 80031ec:	58025430 	.word	0x58025430
 80031f0:	58025444 	.word	0x58025444
 80031f4:	58025458 	.word	0x58025458
 80031f8:	5802546c 	.word	0x5802546c
 80031fc:	58025480 	.word	0x58025480
 8003200:	58025494 	.word	0x58025494
 8003204:	2300      	movs	r3, #0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d028      	beq.n	800325c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003218:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2201      	movs	r2, #1
 800322a:	409a      	lsls	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003238:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00c      	beq.n	800325c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003250:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800325a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop

08003288 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003294:	4b67      	ldr	r3, [pc, #412]	; (8003434 <HAL_DMA_IRQHandler+0x1ac>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a67      	ldr	r2, [pc, #412]	; (8003438 <HAL_DMA_IRQHandler+0x1b0>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	0a9b      	lsrs	r3, r3, #10
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a5f      	ldr	r2, [pc, #380]	; (800343c <HAL_DMA_IRQHandler+0x1b4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d04a      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a5d      	ldr	r2, [pc, #372]	; (8003440 <HAL_DMA_IRQHandler+0x1b8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d045      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a5c      	ldr	r2, [pc, #368]	; (8003444 <HAL_DMA_IRQHandler+0x1bc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d040      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a5a      	ldr	r2, [pc, #360]	; (8003448 <HAL_DMA_IRQHandler+0x1c0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a59      	ldr	r2, [pc, #356]	; (800344c <HAL_DMA_IRQHandler+0x1c4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d036      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a57      	ldr	r2, [pc, #348]	; (8003450 <HAL_DMA_IRQHandler+0x1c8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d031      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a56      	ldr	r2, [pc, #344]	; (8003454 <HAL_DMA_IRQHandler+0x1cc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02c      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a54      	ldr	r2, [pc, #336]	; (8003458 <HAL_DMA_IRQHandler+0x1d0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a53      	ldr	r2, [pc, #332]	; (800345c <HAL_DMA_IRQHandler+0x1d4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a51      	ldr	r2, [pc, #324]	; (8003460 <HAL_DMA_IRQHandler+0x1d8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a50      	ldr	r2, [pc, #320]	; (8003464 <HAL_DMA_IRQHandler+0x1dc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a4e      	ldr	r2, [pc, #312]	; (8003468 <HAL_DMA_IRQHandler+0x1e0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a4d      	ldr	r2, [pc, #308]	; (800346c <HAL_DMA_IRQHandler+0x1e4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a4b      	ldr	r2, [pc, #300]	; (8003470 <HAL_DMA_IRQHandler+0x1e8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a4a      	ldr	r2, [pc, #296]	; (8003474 <HAL_DMA_IRQHandler+0x1ec>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_DMA_IRQHandler+0xd2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a48      	ldr	r2, [pc, #288]	; (8003478 <HAL_DMA_IRQHandler+0x1f0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_DMA_IRQHandler+0xd6>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_DMA_IRQHandler+0xd8>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 842b 	beq.w	8003bbc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2208      	movs	r2, #8
 8003370:	409a      	lsls	r2, r3
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80a2 	beq.w	80034c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2e      	ldr	r2, [pc, #184]	; (800343c <HAL_DMA_IRQHandler+0x1b4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d04a      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2d      	ldr	r2, [pc, #180]	; (8003440 <HAL_DMA_IRQHandler+0x1b8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d045      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <HAL_DMA_IRQHandler+0x1bc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d040      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a2a      	ldr	r2, [pc, #168]	; (8003448 <HAL_DMA_IRQHandler+0x1c0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d03b      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a28      	ldr	r2, [pc, #160]	; (800344c <HAL_DMA_IRQHandler+0x1c4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d036      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a27      	ldr	r2, [pc, #156]	; (8003450 <HAL_DMA_IRQHandler+0x1c8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d031      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a25      	ldr	r2, [pc, #148]	; (8003454 <HAL_DMA_IRQHandler+0x1cc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d02c      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a24      	ldr	r2, [pc, #144]	; (8003458 <HAL_DMA_IRQHandler+0x1d0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d027      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a22      	ldr	r2, [pc, #136]	; (800345c <HAL_DMA_IRQHandler+0x1d4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d022      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a21      	ldr	r2, [pc, #132]	; (8003460 <HAL_DMA_IRQHandler+0x1d8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d01d      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_DMA_IRQHandler+0x1dc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d018      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_DMA_IRQHandler+0x1e0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d013      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	; (800346c <HAL_DMA_IRQHandler+0x1e4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00e      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <HAL_DMA_IRQHandler+0x1e8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d009      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a19      	ldr	r2, [pc, #100]	; (8003474 <HAL_DMA_IRQHandler+0x1ec>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_DMA_IRQHandler+0x194>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_DMA_IRQHandler+0x1f0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d12f      	bne.n	800347c <HAL_DMA_IRQHandler+0x1f4>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf14      	ite	ne
 800342a:	2301      	movne	r3, #1
 800342c:	2300      	moveq	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e02e      	b.n	8003490 <HAL_DMA_IRQHandler+0x208>
 8003432:	bf00      	nop
 8003434:	24000004 	.word	0x24000004
 8003438:	1b4e81b5 	.word	0x1b4e81b5
 800343c:	40020010 	.word	0x40020010
 8003440:	40020028 	.word	0x40020028
 8003444:	40020040 	.word	0x40020040
 8003448:	40020058 	.word	0x40020058
 800344c:	40020070 	.word	0x40020070
 8003450:	40020088 	.word	0x40020088
 8003454:	400200a0 	.word	0x400200a0
 8003458:	400200b8 	.word	0x400200b8
 800345c:	40020410 	.word	0x40020410
 8003460:	40020428 	.word	0x40020428
 8003464:	40020440 	.word	0x40020440
 8003468:	40020458 	.word	0x40020458
 800346c:	40020470 	.word	0x40020470
 8003470:	40020488 	.word	0x40020488
 8003474:	400204a0 	.word	0x400204a0
 8003478:	400204b8 	.word	0x400204b8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d015      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0204 	bic.w	r2, r2, #4
 80034a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	2208      	movs	r2, #8
 80034ae:	409a      	lsls	r2, r3
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	fa22 f303 	lsr.w	r3, r2, r3
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d06e      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a69      	ldr	r2, [pc, #420]	; (8003680 <HAL_DMA_IRQHandler+0x3f8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d04a      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a67      	ldr	r2, [pc, #412]	; (8003684 <HAL_DMA_IRQHandler+0x3fc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d045      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a66      	ldr	r2, [pc, #408]	; (8003688 <HAL_DMA_IRQHandler+0x400>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d040      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a64      	ldr	r2, [pc, #400]	; (800368c <HAL_DMA_IRQHandler+0x404>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d03b      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a63      	ldr	r2, [pc, #396]	; (8003690 <HAL_DMA_IRQHandler+0x408>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d036      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a61      	ldr	r2, [pc, #388]	; (8003694 <HAL_DMA_IRQHandler+0x40c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d031      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a60      	ldr	r2, [pc, #384]	; (8003698 <HAL_DMA_IRQHandler+0x410>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d02c      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a5e      	ldr	r2, [pc, #376]	; (800369c <HAL_DMA_IRQHandler+0x414>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d027      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a5d      	ldr	r2, [pc, #372]	; (80036a0 <HAL_DMA_IRQHandler+0x418>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d022      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a5b      	ldr	r2, [pc, #364]	; (80036a4 <HAL_DMA_IRQHandler+0x41c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01d      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a5a      	ldr	r2, [pc, #360]	; (80036a8 <HAL_DMA_IRQHandler+0x420>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d018      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_DMA_IRQHandler+0x424>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a57      	ldr	r2, [pc, #348]	; (80036b0 <HAL_DMA_IRQHandler+0x428>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00e      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a55      	ldr	r2, [pc, #340]	; (80036b4 <HAL_DMA_IRQHandler+0x42c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a54      	ldr	r2, [pc, #336]	; (80036b8 <HAL_DMA_IRQHandler+0x430>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_DMA_IRQHandler+0x2ee>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a52      	ldr	r2, [pc, #328]	; (80036bc <HAL_DMA_IRQHandler+0x434>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10a      	bne.n	800358c <HAL_DMA_IRQHandler+0x304>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e003      	b.n	8003594 <HAL_DMA_IRQHandler+0x30c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	f043 0202 	orr.w	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2204      	movs	r2, #4
 80035be:	409a      	lsls	r2, r3
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 808f 	beq.w	80036e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2c      	ldr	r2, [pc, #176]	; (8003680 <HAL_DMA_IRQHandler+0x3f8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04a      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <HAL_DMA_IRQHandler+0x3fc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d045      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a29      	ldr	r2, [pc, #164]	; (8003688 <HAL_DMA_IRQHandler+0x400>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a27      	ldr	r2, [pc, #156]	; (800368c <HAL_DMA_IRQHandler+0x404>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d03b      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a26      	ldr	r2, [pc, #152]	; (8003690 <HAL_DMA_IRQHandler+0x408>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d036      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a24      	ldr	r2, [pc, #144]	; (8003694 <HAL_DMA_IRQHandler+0x40c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_DMA_IRQHandler+0x410>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02c      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a21      	ldr	r2, [pc, #132]	; (800369c <HAL_DMA_IRQHandler+0x414>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d027      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a20      	ldr	r2, [pc, #128]	; (80036a0 <HAL_DMA_IRQHandler+0x418>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <HAL_DMA_IRQHandler+0x41c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01d      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_DMA_IRQHandler+0x420>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <HAL_DMA_IRQHandler+0x424>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <HAL_DMA_IRQHandler+0x428>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_DMA_IRQHandler+0x42c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a17      	ldr	r2, [pc, #92]	; (80036b8 <HAL_DMA_IRQHandler+0x430>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_DMA_IRQHandler+0x3e2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a15      	ldr	r2, [pc, #84]	; (80036bc <HAL_DMA_IRQHandler+0x434>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d12a      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x438>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e023      	b.n	80036c8 <HAL_DMA_IRQHandler+0x440>
 8003680:	40020010 	.word	0x40020010
 8003684:	40020028 	.word	0x40020028
 8003688:	40020040 	.word	0x40020040
 800368c:	40020058 	.word	0x40020058
 8003690:	40020070 	.word	0x40020070
 8003694:	40020088 	.word	0x40020088
 8003698:	400200a0 	.word	0x400200a0
 800369c:	400200b8 	.word	0x400200b8
 80036a0:	40020410 	.word	0x40020410
 80036a4:	40020428 	.word	0x40020428
 80036a8:	40020440 	.word	0x40020440
 80036ac:	40020458 	.word	0x40020458
 80036b0:	40020470 	.word	0x40020470
 80036b4:	40020488 	.word	0x40020488
 80036b8:	400204a0 	.word	0x400204a0
 80036bc:	400204b8 	.word	0x400204b8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2210      	movs	r2, #16
 80036f2:	409a      	lsls	r2, r3
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a6 	beq.w	800384a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a85      	ldr	r2, [pc, #532]	; (8003918 <HAL_DMA_IRQHandler+0x690>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d04a      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a83      	ldr	r2, [pc, #524]	; (800391c <HAL_DMA_IRQHandler+0x694>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d045      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a82      	ldr	r2, [pc, #520]	; (8003920 <HAL_DMA_IRQHandler+0x698>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d040      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a80      	ldr	r2, [pc, #512]	; (8003924 <HAL_DMA_IRQHandler+0x69c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d03b      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7f      	ldr	r2, [pc, #508]	; (8003928 <HAL_DMA_IRQHandler+0x6a0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d036      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a7d      	ldr	r2, [pc, #500]	; (800392c <HAL_DMA_IRQHandler+0x6a4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d031      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a7c      	ldr	r2, [pc, #496]	; (8003930 <HAL_DMA_IRQHandler+0x6a8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d02c      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a7a      	ldr	r2, [pc, #488]	; (8003934 <HAL_DMA_IRQHandler+0x6ac>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d027      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a79      	ldr	r2, [pc, #484]	; (8003938 <HAL_DMA_IRQHandler+0x6b0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d022      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a77      	ldr	r2, [pc, #476]	; (800393c <HAL_DMA_IRQHandler+0x6b4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01d      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a76      	ldr	r2, [pc, #472]	; (8003940 <HAL_DMA_IRQHandler+0x6b8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d018      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a74      	ldr	r2, [pc, #464]	; (8003944 <HAL_DMA_IRQHandler+0x6bc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a73      	ldr	r2, [pc, #460]	; (8003948 <HAL_DMA_IRQHandler+0x6c0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a71      	ldr	r2, [pc, #452]	; (800394c <HAL_DMA_IRQHandler+0x6c4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a70      	ldr	r2, [pc, #448]	; (8003950 <HAL_DMA_IRQHandler+0x6c8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_DMA_IRQHandler+0x516>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a6e      	ldr	r2, [pc, #440]	; (8003954 <HAL_DMA_IRQHandler+0x6cc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10a      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x52c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e009      	b.n	80037c8 <HAL_DMA_IRQHandler+0x540>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bf14      	ite	ne
 80037c2:	2301      	movne	r3, #1
 80037c4:	2300      	moveq	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03e      	beq.n	800384a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	2210      	movs	r2, #16
 80037d6:	409a      	lsls	r2, r3
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d108      	bne.n	800380a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d024      	beq.n	800384a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
 8003808:	e01f      	b.n	800384a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01b      	beq.n	800384a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
 800381a:	e016      	b.n	800384a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0208 	bic.w	r2, r2, #8
 8003838:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	2220      	movs	r2, #32
 8003854:	409a      	lsls	r2, r3
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8110 	beq.w	8003a80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a2c      	ldr	r2, [pc, #176]	; (8003918 <HAL_DMA_IRQHandler+0x690>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d04a      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2b      	ldr	r2, [pc, #172]	; (800391c <HAL_DMA_IRQHandler+0x694>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d045      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a29      	ldr	r2, [pc, #164]	; (8003920 <HAL_DMA_IRQHandler+0x698>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d040      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <HAL_DMA_IRQHandler+0x69c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d03b      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <HAL_DMA_IRQHandler+0x6a0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d036      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a25      	ldr	r2, [pc, #148]	; (800392c <HAL_DMA_IRQHandler+0x6a4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d031      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a23      	ldr	r2, [pc, #140]	; (8003930 <HAL_DMA_IRQHandler+0x6a8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d02c      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a22      	ldr	r2, [pc, #136]	; (8003934 <HAL_DMA_IRQHandler+0x6ac>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d027      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a20      	ldr	r2, [pc, #128]	; (8003938 <HAL_DMA_IRQHandler+0x6b0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d022      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1f      	ldr	r2, [pc, #124]	; (800393c <HAL_DMA_IRQHandler+0x6b4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d01d      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <HAL_DMA_IRQHandler+0x6b8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d018      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_DMA_IRQHandler+0x6bc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1a      	ldr	r2, [pc, #104]	; (8003948 <HAL_DMA_IRQHandler+0x6c0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_DMA_IRQHandler+0x6c4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_DMA_IRQHandler+0x6c8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_DMA_IRQHandler+0x678>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a16      	ldr	r2, [pc, #88]	; (8003954 <HAL_DMA_IRQHandler+0x6cc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d12b      	bne.n	8003958 <HAL_DMA_IRQHandler+0x6d0>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf14      	ite	ne
 800390e:	2301      	movne	r3, #1
 8003910:	2300      	moveq	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	e02a      	b.n	800396c <HAL_DMA_IRQHandler+0x6e4>
 8003916:	bf00      	nop
 8003918:	40020010 	.word	0x40020010
 800391c:	40020028 	.word	0x40020028
 8003920:	40020040 	.word	0x40020040
 8003924:	40020058 	.word	0x40020058
 8003928:	40020070 	.word	0x40020070
 800392c:	40020088 	.word	0x40020088
 8003930:	400200a0 	.word	0x400200a0
 8003934:	400200b8 	.word	0x400200b8
 8003938:	40020410 	.word	0x40020410
 800393c:	40020428 	.word	0x40020428
 8003940:	40020440 	.word	0x40020440
 8003944:	40020458 	.word	0x40020458
 8003948:	40020470 	.word	0x40020470
 800394c:	40020488 	.word	0x40020488
 8003950:	400204a0 	.word	0x400204a0
 8003954:	400204b8 	.word	0x400204b8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8087 	beq.w	8003a80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2220      	movs	r2, #32
 800397c:	409a      	lsls	r2, r3
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b04      	cmp	r3, #4
 800398c:	d139      	bne.n	8003a02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0216 	bic.w	r2, r2, #22
 800399c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <HAL_DMA_IRQHandler+0x736>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0208 	bic.w	r2, r2, #8
 80039cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	223f      	movs	r2, #63	; 0x3f
 80039d8:	409a      	lsls	r2, r3
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 834a 	beq.w	800408c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
          }
          return;
 8003a00:	e344      	b.n	800408c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d018      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d02c      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
 8003a2e:	e027      	b.n	8003a80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d023      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
 8003a40:	e01e      	b.n	8003a80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10f      	bne.n	8003a70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0210 	bic.w	r2, r2, #16
 8003a5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8306 	beq.w	8004096 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8088 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a7a      	ldr	r2, [pc, #488]	; (8003c90 <HAL_DMA_IRQHandler+0xa08>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d04a      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a79      	ldr	r2, [pc, #484]	; (8003c94 <HAL_DMA_IRQHandler+0xa0c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d045      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a77      	ldr	r2, [pc, #476]	; (8003c98 <HAL_DMA_IRQHandler+0xa10>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d040      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a76      	ldr	r2, [pc, #472]	; (8003c9c <HAL_DMA_IRQHandler+0xa14>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d03b      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a74      	ldr	r2, [pc, #464]	; (8003ca0 <HAL_DMA_IRQHandler+0xa18>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d036      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a73      	ldr	r2, [pc, #460]	; (8003ca4 <HAL_DMA_IRQHandler+0xa1c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d031      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a71      	ldr	r2, [pc, #452]	; (8003ca8 <HAL_DMA_IRQHandler+0xa20>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02c      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a70      	ldr	r2, [pc, #448]	; (8003cac <HAL_DMA_IRQHandler+0xa24>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d027      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a6e      	ldr	r2, [pc, #440]	; (8003cb0 <HAL_DMA_IRQHandler+0xa28>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d022      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6d      	ldr	r2, [pc, #436]	; (8003cb4 <HAL_DMA_IRQHandler+0xa2c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d01d      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a6b      	ldr	r2, [pc, #428]	; (8003cb8 <HAL_DMA_IRQHandler+0xa30>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d018      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6a      	ldr	r2, [pc, #424]	; (8003cbc <HAL_DMA_IRQHandler+0xa34>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a68      	ldr	r2, [pc, #416]	; (8003cc0 <HAL_DMA_IRQHandler+0xa38>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00e      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a67      	ldr	r2, [pc, #412]	; (8003cc4 <HAL_DMA_IRQHandler+0xa3c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d009      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a65      	ldr	r2, [pc, #404]	; (8003cc8 <HAL_DMA_IRQHandler+0xa40>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x8b8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a64      	ldr	r2, [pc, #400]	; (8003ccc <HAL_DMA_IRQHandler+0xa44>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d108      	bne.n	8003b52 <HAL_DMA_IRQHandler+0x8ca>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e007      	b.n	8003b62 <HAL_DMA_IRQHandler+0x8da>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3301      	adds	r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d307      	bcc.n	8003b7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f2      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x8da>
 8003b7c:	e000      	b.n	8003b80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2203      	movs	r2, #3
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b96:	e003      	b.n	8003ba0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8272 	beq.w	8004096 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
 8003bba:	e26c      	b.n	8004096 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a43      	ldr	r2, [pc, #268]	; (8003cd0 <HAL_DMA_IRQHandler+0xa48>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d022      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x984>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <HAL_DMA_IRQHandler+0xa4c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d01d      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x984>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a40      	ldr	r2, [pc, #256]	; (8003cd8 <HAL_DMA_IRQHandler+0xa50>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d018      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x984>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3f      	ldr	r2, [pc, #252]	; (8003cdc <HAL_DMA_IRQHandler+0xa54>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d013      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x984>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3d      	ldr	r2, [pc, #244]	; (8003ce0 <HAL_DMA_IRQHandler+0xa58>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00e      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x984>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a3c      	ldr	r2, [pc, #240]	; (8003ce4 <HAL_DMA_IRQHandler+0xa5c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x984>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a3a      	ldr	r2, [pc, #232]	; (8003ce8 <HAL_DMA_IRQHandler+0xa60>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x984>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a39      	ldr	r2, [pc, #228]	; (8003cec <HAL_DMA_IRQHandler+0xa64>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_DMA_IRQHandler+0x988>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_DMA_IRQHandler+0x98a>
 8003c10:	2300      	movs	r3, #0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 823f 	beq.w	8004096 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2204      	movs	r2, #4
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80cd 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0xb48>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80c7 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d049      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8210 	beq.w	8004090 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c78:	e20a      	b.n	8004090 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8206 	beq.w	8004090 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c8c:	e200      	b.n	8004090 <HAL_DMA_IRQHandler+0xe08>
 8003c8e:	bf00      	nop
 8003c90:	40020010 	.word	0x40020010
 8003c94:	40020028 	.word	0x40020028
 8003c98:	40020040 	.word	0x40020040
 8003c9c:	40020058 	.word	0x40020058
 8003ca0:	40020070 	.word	0x40020070
 8003ca4:	40020088 	.word	0x40020088
 8003ca8:	400200a0 	.word	0x400200a0
 8003cac:	400200b8 	.word	0x400200b8
 8003cb0:	40020410 	.word	0x40020410
 8003cb4:	40020428 	.word	0x40020428
 8003cb8:	40020440 	.word	0x40020440
 8003cbc:	40020458 	.word	0x40020458
 8003cc0:	40020470 	.word	0x40020470
 8003cc4:	40020488 	.word	0x40020488
 8003cc8:	400204a0 	.word	0x400204a0
 8003ccc:	400204b8 	.word	0x400204b8
 8003cd0:	58025408 	.word	0x58025408
 8003cd4:	5802541c 	.word	0x5802541c
 8003cd8:	58025430 	.word	0x58025430
 8003cdc:	58025444 	.word	0x58025444
 8003ce0:	58025458 	.word	0x58025458
 8003ce4:	5802546c 	.word	0x5802546c
 8003ce8:	58025480 	.word	0x58025480
 8003cec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d160      	bne.n	8003dbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7f      	ldr	r2, [pc, #508]	; (8003efc <HAL_DMA_IRQHandler+0xc74>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04a      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a7d      	ldr	r2, [pc, #500]	; (8003f00 <HAL_DMA_IRQHandler+0xc78>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d045      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a7c      	ldr	r2, [pc, #496]	; (8003f04 <HAL_DMA_IRQHandler+0xc7c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d040      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7a      	ldr	r2, [pc, #488]	; (8003f08 <HAL_DMA_IRQHandler+0xc80>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d03b      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a79      	ldr	r2, [pc, #484]	; (8003f0c <HAL_DMA_IRQHandler+0xc84>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d036      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a77      	ldr	r2, [pc, #476]	; (8003f10 <HAL_DMA_IRQHandler+0xc88>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d031      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a76      	ldr	r2, [pc, #472]	; (8003f14 <HAL_DMA_IRQHandler+0xc8c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02c      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a74      	ldr	r2, [pc, #464]	; (8003f18 <HAL_DMA_IRQHandler+0xc90>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d027      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a73      	ldr	r2, [pc, #460]	; (8003f1c <HAL_DMA_IRQHandler+0xc94>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a71      	ldr	r2, [pc, #452]	; (8003f20 <HAL_DMA_IRQHandler+0xc98>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01d      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a70      	ldr	r2, [pc, #448]	; (8003f24 <HAL_DMA_IRQHandler+0xc9c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d018      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a6e      	ldr	r2, [pc, #440]	; (8003f28 <HAL_DMA_IRQHandler+0xca0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6d      	ldr	r2, [pc, #436]	; (8003f2c <HAL_DMA_IRQHandler+0xca4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a6b      	ldr	r2, [pc, #428]	; (8003f30 <HAL_DMA_IRQHandler+0xca8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6a      	ldr	r2, [pc, #424]	; (8003f34 <HAL_DMA_IRQHandler+0xcac>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xb12>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a68      	ldr	r2, [pc, #416]	; (8003f38 <HAL_DMA_IRQHandler+0xcb0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d108      	bne.n	8003dac <HAL_DMA_IRQHandler+0xb24>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0208 	bic.w	r2, r2, #8
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e007      	b.n	8003dbc <HAL_DMA_IRQHandler+0xb34>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8165 	beq.w	8004090 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dce:	e15f      	b.n	8004090 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	2202      	movs	r2, #2
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80c5 	beq.w	8003f70 <HAL_DMA_IRQHandler+0xce8>
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80bf 	beq.w	8003f70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d018      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 813a 	beq.w	8004094 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e28:	e134      	b.n	8004094 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8130 	beq.w	8004094 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e3c:	e12a      	b.n	8004094 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f040 8089 	bne.w	8003f5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2b      	ldr	r2, [pc, #172]	; (8003efc <HAL_DMA_IRQHandler+0xc74>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d04a      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <HAL_DMA_IRQHandler+0xc78>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d045      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <HAL_DMA_IRQHandler+0xc7c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d040      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a26      	ldr	r2, [pc, #152]	; (8003f08 <HAL_DMA_IRQHandler+0xc80>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d03b      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <HAL_DMA_IRQHandler+0xc84>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d036      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a23      	ldr	r2, [pc, #140]	; (8003f10 <HAL_DMA_IRQHandler+0xc88>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d031      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <HAL_DMA_IRQHandler+0xc8c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d02c      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a20      	ldr	r2, [pc, #128]	; (8003f18 <HAL_DMA_IRQHandler+0xc90>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d027      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <HAL_DMA_IRQHandler+0xc94>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d022      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <HAL_DMA_IRQHandler+0xc98>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01d      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_DMA_IRQHandler+0xc9c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d018      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <HAL_DMA_IRQHandler+0xca0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_DMA_IRQHandler+0xca4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <HAL_DMA_IRQHandler+0xca8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <HAL_DMA_IRQHandler+0xcac>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_DMA_IRQHandler+0xc62>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <HAL_DMA_IRQHandler+0xcb0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d128      	bne.n	8003f3c <HAL_DMA_IRQHandler+0xcb4>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0214 	bic.w	r2, r2, #20
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e027      	b.n	8003f4c <HAL_DMA_IRQHandler+0xcc4>
 8003efc:	40020010 	.word	0x40020010
 8003f00:	40020028 	.word	0x40020028
 8003f04:	40020040 	.word	0x40020040
 8003f08:	40020058 	.word	0x40020058
 8003f0c:	40020070 	.word	0x40020070
 8003f10:	40020088 	.word	0x40020088
 8003f14:	400200a0 	.word	0x400200a0
 8003f18:	400200b8 	.word	0x400200b8
 8003f1c:	40020410 	.word	0x40020410
 8003f20:	40020428 	.word	0x40020428
 8003f24:	40020440 	.word	0x40020440
 8003f28:	40020458 	.word	0x40020458
 8003f2c:	40020470 	.word	0x40020470
 8003f30:	40020488 	.word	0x40020488
 8003f34:	400204a0 	.word	0x400204a0
 8003f38:	400204b8 	.word	0x400204b8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 020a 	bic.w	r2, r2, #10
 8003f4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8097 	beq.w	8004094 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f6e:	e091      	b.n	8004094 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	2208      	movs	r2, #8
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8088 	beq.w	8004096 <HAL_DMA_IRQHandler+0xe0e>
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8082 	beq.w	8004096 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a41      	ldr	r2, [pc, #260]	; (800409c <HAL_DMA_IRQHandler+0xe14>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d04a      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a3f      	ldr	r2, [pc, #252]	; (80040a0 <HAL_DMA_IRQHandler+0xe18>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d045      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a3e      	ldr	r2, [pc, #248]	; (80040a4 <HAL_DMA_IRQHandler+0xe1c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d040      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a3c      	ldr	r2, [pc, #240]	; (80040a8 <HAL_DMA_IRQHandler+0xe20>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d03b      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a3b      	ldr	r2, [pc, #236]	; (80040ac <HAL_DMA_IRQHandler+0xe24>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d036      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a39      	ldr	r2, [pc, #228]	; (80040b0 <HAL_DMA_IRQHandler+0xe28>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d031      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <HAL_DMA_IRQHandler+0xe2c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d02c      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a36      	ldr	r2, [pc, #216]	; (80040b8 <HAL_DMA_IRQHandler+0xe30>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d027      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a35      	ldr	r2, [pc, #212]	; (80040bc <HAL_DMA_IRQHandler+0xe34>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a33      	ldr	r2, [pc, #204]	; (80040c0 <HAL_DMA_IRQHandler+0xe38>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01d      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a32      	ldr	r2, [pc, #200]	; (80040c4 <HAL_DMA_IRQHandler+0xe3c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a30      	ldr	r2, [pc, #192]	; (80040c8 <HAL_DMA_IRQHandler+0xe40>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <HAL_DMA_IRQHandler+0xe44>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <HAL_DMA_IRQHandler+0xe48>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <HAL_DMA_IRQHandler+0xe4c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_DMA_IRQHandler+0xdaa>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <HAL_DMA_IRQHandler+0xe50>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <HAL_DMA_IRQHandler+0xdbc>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 021c 	bic.w	r2, r2, #28
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e007      	b.n	8004054 <HAL_DMA_IRQHandler+0xdcc>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 020e 	bic.w	r2, r2, #14
 8004052:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	2201      	movs	r2, #1
 800405e:	409a      	lsls	r2, r3
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
 800408a:	e004      	b.n	8004096 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800408c:	bf00      	nop
 800408e:	e002      	b.n	8004096 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004090:	bf00      	nop
 8004092:	e000      	b.n	8004096 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004094:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004096:	3728      	adds	r7, #40	; 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40020010 	.word	0x40020010
 80040a0:	40020028 	.word	0x40020028
 80040a4:	40020040 	.word	0x40020040
 80040a8:	40020058 	.word	0x40020058
 80040ac:	40020070 	.word	0x40020070
 80040b0:	40020088 	.word	0x40020088
 80040b4:	400200a0 	.word	0x400200a0
 80040b8:	400200b8 	.word	0x400200b8
 80040bc:	40020410 	.word	0x40020410
 80040c0:	40020428 	.word	0x40020428
 80040c4:	40020440 	.word	0x40020440
 80040c8:	40020458 	.word	0x40020458
 80040cc:	40020470 	.word	0x40020470
 80040d0:	40020488 	.word	0x40020488
 80040d4:	400204a0 	.word	0x400204a0
 80040d8:	400204b8 	.word	0x400204b8

080040dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a7f      	ldr	r2, [pc, #508]	; (80042f8 <DMA_SetConfig+0x21c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d072      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a7d      	ldr	r2, [pc, #500]	; (80042fc <DMA_SetConfig+0x220>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d06d      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a7c      	ldr	r2, [pc, #496]	; (8004300 <DMA_SetConfig+0x224>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d068      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a7a      	ldr	r2, [pc, #488]	; (8004304 <DMA_SetConfig+0x228>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d063      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a79      	ldr	r2, [pc, #484]	; (8004308 <DMA_SetConfig+0x22c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d05e      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a77      	ldr	r2, [pc, #476]	; (800430c <DMA_SetConfig+0x230>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d059      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a76      	ldr	r2, [pc, #472]	; (8004310 <DMA_SetConfig+0x234>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d054      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a74      	ldr	r2, [pc, #464]	; (8004314 <DMA_SetConfig+0x238>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d04f      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a73      	ldr	r2, [pc, #460]	; (8004318 <DMA_SetConfig+0x23c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d04a      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a71      	ldr	r2, [pc, #452]	; (800431c <DMA_SetConfig+0x240>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d045      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a70      	ldr	r2, [pc, #448]	; (8004320 <DMA_SetConfig+0x244>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d040      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a6e      	ldr	r2, [pc, #440]	; (8004324 <DMA_SetConfig+0x248>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d03b      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a6d      	ldr	r2, [pc, #436]	; (8004328 <DMA_SetConfig+0x24c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d036      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6b      	ldr	r2, [pc, #428]	; (800432c <DMA_SetConfig+0x250>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d031      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a6a      	ldr	r2, [pc, #424]	; (8004330 <DMA_SetConfig+0x254>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d02c      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a68      	ldr	r2, [pc, #416]	; (8004334 <DMA_SetConfig+0x258>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d027      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a67      	ldr	r2, [pc, #412]	; (8004338 <DMA_SetConfig+0x25c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d022      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a65      	ldr	r2, [pc, #404]	; (800433c <DMA_SetConfig+0x260>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01d      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a64      	ldr	r2, [pc, #400]	; (8004340 <DMA_SetConfig+0x264>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d018      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a62      	ldr	r2, [pc, #392]	; (8004344 <DMA_SetConfig+0x268>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a61      	ldr	r2, [pc, #388]	; (8004348 <DMA_SetConfig+0x26c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a5f      	ldr	r2, [pc, #380]	; (800434c <DMA_SetConfig+0x270>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a5e      	ldr	r2, [pc, #376]	; (8004350 <DMA_SetConfig+0x274>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <DMA_SetConfig+0x10a>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a5c      	ldr	r2, [pc, #368]	; (8004354 <DMA_SetConfig+0x278>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d101      	bne.n	80041ea <DMA_SetConfig+0x10e>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <DMA_SetConfig+0x110>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00d      	beq.n	800420c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800420a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a39      	ldr	r2, [pc, #228]	; (80042f8 <DMA_SetConfig+0x21c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d04a      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a38      	ldr	r2, [pc, #224]	; (80042fc <DMA_SetConfig+0x220>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d045      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a36      	ldr	r2, [pc, #216]	; (8004300 <DMA_SetConfig+0x224>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d040      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a35      	ldr	r2, [pc, #212]	; (8004304 <DMA_SetConfig+0x228>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d03b      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a33      	ldr	r2, [pc, #204]	; (8004308 <DMA_SetConfig+0x22c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d036      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a32      	ldr	r2, [pc, #200]	; (800430c <DMA_SetConfig+0x230>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d031      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a30      	ldr	r2, [pc, #192]	; (8004310 <DMA_SetConfig+0x234>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02c      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <DMA_SetConfig+0x238>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d027      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2d      	ldr	r2, [pc, #180]	; (8004318 <DMA_SetConfig+0x23c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d022      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2c      	ldr	r2, [pc, #176]	; (800431c <DMA_SetConfig+0x240>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01d      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <DMA_SetConfig+0x244>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d018      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a29      	ldr	r2, [pc, #164]	; (8004324 <DMA_SetConfig+0x248>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a27      	ldr	r2, [pc, #156]	; (8004328 <DMA_SetConfig+0x24c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a26      	ldr	r2, [pc, #152]	; (800432c <DMA_SetConfig+0x250>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a24      	ldr	r2, [pc, #144]	; (8004330 <DMA_SetConfig+0x254>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <DMA_SetConfig+0x1d0>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a23      	ldr	r2, [pc, #140]	; (8004334 <DMA_SetConfig+0x258>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <DMA_SetConfig+0x1d4>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <DMA_SetConfig+0x1d6>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d059      	beq.n	800436a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	223f      	movs	r2, #63	; 0x3f
 80042c0:	409a      	lsls	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d138      	bne.n	8004358 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042f6:	e086      	b.n	8004406 <DMA_SetConfig+0x32a>
 80042f8:	40020010 	.word	0x40020010
 80042fc:	40020028 	.word	0x40020028
 8004300:	40020040 	.word	0x40020040
 8004304:	40020058 	.word	0x40020058
 8004308:	40020070 	.word	0x40020070
 800430c:	40020088 	.word	0x40020088
 8004310:	400200a0 	.word	0x400200a0
 8004314:	400200b8 	.word	0x400200b8
 8004318:	40020410 	.word	0x40020410
 800431c:	40020428 	.word	0x40020428
 8004320:	40020440 	.word	0x40020440
 8004324:	40020458 	.word	0x40020458
 8004328:	40020470 	.word	0x40020470
 800432c:	40020488 	.word	0x40020488
 8004330:	400204a0 	.word	0x400204a0
 8004334:	400204b8 	.word	0x400204b8
 8004338:	58025408 	.word	0x58025408
 800433c:	5802541c 	.word	0x5802541c
 8004340:	58025430 	.word	0x58025430
 8004344:	58025444 	.word	0x58025444
 8004348:	58025458 	.word	0x58025458
 800434c:	5802546c 	.word	0x5802546c
 8004350:	58025480 	.word	0x58025480
 8004354:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
}
 8004368:	e04d      	b.n	8004406 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a29      	ldr	r2, [pc, #164]	; (8004414 <DMA_SetConfig+0x338>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <DMA_SetConfig+0x2de>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a27      	ldr	r2, [pc, #156]	; (8004418 <DMA_SetConfig+0x33c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01d      	beq.n	80043ba <DMA_SetConfig+0x2de>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a26      	ldr	r2, [pc, #152]	; (800441c <DMA_SetConfig+0x340>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <DMA_SetConfig+0x2de>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a24      	ldr	r2, [pc, #144]	; (8004420 <DMA_SetConfig+0x344>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <DMA_SetConfig+0x2de>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a23      	ldr	r2, [pc, #140]	; (8004424 <DMA_SetConfig+0x348>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <DMA_SetConfig+0x2de>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a21      	ldr	r2, [pc, #132]	; (8004428 <DMA_SetConfig+0x34c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <DMA_SetConfig+0x2de>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a20      	ldr	r2, [pc, #128]	; (800442c <DMA_SetConfig+0x350>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <DMA_SetConfig+0x2de>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <DMA_SetConfig+0x354>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <DMA_SetConfig+0x2e2>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <DMA_SetConfig+0x2e4>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2201      	movs	r2, #1
 80043ce:	409a      	lsls	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d108      	bne.n	80043f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	60da      	str	r2, [r3, #12]
}
 80043f4:	e007      	b.n	8004406 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	60da      	str	r2, [r3, #12]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	58025408 	.word	0x58025408
 8004418:	5802541c 	.word	0x5802541c
 800441c:	58025430 	.word	0x58025430
 8004420:	58025444 	.word	0x58025444
 8004424:	58025458 	.word	0x58025458
 8004428:	5802546c 	.word	0x5802546c
 800442c:	58025480 	.word	0x58025480
 8004430:	58025494 	.word	0x58025494

08004434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a42      	ldr	r2, [pc, #264]	; (800454c <DMA_CalcBaseAndBitshift+0x118>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d04a      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a41      	ldr	r2, [pc, #260]	; (8004550 <DMA_CalcBaseAndBitshift+0x11c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d045      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3f      	ldr	r2, [pc, #252]	; (8004554 <DMA_CalcBaseAndBitshift+0x120>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d040      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a3e      	ldr	r2, [pc, #248]	; (8004558 <DMA_CalcBaseAndBitshift+0x124>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d03b      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3c      	ldr	r2, [pc, #240]	; (800455c <DMA_CalcBaseAndBitshift+0x128>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d036      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a3b      	ldr	r2, [pc, #236]	; (8004560 <DMA_CalcBaseAndBitshift+0x12c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d031      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a39      	ldr	r2, [pc, #228]	; (8004564 <DMA_CalcBaseAndBitshift+0x130>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d02c      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a38      	ldr	r2, [pc, #224]	; (8004568 <DMA_CalcBaseAndBitshift+0x134>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d027      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a36      	ldr	r2, [pc, #216]	; (800456c <DMA_CalcBaseAndBitshift+0x138>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d022      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a35      	ldr	r2, [pc, #212]	; (8004570 <DMA_CalcBaseAndBitshift+0x13c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d01d      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a33      	ldr	r2, [pc, #204]	; (8004574 <DMA_CalcBaseAndBitshift+0x140>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a32      	ldr	r2, [pc, #200]	; (8004578 <DMA_CalcBaseAndBitshift+0x144>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a30      	ldr	r2, [pc, #192]	; (800457c <DMA_CalcBaseAndBitshift+0x148>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <DMA_CalcBaseAndBitshift+0x14c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2d      	ldr	r2, [pc, #180]	; (8004584 <DMA_CalcBaseAndBitshift+0x150>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xa8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2c      	ldr	r2, [pc, #176]	; (8004588 <DMA_CalcBaseAndBitshift+0x154>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <DMA_CalcBaseAndBitshift+0xac>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <DMA_CalcBaseAndBitshift+0xae>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d024      	beq.n	8004530 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	3b10      	subs	r3, #16
 80044ee:	4a27      	ldr	r2, [pc, #156]	; (800458c <DMA_CalcBaseAndBitshift+0x158>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	4a24      	ldr	r2, [pc, #144]	; (8004590 <DMA_CalcBaseAndBitshift+0x15c>)
 8004500:	5cd3      	ldrb	r3, [r2, r3]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d908      	bls.n	8004520 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <DMA_CalcBaseAndBitshift+0x160>)
 8004516:	4013      	ands	r3, r2
 8004518:	1d1a      	adds	r2, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	659a      	str	r2, [r3, #88]	; 0x58
 800451e:	e00d      	b.n	800453c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <DMA_CalcBaseAndBitshift+0x160>)
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
 800452e:	e005      	b.n	800453c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40020010 	.word	0x40020010
 8004550:	40020028 	.word	0x40020028
 8004554:	40020040 	.word	0x40020040
 8004558:	40020058 	.word	0x40020058
 800455c:	40020070 	.word	0x40020070
 8004560:	40020088 	.word	0x40020088
 8004564:	400200a0 	.word	0x400200a0
 8004568:	400200b8 	.word	0x400200b8
 800456c:	40020410 	.word	0x40020410
 8004570:	40020428 	.word	0x40020428
 8004574:	40020440 	.word	0x40020440
 8004578:	40020458 	.word	0x40020458
 800457c:	40020470 	.word	0x40020470
 8004580:	40020488 	.word	0x40020488
 8004584:	400204a0 	.word	0x400204a0
 8004588:	400204b8 	.word	0x400204b8
 800458c:	aaaaaaab 	.word	0xaaaaaaab
 8004590:	0800ac0c 	.word	0x0800ac0c
 8004594:	fffffc00 	.word	0xfffffc00

08004598 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d120      	bne.n	80045ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d858      	bhi.n	8004666 <DMA_CheckFifoParam+0xce>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <DMA_CheckFifoParam+0x24>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045df 	.word	0x080045df
 80045c4:	080045cd 	.word	0x080045cd
 80045c8:	08004667 	.word	0x08004667
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d048      	beq.n	800466a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045dc:	e045      	b.n	800466a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045e6:	d142      	bne.n	800466e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045ec:	e03f      	b.n	800466e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f6:	d123      	bne.n	8004640 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d838      	bhi.n	8004672 <DMA_CheckFifoParam+0xda>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <DMA_CheckFifoParam+0x70>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004619 	.word	0x08004619
 800460c:	0800461f 	.word	0x0800461f
 8004610:	08004619 	.word	0x08004619
 8004614:	08004631 	.word	0x08004631
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
        break;
 800461c:	e030      	b.n	8004680 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d025      	beq.n	8004676 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800462e:	e022      	b.n	8004676 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004638:	d11f      	bne.n	800467a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800463e:	e01c      	b.n	800467a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	2b02      	cmp	r3, #2
 8004646:	d902      	bls.n	800464e <DMA_CheckFifoParam+0xb6>
 8004648:	2b03      	cmp	r3, #3
 800464a:	d003      	beq.n	8004654 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800464c:	e018      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
        break;
 8004652:	e015      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
    break;
 8004664:	e00b      	b.n	800467e <DMA_CheckFifoParam+0xe6>
        break;
 8004666:	bf00      	nop
 8004668:	e00a      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 800466a:	bf00      	nop
 800466c:	e008      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 800466e:	bf00      	nop
 8004670:	e006      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 8004672:	bf00      	nop
 8004674:	e004      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
        break;
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
    break;
 800467e:	bf00      	nop
    }
  }

  return status;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a38      	ldr	r2, [pc, #224]	; (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d022      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a36      	ldr	r2, [pc, #216]	; (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01d      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a35      	ldr	r2, [pc, #212]	; (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a33      	ldr	r2, [pc, #204]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a32      	ldr	r2, [pc, #200]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a30      	ldr	r2, [pc, #192]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2f      	ldr	r2, [pc, #188]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2d      	ldr	r2, [pc, #180]	; (80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d101      	bne.n	80046f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01a      	beq.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	3b08      	subs	r3, #8
 8004700:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	461a      	mov	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a24      	ldr	r2, [pc, #144]	; (80047ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800471c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800472c:	e024      	b.n	8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	3b10      	subs	r3, #16
 8004736:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d806      	bhi.n	8004756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d902      	bls.n	8004756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3308      	adds	r3, #8
 8004754:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4b18      	ldr	r3, [pc, #96]	; (80047bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	461a      	mov	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004768:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2201      	movs	r2, #1
 8004772:	409a      	lsls	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	58025408 	.word	0x58025408
 8004788:	5802541c 	.word	0x5802541c
 800478c:	58025430 	.word	0x58025430
 8004790:	58025444 	.word	0x58025444
 8004794:	58025458 	.word	0x58025458
 8004798:	5802546c 	.word	0x5802546c
 800479c:	58025480 	.word	0x58025480
 80047a0:	58025494 	.word	0x58025494
 80047a4:	cccccccd 	.word	0xcccccccd
 80047a8:	16009600 	.word	0x16009600
 80047ac:	58025880 	.word	0x58025880
 80047b0:	aaaaaaab 	.word	0xaaaaaaab
 80047b4:	400204b8 	.word	0x400204b8
 80047b8:	4002040f 	.word	0x4002040f
 80047bc:	10008200 	.word	0x10008200
 80047c0:	40020880 	.word	0x40020880

080047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d04a      	beq.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d847      	bhi.n	8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a25      	ldr	r2, [pc, #148]	; (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d022      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a24      	ldr	r2, [pc, #144]	; (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d01d      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a22      	ldr	r2, [pc, #136]	; (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d018      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a21      	ldr	r2, [pc, #132]	; (8004888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00e      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d009      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004834:	2300      	movs	r3, #0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4b17      	ldr	r3, [pc, #92]	; (800489c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	461a      	mov	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800484c:	671a      	str	r2, [r3, #112]	; 0x70
 800484e:	e009      	b.n	8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a11      	ldr	r2, [pc, #68]	; (80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004862:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	2201      	movs	r2, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	58025408 	.word	0x58025408
 8004880:	5802541c 	.word	0x5802541c
 8004884:	58025430 	.word	0x58025430
 8004888:	58025444 	.word	0x58025444
 800488c:	58025458 	.word	0x58025458
 8004890:	5802546c 	.word	0x5802546c
 8004894:	58025480 	.word	0x58025480
 8004898:	58025494 	.word	0x58025494
 800489c:	1600963f 	.word	0x1600963f
 80048a0:	58025940 	.word	0x58025940
 80048a4:	1000823f 	.word	0x1000823f
 80048a8:	40020940 	.word	0x40020940

080048ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b089      	sub	sp, #36	; 0x24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80048ba:	4b86      	ldr	r3, [pc, #536]	; (8004ad4 <HAL_GPIO_Init+0x228>)
 80048bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048be:	e18c      	b.n	8004bda <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	2101      	movs	r1, #1
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 817e 	beq.w	8004bd4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d005      	beq.n	80048f0 <HAL_GPIO_Init+0x44>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d130      	bne.n	8004952 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	2203      	movs	r2, #3
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004926:	2201      	movs	r2, #1
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 0201 	and.w	r2, r3, #1
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b03      	cmp	r3, #3
 800495c:	d017      	beq.n	800498e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	2203      	movs	r2, #3
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d123      	bne.n	80049e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	08da      	lsrs	r2, r3, #3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3208      	adds	r2, #8
 80049a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	220f      	movs	r2, #15
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	08da      	lsrs	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3208      	adds	r2, #8
 80049dc:	69b9      	ldr	r1, [r7, #24]
 80049de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2203      	movs	r2, #3
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f003 0203 	and.w	r2, r3, #3
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80d8 	beq.w	8004bd4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a24:	4b2c      	ldr	r3, [pc, #176]	; (8004ad8 <HAL_GPIO_Init+0x22c>)
 8004a26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a2a:	4a2b      	ldr	r2, [pc, #172]	; (8004ad8 <HAL_GPIO_Init+0x22c>)
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a34:	4b28      	ldr	r3, [pc, #160]	; (8004ad8 <HAL_GPIO_Init+0x22c>)
 8004a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a42:	4a26      	ldr	r2, [pc, #152]	; (8004adc <HAL_GPIO_Init+0x230>)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	3302      	adds	r3, #2
 8004a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	220f      	movs	r2, #15
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <HAL_GPIO_Init+0x234>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d04a      	beq.n	8004b04 <HAL_GPIO_Init+0x258>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1c      	ldr	r2, [pc, #112]	; (8004ae4 <HAL_GPIO_Init+0x238>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d02b      	beq.n	8004ace <HAL_GPIO_Init+0x222>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <HAL_GPIO_Init+0x23c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d025      	beq.n	8004aca <HAL_GPIO_Init+0x21e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1a      	ldr	r2, [pc, #104]	; (8004aec <HAL_GPIO_Init+0x240>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01f      	beq.n	8004ac6 <HAL_GPIO_Init+0x21a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <HAL_GPIO_Init+0x244>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d019      	beq.n	8004ac2 <HAL_GPIO_Init+0x216>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_GPIO_Init+0x248>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_GPIO_Init+0x212>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_GPIO_Init+0x24c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00d      	beq.n	8004aba <HAL_GPIO_Init+0x20e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a16      	ldr	r2, [pc, #88]	; (8004afc <HAL_GPIO_Init+0x250>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <HAL_GPIO_Init+0x20a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <HAL_GPIO_Init+0x254>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d101      	bne.n	8004ab2 <HAL_GPIO_Init+0x206>
 8004aae:	2309      	movs	r3, #9
 8004ab0:	e029      	b.n	8004b06 <HAL_GPIO_Init+0x25a>
 8004ab2:	230a      	movs	r3, #10
 8004ab4:	e027      	b.n	8004b06 <HAL_GPIO_Init+0x25a>
 8004ab6:	2307      	movs	r3, #7
 8004ab8:	e025      	b.n	8004b06 <HAL_GPIO_Init+0x25a>
 8004aba:	2306      	movs	r3, #6
 8004abc:	e023      	b.n	8004b06 <HAL_GPIO_Init+0x25a>
 8004abe:	2305      	movs	r3, #5
 8004ac0:	e021      	b.n	8004b06 <HAL_GPIO_Init+0x25a>
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	e01f      	b.n	8004b06 <HAL_GPIO_Init+0x25a>
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e01d      	b.n	8004b06 <HAL_GPIO_Init+0x25a>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e01b      	b.n	8004b06 <HAL_GPIO_Init+0x25a>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e019      	b.n	8004b06 <HAL_GPIO_Init+0x25a>
 8004ad2:	bf00      	nop
 8004ad4:	58000080 	.word	0x58000080
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	58000400 	.word	0x58000400
 8004ae0:	58020000 	.word	0x58020000
 8004ae4:	58020400 	.word	0x58020400
 8004ae8:	58020800 	.word	0x58020800
 8004aec:	58020c00 	.word	0x58020c00
 8004af0:	58021000 	.word	0x58021000
 8004af4:	58021400 	.word	0x58021400
 8004af8:	58021800 	.word	0x58021800
 8004afc:	58021c00 	.word	0x58021c00
 8004b00:	58022400 	.word	0x58022400
 8004b04:	2300      	movs	r3, #0
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	f002 0203 	and.w	r2, r2, #3
 8004b0c:	0092      	lsls	r2, r2, #2
 8004b0e:	4093      	lsls	r3, r2
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b16:	4938      	ldr	r1, [pc, #224]	; (8004bf8 <HAL_GPIO_Init+0x34c>)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	089b      	lsrs	r3, r3, #2
 8004b1c:	3302      	adds	r3, #2
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f47f ae6b 	bne.w	80048c0 <HAL_GPIO_Init+0x14>
  }
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	3724      	adds	r7, #36	; 0x24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	58000400 	.word	0x58000400

08004bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	887b      	ldrh	r3, [r7, #2]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
 8004c18:	e001      	b.n	8004c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	807b      	strh	r3, [r7, #2]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c3c:	787b      	ldrb	r3, [r7, #1]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c42:	887a      	ldrh	r2, [r7, #2]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c48:	e003      	b.n	8004c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c4a:	887b      	ldrh	r3, [r7, #2]
 8004c4c:	041a      	lsls	r2, r3, #16
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	619a      	str	r2, [r3, #24]
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d00a      	beq.n	8004c8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c74:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d001      	beq.n	8004c86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e01f      	b.n	8004cc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e01d      	b.n	8004cc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c8a:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f023 0207 	bic.w	r2, r3, #7
 8004c92:	490f      	ldr	r1, [pc, #60]	; (8004cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c9a:	f7fc feb3 	bl	8001a04 <HAL_GetTick>
 8004c9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ca0:	e009      	b.n	8004cb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ca2:	f7fc feaf 	bl	8001a04 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cb0:	d901      	bls.n	8004cb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e007      	b.n	8004cc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc2:	d1ee      	bne.n	8004ca2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	58024800 	.word	0x58024800

08004cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08c      	sub	sp, #48	; 0x30
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e3c8      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8087 	beq.w	8004e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf4:	4b88      	ldr	r3, [pc, #544]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cfe:	4b86      	ldr	r3, [pc, #536]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d007      	beq.n	8004d1a <HAL_RCC_OscConfig+0x46>
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	2b18      	cmp	r3, #24
 8004d0e:	d110      	bne.n	8004d32 <HAL_RCC_OscConfig+0x5e>
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d10b      	bne.n	8004d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d1a:	4b7f      	ldr	r3, [pc, #508]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d06c      	beq.n	8004e00 <HAL_RCC_OscConfig+0x12c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d168      	bne.n	8004e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e3a2      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3a:	d106      	bne.n	8004d4a <HAL_RCC_OscConfig+0x76>
 8004d3c:	4b76      	ldr	r3, [pc, #472]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a75      	ldr	r2, [pc, #468]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e02e      	b.n	8004da8 <HAL_RCC_OscConfig+0xd4>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10c      	bne.n	8004d6c <HAL_RCC_OscConfig+0x98>
 8004d52:	4b71      	ldr	r3, [pc, #452]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a70      	ldr	r2, [pc, #448]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b6e      	ldr	r3, [pc, #440]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6d      	ldr	r2, [pc, #436]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e01d      	b.n	8004da8 <HAL_RCC_OscConfig+0xd4>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCC_OscConfig+0xbc>
 8004d76:	4b68      	ldr	r3, [pc, #416]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a67      	ldr	r2, [pc, #412]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	4b65      	ldr	r3, [pc, #404]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a64      	ldr	r2, [pc, #400]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e00b      	b.n	8004da8 <HAL_RCC_OscConfig+0xd4>
 8004d90:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a60      	ldr	r2, [pc, #384]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b5e      	ldr	r3, [pc, #376]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5d      	ldr	r2, [pc, #372]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d013      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fc fe28 	bl	8001a04 <HAL_GetTick>
 8004db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fc fe24 	bl	8001a04 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e356      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dca:	4b53      	ldr	r3, [pc, #332]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0xe4>
 8004dd6:	e014      	b.n	8004e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fc fe14 	bl	8001a04 <HAL_GetTick>
 8004ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de0:	f7fc fe10 	bl	8001a04 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e342      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004df2:	4b49      	ldr	r3, [pc, #292]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x10c>
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 808c 	beq.w	8004f28 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e10:	4b41      	ldr	r3, [pc, #260]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e18:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d007      	beq.n	8004e36 <HAL_RCC_OscConfig+0x162>
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	2b18      	cmp	r3, #24
 8004e2a:	d137      	bne.n	8004e9c <HAL_RCC_OscConfig+0x1c8>
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d132      	bne.n	8004e9c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e36:	4b38      	ldr	r3, [pc, #224]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_RCC_OscConfig+0x17a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e314      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e4e:	4b32      	ldr	r3, [pc, #200]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 0219 	bic.w	r2, r3, #25
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	492f      	ldr	r1, [pc, #188]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fc fdd0 	bl	8001a04 <HAL_GetTick>
 8004e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fc fdcc 	bl	8001a04 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e2fe      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e7a:	4b27      	ldr	r3, [pc, #156]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e86:	4b24      	ldr	r3, [pc, #144]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	4920      	ldr	r1, [pc, #128]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9a:	e045      	b.n	8004f28 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d026      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ea4:	4b1c      	ldr	r3, [pc, #112]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f023 0219 	bic.w	r2, r3, #25
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4919      	ldr	r1, [pc, #100]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fc fda5 	bl	8001a04 <HAL_GetTick>
 8004eba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fc fda1 	bl	8001a04 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e2d3      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed0:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	490b      	ldr	r1, [pc, #44]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
 8004ef0:	e01a      	b.n	8004f28 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef2:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a08      	ldr	r2, [pc, #32]	; (8004f18 <HAL_RCC_OscConfig+0x244>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efe:	f7fc fd81 	bl	8001a04 <HAL_GetTick>
 8004f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f06:	f7fc fd7d 	bl	8001a04 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d903      	bls.n	8004f1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e2af      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
 8004f18:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f1c:	4b96      	ldr	r3, [pc, #600]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ee      	bne.n	8004f06 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d06a      	beq.n	800500a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f34:	4b90      	ldr	r3, [pc, #576]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f3c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f3e:	4b8e      	ldr	r3, [pc, #568]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d007      	beq.n	8004f5a <HAL_RCC_OscConfig+0x286>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2b18      	cmp	r3, #24
 8004f4e:	d11b      	bne.n	8004f88 <HAL_RCC_OscConfig+0x2b4>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d116      	bne.n	8004f88 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f5a:	4b87      	ldr	r3, [pc, #540]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_RCC_OscConfig+0x29e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	2b80      	cmp	r3, #128	; 0x80
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e282      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f72:	4b81      	ldr	r3, [pc, #516]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	061b      	lsls	r3, r3, #24
 8004f80:	497d      	ldr	r1, [pc, #500]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f86:	e040      	b.n	800500a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d023      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f90:	4b79      	ldr	r3, [pc, #484]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a78      	ldr	r2, [pc, #480]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fc fd32 	bl	8001a04 <HAL_GetTick>
 8004fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fa4:	f7fc fd2e 	bl	8001a04 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e260      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fb6:	4b70      	ldr	r3, [pc, #448]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fc2:	4b6d      	ldr	r3, [pc, #436]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	061b      	lsls	r3, r3, #24
 8004fd0:	4969      	ldr	r1, [pc, #420]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60cb      	str	r3, [r1, #12]
 8004fd6:	e018      	b.n	800500a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fd8:	4b67      	ldr	r3, [pc, #412]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a66      	ldr	r2, [pc, #408]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8004fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fc fd0e 	bl	8001a04 <HAL_GetTick>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fec:	f7fc fd0a 	bl	8001a04 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e23c      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ffe:	4b5e      	ldr	r3, [pc, #376]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d036      	beq.n	8005084 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d019      	beq.n	8005052 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501e:	4b56      	ldr	r3, [pc, #344]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8005020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005022:	4a55      	ldr	r2, [pc, #340]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502a:	f7fc fceb 	bl	8001a04 <HAL_GetTick>
 800502e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005032:	f7fc fce7 	bl	8001a04 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e219      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005044:	4b4c      	ldr	r3, [pc, #304]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8005046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x35e>
 8005050:	e018      	b.n	8005084 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005052:	4b49      	ldr	r3, [pc, #292]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8005054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005056:	4a48      	ldr	r2, [pc, #288]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505e:	f7fc fcd1 	bl	8001a04 <HAL_GetTick>
 8005062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005066:	f7fc fccd 	bl	8001a04 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e1ff      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005078:	4b3f      	ldr	r3, [pc, #252]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f0      	bne.n	8005066 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d036      	beq.n	80050fe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d019      	beq.n	80050cc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005098:	4b37      	ldr	r3, [pc, #220]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a36      	ldr	r2, [pc, #216]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 800509e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050a4:	f7fc fcae 	bl	8001a04 <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050ac:	f7fc fcaa 	bl	8001a04 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e1dc      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050be:	4b2e      	ldr	r3, [pc, #184]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x3d8>
 80050ca:	e018      	b.n	80050fe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050cc:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a29      	ldr	r2, [pc, #164]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 80050d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050d8:	f7fc fc94 	bl	8001a04 <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050e0:	f7fc fc90 	bl	8001a04 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e1c2      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050f2:	4b21      	ldr	r3, [pc, #132]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8086 	beq.w	8005218 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800510c:	4b1b      	ldr	r3, [pc, #108]	; (800517c <HAL_RCC_OscConfig+0x4a8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1a      	ldr	r2, [pc, #104]	; (800517c <HAL_RCC_OscConfig+0x4a8>)
 8005112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005118:	f7fc fc74 	bl	8001a04 <HAL_GetTick>
 800511c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005120:	f7fc fc70 	bl	8001a04 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	; 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e1a2      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <HAL_RCC_OscConfig+0x4a8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d106      	bne.n	8005154 <HAL_RCC_OscConfig+0x480>
 8005146:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a0b      	ldr	r2, [pc, #44]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6713      	str	r3, [r2, #112]	; 0x70
 8005152:	e032      	b.n	80051ba <HAL_RCC_OscConfig+0x4e6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d111      	bne.n	8005180 <HAL_RCC_OscConfig+0x4ac>
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	4a05      	ldr	r2, [pc, #20]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	6713      	str	r3, [r2, #112]	; 0x70
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4a02      	ldr	r2, [pc, #8]	; (8005178 <HAL_RCC_OscConfig+0x4a4>)
 800516e:	f023 0304 	bic.w	r3, r3, #4
 8005172:	6713      	str	r3, [r2, #112]	; 0x70
 8005174:	e021      	b.n	80051ba <HAL_RCC_OscConfig+0x4e6>
 8005176:	bf00      	nop
 8005178:	58024400 	.word	0x58024400
 800517c:	58024800 	.word	0x58024800
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b05      	cmp	r3, #5
 8005186:	d10c      	bne.n	80051a2 <HAL_RCC_OscConfig+0x4ce>
 8005188:	4b83      	ldr	r3, [pc, #524]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	4a82      	ldr	r2, [pc, #520]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800518e:	f043 0304 	orr.w	r3, r3, #4
 8005192:	6713      	str	r3, [r2, #112]	; 0x70
 8005194:	4b80      	ldr	r3, [pc, #512]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	4a7f      	ldr	r2, [pc, #508]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6713      	str	r3, [r2, #112]	; 0x70
 80051a0:	e00b      	b.n	80051ba <HAL_RCC_OscConfig+0x4e6>
 80051a2:	4b7d      	ldr	r3, [pc, #500]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	4a7c      	ldr	r2, [pc, #496]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80051a8:	f023 0301 	bic.w	r3, r3, #1
 80051ac:	6713      	str	r3, [r2, #112]	; 0x70
 80051ae:	4b7a      	ldr	r3, [pc, #488]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	4a79      	ldr	r2, [pc, #484]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80051b4:	f023 0304 	bic.w	r3, r3, #4
 80051b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d015      	beq.n	80051ee <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c2:	f7fc fc1f 	bl	8001a04 <HAL_GetTick>
 80051c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051c8:	e00a      	b.n	80051e0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ca:	f7fc fc1b 	bl	8001a04 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e14b      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051e0:	4b6d      	ldr	r3, [pc, #436]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0ee      	beq.n	80051ca <HAL_RCC_OscConfig+0x4f6>
 80051ec:	e014      	b.n	8005218 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fc fc09 	bl	8001a04 <HAL_GetTick>
 80051f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fc fc05 	bl	8001a04 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	; 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e135      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800520c:	4b62      	ldr	r3, [pc, #392]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800520e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ee      	bne.n	80051f6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 812a 	beq.w	8005476 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005222:	4b5d      	ldr	r3, [pc, #372]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800522a:	2b18      	cmp	r3, #24
 800522c:	f000 80ba 	beq.w	80053a4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	2b02      	cmp	r3, #2
 8005236:	f040 8095 	bne.w	8005364 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523a:	4b57      	ldr	r3, [pc, #348]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a56      	ldr	r2, [pc, #344]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fc fbdd 	bl	8001a04 <HAL_GetTick>
 800524a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524e:	f7fc fbd9 	bl	8001a04 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e10b      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005260:	4b4d      	ldr	r3, [pc, #308]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f0      	bne.n	800524e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800526c:	4b4a      	ldr	r3, [pc, #296]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800526e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005270:	4b4a      	ldr	r3, [pc, #296]	; (800539c <HAL_RCC_OscConfig+0x6c8>)
 8005272:	4013      	ands	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800527c:	0112      	lsls	r2, r2, #4
 800527e:	430a      	orrs	r2, r1
 8005280:	4945      	ldr	r1, [pc, #276]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005282:	4313      	orrs	r3, r2
 8005284:	628b      	str	r3, [r1, #40]	; 0x28
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	3b01      	subs	r3, #1
 800528c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005294:	3b01      	subs	r3, #1
 8005296:	025b      	lsls	r3, r3, #9
 8005298:	b29b      	uxth	r3, r3
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	3b01      	subs	r3, #1
 80052a2:	041b      	lsls	r3, r3, #16
 80052a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	3b01      	subs	r3, #1
 80052b0:	061b      	lsls	r3, r3, #24
 80052b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052b6:	4938      	ldr	r1, [pc, #224]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80052bc:	4b36      	ldr	r3, [pc, #216]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	4a35      	ldr	r2, [pc, #212]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052c8:	4b33      	ldr	r3, [pc, #204]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80052ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052cc:	4b34      	ldr	r3, [pc, #208]	; (80053a0 <HAL_RCC_OscConfig+0x6cc>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052d4:	00d2      	lsls	r2, r2, #3
 80052d6:	4930      	ldr	r1, [pc, #192]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80052dc:	4b2e      	ldr	r3, [pc, #184]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f023 020c 	bic.w	r2, r3, #12
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	492b      	ldr	r1, [pc, #172]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052ee:	4b2a      	ldr	r3, [pc, #168]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	f023 0202 	bic.w	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	4927      	ldr	r1, [pc, #156]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005300:	4b25      	ldr	r3, [pc, #148]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	4a24      	ldr	r2, [pc, #144]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530c:	4b22      	ldr	r3, [pc, #136]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	4a21      	ldr	r2, [pc, #132]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005318:	4b1f      	ldr	r3, [pc, #124]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800531e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005324:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005330:	4b19      	ldr	r3, [pc, #100]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fb62 	bl	8001a04 <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7fc fb5e 	bl	8001a04 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e090      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005356:	4b10      	ldr	r3, [pc, #64]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x670>
 8005362:	e088      	b.n	8005476 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800536a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800536e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fc fb48 	bl	8001a04 <HAL_GetTick>
 8005374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005378:	f7fc fb44 	bl	8001a04 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e076      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_RCC_OscConfig+0x6c4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x6a4>
 8005396:	e06e      	b.n	8005476 <HAL_RCC_OscConfig+0x7a2>
 8005398:	58024400 	.word	0x58024400
 800539c:	fffffc0c 	.word	0xfffffc0c
 80053a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053a4:	4b36      	ldr	r3, [pc, #216]	; (8005480 <HAL_RCC_OscConfig+0x7ac>)
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053aa:	4b35      	ldr	r3, [pc, #212]	; (8005480 <HAL_RCC_OscConfig+0x7ac>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d031      	beq.n	800541c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f003 0203 	and.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d12a      	bne.n	800541c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d122      	bne.n	800541c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d11a      	bne.n	800541c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	0a5b      	lsrs	r3, r3, #9
 80053ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d111      	bne.n	800541c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005406:	429a      	cmp	r2, r3
 8005408:	d108      	bne.n	800541c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	0e1b      	lsrs	r3, r3, #24
 800540e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e02b      	b.n	8005478 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005420:	4b17      	ldr	r3, [pc, #92]	; (8005480 <HAL_RCC_OscConfig+0x7ac>)
 8005422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005424:	08db      	lsrs	r3, r3, #3
 8005426:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800542a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	429a      	cmp	r2, r3
 8005434:	d01f      	beq.n	8005476 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <HAL_RCC_OscConfig+0x7ac>)
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	4a11      	ldr	r2, [pc, #68]	; (8005480 <HAL_RCC_OscConfig+0x7ac>)
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005442:	f7fc fadf 	bl	8001a04 <HAL_GetTick>
 8005446:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005448:	bf00      	nop
 800544a:	f7fc fadb 	bl	8001a04 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	4293      	cmp	r3, r2
 8005454:	d0f9      	beq.n	800544a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HAL_RCC_OscConfig+0x7ac>)
 8005458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545a:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_RCC_OscConfig+0x7b0>)
 800545c:	4013      	ands	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005462:	00d2      	lsls	r2, r2, #3
 8005464:	4906      	ldr	r1, [pc, #24]	; (8005480 <HAL_RCC_OscConfig+0x7ac>)
 8005466:	4313      	orrs	r3, r2
 8005468:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <HAL_RCC_OscConfig+0x7ac>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	4a04      	ldr	r2, [pc, #16]	; (8005480 <HAL_RCC_OscConfig+0x7ac>)
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3730      	adds	r7, #48	; 0x30
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	58024400 	.word	0x58024400
 8005484:	ffff0007 	.word	0xffff0007

08005488 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e19c      	b.n	80057d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800549c:	4b8a      	ldr	r3, [pc, #552]	; (80056c8 <HAL_RCC_ClockConfig+0x240>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d910      	bls.n	80054cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054aa:	4b87      	ldr	r3, [pc, #540]	; (80056c8 <HAL_RCC_ClockConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f023 020f 	bic.w	r2, r3, #15
 80054b2:	4985      	ldr	r1, [pc, #532]	; (80056c8 <HAL_RCC_ClockConfig+0x240>)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ba:	4b83      	ldr	r3, [pc, #524]	; (80056c8 <HAL_RCC_ClockConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d001      	beq.n	80054cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e184      	b.n	80057d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d010      	beq.n	80054fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	4b7b      	ldr	r3, [pc, #492]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d908      	bls.n	80054fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054e8:	4b78      	ldr	r3, [pc, #480]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	4975      	ldr	r1, [pc, #468]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	4b70      	ldr	r3, [pc, #448]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005512:	429a      	cmp	r2, r3
 8005514:	d908      	bls.n	8005528 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005516:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	496a      	ldr	r1, [pc, #424]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005524:	4313      	orrs	r3, r2
 8005526:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d010      	beq.n	8005556 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	4b64      	ldr	r3, [pc, #400]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005540:	429a      	cmp	r2, r3
 8005542:	d908      	bls.n	8005556 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005544:	4b61      	ldr	r3, [pc, #388]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	495e      	ldr	r1, [pc, #376]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005552:	4313      	orrs	r3, r2
 8005554:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d010      	beq.n	8005584 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	4b59      	ldr	r3, [pc, #356]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800556e:	429a      	cmp	r2, r3
 8005570:	d908      	bls.n	8005584 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005572:	4b56      	ldr	r3, [pc, #344]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4953      	ldr	r1, [pc, #332]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005580:	4313      	orrs	r3, r2
 8005582:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d010      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	4b4d      	ldr	r3, [pc, #308]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	429a      	cmp	r2, r3
 800559e:	d908      	bls.n	80055b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a0:	4b4a      	ldr	r3, [pc, #296]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f023 020f 	bic.w	r2, r3, #15
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4947      	ldr	r1, [pc, #284]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d055      	beq.n	800566a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80055be:	4b43      	ldr	r3, [pc, #268]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	4940      	ldr	r1, [pc, #256]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d107      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055d8:	4b3c      	ldr	r3, [pc, #240]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d121      	bne.n	8005628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0f6      	b.n	80057d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d107      	bne.n	8005600 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055f0:	4b36      	ldr	r3, [pc, #216]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d115      	bne.n	8005628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0ea      	b.n	80057d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d107      	bne.n	8005618 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005608:	4b30      	ldr	r3, [pc, #192]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0de      	b.n	80057d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005618:	4b2c      	ldr	r3, [pc, #176]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e0d6      	b.n	80057d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f023 0207 	bic.w	r2, r3, #7
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4925      	ldr	r1, [pc, #148]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005636:	4313      	orrs	r3, r2
 8005638:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563a:	f7fc f9e3 	bl	8001a04 <HAL_GetTick>
 800563e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005640:	e00a      	b.n	8005658 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005642:	f7fc f9df 	bl	8001a04 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e0be      	b.n	80057d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005658:	4b1c      	ldr	r3, [pc, #112]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	429a      	cmp	r2, r3
 8005668:	d1eb      	bne.n	8005642 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d010      	beq.n	8005698 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	4b14      	ldr	r3, [pc, #80]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	429a      	cmp	r2, r3
 8005684:	d208      	bcs.n	8005698 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005686:	4b11      	ldr	r3, [pc, #68]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f023 020f 	bic.w	r2, r3, #15
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	490e      	ldr	r1, [pc, #56]	; (80056cc <HAL_RCC_ClockConfig+0x244>)
 8005694:	4313      	orrs	r3, r2
 8005696:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_ClockConfig+0x240>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d214      	bcs.n	80056d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a6:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <HAL_RCC_ClockConfig+0x240>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 020f 	bic.w	r2, r3, #15
 80056ae:	4906      	ldr	r1, [pc, #24]	; (80056c8 <HAL_RCC_ClockConfig+0x240>)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <HAL_RCC_ClockConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e086      	b.n	80057d6 <HAL_RCC_ClockConfig+0x34e>
 80056c8:	52002000 	.word	0x52002000
 80056cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d208      	bcs.n	80056fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056ec:	4b3c      	ldr	r3, [pc, #240]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	4939      	ldr	r1, [pc, #228]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	4b34      	ldr	r3, [pc, #208]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005716:	429a      	cmp	r2, r3
 8005718:	d208      	bcs.n	800572c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800571a:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	492e      	ldr	r1, [pc, #184]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 8005728:	4313      	orrs	r3, r2
 800572a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	4b28      	ldr	r3, [pc, #160]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005744:	429a      	cmp	r2, r3
 8005746:	d208      	bcs.n	800575a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005748:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	4922      	ldr	r1, [pc, #136]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 8005756:	4313      	orrs	r3, r2
 8005758:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d010      	beq.n	8005788 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005772:	429a      	cmp	r2, r3
 8005774:	d208      	bcs.n	8005788 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005776:	4b1a      	ldr	r3, [pc, #104]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	4917      	ldr	r1, [pc, #92]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 8005784:	4313      	orrs	r3, r2
 8005786:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005788:	f000 f834 	bl	80057f4 <HAL_RCC_GetSysClockFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	4912      	ldr	r1, [pc, #72]	; (80057e4 <HAL_RCC_ClockConfig+0x35c>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
 80057a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057a6:	4b0e      	ldr	r3, [pc, #56]	; (80057e0 <HAL_RCC_ClockConfig+0x358>)
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	4a0d      	ldr	r2, [pc, #52]	; (80057e4 <HAL_RCC_ClockConfig+0x35c>)
 80057b0:	5cd3      	ldrb	r3, [r2, r3]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <HAL_RCC_ClockConfig+0x360>)
 80057be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057c0:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <HAL_RCC_ClockConfig+0x364>)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <HAL_RCC_ClockConfig+0x368>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fc f8d0 	bl	8001970 <HAL_InitTick>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	58024400 	.word	0x58024400
 80057e4:	0800abfc 	.word	0x0800abfc
 80057e8:	24000008 	.word	0x24000008
 80057ec:	24000004 	.word	0x24000004
 80057f0:	2400000c 	.word	0x2400000c

080057f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b089      	sub	sp, #36	; 0x24
 80057f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057fa:	4bb3      	ldr	r3, [pc, #716]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005802:	2b18      	cmp	r3, #24
 8005804:	f200 8155 	bhi.w	8005ab2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005808:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <HAL_RCC_GetSysClockFreq+0x1c>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005875 	.word	0x08005875
 8005814:	08005ab3 	.word	0x08005ab3
 8005818:	08005ab3 	.word	0x08005ab3
 800581c:	08005ab3 	.word	0x08005ab3
 8005820:	08005ab3 	.word	0x08005ab3
 8005824:	08005ab3 	.word	0x08005ab3
 8005828:	08005ab3 	.word	0x08005ab3
 800582c:	08005ab3 	.word	0x08005ab3
 8005830:	0800589b 	.word	0x0800589b
 8005834:	08005ab3 	.word	0x08005ab3
 8005838:	08005ab3 	.word	0x08005ab3
 800583c:	08005ab3 	.word	0x08005ab3
 8005840:	08005ab3 	.word	0x08005ab3
 8005844:	08005ab3 	.word	0x08005ab3
 8005848:	08005ab3 	.word	0x08005ab3
 800584c:	08005ab3 	.word	0x08005ab3
 8005850:	080058a1 	.word	0x080058a1
 8005854:	08005ab3 	.word	0x08005ab3
 8005858:	08005ab3 	.word	0x08005ab3
 800585c:	08005ab3 	.word	0x08005ab3
 8005860:	08005ab3 	.word	0x08005ab3
 8005864:	08005ab3 	.word	0x08005ab3
 8005868:	08005ab3 	.word	0x08005ab3
 800586c:	08005ab3 	.word	0x08005ab3
 8005870:	080058a7 	.word	0x080058a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005874:	4b94      	ldr	r3, [pc, #592]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005880:	4b91      	ldr	r3, [pc, #580]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	08db      	lsrs	r3, r3, #3
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	4a90      	ldr	r2, [pc, #576]	; (8005acc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800588c:	fa22 f303 	lsr.w	r3, r2, r3
 8005890:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005892:	e111      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005894:	4b8d      	ldr	r3, [pc, #564]	; (8005acc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005896:	61bb      	str	r3, [r7, #24]
      break;
 8005898:	e10e      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800589a:	4b8d      	ldr	r3, [pc, #564]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800589c:	61bb      	str	r3, [r7, #24]
      break;
 800589e:	e10b      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80058a0:	4b8c      	ldr	r3, [pc, #560]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80058a2:	61bb      	str	r3, [r7, #24]
      break;
 80058a4:	e108      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058a6:	4b88      	ldr	r3, [pc, #544]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80058b0:	4b85      	ldr	r3, [pc, #532]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	091b      	lsrs	r3, r3, #4
 80058b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80058bc:	4b82      	ldr	r3, [pc, #520]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80058c6:	4b80      	ldr	r3, [pc, #512]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80e1 	beq.w	8005aac <HAL_RCC_GetSysClockFreq+0x2b8>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	f000 8083 	beq.w	80059f8 <HAL_RCC_GetSysClockFreq+0x204>
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	f200 80a1 	bhi.w	8005a3c <HAL_RCC_GetSysClockFreq+0x248>
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x114>
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d056      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005906:	e099      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005908:	4b6f      	ldr	r3, [pc, #444]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02d      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005914:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	08db      	lsrs	r3, r3, #3
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	4a6b      	ldr	r2, [pc, #428]	; (8005acc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593e:	4b62      	ldr	r3, [pc, #392]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005952:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800596e:	e087      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005adc <HAL_RCC_GetSysClockFreq+0x2e8>
 800597e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005982:	4b51      	ldr	r3, [pc, #324]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005992:	ed97 6a02 	vldr	s12, [r7, #8]
 8005996:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800599a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059b2:	e065      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059be:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005ae0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c6:	4b40      	ldr	r3, [pc, #256]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059f6:	e043      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005ae4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0a:	4b2f      	ldr	r3, [pc, #188]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a3a:	e021      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005ae0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a4e:	4b1e      	ldr	r3, [pc, #120]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005ad8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a80:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	0a5b      	lsrs	r3, r3, #9
 8005a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a98:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa4:	ee17 3a90 	vmov	r3, s15
 8005aa8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005aaa:	e005      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61bb      	str	r3, [r7, #24]
      break;
 8005ab0:	e002      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005ab2:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ab4:	61bb      	str	r3, [r7, #24]
      break;
 8005ab6:	bf00      	nop
  }

  return sysclockfreq;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3724      	adds	r7, #36	; 0x24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	03d09000 	.word	0x03d09000
 8005ad0:	003d0900 	.word	0x003d0900
 8005ad4:	017d7840 	.word	0x017d7840
 8005ad8:	46000000 	.word	0x46000000
 8005adc:	4c742400 	.word	0x4c742400
 8005ae0:	4a742400 	.word	0x4a742400
 8005ae4:	4bbebc20 	.word	0x4bbebc20

08005ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005aee:	f7ff fe81 	bl	80057f4 <HAL_RCC_GetSysClockFreq>
 8005af2:	4602      	mov	r2, r0
 8005af4:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <HAL_RCC_GetHCLKFreq+0x50>)
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	0a1b      	lsrs	r3, r3, #8
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	490f      	ldr	r1, [pc, #60]	; (8005b3c <HAL_RCC_GetHCLKFreq+0x54>)
 8005b00:	5ccb      	ldrb	r3, [r1, r3]
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <HAL_RCC_GetHCLKFreq+0x54>)
 8005b16:	5cd3      	ldrb	r3, [r2, r3]
 8005b18:	f003 031f 	and.w	r3, r3, #31
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b22:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b26:	4a07      	ldr	r2, [pc, #28]	; (8005b44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b2c:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	0800abfc 	.word	0x0800abfc
 8005b40:	24000008 	.word	0x24000008
 8005b44:	24000004 	.word	0x24000004

08005b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b4c:	f7ff ffcc 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 8005b50:	4602      	mov	r2, r0
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	091b      	lsrs	r3, r3, #4
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	4904      	ldr	r1, [pc, #16]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b5e:	5ccb      	ldrb	r3, [r1, r3]
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	58024400 	.word	0x58024400
 8005b70:	0800abfc 	.word	0x0800abfc

08005b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b78:	f7ff ffb6 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4904      	ldr	r1, [pc, #16]	; (8005b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	f003 031f 	and.w	r3, r3, #31
 8005b90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	0800abfc 	.word	0x0800abfc

08005ba0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba4:	b0c6      	sub	sp, #280	; 0x118
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005bc4:	2500      	movs	r5, #0
 8005bc6:	ea54 0305 	orrs.w	r3, r4, r5
 8005bca:	d049      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bd6:	d02f      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005bd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bdc:	d828      	bhi.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be2:	d01a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be8:	d822      	bhi.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf2:	d007      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005bf4:	e01c      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf6:	4bab      	ldr	r3, [pc, #684]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	4aaa      	ldr	r2, [pc, #680]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c02:	e01a      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c08:	3308      	adds	r3, #8
 8005c0a:	2102      	movs	r1, #2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 fc25 	bl	800745c <RCCEx_PLL2_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c18:	e00f      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1e:	3328      	adds	r3, #40	; 0x28
 8005c20:	2102      	movs	r1, #2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f001 fccc 	bl	80075c0 <RCCEx_PLL3_Config>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c2e:	e004      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c36:	e000      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c42:	4b98      	ldr	r3, [pc, #608]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c46:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c50:	4a94      	ldr	r2, [pc, #592]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c52:	430b      	orrs	r3, r1
 8005c54:	6513      	str	r3, [r2, #80]	; 0x50
 8005c56:	e003      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005c6c:	f04f 0900 	mov.w	r9, #0
 8005c70:	ea58 0309 	orrs.w	r3, r8, r9
 8005c74:	d047      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d82a      	bhi.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005c9d 	.word	0x08005c9d
 8005c8c:	08005cab 	.word	0x08005cab
 8005c90:	08005cc1 	.word	0x08005cc1
 8005c94:	08005cdf 	.word	0x08005cdf
 8005c98:	08005cdf 	.word	0x08005cdf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b81      	ldr	r3, [pc, #516]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	4a80      	ldr	r2, [pc, #512]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ca8:	e01a      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cae:	3308      	adds	r3, #8
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 fbd2 	bl	800745c <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cbe:	e00f      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc4:	3328      	adds	r3, #40	; 0x28
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 fc79 	bl	80075c0 <RCCEx_PLL3_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cd4:	e004      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cdc:	e000      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ce8:	4b6e      	ldr	r3, [pc, #440]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cec:	f023 0107 	bic.w	r1, r3, #7
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf6:	4a6b      	ldr	r2, [pc, #428]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6513      	str	r3, [r2, #80]	; 0x50
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005d12:	f04f 0b00 	mov.w	fp, #0
 8005d16:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d1a:	d05b      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d24:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005d28:	d03b      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005d2a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005d2e:	d834      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d34:	d037      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d3a:	d82e      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d40:	d033      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005d42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d46:	d828      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4c:	d01a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d52:	d822      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d5c:	d007      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005d5e:	e01c      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d60:	4b50      	ldr	r3, [pc, #320]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	4a4f      	ldr	r2, [pc, #316]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d6c:	e01e      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d72:	3308      	adds	r3, #8
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 fb70 	bl	800745c <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d82:	e013      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d88:	3328      	adds	r3, #40	; 0x28
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 fc17 	bl	80075c0 <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d98:	e008      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005da0:	e004      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005da2:	bf00      	nop
 8005da4:	e002      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005db4:	4b3b      	ldr	r3, [pc, #236]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dc4:	4a37      	ldr	r2, [pc, #220]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8005dca:	e003      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005dd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005de0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005de4:	2300      	movs	r3, #0
 8005de6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005dea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005dee:	460b      	mov	r3, r1
 8005df0:	4313      	orrs	r3, r2
 8005df2:	d05d      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dfc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005e00:	d03b      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005e06:	d834      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e0c:	d037      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005e0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e12:	d82e      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e18:	d033      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005e1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e1e:	d828      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e24:	d01a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e2a:	d822      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e34:	d007      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e36:	e01c      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e38:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e44:	e01e      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 fb04 	bl	800745c <RCCEx_PLL2_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e5a:	e013      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e60:	3328      	adds	r3, #40	; 0x28
 8005e62:	2100      	movs	r1, #0
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 fbab 	bl	80075c0 <RCCEx_PLL3_Config>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e70:	e008      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e78:	e004      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e7a:	bf00      	nop
 8005e7c:	e002      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10d      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e90:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e9c:	4a01      	ldr	r2, [pc, #4]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e9e:	430b      	orrs	r3, r1
 8005ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ea2:	e005      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005eac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005ebc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ec6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	d03a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed6:	2b30      	cmp	r3, #48	; 0x30
 8005ed8:	d01f      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005eda:	2b30      	cmp	r3, #48	; 0x30
 8005edc:	d819      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d00c      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d815      	bhi.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d019      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d111      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eee:	4baa      	ldr	r3, [pc, #680]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	4aa9      	ldr	r2, [pc, #676]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005efa:	e011      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f00:	3308      	adds	r3, #8
 8005f02:	2102      	movs	r1, #2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 faa9 	bl	800745c <RCCEx_PLL2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f10:	e006      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f18:	e002      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f28:	4b9b      	ldr	r3, [pc, #620]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	4a98      	ldr	r2, [pc, #608]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f3c:	e003      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f56:	2300      	movs	r3, #0
 8005f58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005f60:	460b      	mov	r3, r1
 8005f62:	4313      	orrs	r3, r2
 8005f64:	d051      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f70:	d035      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f76:	d82e      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f7c:	d031      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005f7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f82:	d828      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f88:	d01a      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8e:	d822      	bhi.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f98:	d007      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005f9a:	e01c      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f9c:	4b7e      	ldr	r3, [pc, #504]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	4a7d      	ldr	r2, [pc, #500]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fa8:	e01c      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fae:	3308      	adds	r3, #8
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f001 fa52 	bl	800745c <RCCEx_PLL2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fbe:	e011      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc4:	3328      	adds	r3, #40	; 0x28
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 faf9 	bl	80075c0 <RCCEx_PLL3_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005fd4:	e006      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005fdc:	e002      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005fde:	bf00      	nop
 8005fe0:	e000      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fec:	4b6a      	ldr	r3, [pc, #424]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	4a67      	ldr	r2, [pc, #412]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	6513      	str	r3, [r2, #80]	; 0x50
 8006000:	e003      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006002:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006006:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800600a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006016:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800601a:	2300      	movs	r3, #0
 800601c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006020:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006024:	460b      	mov	r3, r1
 8006026:	4313      	orrs	r3, r2
 8006028:	d053      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800602a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006034:	d033      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006036:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800603a:	d82c      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800603c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006040:	d02f      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006042:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006046:	d826      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006048:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800604c:	d02b      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800604e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006052:	d820      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006058:	d012      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800605a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800605e:	d81a      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d022      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006068:	d115      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800606a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606e:	3308      	adds	r3, #8
 8006070:	2101      	movs	r1, #1
 8006072:	4618      	mov	r0, r3
 8006074:	f001 f9f2 	bl	800745c <RCCEx_PLL2_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800607e:	e015      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006084:	3328      	adds	r3, #40	; 0x28
 8006086:	2101      	movs	r1, #1
 8006088:	4618      	mov	r0, r3
 800608a:	f001 fa99 	bl	80075c0 <RCCEx_PLL3_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006094:	e00a      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800609c:	e006      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800609e:	bf00      	nop
 80060a0:	e004      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060a2:	bf00      	nop
 80060a4:	e002      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060a6:	bf00      	nop
 80060a8:	e000      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80060b4:	4b38      	ldr	r3, [pc, #224]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c2:	4a35      	ldr	r2, [pc, #212]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6513      	str	r3, [r2, #80]	; 0x50
 80060c8:	e003      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80060de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060e2:	2300      	movs	r3, #0
 80060e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060e8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060ec:	460b      	mov	r3, r1
 80060ee:	4313      	orrs	r3, r2
 80060f0:	d058      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060fe:	d033      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006104:	d82c      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d02f      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800610c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006110:	d826      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006112:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006116:	d02b      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006118:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800611c:	d820      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800611e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006122:	d012      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006128:	d81a      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d022      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800612e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006132:	d115      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006138:	3308      	adds	r3, #8
 800613a:	2101      	movs	r1, #1
 800613c:	4618      	mov	r0, r3
 800613e:	f001 f98d 	bl	800745c <RCCEx_PLL2_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006148:	e015      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800614a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614e:	3328      	adds	r3, #40	; 0x28
 8006150:	2101      	movs	r1, #1
 8006152:	4618      	mov	r0, r3
 8006154:	f001 fa34 	bl	80075c0 <RCCEx_PLL3_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800615e:	e00a      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006166:	e006      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006168:	bf00      	nop
 800616a:	e004      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800616c:	bf00      	nop
 800616e:	e002      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006170:	bf00      	nop
 8006172:	e000      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006176:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10e      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800617e:	4b06      	ldr	r3, [pc, #24]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006182:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800618a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800618e:	4a02      	ldr	r2, [pc, #8]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006190:	430b      	orrs	r3, r1
 8006192:	6593      	str	r3, [r2, #88]	; 0x58
 8006194:	e006      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006196:	bf00      	nop
 8006198:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80061b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80061be:	460b      	mov	r3, r1
 80061c0:	4313      	orrs	r3, r2
 80061c2:	d037      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ce:	d00e      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80061d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d4:	d816      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d018      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80061da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061de:	d111      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e0:	4bc4      	ldr	r3, [pc, #784]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	4ac3      	ldr	r2, [pc, #780]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061ec:	e00f      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f2:	3308      	adds	r3, #8
 80061f4:	2101      	movs	r1, #1
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 f930 	bl	800745c <RCCEx_PLL2_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006202:	e004      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800620a:	e000      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800620c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006216:	4bb7      	ldr	r3, [pc, #732]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006224:	4ab3      	ldr	r2, [pc, #716]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006226:	430b      	orrs	r3, r1
 8006228:	6513      	str	r3, [r2, #80]	; 0x50
 800622a:	e003      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006230:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006244:	2300      	movs	r3, #0
 8006246:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800624a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800624e:	460b      	mov	r3, r1
 8006250:	4313      	orrs	r3, r2
 8006252:	d039      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625a:	2b03      	cmp	r3, #3
 800625c:	d81c      	bhi.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	080062a1 	.word	0x080062a1
 8006268:	08006275 	.word	0x08006275
 800626c:	08006283 	.word	0x08006283
 8006270:	080062a1 	.word	0x080062a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006274:	4b9f      	ldr	r3, [pc, #636]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	4a9e      	ldr	r2, [pc, #632]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800627a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800627e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006280:	e00f      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006286:	3308      	adds	r3, #8
 8006288:	2102      	movs	r1, #2
 800628a:	4618      	mov	r0, r3
 800628c:	f001 f8e6 	bl	800745c <RCCEx_PLL2_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006296:	e004      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800629e:	e000      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80062a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80062aa:	4b92      	ldr	r3, [pc, #584]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ae:	f023 0103 	bic.w	r1, r3, #3
 80062b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b8:	4a8e      	ldr	r2, [pc, #568]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ba:	430b      	orrs	r3, r1
 80062bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062be:	e003      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80062d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062d8:	2300      	movs	r3, #0
 80062da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f000 8099 	beq.w	800641c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ea:	4b83      	ldr	r3, [pc, #524]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a82      	ldr	r2, [pc, #520]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062f6:	f7fb fb85 	bl	8001a04 <HAL_GetTick>
 80062fa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062fe:	e00b      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006300:	f7fb fb80 	bl	8001a04 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b64      	cmp	r3, #100	; 0x64
 800630e:	d903      	bls.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006316:	e005      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006318:	4b77      	ldr	r3, [pc, #476]	; (80064f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0ed      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006324:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006328:	2b00      	cmp	r3, #0
 800632a:	d173      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800632c:	4b71      	ldr	r3, [pc, #452]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800632e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006338:	4053      	eors	r3, r2
 800633a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633e:	2b00      	cmp	r3, #0
 8006340:	d015      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006342:	4b6c      	ldr	r3, [pc, #432]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800634e:	4b69      	ldr	r3, [pc, #420]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	4a68      	ldr	r2, [pc, #416]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006358:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800635a:	4b66      	ldr	r3, [pc, #408]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	4a65      	ldr	r2, [pc, #404]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006364:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006366:	4a63      	ldr	r2, [pc, #396]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006372:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637a:	d118      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fb fb42 	bl	8001a04 <HAL_GetTick>
 8006380:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006384:	e00d      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006386:	f7fb fb3d 	bl	8001a04 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006390:	1ad2      	subs	r2, r2, r3
 8006392:	f241 3388 	movw	r3, #5000	; 0x1388
 8006396:	429a      	cmp	r2, r3
 8006398:	d903      	bls.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80063a0:	e005      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063a2:	4b54      	ldr	r3, [pc, #336]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0eb      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80063ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d129      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c6:	d10e      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80063c8:	4b4a      	ldr	r3, [pc, #296]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063d8:	091a      	lsrs	r2, r3, #4
 80063da:	4b48      	ldr	r3, [pc, #288]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80063dc:	4013      	ands	r3, r2
 80063de:	4a45      	ldr	r2, [pc, #276]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e0:	430b      	orrs	r3, r1
 80063e2:	6113      	str	r3, [r2, #16]
 80063e4:	e005      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80063e6:	4b43      	ldr	r3, [pc, #268]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	4a42      	ldr	r2, [pc, #264]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80063f0:	6113      	str	r3, [r2, #16]
 80063f2:	4b40      	ldr	r3, [pc, #256]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006402:	4a3c      	ldr	r2, [pc, #240]	; (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006404:	430b      	orrs	r3, r1
 8006406:	6713      	str	r3, [r2, #112]	; 0x70
 8006408:	e008      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800640a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800640e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006412:	e003      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006418:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f002 0301 	and.w	r3, r2, #1
 8006428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800642c:	2300      	movs	r3, #0
 800642e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006432:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006436:	460b      	mov	r3, r1
 8006438:	4313      	orrs	r3, r2
 800643a:	f000 808f 	beq.w	800655c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800643e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006444:	2b28      	cmp	r3, #40	; 0x28
 8006446:	d871      	bhi.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006448:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006535 	.word	0x08006535
 8006454:	0800652d 	.word	0x0800652d
 8006458:	0800652d 	.word	0x0800652d
 800645c:	0800652d 	.word	0x0800652d
 8006460:	0800652d 	.word	0x0800652d
 8006464:	0800652d 	.word	0x0800652d
 8006468:	0800652d 	.word	0x0800652d
 800646c:	0800652d 	.word	0x0800652d
 8006470:	08006501 	.word	0x08006501
 8006474:	0800652d 	.word	0x0800652d
 8006478:	0800652d 	.word	0x0800652d
 800647c:	0800652d 	.word	0x0800652d
 8006480:	0800652d 	.word	0x0800652d
 8006484:	0800652d 	.word	0x0800652d
 8006488:	0800652d 	.word	0x0800652d
 800648c:	0800652d 	.word	0x0800652d
 8006490:	08006517 	.word	0x08006517
 8006494:	0800652d 	.word	0x0800652d
 8006498:	0800652d 	.word	0x0800652d
 800649c:	0800652d 	.word	0x0800652d
 80064a0:	0800652d 	.word	0x0800652d
 80064a4:	0800652d 	.word	0x0800652d
 80064a8:	0800652d 	.word	0x0800652d
 80064ac:	0800652d 	.word	0x0800652d
 80064b0:	08006535 	.word	0x08006535
 80064b4:	0800652d 	.word	0x0800652d
 80064b8:	0800652d 	.word	0x0800652d
 80064bc:	0800652d 	.word	0x0800652d
 80064c0:	0800652d 	.word	0x0800652d
 80064c4:	0800652d 	.word	0x0800652d
 80064c8:	0800652d 	.word	0x0800652d
 80064cc:	0800652d 	.word	0x0800652d
 80064d0:	08006535 	.word	0x08006535
 80064d4:	0800652d 	.word	0x0800652d
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	0800652d 	.word	0x0800652d
 80064e0:	0800652d 	.word	0x0800652d
 80064e4:	0800652d 	.word	0x0800652d
 80064e8:	0800652d 	.word	0x0800652d
 80064ec:	0800652d 	.word	0x0800652d
 80064f0:	08006535 	.word	0x08006535
 80064f4:	58024400 	.word	0x58024400
 80064f8:	58024800 	.word	0x58024800
 80064fc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006504:	3308      	adds	r3, #8
 8006506:	2101      	movs	r1, #1
 8006508:	4618      	mov	r0, r3
 800650a:	f000 ffa7 	bl	800745c <RCCEx_PLL2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006514:	e00f      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651a:	3328      	adds	r3, #40	; 0x28
 800651c:	2101      	movs	r1, #1
 800651e:	4618      	mov	r0, r3
 8006520:	f001 f84e 	bl	80075c0 <RCCEx_PLL3_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800652a:	e004      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006536:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800653e:	4bbf      	ldr	r3, [pc, #764]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800654c:	4abb      	ldr	r2, [pc, #748]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800654e:	430b      	orrs	r3, r1
 8006550:	6553      	str	r3, [r2, #84]	; 0x54
 8006552:	e003      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006554:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006558:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	f002 0302 	and.w	r3, r2, #2
 8006568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800656c:	2300      	movs	r3, #0
 800656e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006572:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006576:	460b      	mov	r3, r1
 8006578:	4313      	orrs	r3, r2
 800657a:	d041      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006582:	2b05      	cmp	r3, #5
 8006584:	d824      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006586:	a201      	add	r2, pc, #4	; (adr r2, 800658c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065d9 	.word	0x080065d9
 8006590:	080065a5 	.word	0x080065a5
 8006594:	080065bb 	.word	0x080065bb
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065d9 	.word	0x080065d9
 80065a0:	080065d9 	.word	0x080065d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a8:	3308      	adds	r3, #8
 80065aa:	2101      	movs	r1, #1
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 ff55 	bl	800745c <RCCEx_PLL2_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065b8:	e00f      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065be:	3328      	adds	r3, #40	; 0x28
 80065c0:	2101      	movs	r1, #1
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fffc 	bl	80075c0 <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80065ce:	e004      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065d6:	e000      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80065d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80065e2:	4b96      	ldr	r3, [pc, #600]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e6:	f023 0107 	bic.w	r1, r3, #7
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f0:	4a92      	ldr	r2, [pc, #584]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065f2:	430b      	orrs	r3, r1
 80065f4:	6553      	str	r3, [r2, #84]	; 0x54
 80065f6:	e003      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f002 0304 	and.w	r3, r2, #4
 800660c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006616:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800661a:	460b      	mov	r3, r1
 800661c:	4313      	orrs	r3, r2
 800661e:	d044      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006628:	2b05      	cmp	r3, #5
 800662a:	d825      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800662c:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800662e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006632:	bf00      	nop
 8006634:	08006681 	.word	0x08006681
 8006638:	0800664d 	.word	0x0800664d
 800663c:	08006663 	.word	0x08006663
 8006640:	08006681 	.word	0x08006681
 8006644:	08006681 	.word	0x08006681
 8006648:	08006681 	.word	0x08006681
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800664c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006650:	3308      	adds	r3, #8
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f000 ff01 	bl	800745c <RCCEx_PLL2_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006660:	e00f      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006666:	3328      	adds	r3, #40	; 0x28
 8006668:	2101      	movs	r1, #1
 800666a:	4618      	mov	r0, r3
 800666c:	f000 ffa8 	bl	80075c0 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006676:	e004      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006682:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800668a:	4b6c      	ldr	r3, [pc, #432]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800668c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668e:	f023 0107 	bic.w	r1, r3, #7
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669a:	4a68      	ldr	r2, [pc, #416]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800669c:	430b      	orrs	r3, r1
 800669e:	6593      	str	r3, [r2, #88]	; 0x58
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f002 0320 	and.w	r3, r2, #32
 80066b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066ba:	2300      	movs	r3, #0
 80066bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4313      	orrs	r3, r2
 80066c8:	d055      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066d6:	d033      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80066d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066dc:	d82c      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e2:	d02f      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80066e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e8:	d826      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80066ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066ee:	d02b      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80066f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066f4:	d820      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80066f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066fa:	d012      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80066fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006700:	d81a      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d022      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800670a:	d115      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006710:	3308      	adds	r3, #8
 8006712:	2100      	movs	r1, #0
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fea1 	bl	800745c <RCCEx_PLL2_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006720:	e015      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006726:	3328      	adds	r3, #40	; 0x28
 8006728:	2102      	movs	r1, #2
 800672a:	4618      	mov	r0, r3
 800672c:	f000 ff48 	bl	80075c0 <RCCEx_PLL3_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006736:	e00a      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800673e:	e006      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006740:	bf00      	nop
 8006742:	e004      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006744:	bf00      	nop
 8006746:	e002      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006748:	bf00      	nop
 800674a:	e000      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800674c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800674e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10b      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006756:	4b39      	ldr	r3, [pc, #228]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006766:	4a35      	ldr	r2, [pc, #212]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006768:	430b      	orrs	r3, r1
 800676a:	6553      	str	r3, [r2, #84]	; 0x54
 800676c:	e003      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006772:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006782:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006786:	2300      	movs	r3, #0
 8006788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800678c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006790:	460b      	mov	r3, r1
 8006792:	4313      	orrs	r3, r2
 8006794:	d058      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800679e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80067a2:	d033      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80067a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80067a8:	d82c      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80067aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ae:	d02f      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80067b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b4:	d826      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80067b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ba:	d02b      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80067bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067c0:	d820      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80067c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c6:	d012      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80067c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067cc:	d81a      	bhi.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d022      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d6:	d115      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067dc:	3308      	adds	r3, #8
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fe3b 	bl	800745c <RCCEx_PLL2_Config>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067ec:	e015      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f2:	3328      	adds	r3, #40	; 0x28
 80067f4:	2102      	movs	r1, #2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fee2 	bl	80075c0 <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006802:	e00a      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800680a:	e006      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800680c:	bf00      	nop
 800680e:	e004      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006810:	bf00      	nop
 8006812:	e002      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10e      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006822:	4b06      	ldr	r3, [pc, #24]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006826:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006832:	4a02      	ldr	r2, [pc, #8]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006834:	430b      	orrs	r3, r1
 8006836:	6593      	str	r3, [r2, #88]	; 0x58
 8006838:	e006      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800683a:	bf00      	nop
 800683c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006840:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006844:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006858:	2300      	movs	r3, #0
 800685a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800685e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006862:	460b      	mov	r3, r1
 8006864:	4313      	orrs	r3, r2
 8006866:	d055      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800686c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006870:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006874:	d033      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006876:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800687a:	d82c      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800687c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006880:	d02f      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006886:	d826      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006888:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800688c:	d02b      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800688e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006892:	d820      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006898:	d012      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800689a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800689e:	d81a      	bhi.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d022      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80068a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a8:	d115      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ae:	3308      	adds	r3, #8
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fdd2 	bl	800745c <RCCEx_PLL2_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068be:	e015      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c4:	3328      	adds	r3, #40	; 0x28
 80068c6:	2102      	movs	r1, #2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fe79 	bl	80075c0 <RCCEx_PLL3_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80068d4:	e00a      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80068dc:	e006      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80068de:	bf00      	nop
 80068e0:	e004      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80068e2:	bf00      	nop
 80068e4:	e002      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80068e6:	bf00      	nop
 80068e8:	e000      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80068ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10b      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80068f4:	4ba0      	ldr	r3, [pc, #640]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006900:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006904:	4a9c      	ldr	r2, [pc, #624]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006906:	430b      	orrs	r3, r1
 8006908:	6593      	str	r3, [r2, #88]	; 0x58
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006910:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f002 0308 	and.w	r3, r2, #8
 8006920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800692a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	d01e      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800693c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006940:	d10c      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006946:	3328      	adds	r3, #40	; 0x28
 8006948:	2102      	movs	r1, #2
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fe38 	bl	80075c0 <RCCEx_PLL3_Config>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800695c:	4b86      	ldr	r3, [pc, #536]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800696c:	4a82      	ldr	r2, [pc, #520]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800696e:	430b      	orrs	r3, r1
 8006970:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f002 0310 	and.w	r3, r2, #16
 800697e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006982:	2300      	movs	r3, #0
 8006984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006988:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800698c:	460b      	mov	r3, r1
 800698e:	4313      	orrs	r3, r2
 8006990:	d01e      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699e:	d10c      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a4:	3328      	adds	r3, #40	; 0x28
 80069a6:	2102      	movs	r1, #2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fe09 	bl	80075c0 <RCCEx_PLL3_Config>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069ba:	4b6f      	ldr	r3, [pc, #444]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ca:	4a6b      	ldr	r2, [pc, #428]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80069dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80069de:	2300      	movs	r3, #0
 80069e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069e2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80069e6:	460b      	mov	r3, r1
 80069e8:	4313      	orrs	r3, r2
 80069ea:	d03e      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80069ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069f8:	d022      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80069fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069fe:	d81b      	bhi.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a08:	d00b      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006a0a:	e015      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a10:	3308      	adds	r3, #8
 8006a12:	2100      	movs	r1, #0
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fd21 	bl	800745c <RCCEx_PLL2_Config>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a20:	e00f      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a26:	3328      	adds	r3, #40	; 0x28
 8006a28:	2102      	movs	r1, #2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fdc8 	bl	80075c0 <RCCEx_PLL3_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a36:	e004      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a3e:	e000      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a4a:	4b4b      	ldr	r3, [pc, #300]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a5a:	4a47      	ldr	r2, [pc, #284]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8006a60:	e003      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006a76:	673b      	str	r3, [r7, #112]	; 0x70
 8006a78:	2300      	movs	r3, #0
 8006a7a:	677b      	str	r3, [r7, #116]	; 0x74
 8006a7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006a80:	460b      	mov	r3, r1
 8006a82:	4313      	orrs	r3, r2
 8006a84:	d03b      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a92:	d01f      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006a94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a98:	d818      	bhi.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a9e:	d003      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006aa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa4:	d007      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006aa6:	e011      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa8:	4b33      	ldr	r3, [pc, #204]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	4a32      	ldr	r2, [pc, #200]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ab4:	e00f      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aba:	3328      	adds	r3, #40	; 0x28
 8006abc:	2101      	movs	r1, #1
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fd7e 	bl	80075c0 <RCCEx_PLL3_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006aca:	e004      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ade:	4b26      	ldr	r3, [pc, #152]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aee:	4a22      	ldr	r2, [pc, #136]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006af0:	430b      	orrs	r3, r1
 8006af2:	6553      	str	r3, [r2, #84]	; 0x54
 8006af4:	e003      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006afa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b10:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006b14:	460b      	mov	r3, r1
 8006b16:	4313      	orrs	r3, r2
 8006b18:	d034      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b28:	d007      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006b2a:	e011      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2c:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a11      	ldr	r2, [pc, #68]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b38:	e00e      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3e:	3308      	adds	r3, #8
 8006b40:	2102      	movs	r1, #2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fc8a 	bl	800745c <RCCEx_PLL2_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b4e:	e003      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10d      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6e:	4a02      	ldr	r2, [pc, #8]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b70:	430b      	orrs	r3, r1
 8006b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b74:	e006      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006b76:	bf00      	nop
 8006b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006b90:	663b      	str	r3, [r7, #96]	; 0x60
 8006b92:	2300      	movs	r3, #0
 8006b94:	667b      	str	r3, [r7, #100]	; 0x64
 8006b96:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	d00c      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba4:	3328      	adds	r3, #40	; 0x28
 8006ba6:	2102      	movs	r1, #2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fd09 	bl	80075c0 <RCCEx_PLL3_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006bc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bc8:	2300      	movs	r3, #0
 8006bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bcc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	d036      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be0:	d018      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be6:	d811      	bhi.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bec:	d014      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf2:	d80b      	bhi.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d011      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfc:	d106      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bfe:	4bb7      	ldr	r3, [pc, #732]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	4ab6      	ldr	r2, [pc, #728]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c0a:	e008      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c12:	e004      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c14:	bf00      	nop
 8006c16:	e002      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c18:	bf00      	nop
 8006c1a:	e000      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c26:	4bad      	ldr	r3, [pc, #692]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c34:	4aa9      	ldr	r2, [pc, #676]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c36:	430b      	orrs	r3, r1
 8006c38:	6553      	str	r3, [r2, #84]	; 0x54
 8006c3a:	e003      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006c50:	653b      	str	r3, [r7, #80]	; 0x50
 8006c52:	2300      	movs	r3, #0
 8006c54:	657b      	str	r3, [r7, #84]	; 0x54
 8006c56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	d009      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c60:	4b9e      	ldr	r3, [pc, #632]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6e:	4a9b      	ldr	r2, [pc, #620]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006c80:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c82:	2300      	movs	r3, #0
 8006c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c86:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	d009      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c90:	4b92      	ldr	r3, [pc, #584]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c94:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c9e:	4a8f      	ldr	r2, [pc, #572]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	d00e      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cc0:	4b86      	ldr	r3, [pc, #536]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	4a85      	ldr	r2, [pc, #532]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cca:	6113      	str	r3, [r2, #16]
 8006ccc:	4b83      	ldr	r3, [pc, #524]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cce:	6919      	ldr	r1, [r3, #16]
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006cd8:	4a80      	ldr	r2, [pc, #512]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006cfa:	4b78      	ldr	r3, [pc, #480]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d08:	4a74      	ldr	r2, [pc, #464]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d20:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006d24:	460b      	mov	r3, r1
 8006d26:	4313      	orrs	r3, r2
 8006d28:	d00a      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d2a:	4b6c      	ldr	r3, [pc, #432]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	4a68      	ldr	r2, [pc, #416]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d52:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006d56:	460b      	mov	r3, r1
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	d011      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d60:	3308      	adds	r3, #8
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fb79 	bl	800745c <RCCEx_PLL2_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	6239      	str	r1, [r7, #32]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
 8006d92:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d96:	460b      	mov	r3, r1
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	d011      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da0:	3308      	adds	r3, #8
 8006da2:	2101      	movs	r1, #1
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fb59 	bl	800745c <RCCEx_PLL2_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006db0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	61b9      	str	r1, [r7, #24]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	61fb      	str	r3, [r7, #28]
 8006dd2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	d011      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de0:	3308      	adds	r3, #8
 8006de2:	2102      	movs	r1, #2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fb39 	bl	800745c <RCCEx_PLL2_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006df0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dfc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	6139      	str	r1, [r7, #16]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e16:	460b      	mov	r3, r1
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	d011      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e20:	3328      	adds	r3, #40	; 0x28
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fbcb 	bl	80075c0 <RCCEx_PLL3_Config>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006e30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e56:	460b      	mov	r3, r1
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	d011      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e60:	3328      	adds	r3, #40	; 0x28
 8006e62:	2101      	movs	r1, #1
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fbab 	bl	80075c0 <RCCEx_PLL3_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	2100      	movs	r1, #0
 8006e8a:	6039      	str	r1, [r7, #0]
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	607b      	str	r3, [r7, #4]
 8006e92:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e96:	460b      	mov	r3, r1
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	d011      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	3328      	adds	r3, #40	; 0x28
 8006ea2:	2102      	movs	r1, #2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fb8b 	bl	80075c0 <RCCEx_PLL3_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ebc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006ec0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e000      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eda:	bf00      	nop
 8006edc:	58024400 	.word	0x58024400

08006ee0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ee4:	f7fe fe00 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	091b      	lsrs	r3, r3, #4
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	4904      	ldr	r1, [pc, #16]	; (8006f08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ef6:	5ccb      	ldrb	r3, [r1, r3]
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	58024400 	.word	0x58024400
 8006f08:	0800abfc 	.word	0x0800abfc

08006f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b089      	sub	sp, #36	; 0x24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f14:	4ba1      	ldr	r3, [pc, #644]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f1e:	4b9f      	ldr	r3, [pc, #636]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	0b1b      	lsrs	r3, r3, #12
 8006f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f2a:	4b9c      	ldr	r3, [pc, #624]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	091b      	lsrs	r3, r3, #4
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f36:	4b99      	ldr	r3, [pc, #612]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	08db      	lsrs	r3, r3, #3
 8006f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8111 	beq.w	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	f000 8083 	beq.w	8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	f200 80a1 	bhi.w	80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d056      	beq.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f76:	e099      	b.n	80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f78:	4b88      	ldr	r3, [pc, #544]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02d      	beq.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f84:	4b85      	ldr	r3, [pc, #532]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	4a84      	ldr	r2, [pc, #528]	; (80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fae:	4b7b      	ldr	r3, [pc, #492]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fde:	e087      	b.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff2:	4b6a      	ldr	r3, [pc, #424]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a03 	vldr	s12, [r7, #12]
 8007006:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800700a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007022:	e065      	b.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007036:	4b59      	ldr	r3, [pc, #356]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007046:	ed97 6a03 	vldr	s12, [r7, #12]
 800704a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800704e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800705a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007066:	e043      	b.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007072:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707a:	4b48      	ldr	r3, [pc, #288]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708a:	ed97 6a03 	vldr	s12, [r7, #12]
 800708e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800709e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070aa:	e021      	b.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070be:	4b37      	ldr	r3, [pc, #220]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80070d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80070f0:	4b2a      	ldr	r3, [pc, #168]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	0a5b      	lsrs	r3, r3, #9
 80070f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800710a:	edd7 6a07 	vldr	s13, [r7, #28]
 800710e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007116:	ee17 2a90 	vmov	r2, s15
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800711e:	4b1f      	ldr	r3, [pc, #124]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	0c1b      	lsrs	r3, r3, #16
 8007124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007134:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007138:	edd7 6a07 	vldr	s13, [r7, #28]
 800713c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007144:	ee17 2a90 	vmov	r2, s15
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800714c:	4b13      	ldr	r3, [pc, #76]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	0e1b      	lsrs	r3, r3, #24
 8007152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007166:	edd7 6a07 	vldr	s13, [r7, #28]
 800716a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007172:	ee17 2a90 	vmov	r2, s15
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800717a:	e008      	b.n	800718e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	609a      	str	r2, [r3, #8]
}
 800718e:	bf00      	nop
 8007190:	3724      	adds	r7, #36	; 0x24
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	58024400 	.word	0x58024400
 80071a0:	03d09000 	.word	0x03d09000
 80071a4:	46000000 	.word	0x46000000
 80071a8:	4c742400 	.word	0x4c742400
 80071ac:	4a742400 	.word	0x4a742400
 80071b0:	4bbebc20 	.word	0x4bbebc20

080071b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b089      	sub	sp, #36	; 0x24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071bc:	4ba1      	ldr	r3, [pc, #644]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80071c6:	4b9f      	ldr	r3, [pc, #636]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	0d1b      	lsrs	r3, r3, #20
 80071cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071d2:	4b9c      	ldr	r3, [pc, #624]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	0a1b      	lsrs	r3, r3, #8
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80071de:	4b99      	ldr	r3, [pc, #612]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	08db      	lsrs	r3, r3, #3
 80071e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	fb02 f303 	mul.w	r3, r2, r3
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8111 	beq.w	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b02      	cmp	r3, #2
 8007206:	f000 8083 	beq.w	8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b02      	cmp	r3, #2
 800720e:	f200 80a1 	bhi.w	8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d056      	beq.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800721e:	e099      	b.n	8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007220:	4b88      	ldr	r3, [pc, #544]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02d      	beq.n	8007288 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800722c:	4b85      	ldr	r3, [pc, #532]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	08db      	lsrs	r3, r3, #3
 8007232:	f003 0303 	and.w	r3, r3, #3
 8007236:	4a84      	ldr	r2, [pc, #528]	; (8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
 800723c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007256:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007266:	ed97 6a03 	vldr	s12, [r7, #12]
 800726a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800726e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800727a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007286:	e087      	b.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b6a      	ldr	r3, [pc, #424]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ca:	e065      	b.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	4b59      	ldr	r3, [pc, #356]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800730e:	e043      	b.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	4b48      	ldr	r3, [pc, #288]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007332:	ed97 6a03 	vldr	s12, [r7, #12]
 8007336:	eddf 5a45 	vldr	s11, [pc, #276]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800733a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007352:	e021      	b.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b37      	ldr	r3, [pc, #220]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a03 	vldr	s12, [r7, #12]
 800737a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007396:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007398:	4b2a      	ldr	r3, [pc, #168]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	0a5b      	lsrs	r3, r3, #9
 800739e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073be:	ee17 2a90 	vmov	r2, s15
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80073c6:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d0:	ee07 3a90 	vmov	s15, r3
 80073d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ec:	ee17 2a90 	vmov	r2, s15
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80073f4:	4b13      	ldr	r3, [pc, #76]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	0e1b      	lsrs	r3, r3, #24
 80073fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800740a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800741a:	ee17 2a90 	vmov	r2, s15
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007422:	e008      	b.n	8007436 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	609a      	str	r2, [r3, #8]
}
 8007436:	bf00      	nop
 8007438:	3724      	adds	r7, #36	; 0x24
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
 8007448:	03d09000 	.word	0x03d09000
 800744c:	46000000 	.word	0x46000000
 8007450:	4c742400 	.word	0x4c742400
 8007454:	4a742400 	.word	0x4a742400
 8007458:	4bbebc20 	.word	0x4bbebc20

0800745c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800746a:	4b53      	ldr	r3, [pc, #332]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b03      	cmp	r3, #3
 8007474:	d101      	bne.n	800747a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e099      	b.n	80075ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800747a:	4b4f      	ldr	r3, [pc, #316]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a4e      	ldr	r2, [pc, #312]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007480:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007486:	f7fa fabd 	bl	8001a04 <HAL_GetTick>
 800748a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800748c:	e008      	b.n	80074a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800748e:	f7fa fab9 	bl	8001a04 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e086      	b.n	80075ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074a0:	4b45      	ldr	r3, [pc, #276]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1f0      	bne.n	800748e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074ac:	4b42      	ldr	r3, [pc, #264]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	031b      	lsls	r3, r3, #12
 80074ba:	493f      	ldr	r1, [pc, #252]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	628b      	str	r3, [r1, #40]	; 0x28
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	025b      	lsls	r3, r3, #9
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	3b01      	subs	r3, #1
 80074dc:	041b      	lsls	r3, r3, #16
 80074de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	061b      	lsls	r3, r3, #24
 80074ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074f0:	4931      	ldr	r1, [pc, #196]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074f6:	4b30      	ldr	r3, [pc, #192]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	492d      	ldr	r1, [pc, #180]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007504:	4313      	orrs	r3, r2
 8007506:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007508:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	f023 0220 	bic.w	r2, r3, #32
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	4928      	ldr	r1, [pc, #160]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007516:	4313      	orrs	r3, r2
 8007518:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800751a:	4b27      	ldr	r3, [pc, #156]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	4a26      	ldr	r2, [pc, #152]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007520:	f023 0310 	bic.w	r3, r3, #16
 8007524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007526:	4b24      	ldr	r3, [pc, #144]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800752a:	4b24      	ldr	r3, [pc, #144]	; (80075bc <RCCEx_PLL2_Config+0x160>)
 800752c:	4013      	ands	r3, r2
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	69d2      	ldr	r2, [r2, #28]
 8007532:	00d2      	lsls	r2, r2, #3
 8007534:	4920      	ldr	r1, [pc, #128]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007536:	4313      	orrs	r3, r2
 8007538:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800753a:	4b1f      	ldr	r3, [pc, #124]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	4a1e      	ldr	r2, [pc, #120]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007540:	f043 0310 	orr.w	r3, r3, #16
 8007544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800754c:	4b1a      	ldr	r3, [pc, #104]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007558:	e00f      	b.n	800757a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d106      	bne.n	800756e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007560:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800756a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800756c:	e005      	b.n	800757a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007572:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007578:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800757a:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a0e      	ldr	r2, [pc, #56]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 8007580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007586:	f7fa fa3d 	bl	8001a04 <HAL_GetTick>
 800758a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800758c:	e008      	b.n	80075a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800758e:	f7fa fa39 	bl	8001a04 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e006      	b.n	80075ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <RCCEx_PLL2_Config+0x15c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0f0      	beq.n	800758e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	58024400 	.word	0x58024400
 80075bc:	ffff0007 	.word	0xffff0007

080075c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075ce:	4b53      	ldr	r3, [pc, #332]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d101      	bne.n	80075de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e099      	b.n	8007712 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80075de:	4b4f      	ldr	r3, [pc, #316]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a4e      	ldr	r2, [pc, #312]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80075e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ea:	f7fa fa0b 	bl	8001a04 <HAL_GetTick>
 80075ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075f0:	e008      	b.n	8007604 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075f2:	f7fa fa07 	bl	8001a04 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d901      	bls.n	8007604 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e086      	b.n	8007712 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007604:	4b45      	ldr	r3, [pc, #276]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f0      	bne.n	80075f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007610:	4b42      	ldr	r3, [pc, #264]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	051b      	lsls	r3, r3, #20
 800761e:	493f      	ldr	r1, [pc, #252]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 8007620:	4313      	orrs	r3, r2
 8007622:	628b      	str	r3, [r1, #40]	; 0x28
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	3b01      	subs	r3, #1
 800762a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	3b01      	subs	r3, #1
 8007634:	025b      	lsls	r3, r3, #9
 8007636:	b29b      	uxth	r3, r3
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	3b01      	subs	r3, #1
 8007640:	041b      	lsls	r3, r3, #16
 8007642:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	3b01      	subs	r3, #1
 800764e:	061b      	lsls	r3, r3, #24
 8007650:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007654:	4931      	ldr	r1, [pc, #196]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 8007656:	4313      	orrs	r3, r2
 8007658:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800765a:	4b30      	ldr	r3, [pc, #192]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	492d      	ldr	r1, [pc, #180]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 8007668:	4313      	orrs	r3, r2
 800766a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800766c:	4b2b      	ldr	r3, [pc, #172]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	4928      	ldr	r1, [pc, #160]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 800767a:	4313      	orrs	r3, r2
 800767c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800767e:	4b27      	ldr	r3, [pc, #156]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	4a26      	ldr	r2, [pc, #152]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 8007684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007688:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800768a:	4b24      	ldr	r3, [pc, #144]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 800768c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800768e:	4b24      	ldr	r3, [pc, #144]	; (8007720 <RCCEx_PLL3_Config+0x160>)
 8007690:	4013      	ands	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	69d2      	ldr	r2, [r2, #28]
 8007696:	00d2      	lsls	r2, r2, #3
 8007698:	4920      	ldr	r1, [pc, #128]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800769e:	4b1f      	ldr	r3, [pc, #124]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	4a1e      	ldr	r2, [pc, #120]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076b0:	4b1a      	ldr	r3, [pc, #104]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	4a19      	ldr	r2, [pc, #100]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076bc:	e00f      	b.n	80076de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d106      	bne.n	80076d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80076c4:	4b15      	ldr	r3, [pc, #84]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	4a14      	ldr	r2, [pc, #80]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076d0:	e005      	b.n	80076de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	4a11      	ldr	r2, [pc, #68]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a0e      	ldr	r2, [pc, #56]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 80076e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ea:	f7fa f98b 	bl	8001a04 <HAL_GetTick>
 80076ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076f0:	e008      	b.n	8007704 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076f2:	f7fa f987 	bl	8001a04 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e006      	b.n	8007712 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <RCCEx_PLL3_Config+0x15c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0f0      	beq.n	80076f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	58024400 	.word	0x58024400
 8007720:	ffff0007 	.word	0xffff0007

08007724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e049      	b.n	80077ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7f9 fb1c 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3304      	adds	r3, #4
 8007760:	4619      	mov	r1, r3
 8007762:	4610      	mov	r0, r2
 8007764:	f000 fbbe 	bl	8007ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e049      	b.n	8007878 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f841 	bl	8007880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f000 fb67 	bl	8007ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d109      	bne.n	80078b8 <HAL_TIM_PWM_Start+0x24>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	bf14      	ite	ne
 80078b0:	2301      	movne	r3, #1
 80078b2:	2300      	moveq	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	e03c      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d109      	bne.n	80078d2 <HAL_TIM_PWM_Start+0x3e>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	bf14      	ite	ne
 80078ca:	2301      	movne	r3, #1
 80078cc:	2300      	moveq	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	e02f      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d109      	bne.n	80078ec <HAL_TIM_PWM_Start+0x58>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	bf14      	ite	ne
 80078e4:	2301      	movne	r3, #1
 80078e6:	2300      	moveq	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	e022      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b0c      	cmp	r3, #12
 80078f0:	d109      	bne.n	8007906 <HAL_TIM_PWM_Start+0x72>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	bf14      	ite	ne
 80078fe:	2301      	movne	r3, #1
 8007900:	2300      	moveq	r3, #0
 8007902:	b2db      	uxtb	r3, r3
 8007904:	e015      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b10      	cmp	r3, #16
 800790a:	d109      	bne.n	8007920 <HAL_TIM_PWM_Start+0x8c>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	bf14      	ite	ne
 8007918:	2301      	movne	r3, #1
 800791a:	2300      	moveq	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	e008      	b.n	8007932 <HAL_TIM_PWM_Start+0x9e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	bf14      	ite	ne
 800792c:	2301      	movne	r3, #1
 800792e:	2300      	moveq	r3, #0
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e0ab      	b.n	8007a92 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <HAL_TIM_PWM_Start+0xb6>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007948:	e023      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b04      	cmp	r3, #4
 800794e:	d104      	bne.n	800795a <HAL_TIM_PWM_Start+0xc6>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007958:	e01b      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d104      	bne.n	800796a <HAL_TIM_PWM_Start+0xd6>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007968:	e013      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b0c      	cmp	r3, #12
 800796e:	d104      	bne.n	800797a <HAL_TIM_PWM_Start+0xe6>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007978:	e00b      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b10      	cmp	r3, #16
 800797e:	d104      	bne.n	800798a <HAL_TIM_PWM_Start+0xf6>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007988:	e003      	b.n	8007992 <HAL_TIM_PWM_Start+0xfe>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2201      	movs	r2, #1
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 febc 	bl	8008718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a3d      	ldr	r2, [pc, #244]	; (8007a9c <HAL_TIM_PWM_Start+0x208>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d013      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x13e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a3c      	ldr	r2, [pc, #240]	; (8007aa0 <HAL_TIM_PWM_Start+0x20c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00e      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x13e>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a3a      	ldr	r2, [pc, #232]	; (8007aa4 <HAL_TIM_PWM_Start+0x210>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d009      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x13e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a39      	ldr	r2, [pc, #228]	; (8007aa8 <HAL_TIM_PWM_Start+0x214>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d004      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x13e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a37      	ldr	r2, [pc, #220]	; (8007aac <HAL_TIM_PWM_Start+0x218>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d101      	bne.n	80079d6 <HAL_TIM_PWM_Start+0x142>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <HAL_TIM_PWM_Start+0x144>
 80079d6:	2300      	movs	r3, #0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a2a      	ldr	r2, [pc, #168]	; (8007a9c <HAL_TIM_PWM_Start+0x208>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d02c      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x1bc>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fe:	d027      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x1bc>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a2a      	ldr	r2, [pc, #168]	; (8007ab0 <HAL_TIM_PWM_Start+0x21c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d022      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x1bc>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a29      	ldr	r2, [pc, #164]	; (8007ab4 <HAL_TIM_PWM_Start+0x220>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d01d      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x1bc>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a27      	ldr	r2, [pc, #156]	; (8007ab8 <HAL_TIM_PWM_Start+0x224>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d018      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x1bc>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a1f      	ldr	r2, [pc, #124]	; (8007aa0 <HAL_TIM_PWM_Start+0x20c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d013      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x1bc>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a23      	ldr	r2, [pc, #140]	; (8007abc <HAL_TIM_PWM_Start+0x228>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00e      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x1bc>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1b      	ldr	r2, [pc, #108]	; (8007aa4 <HAL_TIM_PWM_Start+0x210>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d009      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x1bc>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <HAL_TIM_PWM_Start+0x22c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d004      	beq.n	8007a50 <HAL_TIM_PWM_Start+0x1bc>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ac4 <HAL_TIM_PWM_Start+0x230>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d115      	bne.n	8007a7c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	4b1c      	ldr	r3, [pc, #112]	; (8007ac8 <HAL_TIM_PWM_Start+0x234>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b06      	cmp	r3, #6
 8007a60:	d015      	beq.n	8007a8e <HAL_TIM_PWM_Start+0x1fa>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a68:	d011      	beq.n	8007a8e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a7a:	e008      	b.n	8007a8e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	e000      	b.n	8007a90 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	40010000 	.word	0x40010000
 8007aa0:	40010400 	.word	0x40010400
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	40014400 	.word	0x40014400
 8007aac:	40014800 	.word	0x40014800
 8007ab0:	40000400 	.word	0x40000400
 8007ab4:	40000800 	.word	0x40000800
 8007ab8:	40000c00 	.word	0x40000c00
 8007abc:	40001800 	.word	0x40001800
 8007ac0:	4000e000 	.word	0x4000e000
 8007ac4:	4000e400 	.word	0x4000e400
 8007ac8:	00010007 	.word	0x00010007

08007acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e0ff      	b.n	8007cea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b14      	cmp	r3, #20
 8007af6:	f200 80f0 	bhi.w	8007cda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007afa:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b55 	.word	0x08007b55
 8007b04:	08007cdb 	.word	0x08007cdb
 8007b08:	08007cdb 	.word	0x08007cdb
 8007b0c:	08007cdb 	.word	0x08007cdb
 8007b10:	08007b95 	.word	0x08007b95
 8007b14:	08007cdb 	.word	0x08007cdb
 8007b18:	08007cdb 	.word	0x08007cdb
 8007b1c:	08007cdb 	.word	0x08007cdb
 8007b20:	08007bd7 	.word	0x08007bd7
 8007b24:	08007cdb 	.word	0x08007cdb
 8007b28:	08007cdb 	.word	0x08007cdb
 8007b2c:	08007cdb 	.word	0x08007cdb
 8007b30:	08007c17 	.word	0x08007c17
 8007b34:	08007cdb 	.word	0x08007cdb
 8007b38:	08007cdb 	.word	0x08007cdb
 8007b3c:	08007cdb 	.word	0x08007cdb
 8007b40:	08007c59 	.word	0x08007c59
 8007b44:	08007cdb 	.word	0x08007cdb
 8007b48:	08007cdb 	.word	0x08007cdb
 8007b4c:	08007cdb 	.word	0x08007cdb
 8007b50:	08007c99 	.word	0x08007c99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68b9      	ldr	r1, [r7, #8]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 fa68 	bl	8008030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699a      	ldr	r2, [r3, #24]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0208 	orr.w	r2, r2, #8
 8007b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0204 	bic.w	r2, r2, #4
 8007b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6999      	ldr	r1, [r3, #24]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	619a      	str	r2, [r3, #24]
      break;
 8007b92:	e0a5      	b.n	8007ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 fad8 	bl	8008150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6999      	ldr	r1, [r3, #24]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	021a      	lsls	r2, r3, #8
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	619a      	str	r2, [r3, #24]
      break;
 8007bd4:	e084      	b.n	8007ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fb41 	bl	8008264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69da      	ldr	r2, [r3, #28]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0208 	orr.w	r2, r2, #8
 8007bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69da      	ldr	r2, [r3, #28]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0204 	bic.w	r2, r2, #4
 8007c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69d9      	ldr	r1, [r3, #28]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	61da      	str	r2, [r3, #28]
      break;
 8007c14:	e064      	b.n	8007ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fba9 	bl	8008374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69da      	ldr	r2, [r3, #28]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	69da      	ldr	r2, [r3, #28]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69d9      	ldr	r1, [r3, #28]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	021a      	lsls	r2, r3, #8
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	61da      	str	r2, [r3, #28]
      break;
 8007c56:	e043      	b.n	8007ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68b9      	ldr	r1, [r7, #8]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 fbf2 	bl	8008448 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0208 	orr.w	r2, r2, #8
 8007c72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0204 	bic.w	r2, r2, #4
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	691a      	ldr	r2, [r3, #16]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c96:	e023      	b.n	8007ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fc36 	bl	8008510 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	021a      	lsls	r2, r3, #8
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cd8:	e002      	b.n	8007ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8007cde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop

08007cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_TIM_ConfigClockSource+0x1c>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e0dc      	b.n	8007eca <HAL_TIM_ConfigClockSource+0x1d6>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	4b6a      	ldr	r3, [pc, #424]	; (8007ed4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a64      	ldr	r2, [pc, #400]	; (8007ed8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	f000 80a9 	beq.w	8007e9e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d4c:	4a62      	ldr	r2, [pc, #392]	; (8007ed8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	f200 80ae 	bhi.w	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d54:	4a61      	ldr	r2, [pc, #388]	; (8007edc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	f000 80a1 	beq.w	8007e9e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d5c:	4a5f      	ldr	r2, [pc, #380]	; (8007edc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	f200 80a6 	bhi.w	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d64:	4a5e      	ldr	r2, [pc, #376]	; (8007ee0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	f000 8099 	beq.w	8007e9e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d6c:	4a5c      	ldr	r2, [pc, #368]	; (8007ee0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	f200 809e 	bhi.w	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d78:	f000 8091 	beq.w	8007e9e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d80:	f200 8096 	bhi.w	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d88:	f000 8089 	beq.w	8007e9e <HAL_TIM_ConfigClockSource+0x1aa>
 8007d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d90:	f200 808e 	bhi.w	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d98:	d03e      	beq.n	8007e18 <HAL_TIM_ConfigClockSource+0x124>
 8007d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9e:	f200 8087 	bhi.w	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da6:	f000 8086 	beq.w	8007eb6 <HAL_TIM_ConfigClockSource+0x1c2>
 8007daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dae:	d87f      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007db0:	2b70      	cmp	r3, #112	; 0x70
 8007db2:	d01a      	beq.n	8007dea <HAL_TIM_ConfigClockSource+0xf6>
 8007db4:	2b70      	cmp	r3, #112	; 0x70
 8007db6:	d87b      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007db8:	2b60      	cmp	r3, #96	; 0x60
 8007dba:	d050      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x16a>
 8007dbc:	2b60      	cmp	r3, #96	; 0x60
 8007dbe:	d877      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dc0:	2b50      	cmp	r3, #80	; 0x50
 8007dc2:	d03c      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x14a>
 8007dc4:	2b50      	cmp	r3, #80	; 0x50
 8007dc6:	d873      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d058      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x18a>
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d86f      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dd0:	2b30      	cmp	r3, #48	; 0x30
 8007dd2:	d064      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x1aa>
 8007dd4:	2b30      	cmp	r3, #48	; 0x30
 8007dd6:	d86b      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dd8:	2b20      	cmp	r3, #32
 8007dda:	d060      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x1aa>
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d867      	bhi.n	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d05c      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x1aa>
 8007de4:	2b10      	cmp	r3, #16
 8007de6:	d05a      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x1aa>
 8007de8:	e062      	b.n	8007eb0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dfa:	f000 fc6d 	bl	80086d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	609a      	str	r2, [r3, #8]
      break;
 8007e16:	e04f      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e28:	f000 fc56 	bl	80086d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e3a:	609a      	str	r2, [r3, #8]
      break;
 8007e3c:	e03c      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f000 fbc6 	bl	80085dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2150      	movs	r1, #80	; 0x50
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 fc20 	bl	800869c <TIM_ITRx_SetConfig>
      break;
 8007e5c:	e02c      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f000 fbe5 	bl	800863a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2160      	movs	r1, #96	; 0x60
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fc10 	bl	800869c <TIM_ITRx_SetConfig>
      break;
 8007e7c:	e01c      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f000 fba6 	bl	80085dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2140      	movs	r1, #64	; 0x40
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fc00 	bl	800869c <TIM_ITRx_SetConfig>
      break;
 8007e9c:	e00c      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f000 fbf7 	bl	800869c <TIM_ITRx_SetConfig>
      break;
 8007eae:	e003      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb4:	e000      	b.n	8007eb8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	ffceff88 	.word	0xffceff88
 8007ed8:	00100040 	.word	0x00100040
 8007edc:	00100030 	.word	0x00100030
 8007ee0:	00100020 	.word	0x00100020

08007ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a44      	ldr	r2, [pc, #272]	; (8008008 <TIM_Base_SetConfig+0x124>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d013      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f02:	d00f      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a41      	ldr	r2, [pc, #260]	; (800800c <TIM_Base_SetConfig+0x128>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00b      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a40      	ldr	r2, [pc, #256]	; (8008010 <TIM_Base_SetConfig+0x12c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d007      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a3f      	ldr	r2, [pc, #252]	; (8008014 <TIM_Base_SetConfig+0x130>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d003      	beq.n	8007f24 <TIM_Base_SetConfig+0x40>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a3e      	ldr	r2, [pc, #248]	; (8008018 <TIM_Base_SetConfig+0x134>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d108      	bne.n	8007f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a33      	ldr	r2, [pc, #204]	; (8008008 <TIM_Base_SetConfig+0x124>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d027      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f44:	d023      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a30      	ldr	r2, [pc, #192]	; (800800c <TIM_Base_SetConfig+0x128>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d01f      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2f      	ldr	r2, [pc, #188]	; (8008010 <TIM_Base_SetConfig+0x12c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d01b      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2e      	ldr	r2, [pc, #184]	; (8008014 <TIM_Base_SetConfig+0x130>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d017      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2d      	ldr	r2, [pc, #180]	; (8008018 <TIM_Base_SetConfig+0x134>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d013      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2c      	ldr	r2, [pc, #176]	; (800801c <TIM_Base_SetConfig+0x138>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00f      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2b      	ldr	r2, [pc, #172]	; (8008020 <TIM_Base_SetConfig+0x13c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00b      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a2a      	ldr	r2, [pc, #168]	; (8008024 <TIM_Base_SetConfig+0x140>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d007      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a29      	ldr	r2, [pc, #164]	; (8008028 <TIM_Base_SetConfig+0x144>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d003      	beq.n	8007f8e <TIM_Base_SetConfig+0xaa>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a28      	ldr	r2, [pc, #160]	; (800802c <TIM_Base_SetConfig+0x148>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d108      	bne.n	8007fa0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a10      	ldr	r2, [pc, #64]	; (8008008 <TIM_Base_SetConfig+0x124>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00f      	beq.n	8007fec <TIM_Base_SetConfig+0x108>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a12      	ldr	r2, [pc, #72]	; (8008018 <TIM_Base_SetConfig+0x134>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00b      	beq.n	8007fec <TIM_Base_SetConfig+0x108>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a11      	ldr	r2, [pc, #68]	; (800801c <TIM_Base_SetConfig+0x138>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d007      	beq.n	8007fec <TIM_Base_SetConfig+0x108>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a10      	ldr	r2, [pc, #64]	; (8008020 <TIM_Base_SetConfig+0x13c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d003      	beq.n	8007fec <TIM_Base_SetConfig+0x108>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a0f      	ldr	r2, [pc, #60]	; (8008024 <TIM_Base_SetConfig+0x140>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d103      	bne.n	8007ff4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	615a      	str	r2, [r3, #20]
}
 8007ffa:	bf00      	nop
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	40010000 	.word	0x40010000
 800800c:	40000400 	.word	0x40000400
 8008010:	40000800 	.word	0x40000800
 8008014:	40000c00 	.word	0x40000c00
 8008018:	40010400 	.word	0x40010400
 800801c:	40014000 	.word	0x40014000
 8008020:	40014400 	.word	0x40014400
 8008024:	40014800 	.word	0x40014800
 8008028:	4000e000 	.word	0x4000e000
 800802c:	4000e400 	.word	0x4000e400

08008030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	f023 0201 	bic.w	r2, r3, #1
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4b37      	ldr	r3, [pc, #220]	; (8008138 <TIM_OC1_SetConfig+0x108>)
 800805c:	4013      	ands	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0303 	bic.w	r3, r3, #3
 8008066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f023 0302 	bic.w	r3, r3, #2
 8008078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a2d      	ldr	r2, [pc, #180]	; (800813c <TIM_OC1_SetConfig+0x10c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d00f      	beq.n	80080ac <TIM_OC1_SetConfig+0x7c>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a2c      	ldr	r2, [pc, #176]	; (8008140 <TIM_OC1_SetConfig+0x110>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00b      	beq.n	80080ac <TIM_OC1_SetConfig+0x7c>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a2b      	ldr	r2, [pc, #172]	; (8008144 <TIM_OC1_SetConfig+0x114>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d007      	beq.n	80080ac <TIM_OC1_SetConfig+0x7c>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a2a      	ldr	r2, [pc, #168]	; (8008148 <TIM_OC1_SetConfig+0x118>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC1_SetConfig+0x7c>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a29      	ldr	r2, [pc, #164]	; (800814c <TIM_OC1_SetConfig+0x11c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d10c      	bne.n	80080c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0308 	bic.w	r3, r3, #8
 80080b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f023 0304 	bic.w	r3, r3, #4
 80080c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a1c      	ldr	r2, [pc, #112]	; (800813c <TIM_OC1_SetConfig+0x10c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00f      	beq.n	80080ee <TIM_OC1_SetConfig+0xbe>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a1b      	ldr	r2, [pc, #108]	; (8008140 <TIM_OC1_SetConfig+0x110>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00b      	beq.n	80080ee <TIM_OC1_SetConfig+0xbe>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a1a      	ldr	r2, [pc, #104]	; (8008144 <TIM_OC1_SetConfig+0x114>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d007      	beq.n	80080ee <TIM_OC1_SetConfig+0xbe>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a19      	ldr	r2, [pc, #100]	; (8008148 <TIM_OC1_SetConfig+0x118>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d003      	beq.n	80080ee <TIM_OC1_SetConfig+0xbe>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a18      	ldr	r2, [pc, #96]	; (800814c <TIM_OC1_SetConfig+0x11c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d111      	bne.n	8008112 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	621a      	str	r2, [r3, #32]
}
 800812c:	bf00      	nop
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	fffeff8f 	.word	0xfffeff8f
 800813c:	40010000 	.word	0x40010000
 8008140:	40010400 	.word	0x40010400
 8008144:	40014000 	.word	0x40014000
 8008148:	40014400 	.word	0x40014400
 800814c:	40014800 	.word	0x40014800

08008150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	f023 0210 	bic.w	r2, r3, #16
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4b34      	ldr	r3, [pc, #208]	; (800824c <TIM_OC2_SetConfig+0xfc>)
 800817c:	4013      	ands	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 0320 	bic.w	r3, r3, #32
 800819a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a29      	ldr	r2, [pc, #164]	; (8008250 <TIM_OC2_SetConfig+0x100>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC2_SetConfig+0x68>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a28      	ldr	r2, [pc, #160]	; (8008254 <TIM_OC2_SetConfig+0x104>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d10d      	bne.n	80081d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a1e      	ldr	r2, [pc, #120]	; (8008250 <TIM_OC2_SetConfig+0x100>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00f      	beq.n	80081fc <TIM_OC2_SetConfig+0xac>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <TIM_OC2_SetConfig+0x104>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00b      	beq.n	80081fc <TIM_OC2_SetConfig+0xac>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a1c      	ldr	r2, [pc, #112]	; (8008258 <TIM_OC2_SetConfig+0x108>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d007      	beq.n	80081fc <TIM_OC2_SetConfig+0xac>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a1b      	ldr	r2, [pc, #108]	; (800825c <TIM_OC2_SetConfig+0x10c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d003      	beq.n	80081fc <TIM_OC2_SetConfig+0xac>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a1a      	ldr	r2, [pc, #104]	; (8008260 <TIM_OC2_SetConfig+0x110>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d113      	bne.n	8008224 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008202:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800820a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	621a      	str	r2, [r3, #32]
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	feff8fff 	.word	0xfeff8fff
 8008250:	40010000 	.word	0x40010000
 8008254:	40010400 	.word	0x40010400
 8008258:	40014000 	.word	0x40014000
 800825c:	40014400 	.word	0x40014400
 8008260:	40014800 	.word	0x40014800

08008264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4b33      	ldr	r3, [pc, #204]	; (800835c <TIM_OC3_SetConfig+0xf8>)
 8008290:	4013      	ands	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a28      	ldr	r2, [pc, #160]	; (8008360 <TIM_OC3_SetConfig+0xfc>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_OC3_SetConfig+0x66>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a27      	ldr	r2, [pc, #156]	; (8008364 <TIM_OC3_SetConfig+0x100>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d10d      	bne.n	80082e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a1d      	ldr	r2, [pc, #116]	; (8008360 <TIM_OC3_SetConfig+0xfc>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00f      	beq.n	800830e <TIM_OC3_SetConfig+0xaa>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a1c      	ldr	r2, [pc, #112]	; (8008364 <TIM_OC3_SetConfig+0x100>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00b      	beq.n	800830e <TIM_OC3_SetConfig+0xaa>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a1b      	ldr	r2, [pc, #108]	; (8008368 <TIM_OC3_SetConfig+0x104>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d007      	beq.n	800830e <TIM_OC3_SetConfig+0xaa>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a1a      	ldr	r2, [pc, #104]	; (800836c <TIM_OC3_SetConfig+0x108>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d003      	beq.n	800830e <TIM_OC3_SetConfig+0xaa>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a19      	ldr	r2, [pc, #100]	; (8008370 <TIM_OC3_SetConfig+0x10c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d113      	bne.n	8008336 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800831c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	621a      	str	r2, [r3, #32]
}
 8008350:	bf00      	nop
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	fffeff8f 	.word	0xfffeff8f
 8008360:	40010000 	.word	0x40010000
 8008364:	40010400 	.word	0x40010400
 8008368:	40014000 	.word	0x40014000
 800836c:	40014400 	.word	0x40014400
 8008370:	40014800 	.word	0x40014800

08008374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <TIM_OC4_SetConfig+0xbc>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	031b      	lsls	r3, r3, #12
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a19      	ldr	r2, [pc, #100]	; (8008434 <TIM_OC4_SetConfig+0xc0>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00f      	beq.n	80083f4 <TIM_OC4_SetConfig+0x80>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a18      	ldr	r2, [pc, #96]	; (8008438 <TIM_OC4_SetConfig+0xc4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00b      	beq.n	80083f4 <TIM_OC4_SetConfig+0x80>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a17      	ldr	r2, [pc, #92]	; (800843c <TIM_OC4_SetConfig+0xc8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d007      	beq.n	80083f4 <TIM_OC4_SetConfig+0x80>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a16      	ldr	r2, [pc, #88]	; (8008440 <TIM_OC4_SetConfig+0xcc>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d003      	beq.n	80083f4 <TIM_OC4_SetConfig+0x80>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a15      	ldr	r2, [pc, #84]	; (8008444 <TIM_OC4_SetConfig+0xd0>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d109      	bne.n	8008408 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	019b      	lsls	r3, r3, #6
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4313      	orrs	r3, r2
 8008406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	621a      	str	r2, [r3, #32]
}
 8008422:	bf00      	nop
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	feff8fff 	.word	0xfeff8fff
 8008434:	40010000 	.word	0x40010000
 8008438:	40010400 	.word	0x40010400
 800843c:	40014000 	.word	0x40014000
 8008440:	40014400 	.word	0x40014400
 8008444:	40014800 	.word	0x40014800

08008448 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <TIM_OC5_SetConfig+0xb0>)
 8008474:	4013      	ands	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008488:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	041b      	lsls	r3, r3, #16
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	4313      	orrs	r3, r2
 8008494:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a18      	ldr	r2, [pc, #96]	; (80084fc <TIM_OC5_SetConfig+0xb4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d00f      	beq.n	80084be <TIM_OC5_SetConfig+0x76>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a17      	ldr	r2, [pc, #92]	; (8008500 <TIM_OC5_SetConfig+0xb8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00b      	beq.n	80084be <TIM_OC5_SetConfig+0x76>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a16      	ldr	r2, [pc, #88]	; (8008504 <TIM_OC5_SetConfig+0xbc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d007      	beq.n	80084be <TIM_OC5_SetConfig+0x76>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a15      	ldr	r2, [pc, #84]	; (8008508 <TIM_OC5_SetConfig+0xc0>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d003      	beq.n	80084be <TIM_OC5_SetConfig+0x76>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a14      	ldr	r2, [pc, #80]	; (800850c <TIM_OC5_SetConfig+0xc4>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d109      	bne.n	80084d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	021b      	lsls	r3, r3, #8
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	621a      	str	r2, [r3, #32]
}
 80084ec:	bf00      	nop
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	fffeff8f 	.word	0xfffeff8f
 80084fc:	40010000 	.word	0x40010000
 8008500:	40010400 	.word	0x40010400
 8008504:	40014000 	.word	0x40014000
 8008508:	40014400 	.word	0x40014400
 800850c:	40014800 	.word	0x40014800

08008510 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <TIM_OC6_SetConfig+0xb4>)
 800853c:	4013      	ands	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	051b      	lsls	r3, r3, #20
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	4313      	orrs	r3, r2
 800855e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a19      	ldr	r2, [pc, #100]	; (80085c8 <TIM_OC6_SetConfig+0xb8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00f      	beq.n	8008588 <TIM_OC6_SetConfig+0x78>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a18      	ldr	r2, [pc, #96]	; (80085cc <TIM_OC6_SetConfig+0xbc>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00b      	beq.n	8008588 <TIM_OC6_SetConfig+0x78>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a17      	ldr	r2, [pc, #92]	; (80085d0 <TIM_OC6_SetConfig+0xc0>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d007      	beq.n	8008588 <TIM_OC6_SetConfig+0x78>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a16      	ldr	r2, [pc, #88]	; (80085d4 <TIM_OC6_SetConfig+0xc4>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_OC6_SetConfig+0x78>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a15      	ldr	r2, [pc, #84]	; (80085d8 <TIM_OC6_SetConfig+0xc8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d109      	bne.n	800859c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800858e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	029b      	lsls	r3, r3, #10
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	4313      	orrs	r3, r2
 800859a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	feff8fff 	.word	0xfeff8fff
 80085c8:	40010000 	.word	0x40010000
 80085cc:	40010400 	.word	0x40010400
 80085d0:	40014000 	.word	0x40014000
 80085d4:	40014400 	.word	0x40014400
 80085d8:	40014800 	.word	0x40014800

080085dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	f023 0201 	bic.w	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	4313      	orrs	r3, r2
 8008610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f023 030a 	bic.w	r3, r3, #10
 8008618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4313      	orrs	r3, r2
 8008620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	621a      	str	r2, [r3, #32]
}
 800862e:	bf00      	nop
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800863a:	b480      	push	{r7}
 800863c:	b087      	sub	sp, #28
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	f023 0210 	bic.w	r2, r3, #16
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	031b      	lsls	r3, r3, #12
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008676:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	4313      	orrs	r3, r2
 8008680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	621a      	str	r2, [r3, #32]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
	...

0800869c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <TIM_ITRx_SetConfig+0x38>)
 80086b0:	4013      	ands	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f043 0307 	orr.w	r3, r3, #7
 80086be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	609a      	str	r2, [r3, #8]
}
 80086c6:	bf00      	nop
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	ffcfff8f 	.word	0xffcfff8f

080086d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	021a      	lsls	r2, r3, #8
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	431a      	orrs	r2, r3
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4313      	orrs	r3, r2
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	609a      	str	r2, [r3, #8]
}
 800870c:	bf00      	nop
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f003 031f 	and.w	r3, r3, #31
 800872a:	2201      	movs	r2, #1
 800872c:	fa02 f303 	lsl.w	r3, r2, r3
 8008730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a1a      	ldr	r2, [r3, #32]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	43db      	mvns	r3, r3
 800873a:	401a      	ands	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6a1a      	ldr	r2, [r3, #32]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f003 031f 	and.w	r3, r3, #31
 800874a:	6879      	ldr	r1, [r7, #4]
 800874c:	fa01 f303 	lsl.w	r3, r1, r3
 8008750:	431a      	orrs	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	621a      	str	r2, [r3, #32]
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008774:	2b01      	cmp	r3, #1
 8008776:	d101      	bne.n	800877c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008778:	2302      	movs	r3, #2
 800877a:	e077      	b.n	800886c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a35      	ldr	r2, [pc, #212]	; (8008878 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d004      	beq.n	80087b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a34      	ldr	r2, [pc, #208]	; (800887c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d108      	bne.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80087b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a25      	ldr	r2, [pc, #148]	; (8008878 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d02c      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ee:	d027      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a22      	ldr	r2, [pc, #136]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d022      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a21      	ldr	r2, [pc, #132]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d01d      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a1f      	ldr	r2, [pc, #124]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d018      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a1a      	ldr	r2, [pc, #104]	; (800887c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d013      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1b      	ldr	r2, [pc, #108]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00e      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1a      	ldr	r2, [pc, #104]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d009      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a18      	ldr	r2, [pc, #96]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d004      	beq.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a17      	ldr	r2, [pc, #92]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d10c      	bne.n	800885a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008846:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	4313      	orrs	r3, r2
 8008850:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	40010000 	.word	0x40010000
 800887c:	40010400 	.word	0x40010400
 8008880:	40000400 	.word	0x40000400
 8008884:	40000800 	.word	0x40000800
 8008888:	40000c00 	.word	0x40000c00
 800888c:	40001800 	.word	0x40001800
 8008890:	40014000 	.word	0x40014000
 8008894:	4000e000 	.word	0x4000e000
 8008898:	4000e400 	.word	0x4000e400

0800889c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e087      	b.n	80089c8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	041b      	lsls	r3, r3, #16
 800892e:	4313      	orrs	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a27      	ldr	r2, [pc, #156]	; (80089d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d004      	beq.n	8008946 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a25      	ldr	r2, [pc, #148]	; (80089d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d106      	bne.n	8008954 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a1e      	ldr	r2, [pc, #120]	; (80089d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d004      	beq.n	8008968 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1d      	ldr	r2, [pc, #116]	; (80089d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d126      	bne.n	80089b6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	051b      	lsls	r3, r3, #20
 8008974:	4313      	orrs	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	4313      	orrs	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a0e      	ldr	r2, [pc, #56]	; (80089d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d004      	beq.n	80089a8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a0d      	ldr	r2, [pc, #52]	; (80089d8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d106      	bne.n	80089b6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40010000 	.word	0x40010000
 80089d8:	40010400 	.word	0x40010400

080089dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e042      	b.n	8008a74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d106      	bne.n	8008a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7f8 fa1f 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2224      	movs	r2, #36	; 0x24
 8008a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f022 0201 	bic.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fc9c 	bl	800935c <UART_SetConfig>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d101      	bne.n	8008a2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e022      	b.n	8008a74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 fafc 	bl	800a034 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0201 	orr.w	r2, r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fb83 	bl	800a178 <UART_CheckIdleState>
 8008a72:	4603      	mov	r3, r0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08a      	sub	sp, #40	; 0x28
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	d17b      	bne.n	8008b8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <HAL_UART_Transmit+0x26>
 8008a9c:	88fb      	ldrh	r3, [r7, #6]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e074      	b.n	8008b90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2221      	movs	r2, #33	; 0x21
 8008ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ab6:	f7f8 ffa5 	bl	8001a04 <HAL_GetTick>
 8008aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	88fa      	ldrh	r2, [r7, #6]
 8008ac0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad4:	d108      	bne.n	8008ae8 <HAL_UART_Transmit+0x6c>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	61bb      	str	r3, [r7, #24]
 8008ae6:	e003      	b.n	8008af0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008af0:	e030      	b.n	8008b54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2200      	movs	r2, #0
 8008afa:	2180      	movs	r1, #128	; 0x80
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f001 fbe5 	bl	800a2cc <UART_WaitOnFlagUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e03d      	b.n	8008b90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10b      	bne.n	8008b32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	3302      	adds	r3, #2
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	e007      	b.n	8008b42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1c8      	bne.n	8008af2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2200      	movs	r2, #0
 8008b68:	2140      	movs	r1, #64	; 0x40
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f001 fbae 	bl	800a2cc <UART_WaitOnFlagUntilTimeout>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e006      	b.n	8008b90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2220      	movs	r2, #32
 8008b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e000      	b.n	8008b90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008b8e:	2302      	movs	r3, #2
  }
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b0ba      	sub	sp, #232	; 0xe8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008bc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d11b      	bne.n	8008c0c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd8:	f003 0320 	and.w	r3, r3, #32
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d015      	beq.n	8008c0c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d105      	bne.n	8008bf8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d009      	beq.n	8008c0c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 8377 	beq.w	80092f0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	4798      	blx	r3
      }
      return;
 8008c0a:	e371      	b.n	80092f0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 8123 	beq.w	8008e5c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008c1a:	4b8d      	ldr	r3, [pc, #564]	; (8008e50 <HAL_UART_IRQHandler+0x2b8>)
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008c26:	4b8b      	ldr	r3, [pc, #556]	; (8008e54 <HAL_UART_IRQHandler+0x2bc>)
 8008c28:	4013      	ands	r3, r2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 8116 	beq.w	8008e5c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d011      	beq.n	8008c60 <HAL_UART_IRQHandler+0xc8>
 8008c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c56:	f043 0201 	orr.w	r2, r3, #1
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d011      	beq.n	8008c90 <HAL_UART_IRQHandler+0xf8>
 8008c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00b      	beq.n	8008c90 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c86:	f043 0204 	orr.w	r2, r3, #4
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c94:	f003 0304 	and.w	r3, r3, #4
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d011      	beq.n	8008cc0 <HAL_UART_IRQHandler+0x128>
 8008c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2204      	movs	r2, #4
 8008cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb6:	f043 0202 	orr.w	r2, r3, #2
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc4:	f003 0308 	and.w	r3, r3, #8
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d017      	beq.n	8008cfc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cd0:	f003 0320 	and.w	r3, r3, #32
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d105      	bne.n	8008ce4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cd8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008cdc:	4b5c      	ldr	r3, [pc, #368]	; (8008e50 <HAL_UART_IRQHandler+0x2b8>)
 8008cde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2208      	movs	r2, #8
 8008cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf2:	f043 0208 	orr.w	r2, r3, #8
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d012      	beq.n	8008d2e <HAL_UART_IRQHandler+0x196>
 8008d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00c      	beq.n	8008d2e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d24:	f043 0220 	orr.w	r2, r3, #32
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 82dd 	beq.w	80092f4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d013      	beq.n	8008d6e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d105      	bne.n	8008d5e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d003      	beq.n	8008d6e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d82:	2b40      	cmp	r3, #64	; 0x40
 8008d84:	d005      	beq.n	8008d92 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d054      	beq.n	8008e3c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 fbea 	bl	800a56c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da2:	2b40      	cmp	r3, #64	; 0x40
 8008da4:	d146      	bne.n	8008e34 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3308      	adds	r3, #8
 8008dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3308      	adds	r3, #8
 8008dce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008dd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008dde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1d9      	bne.n	8008da6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d017      	beq.n	8008e2c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e02:	4a15      	ldr	r2, [pc, #84]	; (8008e58 <HAL_UART_IRQHandler+0x2c0>)
 8008e04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7f9 fff5 	bl	8002dfc <HAL_DMA_Abort_IT>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d019      	beq.n	8008e4c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008e26:	4610      	mov	r0, r2
 8008e28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2a:	e00f      	b.n	8008e4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fa8b 	bl	8009348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e32:	e00b      	b.n	8008e4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fa87 	bl	8009348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3a:	e007      	b.n	8008e4c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fa83 	bl	8009348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008e4a:	e253      	b.n	80092f4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e4c:	bf00      	nop
    return;
 8008e4e:	e251      	b.n	80092f4 <HAL_UART_IRQHandler+0x75c>
 8008e50:	10000001 	.word	0x10000001
 8008e54:	04000120 	.word	0x04000120
 8008e58:	0800a81f 	.word	0x0800a81f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	f040 81e7 	bne.w	8009234 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e6a:	f003 0310 	and.w	r3, r3, #16
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 81e0 	beq.w	8009234 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 81d9 	beq.w	8009234 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2210      	movs	r2, #16
 8008e88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e94:	2b40      	cmp	r3, #64	; 0x40
 8008e96:	f040 8151 	bne.w	800913c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a96      	ldr	r2, [pc, #600]	; (80090fc <HAL_UART_IRQHandler+0x564>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d068      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a93      	ldr	r2, [pc, #588]	; (8009100 <HAL_UART_IRQHandler+0x568>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d061      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a91      	ldr	r2, [pc, #580]	; (8009104 <HAL_UART_IRQHandler+0x56c>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d05a      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a8e      	ldr	r2, [pc, #568]	; (8009108 <HAL_UART_IRQHandler+0x570>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d053      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a8c      	ldr	r2, [pc, #560]	; (800910c <HAL_UART_IRQHandler+0x574>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d04c      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a89      	ldr	r2, [pc, #548]	; (8009110 <HAL_UART_IRQHandler+0x578>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d045      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a87      	ldr	r2, [pc, #540]	; (8009114 <HAL_UART_IRQHandler+0x57c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d03e      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a84      	ldr	r2, [pc, #528]	; (8009118 <HAL_UART_IRQHandler+0x580>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d037      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a82      	ldr	r2, [pc, #520]	; (800911c <HAL_UART_IRQHandler+0x584>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d030      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a7f      	ldr	r2, [pc, #508]	; (8009120 <HAL_UART_IRQHandler+0x588>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d029      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a7d      	ldr	r2, [pc, #500]	; (8009124 <HAL_UART_IRQHandler+0x58c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d022      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a7a      	ldr	r2, [pc, #488]	; (8009128 <HAL_UART_IRQHandler+0x590>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d01b      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a78      	ldr	r2, [pc, #480]	; (800912c <HAL_UART_IRQHandler+0x594>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d014      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a75      	ldr	r2, [pc, #468]	; (8009130 <HAL_UART_IRQHandler+0x598>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00d      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a73      	ldr	r2, [pc, #460]	; (8009134 <HAL_UART_IRQHandler+0x59c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d006      	beq.n	8008f7a <HAL_UART_IRQHandler+0x3e2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a70      	ldr	r2, [pc, #448]	; (8009138 <HAL_UART_IRQHandler+0x5a0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d106      	bne.n	8008f88 <HAL_UART_IRQHandler+0x3f0>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	e005      	b.n	8008f94 <HAL_UART_IRQHandler+0x3fc>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 81ab 	beq.w	80092f8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fac:	429a      	cmp	r2, r3
 8008fae:	f080 81a3 	bcs.w	80092f8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc8:	f000 8087 	beq.w	80090da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ffa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800900e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1da      	bne.n	8008fcc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3308      	adds	r3, #8
 8009036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800903a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800903e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800904c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e1      	bne.n	8009016 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3308      	adds	r3, #8
 8009058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3308      	adds	r3, #8
 8009072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009078:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800907c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800907e:	e841 2300 	strex	r3, r2, [r1]
 8009082:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e3      	bne.n	8009052 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2220      	movs	r2, #32
 800908e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a8:	f023 0310 	bic.w	r3, r3, #16
 80090ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80090bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e4      	bne.n	8009098 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7f9 fb73 	bl	80027c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7f7 fa87 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090fa:	e0fd      	b.n	80092f8 <HAL_UART_IRQHandler+0x760>
 80090fc:	40020010 	.word	0x40020010
 8009100:	40020028 	.word	0x40020028
 8009104:	40020040 	.word	0x40020040
 8009108:	40020058 	.word	0x40020058
 800910c:	40020070 	.word	0x40020070
 8009110:	40020088 	.word	0x40020088
 8009114:	400200a0 	.word	0x400200a0
 8009118:	400200b8 	.word	0x400200b8
 800911c:	40020410 	.word	0x40020410
 8009120:	40020428 	.word	0x40020428
 8009124:	40020440 	.word	0x40020440
 8009128:	40020458 	.word	0x40020458
 800912c:	40020470 	.word	0x40020470
 8009130:	40020488 	.word	0x40020488
 8009134:	400204a0 	.word	0x400204a0
 8009138:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009148:	b29b      	uxth	r3, r3
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009156:	b29b      	uxth	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 80cf 	beq.w	80092fc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800915e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 80ca 	beq.w	80092fc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800917c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	461a      	mov	r2, r3
 8009186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800918a:	647b      	str	r3, [r7, #68]	; 0x44
 800918c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e4      	bne.n	8009168 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	623b      	str	r3, [r7, #32]
   return(result);
 80091ae:	6a3a      	ldr	r2, [r7, #32]
 80091b0:	4b55      	ldr	r3, [pc, #340]	; (8009308 <HAL_UART_IRQHandler+0x770>)
 80091b2:	4013      	ands	r3, r2
 80091b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3308      	adds	r3, #8
 80091be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80091c2:	633a      	str	r2, [r7, #48]	; 0x30
 80091c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e3      	bne.n	800919e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	e853 3f00 	ldrex	r3, [r3]
 80091f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f023 0310 	bic.w	r3, r3, #16
 80091fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800920c:	61fb      	str	r3, [r7, #28]
 800920e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	69b9      	ldr	r1, [r7, #24]
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	617b      	str	r3, [r7, #20]
   return(result);
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e4      	bne.n	80091ea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7f7 f9eb 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009232:	e063      	b.n	80092fc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00e      	beq.n	800925e <HAL_UART_IRQHandler+0x6c6>
 8009240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d008      	beq.n	800925e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f001 fb22 	bl	800a8a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800925c:	e051      	b.n	8009302 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800925e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009266:	2b00      	cmp	r3, #0
 8009268:	d014      	beq.n	8009294 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800926a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800926e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009272:	2b00      	cmp	r3, #0
 8009274:	d105      	bne.n	8009282 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800927a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d008      	beq.n	8009294 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009286:	2b00      	cmp	r3, #0
 8009288:	d03a      	beq.n	8009300 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	4798      	blx	r3
    }
    return;
 8009292:	e035      	b.n	8009300 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d009      	beq.n	80092b4 <HAL_UART_IRQHandler+0x71c>
 80092a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 facc 	bl	800a84a <UART_EndTransmit_IT>
    return;
 80092b2:	e026      	b.n	8009302 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d009      	beq.n	80092d4 <HAL_UART_IRQHandler+0x73c>
 80092c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fafb 	bl	800a8c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092d2:	e016      	b.n	8009302 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d010      	beq.n	8009302 <HAL_UART_IRQHandler+0x76a>
 80092e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	da0c      	bge.n	8009302 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fae3 	bl	800a8b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092ee:	e008      	b.n	8009302 <HAL_UART_IRQHandler+0x76a>
      return;
 80092f0:	bf00      	nop
 80092f2:	e006      	b.n	8009302 <HAL_UART_IRQHandler+0x76a>
    return;
 80092f4:	bf00      	nop
 80092f6:	e004      	b.n	8009302 <HAL_UART_IRQHandler+0x76a>
      return;
 80092f8:	bf00      	nop
 80092fa:	e002      	b.n	8009302 <HAL_UART_IRQHandler+0x76a>
      return;
 80092fc:	bf00      	nop
 80092fe:	e000      	b.n	8009302 <HAL_UART_IRQHandler+0x76a>
    return;
 8009300:	bf00      	nop
  }
}
 8009302:	37e8      	adds	r7, #232	; 0xe8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	effffffe 	.word	0xeffffffe

0800930c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800935c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009360:	b092      	sub	sp, #72	; 0x48
 8009362:	af00      	add	r7, sp, #0
 8009364:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	689a      	ldr	r2, [r3, #8]
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	431a      	orrs	r2, r3
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	431a      	orrs	r2, r3
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	4313      	orrs	r3, r2
 8009382:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	4bbe      	ldr	r3, [pc, #760]	; (8009684 <UART_SetConfig+0x328>)
 800938c:	4013      	ands	r3, r2
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	6812      	ldr	r2, [r2, #0]
 8009392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009394:	430b      	orrs	r3, r1
 8009396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4ab3      	ldr	r2, [pc, #716]	; (8009688 <UART_SetConfig+0x32c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d004      	beq.n	80093c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093c4:	4313      	orrs	r3, r2
 80093c6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	4baf      	ldr	r3, [pc, #700]	; (800968c <UART_SetConfig+0x330>)
 80093d0:	4013      	ands	r3, r2
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	6812      	ldr	r2, [r2, #0]
 80093d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093d8:	430b      	orrs	r3, r1
 80093da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e2:	f023 010f 	bic.w	r1, r3, #15
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4aa6      	ldr	r2, [pc, #664]	; (8009690 <UART_SetConfig+0x334>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d177      	bne.n	80094ec <UART_SetConfig+0x190>
 80093fc:	4ba5      	ldr	r3, [pc, #660]	; (8009694 <UART_SetConfig+0x338>)
 80093fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009404:	2b28      	cmp	r3, #40	; 0x28
 8009406:	d86d      	bhi.n	80094e4 <UART_SetConfig+0x188>
 8009408:	a201      	add	r2, pc, #4	; (adr r2, 8009410 <UART_SetConfig+0xb4>)
 800940a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940e:	bf00      	nop
 8009410:	080094b5 	.word	0x080094b5
 8009414:	080094e5 	.word	0x080094e5
 8009418:	080094e5 	.word	0x080094e5
 800941c:	080094e5 	.word	0x080094e5
 8009420:	080094e5 	.word	0x080094e5
 8009424:	080094e5 	.word	0x080094e5
 8009428:	080094e5 	.word	0x080094e5
 800942c:	080094e5 	.word	0x080094e5
 8009430:	080094bd 	.word	0x080094bd
 8009434:	080094e5 	.word	0x080094e5
 8009438:	080094e5 	.word	0x080094e5
 800943c:	080094e5 	.word	0x080094e5
 8009440:	080094e5 	.word	0x080094e5
 8009444:	080094e5 	.word	0x080094e5
 8009448:	080094e5 	.word	0x080094e5
 800944c:	080094e5 	.word	0x080094e5
 8009450:	080094c5 	.word	0x080094c5
 8009454:	080094e5 	.word	0x080094e5
 8009458:	080094e5 	.word	0x080094e5
 800945c:	080094e5 	.word	0x080094e5
 8009460:	080094e5 	.word	0x080094e5
 8009464:	080094e5 	.word	0x080094e5
 8009468:	080094e5 	.word	0x080094e5
 800946c:	080094e5 	.word	0x080094e5
 8009470:	080094cd 	.word	0x080094cd
 8009474:	080094e5 	.word	0x080094e5
 8009478:	080094e5 	.word	0x080094e5
 800947c:	080094e5 	.word	0x080094e5
 8009480:	080094e5 	.word	0x080094e5
 8009484:	080094e5 	.word	0x080094e5
 8009488:	080094e5 	.word	0x080094e5
 800948c:	080094e5 	.word	0x080094e5
 8009490:	080094d5 	.word	0x080094d5
 8009494:	080094e5 	.word	0x080094e5
 8009498:	080094e5 	.word	0x080094e5
 800949c:	080094e5 	.word	0x080094e5
 80094a0:	080094e5 	.word	0x080094e5
 80094a4:	080094e5 	.word	0x080094e5
 80094a8:	080094e5 	.word	0x080094e5
 80094ac:	080094e5 	.word	0x080094e5
 80094b0:	080094dd 	.word	0x080094dd
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ba:	e326      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80094bc:	2304      	movs	r3, #4
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c2:	e322      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80094c4:	2308      	movs	r3, #8
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ca:	e31e      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80094cc:	2310      	movs	r3, #16
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d2:	e31a      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80094d4:	2320      	movs	r3, #32
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094da:	e316      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80094dc:	2340      	movs	r3, #64	; 0x40
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e2:	e312      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80094e4:	2380      	movs	r3, #128	; 0x80
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e30e      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a69      	ldr	r2, [pc, #420]	; (8009698 <UART_SetConfig+0x33c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d130      	bne.n	8009558 <UART_SetConfig+0x1fc>
 80094f6:	4b67      	ldr	r3, [pc, #412]	; (8009694 <UART_SetConfig+0x338>)
 80094f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fa:	f003 0307 	and.w	r3, r3, #7
 80094fe:	2b05      	cmp	r3, #5
 8009500:	d826      	bhi.n	8009550 <UART_SetConfig+0x1f4>
 8009502:	a201      	add	r2, pc, #4	; (adr r2, 8009508 <UART_SetConfig+0x1ac>)
 8009504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009508:	08009521 	.word	0x08009521
 800950c:	08009529 	.word	0x08009529
 8009510:	08009531 	.word	0x08009531
 8009514:	08009539 	.word	0x08009539
 8009518:	08009541 	.word	0x08009541
 800951c:	08009549 	.word	0x08009549
 8009520:	2300      	movs	r3, #0
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009526:	e2f0      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009528:	2304      	movs	r3, #4
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800952e:	e2ec      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009530:	2308      	movs	r3, #8
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009536:	e2e8      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009538:	2310      	movs	r3, #16
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800953e:	e2e4      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009540:	2320      	movs	r3, #32
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009546:	e2e0      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009548:	2340      	movs	r3, #64	; 0x40
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954e:	e2dc      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009550:	2380      	movs	r3, #128	; 0x80
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009556:	e2d8      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a4f      	ldr	r2, [pc, #316]	; (800969c <UART_SetConfig+0x340>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d130      	bne.n	80095c4 <UART_SetConfig+0x268>
 8009562:	4b4c      	ldr	r3, [pc, #304]	; (8009694 <UART_SetConfig+0x338>)
 8009564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009566:	f003 0307 	and.w	r3, r3, #7
 800956a:	2b05      	cmp	r3, #5
 800956c:	d826      	bhi.n	80095bc <UART_SetConfig+0x260>
 800956e:	a201      	add	r2, pc, #4	; (adr r2, 8009574 <UART_SetConfig+0x218>)
 8009570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009574:	0800958d 	.word	0x0800958d
 8009578:	08009595 	.word	0x08009595
 800957c:	0800959d 	.word	0x0800959d
 8009580:	080095a5 	.word	0x080095a5
 8009584:	080095ad 	.word	0x080095ad
 8009588:	080095b5 	.word	0x080095b5
 800958c:	2300      	movs	r3, #0
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009592:	e2ba      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009594:	2304      	movs	r3, #4
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800959a:	e2b6      	b.n	8009b0a <UART_SetConfig+0x7ae>
 800959c:	2308      	movs	r3, #8
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095a2:	e2b2      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80095a4:	2310      	movs	r3, #16
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095aa:	e2ae      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80095ac:	2320      	movs	r3, #32
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095b2:	e2aa      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80095b4:	2340      	movs	r3, #64	; 0x40
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ba:	e2a6      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80095bc:	2380      	movs	r3, #128	; 0x80
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095c2:	e2a2      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a35      	ldr	r2, [pc, #212]	; (80096a0 <UART_SetConfig+0x344>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d130      	bne.n	8009630 <UART_SetConfig+0x2d4>
 80095ce:	4b31      	ldr	r3, [pc, #196]	; (8009694 <UART_SetConfig+0x338>)
 80095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d2:	f003 0307 	and.w	r3, r3, #7
 80095d6:	2b05      	cmp	r3, #5
 80095d8:	d826      	bhi.n	8009628 <UART_SetConfig+0x2cc>
 80095da:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <UART_SetConfig+0x284>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	080095f9 	.word	0x080095f9
 80095e4:	08009601 	.word	0x08009601
 80095e8:	08009609 	.word	0x08009609
 80095ec:	08009611 	.word	0x08009611
 80095f0:	08009619 	.word	0x08009619
 80095f4:	08009621 	.word	0x08009621
 80095f8:	2300      	movs	r3, #0
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fe:	e284      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009600:	2304      	movs	r3, #4
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009606:	e280      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009608:	2308      	movs	r3, #8
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800960e:	e27c      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009610:	2310      	movs	r3, #16
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009616:	e278      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009618:	2320      	movs	r3, #32
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800961e:	e274      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009626:	e270      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009628:	2380      	movs	r3, #128	; 0x80
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962e:	e26c      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a1b      	ldr	r2, [pc, #108]	; (80096a4 <UART_SetConfig+0x348>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d142      	bne.n	80096c0 <UART_SetConfig+0x364>
 800963a:	4b16      	ldr	r3, [pc, #88]	; (8009694 <UART_SetConfig+0x338>)
 800963c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963e:	f003 0307 	and.w	r3, r3, #7
 8009642:	2b05      	cmp	r3, #5
 8009644:	d838      	bhi.n	80096b8 <UART_SetConfig+0x35c>
 8009646:	a201      	add	r2, pc, #4	; (adr r2, 800964c <UART_SetConfig+0x2f0>)
 8009648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964c:	08009665 	.word	0x08009665
 8009650:	0800966d 	.word	0x0800966d
 8009654:	08009675 	.word	0x08009675
 8009658:	0800967d 	.word	0x0800967d
 800965c:	080096a9 	.word	0x080096a9
 8009660:	080096b1 	.word	0x080096b1
 8009664:	2300      	movs	r3, #0
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966a:	e24e      	b.n	8009b0a <UART_SetConfig+0x7ae>
 800966c:	2304      	movs	r3, #4
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009672:	e24a      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009674:	2308      	movs	r3, #8
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967a:	e246      	b.n	8009b0a <UART_SetConfig+0x7ae>
 800967c:	2310      	movs	r3, #16
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009682:	e242      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009684:	cfff69f3 	.word	0xcfff69f3
 8009688:	58000c00 	.word	0x58000c00
 800968c:	11fff4ff 	.word	0x11fff4ff
 8009690:	40011000 	.word	0x40011000
 8009694:	58024400 	.word	0x58024400
 8009698:	40004400 	.word	0x40004400
 800969c:	40004800 	.word	0x40004800
 80096a0:	40004c00 	.word	0x40004c00
 80096a4:	40005000 	.word	0x40005000
 80096a8:	2320      	movs	r3, #32
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ae:	e22c      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80096b0:	2340      	movs	r3, #64	; 0x40
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b6:	e228      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80096b8:	2380      	movs	r3, #128	; 0x80
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096be:	e224      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4ab1      	ldr	r2, [pc, #708]	; (800998c <UART_SetConfig+0x630>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d176      	bne.n	80097b8 <UART_SetConfig+0x45c>
 80096ca:	4bb1      	ldr	r3, [pc, #708]	; (8009990 <UART_SetConfig+0x634>)
 80096cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096d2:	2b28      	cmp	r3, #40	; 0x28
 80096d4:	d86c      	bhi.n	80097b0 <UART_SetConfig+0x454>
 80096d6:	a201      	add	r2, pc, #4	; (adr r2, 80096dc <UART_SetConfig+0x380>)
 80096d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096dc:	08009781 	.word	0x08009781
 80096e0:	080097b1 	.word	0x080097b1
 80096e4:	080097b1 	.word	0x080097b1
 80096e8:	080097b1 	.word	0x080097b1
 80096ec:	080097b1 	.word	0x080097b1
 80096f0:	080097b1 	.word	0x080097b1
 80096f4:	080097b1 	.word	0x080097b1
 80096f8:	080097b1 	.word	0x080097b1
 80096fc:	08009789 	.word	0x08009789
 8009700:	080097b1 	.word	0x080097b1
 8009704:	080097b1 	.word	0x080097b1
 8009708:	080097b1 	.word	0x080097b1
 800970c:	080097b1 	.word	0x080097b1
 8009710:	080097b1 	.word	0x080097b1
 8009714:	080097b1 	.word	0x080097b1
 8009718:	080097b1 	.word	0x080097b1
 800971c:	08009791 	.word	0x08009791
 8009720:	080097b1 	.word	0x080097b1
 8009724:	080097b1 	.word	0x080097b1
 8009728:	080097b1 	.word	0x080097b1
 800972c:	080097b1 	.word	0x080097b1
 8009730:	080097b1 	.word	0x080097b1
 8009734:	080097b1 	.word	0x080097b1
 8009738:	080097b1 	.word	0x080097b1
 800973c:	08009799 	.word	0x08009799
 8009740:	080097b1 	.word	0x080097b1
 8009744:	080097b1 	.word	0x080097b1
 8009748:	080097b1 	.word	0x080097b1
 800974c:	080097b1 	.word	0x080097b1
 8009750:	080097b1 	.word	0x080097b1
 8009754:	080097b1 	.word	0x080097b1
 8009758:	080097b1 	.word	0x080097b1
 800975c:	080097a1 	.word	0x080097a1
 8009760:	080097b1 	.word	0x080097b1
 8009764:	080097b1 	.word	0x080097b1
 8009768:	080097b1 	.word	0x080097b1
 800976c:	080097b1 	.word	0x080097b1
 8009770:	080097b1 	.word	0x080097b1
 8009774:	080097b1 	.word	0x080097b1
 8009778:	080097b1 	.word	0x080097b1
 800977c:	080097a9 	.word	0x080097a9
 8009780:	2301      	movs	r3, #1
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009786:	e1c0      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009788:	2304      	movs	r3, #4
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978e:	e1bc      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009790:	2308      	movs	r3, #8
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009796:	e1b8      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009798:	2310      	movs	r3, #16
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979e:	e1b4      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80097a0:	2320      	movs	r3, #32
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a6:	e1b0      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80097a8:	2340      	movs	r3, #64	; 0x40
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ae:	e1ac      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80097b0:	2380      	movs	r3, #128	; 0x80
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b6:	e1a8      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a75      	ldr	r2, [pc, #468]	; (8009994 <UART_SetConfig+0x638>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d130      	bne.n	8009824 <UART_SetConfig+0x4c8>
 80097c2:	4b73      	ldr	r3, [pc, #460]	; (8009990 <UART_SetConfig+0x634>)
 80097c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	d826      	bhi.n	800981c <UART_SetConfig+0x4c0>
 80097ce:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <UART_SetConfig+0x478>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	080097ed 	.word	0x080097ed
 80097d8:	080097f5 	.word	0x080097f5
 80097dc:	080097fd 	.word	0x080097fd
 80097e0:	08009805 	.word	0x08009805
 80097e4:	0800980d 	.word	0x0800980d
 80097e8:	08009815 	.word	0x08009815
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e18a      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80097f4:	2304      	movs	r3, #4
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e186      	b.n	8009b0a <UART_SetConfig+0x7ae>
 80097fc:	2308      	movs	r3, #8
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009802:	e182      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009804:	2310      	movs	r3, #16
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e17e      	b.n	8009b0a <UART_SetConfig+0x7ae>
 800980c:	2320      	movs	r3, #32
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009812:	e17a      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981a:	e176      	b.n	8009b0a <UART_SetConfig+0x7ae>
 800981c:	2380      	movs	r3, #128	; 0x80
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009822:	e172      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a5b      	ldr	r2, [pc, #364]	; (8009998 <UART_SetConfig+0x63c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d130      	bne.n	8009890 <UART_SetConfig+0x534>
 800982e:	4b58      	ldr	r3, [pc, #352]	; (8009990 <UART_SetConfig+0x634>)
 8009830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009832:	f003 0307 	and.w	r3, r3, #7
 8009836:	2b05      	cmp	r3, #5
 8009838:	d826      	bhi.n	8009888 <UART_SetConfig+0x52c>
 800983a:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <UART_SetConfig+0x4e4>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009859 	.word	0x08009859
 8009844:	08009861 	.word	0x08009861
 8009848:	08009869 	.word	0x08009869
 800984c:	08009871 	.word	0x08009871
 8009850:	08009879 	.word	0x08009879
 8009854:	08009881 	.word	0x08009881
 8009858:	2300      	movs	r3, #0
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e154      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009860:	2304      	movs	r3, #4
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009866:	e150      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009868:	2308      	movs	r3, #8
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986e:	e14c      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009870:	2310      	movs	r3, #16
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009876:	e148      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009878:	2320      	movs	r3, #32
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800987e:	e144      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009880:	2340      	movs	r3, #64	; 0x40
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009886:	e140      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009888:	2380      	movs	r3, #128	; 0x80
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988e:	e13c      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a41      	ldr	r2, [pc, #260]	; (800999c <UART_SetConfig+0x640>)
 8009896:	4293      	cmp	r3, r2
 8009898:	f040 8082 	bne.w	80099a0 <UART_SetConfig+0x644>
 800989c:	4b3c      	ldr	r3, [pc, #240]	; (8009990 <UART_SetConfig+0x634>)
 800989e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098a4:	2b28      	cmp	r3, #40	; 0x28
 80098a6:	d86d      	bhi.n	8009984 <UART_SetConfig+0x628>
 80098a8:	a201      	add	r2, pc, #4	; (adr r2, 80098b0 <UART_SetConfig+0x554>)
 80098aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ae:	bf00      	nop
 80098b0:	08009955 	.word	0x08009955
 80098b4:	08009985 	.word	0x08009985
 80098b8:	08009985 	.word	0x08009985
 80098bc:	08009985 	.word	0x08009985
 80098c0:	08009985 	.word	0x08009985
 80098c4:	08009985 	.word	0x08009985
 80098c8:	08009985 	.word	0x08009985
 80098cc:	08009985 	.word	0x08009985
 80098d0:	0800995d 	.word	0x0800995d
 80098d4:	08009985 	.word	0x08009985
 80098d8:	08009985 	.word	0x08009985
 80098dc:	08009985 	.word	0x08009985
 80098e0:	08009985 	.word	0x08009985
 80098e4:	08009985 	.word	0x08009985
 80098e8:	08009985 	.word	0x08009985
 80098ec:	08009985 	.word	0x08009985
 80098f0:	08009965 	.word	0x08009965
 80098f4:	08009985 	.word	0x08009985
 80098f8:	08009985 	.word	0x08009985
 80098fc:	08009985 	.word	0x08009985
 8009900:	08009985 	.word	0x08009985
 8009904:	08009985 	.word	0x08009985
 8009908:	08009985 	.word	0x08009985
 800990c:	08009985 	.word	0x08009985
 8009910:	0800996d 	.word	0x0800996d
 8009914:	08009985 	.word	0x08009985
 8009918:	08009985 	.word	0x08009985
 800991c:	08009985 	.word	0x08009985
 8009920:	08009985 	.word	0x08009985
 8009924:	08009985 	.word	0x08009985
 8009928:	08009985 	.word	0x08009985
 800992c:	08009985 	.word	0x08009985
 8009930:	08009975 	.word	0x08009975
 8009934:	08009985 	.word	0x08009985
 8009938:	08009985 	.word	0x08009985
 800993c:	08009985 	.word	0x08009985
 8009940:	08009985 	.word	0x08009985
 8009944:	08009985 	.word	0x08009985
 8009948:	08009985 	.word	0x08009985
 800994c:	08009985 	.word	0x08009985
 8009950:	0800997d 	.word	0x0800997d
 8009954:	2301      	movs	r3, #1
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995a:	e0d6      	b.n	8009b0a <UART_SetConfig+0x7ae>
 800995c:	2304      	movs	r3, #4
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009962:	e0d2      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009964:	2308      	movs	r3, #8
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996a:	e0ce      	b.n	8009b0a <UART_SetConfig+0x7ae>
 800996c:	2310      	movs	r3, #16
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009972:	e0ca      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009974:	2320      	movs	r3, #32
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e0c6      	b.n	8009b0a <UART_SetConfig+0x7ae>
 800997c:	2340      	movs	r3, #64	; 0x40
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009982:	e0c2      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009984:	2380      	movs	r3, #128	; 0x80
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998a:	e0be      	b.n	8009b0a <UART_SetConfig+0x7ae>
 800998c:	40011400 	.word	0x40011400
 8009990:	58024400 	.word	0x58024400
 8009994:	40007800 	.word	0x40007800
 8009998:	40007c00 	.word	0x40007c00
 800999c:	40011800 	.word	0x40011800
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4aad      	ldr	r2, [pc, #692]	; (8009c5c <UART_SetConfig+0x900>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d176      	bne.n	8009a98 <UART_SetConfig+0x73c>
 80099aa:	4bad      	ldr	r3, [pc, #692]	; (8009c60 <UART_SetConfig+0x904>)
 80099ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099b2:	2b28      	cmp	r3, #40	; 0x28
 80099b4:	d86c      	bhi.n	8009a90 <UART_SetConfig+0x734>
 80099b6:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <UART_SetConfig+0x660>)
 80099b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099bc:	08009a61 	.word	0x08009a61
 80099c0:	08009a91 	.word	0x08009a91
 80099c4:	08009a91 	.word	0x08009a91
 80099c8:	08009a91 	.word	0x08009a91
 80099cc:	08009a91 	.word	0x08009a91
 80099d0:	08009a91 	.word	0x08009a91
 80099d4:	08009a91 	.word	0x08009a91
 80099d8:	08009a91 	.word	0x08009a91
 80099dc:	08009a69 	.word	0x08009a69
 80099e0:	08009a91 	.word	0x08009a91
 80099e4:	08009a91 	.word	0x08009a91
 80099e8:	08009a91 	.word	0x08009a91
 80099ec:	08009a91 	.word	0x08009a91
 80099f0:	08009a91 	.word	0x08009a91
 80099f4:	08009a91 	.word	0x08009a91
 80099f8:	08009a91 	.word	0x08009a91
 80099fc:	08009a71 	.word	0x08009a71
 8009a00:	08009a91 	.word	0x08009a91
 8009a04:	08009a91 	.word	0x08009a91
 8009a08:	08009a91 	.word	0x08009a91
 8009a0c:	08009a91 	.word	0x08009a91
 8009a10:	08009a91 	.word	0x08009a91
 8009a14:	08009a91 	.word	0x08009a91
 8009a18:	08009a91 	.word	0x08009a91
 8009a1c:	08009a79 	.word	0x08009a79
 8009a20:	08009a91 	.word	0x08009a91
 8009a24:	08009a91 	.word	0x08009a91
 8009a28:	08009a91 	.word	0x08009a91
 8009a2c:	08009a91 	.word	0x08009a91
 8009a30:	08009a91 	.word	0x08009a91
 8009a34:	08009a91 	.word	0x08009a91
 8009a38:	08009a91 	.word	0x08009a91
 8009a3c:	08009a81 	.word	0x08009a81
 8009a40:	08009a91 	.word	0x08009a91
 8009a44:	08009a91 	.word	0x08009a91
 8009a48:	08009a91 	.word	0x08009a91
 8009a4c:	08009a91 	.word	0x08009a91
 8009a50:	08009a91 	.word	0x08009a91
 8009a54:	08009a91 	.word	0x08009a91
 8009a58:	08009a91 	.word	0x08009a91
 8009a5c:	08009a89 	.word	0x08009a89
 8009a60:	2301      	movs	r3, #1
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e050      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009a68:	2304      	movs	r3, #4
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e04c      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009a70:	2308      	movs	r3, #8
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e048      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e044      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009a80:	2320      	movs	r3, #32
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e040      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009a88:	2340      	movs	r3, #64	; 0x40
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8e:	e03c      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009a90:	2380      	movs	r3, #128	; 0x80
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e038      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a71      	ldr	r2, [pc, #452]	; (8009c64 <UART_SetConfig+0x908>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d130      	bne.n	8009b04 <UART_SetConfig+0x7a8>
 8009aa2:	4b6f      	ldr	r3, [pc, #444]	; (8009c60 <UART_SetConfig+0x904>)
 8009aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	2b05      	cmp	r3, #5
 8009aac:	d826      	bhi.n	8009afc <UART_SetConfig+0x7a0>
 8009aae:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <UART_SetConfig+0x758>)
 8009ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab4:	08009acd 	.word	0x08009acd
 8009ab8:	08009ad5 	.word	0x08009ad5
 8009abc:	08009add 	.word	0x08009add
 8009ac0:	08009ae5 	.word	0x08009ae5
 8009ac4:	08009aed 	.word	0x08009aed
 8009ac8:	08009af5 	.word	0x08009af5
 8009acc:	2302      	movs	r3, #2
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e01a      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009ad4:	2304      	movs	r3, #4
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e016      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009adc:	2308      	movs	r3, #8
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e012      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e00e      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009aec:	2320      	movs	r3, #32
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e00a      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009af4:	2340      	movs	r3, #64	; 0x40
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e006      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009afc:	2380      	movs	r3, #128	; 0x80
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e002      	b.n	8009b0a <UART_SetConfig+0x7ae>
 8009b04:	2380      	movs	r3, #128	; 0x80
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a55      	ldr	r2, [pc, #340]	; (8009c64 <UART_SetConfig+0x908>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	f040 80f8 	bne.w	8009d06 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	dc46      	bgt.n	8009bac <UART_SetConfig+0x850>
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	db75      	blt.n	8009c0e <UART_SetConfig+0x8b2>
 8009b22:	3b02      	subs	r3, #2
 8009b24:	2b1e      	cmp	r3, #30
 8009b26:	d872      	bhi.n	8009c0e <UART_SetConfig+0x8b2>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <UART_SetConfig+0x7d4>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009bb3 	.word	0x08009bb3
 8009b34:	08009c0f 	.word	0x08009c0f
 8009b38:	08009bbb 	.word	0x08009bbb
 8009b3c:	08009c0f 	.word	0x08009c0f
 8009b40:	08009c0f 	.word	0x08009c0f
 8009b44:	08009c0f 	.word	0x08009c0f
 8009b48:	08009bcb 	.word	0x08009bcb
 8009b4c:	08009c0f 	.word	0x08009c0f
 8009b50:	08009c0f 	.word	0x08009c0f
 8009b54:	08009c0f 	.word	0x08009c0f
 8009b58:	08009c0f 	.word	0x08009c0f
 8009b5c:	08009c0f 	.word	0x08009c0f
 8009b60:	08009c0f 	.word	0x08009c0f
 8009b64:	08009c0f 	.word	0x08009c0f
 8009b68:	08009bdb 	.word	0x08009bdb
 8009b6c:	08009c0f 	.word	0x08009c0f
 8009b70:	08009c0f 	.word	0x08009c0f
 8009b74:	08009c0f 	.word	0x08009c0f
 8009b78:	08009c0f 	.word	0x08009c0f
 8009b7c:	08009c0f 	.word	0x08009c0f
 8009b80:	08009c0f 	.word	0x08009c0f
 8009b84:	08009c0f 	.word	0x08009c0f
 8009b88:	08009c0f 	.word	0x08009c0f
 8009b8c:	08009c0f 	.word	0x08009c0f
 8009b90:	08009c0f 	.word	0x08009c0f
 8009b94:	08009c0f 	.word	0x08009c0f
 8009b98:	08009c0f 	.word	0x08009c0f
 8009b9c:	08009c0f 	.word	0x08009c0f
 8009ba0:	08009c0f 	.word	0x08009c0f
 8009ba4:	08009c0f 	.word	0x08009c0f
 8009ba8:	08009c01 	.word	0x08009c01
 8009bac:	2b40      	cmp	r3, #64	; 0x40
 8009bae:	d02a      	beq.n	8009c06 <UART_SetConfig+0x8aa>
 8009bb0:	e02d      	b.n	8009c0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009bb2:	f7fd f995 	bl	8006ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009bb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009bb8:	e02f      	b.n	8009c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fd f9a4 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc8:	e027      	b.n	8009c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bca:	f107 0318 	add.w	r3, r7, #24
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fd faf0 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bd8:	e01f      	b.n	8009c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bda:	4b21      	ldr	r3, [pc, #132]	; (8009c60 <UART_SetConfig+0x904>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 0320 	and.w	r3, r3, #32
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d009      	beq.n	8009bfa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009be6:	4b1e      	ldr	r3, [pc, #120]	; (8009c60 <UART_SetConfig+0x904>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	08db      	lsrs	r3, r3, #3
 8009bec:	f003 0303 	and.w	r3, r3, #3
 8009bf0:	4a1d      	ldr	r2, [pc, #116]	; (8009c68 <UART_SetConfig+0x90c>)
 8009bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bf8:	e00f      	b.n	8009c1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009bfa:	4b1b      	ldr	r3, [pc, #108]	; (8009c68 <UART_SetConfig+0x90c>)
 8009bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bfe:	e00c      	b.n	8009c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c00:	4b1a      	ldr	r3, [pc, #104]	; (8009c6c <UART_SetConfig+0x910>)
 8009c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c04:	e009      	b.n	8009c1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c0c:	e005      	b.n	8009c1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 81ee 	beq.w	8009ffe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	4a12      	ldr	r2, [pc, #72]	; (8009c70 <UART_SetConfig+0x914>)
 8009c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c34:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	4413      	add	r3, r2
 8009c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d305      	bcc.n	8009c52 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d910      	bls.n	8009c74 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c58:	e1d1      	b.n	8009ffe <UART_SetConfig+0xca2>
 8009c5a:	bf00      	nop
 8009c5c:	40011c00 	.word	0x40011c00
 8009c60:	58024400 	.word	0x58024400
 8009c64:	58000c00 	.word	0x58000c00
 8009c68:	03d09000 	.word	0x03d09000
 8009c6c:	003d0900 	.word	0x003d0900
 8009c70:	0800ac14 	.word	0x0800ac14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c76:	2200      	movs	r2, #0
 8009c78:	60bb      	str	r3, [r7, #8]
 8009c7a:	60fa      	str	r2, [r7, #12]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	4ac0      	ldr	r2, [pc, #768]	; (8009f84 <UART_SetConfig+0xc28>)
 8009c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	2200      	movs	r2, #0
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	607a      	str	r2, [r7, #4]
 8009c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c96:	f7f6 fb39 	bl	800030c <__aeabi_uldivmod>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	f04f 0300 	mov.w	r3, #0
 8009caa:	020b      	lsls	r3, r1, #8
 8009cac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cb0:	0202      	lsls	r2, r0, #8
 8009cb2:	6979      	ldr	r1, [r7, #20]
 8009cb4:	6849      	ldr	r1, [r1, #4]
 8009cb6:	0849      	lsrs	r1, r1, #1
 8009cb8:	2000      	movs	r0, #0
 8009cba:	460c      	mov	r4, r1
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	eb12 0804 	adds.w	r8, r2, r4
 8009cc2:	eb43 0905 	adc.w	r9, r3, r5
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	469a      	mov	sl, r3
 8009cce:	4693      	mov	fp, r2
 8009cd0:	4652      	mov	r2, sl
 8009cd2:	465b      	mov	r3, fp
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 fb18 	bl	800030c <__aeabi_uldivmod>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cea:	d308      	bcc.n	8009cfe <UART_SetConfig+0x9a2>
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cf2:	d204      	bcs.n	8009cfe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cfa:	60da      	str	r2, [r3, #12]
 8009cfc:	e17f      	b.n	8009ffe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009d04:	e17b      	b.n	8009ffe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d0e:	f040 80bd 	bne.w	8009e8c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009d12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d16:	2b20      	cmp	r3, #32
 8009d18:	dc48      	bgt.n	8009dac <UART_SetConfig+0xa50>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	db7b      	blt.n	8009e16 <UART_SetConfig+0xaba>
 8009d1e:	2b20      	cmp	r3, #32
 8009d20:	d879      	bhi.n	8009e16 <UART_SetConfig+0xaba>
 8009d22:	a201      	add	r2, pc, #4	; (adr r2, 8009d28 <UART_SetConfig+0x9cc>)
 8009d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d28:	08009db3 	.word	0x08009db3
 8009d2c:	08009dbb 	.word	0x08009dbb
 8009d30:	08009e17 	.word	0x08009e17
 8009d34:	08009e17 	.word	0x08009e17
 8009d38:	08009dc3 	.word	0x08009dc3
 8009d3c:	08009e17 	.word	0x08009e17
 8009d40:	08009e17 	.word	0x08009e17
 8009d44:	08009e17 	.word	0x08009e17
 8009d48:	08009dd3 	.word	0x08009dd3
 8009d4c:	08009e17 	.word	0x08009e17
 8009d50:	08009e17 	.word	0x08009e17
 8009d54:	08009e17 	.word	0x08009e17
 8009d58:	08009e17 	.word	0x08009e17
 8009d5c:	08009e17 	.word	0x08009e17
 8009d60:	08009e17 	.word	0x08009e17
 8009d64:	08009e17 	.word	0x08009e17
 8009d68:	08009de3 	.word	0x08009de3
 8009d6c:	08009e17 	.word	0x08009e17
 8009d70:	08009e17 	.word	0x08009e17
 8009d74:	08009e17 	.word	0x08009e17
 8009d78:	08009e17 	.word	0x08009e17
 8009d7c:	08009e17 	.word	0x08009e17
 8009d80:	08009e17 	.word	0x08009e17
 8009d84:	08009e17 	.word	0x08009e17
 8009d88:	08009e17 	.word	0x08009e17
 8009d8c:	08009e17 	.word	0x08009e17
 8009d90:	08009e17 	.word	0x08009e17
 8009d94:	08009e17 	.word	0x08009e17
 8009d98:	08009e17 	.word	0x08009e17
 8009d9c:	08009e17 	.word	0x08009e17
 8009da0:	08009e17 	.word	0x08009e17
 8009da4:	08009e17 	.word	0x08009e17
 8009da8:	08009e09 	.word	0x08009e09
 8009dac:	2b40      	cmp	r3, #64	; 0x40
 8009dae:	d02e      	beq.n	8009e0e <UART_SetConfig+0xab2>
 8009db0:	e031      	b.n	8009e16 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009db2:	f7fb fec9 	bl	8005b48 <HAL_RCC_GetPCLK1Freq>
 8009db6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009db8:	e033      	b.n	8009e22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dba:	f7fb fedb 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 8009dbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009dc0:	e02f      	b.n	8009e22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fd f8a0 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd0:	e027      	b.n	8009e22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dd2:	f107 0318 	add.w	r3, r7, #24
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fd f9ec 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009de0:	e01f      	b.n	8009e22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009de2:	4b69      	ldr	r3, [pc, #420]	; (8009f88 <UART_SetConfig+0xc2c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0320 	and.w	r3, r3, #32
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d009      	beq.n	8009e02 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dee:	4b66      	ldr	r3, [pc, #408]	; (8009f88 <UART_SetConfig+0xc2c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	08db      	lsrs	r3, r3, #3
 8009df4:	f003 0303 	and.w	r3, r3, #3
 8009df8:	4a64      	ldr	r2, [pc, #400]	; (8009f8c <UART_SetConfig+0xc30>)
 8009dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e00:	e00f      	b.n	8009e22 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009e02:	4b62      	ldr	r3, [pc, #392]	; (8009f8c <UART_SetConfig+0xc30>)
 8009e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e06:	e00c      	b.n	8009e22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e08:	4b61      	ldr	r3, [pc, #388]	; (8009f90 <UART_SetConfig+0xc34>)
 8009e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e0c:	e009      	b.n	8009e22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e14:	e005      	b.n	8009e22 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 80ea 	beq.w	8009ffe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	4a55      	ldr	r2, [pc, #340]	; (8009f84 <UART_SetConfig+0xc28>)
 8009e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e34:	461a      	mov	r2, r3
 8009e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e3c:	005a      	lsls	r2, r3, #1
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	085b      	lsrs	r3, r3, #1
 8009e44:	441a      	add	r2, r3
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e52:	2b0f      	cmp	r3, #15
 8009e54:	d916      	bls.n	8009e84 <UART_SetConfig+0xb28>
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e5c:	d212      	bcs.n	8009e84 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f023 030f 	bic.w	r3, r3, #15
 8009e66:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6a:	085b      	lsrs	r3, r3, #1
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	f003 0307 	and.w	r3, r3, #7
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e76:	4313      	orrs	r3, r2
 8009e78:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009e80:	60da      	str	r2, [r3, #12]
 8009e82:	e0bc      	b.n	8009ffe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e8a:	e0b8      	b.n	8009ffe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e90:	2b20      	cmp	r3, #32
 8009e92:	dc4b      	bgt.n	8009f2c <UART_SetConfig+0xbd0>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f2c0 8087 	blt.w	8009fa8 <UART_SetConfig+0xc4c>
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	f200 8084 	bhi.w	8009fa8 <UART_SetConfig+0xc4c>
 8009ea0:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <UART_SetConfig+0xb4c>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009f33 	.word	0x08009f33
 8009eac:	08009f3b 	.word	0x08009f3b
 8009eb0:	08009fa9 	.word	0x08009fa9
 8009eb4:	08009fa9 	.word	0x08009fa9
 8009eb8:	08009f43 	.word	0x08009f43
 8009ebc:	08009fa9 	.word	0x08009fa9
 8009ec0:	08009fa9 	.word	0x08009fa9
 8009ec4:	08009fa9 	.word	0x08009fa9
 8009ec8:	08009f53 	.word	0x08009f53
 8009ecc:	08009fa9 	.word	0x08009fa9
 8009ed0:	08009fa9 	.word	0x08009fa9
 8009ed4:	08009fa9 	.word	0x08009fa9
 8009ed8:	08009fa9 	.word	0x08009fa9
 8009edc:	08009fa9 	.word	0x08009fa9
 8009ee0:	08009fa9 	.word	0x08009fa9
 8009ee4:	08009fa9 	.word	0x08009fa9
 8009ee8:	08009f63 	.word	0x08009f63
 8009eec:	08009fa9 	.word	0x08009fa9
 8009ef0:	08009fa9 	.word	0x08009fa9
 8009ef4:	08009fa9 	.word	0x08009fa9
 8009ef8:	08009fa9 	.word	0x08009fa9
 8009efc:	08009fa9 	.word	0x08009fa9
 8009f00:	08009fa9 	.word	0x08009fa9
 8009f04:	08009fa9 	.word	0x08009fa9
 8009f08:	08009fa9 	.word	0x08009fa9
 8009f0c:	08009fa9 	.word	0x08009fa9
 8009f10:	08009fa9 	.word	0x08009fa9
 8009f14:	08009fa9 	.word	0x08009fa9
 8009f18:	08009fa9 	.word	0x08009fa9
 8009f1c:	08009fa9 	.word	0x08009fa9
 8009f20:	08009fa9 	.word	0x08009fa9
 8009f24:	08009fa9 	.word	0x08009fa9
 8009f28:	08009f9b 	.word	0x08009f9b
 8009f2c:	2b40      	cmp	r3, #64	; 0x40
 8009f2e:	d037      	beq.n	8009fa0 <UART_SetConfig+0xc44>
 8009f30:	e03a      	b.n	8009fa8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f32:	f7fb fe09 	bl	8005b48 <HAL_RCC_GetPCLK1Freq>
 8009f36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f38:	e03c      	b.n	8009fb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f3a:	f7fb fe1b 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 8009f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f40:	e038      	b.n	8009fb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fc ffe0 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f50:	e030      	b.n	8009fb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f52:	f107 0318 	add.w	r3, r7, #24
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fd f92c 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f60:	e028      	b.n	8009fb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f62:	4b09      	ldr	r3, [pc, #36]	; (8009f88 <UART_SetConfig+0xc2c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 0320 	and.w	r3, r3, #32
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d012      	beq.n	8009f94 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f6e:	4b06      	ldr	r3, [pc, #24]	; (8009f88 <UART_SetConfig+0xc2c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	08db      	lsrs	r3, r3, #3
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	4a04      	ldr	r2, [pc, #16]	; (8009f8c <UART_SetConfig+0xc30>)
 8009f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f80:	e018      	b.n	8009fb4 <UART_SetConfig+0xc58>
 8009f82:	bf00      	nop
 8009f84:	0800ac14 	.word	0x0800ac14
 8009f88:	58024400 	.word	0x58024400
 8009f8c:	03d09000 	.word	0x03d09000
 8009f90:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009f94:	4b24      	ldr	r3, [pc, #144]	; (800a028 <UART_SetConfig+0xccc>)
 8009f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f98:	e00c      	b.n	8009fb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f9a:	4b24      	ldr	r3, [pc, #144]	; (800a02c <UART_SetConfig+0xcd0>)
 8009f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f9e:	e009      	b.n	8009fb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fa6:	e005      	b.n	8009fb4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009fb2:	bf00      	nop
    }

    if (pclk != 0U)
 8009fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d021      	beq.n	8009ffe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	4a1c      	ldr	r2, [pc, #112]	; (800a030 <UART_SetConfig+0xcd4>)
 8009fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	085b      	lsrs	r3, r3, #1
 8009fd2:	441a      	add	r2, r3
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fdc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe0:	2b0f      	cmp	r3, #15
 8009fe2:	d909      	bls.n	8009ff8 <UART_SetConfig+0xc9c>
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fea:	d205      	bcs.n	8009ff8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	60da      	str	r2, [r3, #12]
 8009ff6:	e002      	b.n	8009ffe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2201      	movs	r2, #1
 800a002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2201      	movs	r2, #1
 800a00a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2200      	movs	r2, #0
 800a012:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2200      	movs	r2, #0
 800a018:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a01a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3748      	adds	r7, #72	; 0x48
 800a022:	46bd      	mov	sp, r7
 800a024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a028:	03d09000 	.word	0x03d09000
 800a02c:	003d0900 	.word	0x003d0900
 800a030:	0800ac14 	.word	0x0800ac14

0800a034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00a      	beq.n	800a05e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00a      	beq.n	800a080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	430a      	orrs	r2, r1
 800a07e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00a      	beq.n	800a0a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a6:	f003 0308 	and.w	r3, r3, #8
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00a      	beq.n	800a0c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c8:	f003 0310 	and.w	r3, r3, #16
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00a      	beq.n	800a0e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	f003 0320 	and.w	r3, r3, #32
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00a      	beq.n	800a108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01a      	beq.n	800a14a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a132:	d10a      	bne.n	800a14a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	430a      	orrs	r2, r1
 800a16a:	605a      	str	r2, [r3, #4]
  }
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b098      	sub	sp, #96	; 0x60
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a188:	f7f7 fc3c 	bl	8001a04 <HAL_GetTick>
 800a18c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0308 	and.w	r3, r3, #8
 800a198:	2b08      	cmp	r3, #8
 800a19a:	d12f      	bne.n	800a1fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a19c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f88e 	bl	800a2cc <UART_WaitOnFlagUntilTimeout>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d022      	beq.n	800a1fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e6      	bne.n	800a1b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e063      	b.n	800a2c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b04      	cmp	r3, #4
 800a208:	d149      	bne.n	800a29e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a20a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a212:	2200      	movs	r2, #0
 800a214:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f857 	bl	800a2cc <UART_WaitOnFlagUntilTimeout>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d03c      	beq.n	800a29e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22c:	e853 3f00 	ldrex	r3, [r3]
 800a230:	623b      	str	r3, [r7, #32]
   return(result);
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a242:	633b      	str	r3, [r7, #48]	; 0x30
 800a244:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1e6      	bne.n	800a224 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3308      	adds	r3, #8
 800a25c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	e853 3f00 	ldrex	r3, [r3]
 800a264:	60fb      	str	r3, [r7, #12]
   return(result);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f023 0301 	bic.w	r3, r3, #1
 800a26c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3308      	adds	r3, #8
 800a274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a276:	61fa      	str	r2, [r7, #28]
 800a278:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	69b9      	ldr	r1, [r7, #24]
 800a27c:	69fa      	ldr	r2, [r7, #28]
 800a27e:	e841 2300 	strex	r3, r2, [r1]
 800a282:	617b      	str	r3, [r7, #20]
   return(result);
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1e5      	bne.n	800a256 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2220      	movs	r2, #32
 800a28e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e012      	b.n	800a2c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3758      	adds	r7, #88	; 0x58
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2dc:	e049      	b.n	800a372 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e4:	d045      	beq.n	800a372 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2e6:	f7f7 fb8d 	bl	8001a04 <HAL_GetTick>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	69ba      	ldr	r2, [r7, #24]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d302      	bcc.n	800a2fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e048      	b.n	800a392 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d031      	beq.n	800a372 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	69db      	ldr	r3, [r3, #28]
 800a314:	f003 0308 	and.w	r3, r3, #8
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d110      	bne.n	800a33e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2208      	movs	r2, #8
 800a322:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f921 	bl	800a56c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2208      	movs	r2, #8
 800a32e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e029      	b.n	800a392 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	69db      	ldr	r3, [r3, #28]
 800a344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a34c:	d111      	bne.n	800a372 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 f907 	bl	800a56c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2220      	movs	r2, #32
 800a362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e00f      	b.n	800a392 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	69da      	ldr	r2, [r3, #28]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	4013      	ands	r3, r2
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	429a      	cmp	r2, r3
 800a380:	bf0c      	ite	eq
 800a382:	2301      	moveq	r3, #1
 800a384:	2300      	movne	r3, #0
 800a386:	b2db      	uxtb	r3, r3
 800a388:	461a      	mov	r2, r3
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d0a6      	beq.n	800a2de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b096      	sub	sp, #88	; 0x58
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	88fa      	ldrh	r2, [r7, #6]
 800a3b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2222      	movs	r2, #34	; 0x22
 800a3c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d02d      	beq.n	800a42e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3d8:	4a40      	ldr	r2, [pc, #256]	; (800a4dc <UART_Start_Receive_DMA+0x140>)
 800a3da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3e2:	4a3f      	ldr	r2, [pc, #252]	; (800a4e0 <UART_Start_Receive_DMA+0x144>)
 800a3e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ec:	4a3d      	ldr	r2, [pc, #244]	; (800a4e4 <UART_Start_Receive_DMA+0x148>)
 800a3ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3324      	adds	r3, #36	; 0x24
 800a406:	4619      	mov	r1, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a40c:	461a      	mov	r2, r3
 800a40e:	88fb      	ldrh	r3, [r7, #6]
 800a410:	f7f7 ff6c 	bl	80022ec <HAL_DMA_Start_IT>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2210      	movs	r2, #16
 800a41e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2220      	movs	r2, #32
 800a426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e051      	b.n	800a4d2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d018      	beq.n	800a468 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a43e:	e853 3f00 	ldrex	r3, [r3]
 800a442:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a44a:	657b      	str	r3, [r7, #84]	; 0x54
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	461a      	mov	r2, r3
 800a452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a454:	64bb      	str	r3, [r7, #72]	; 0x48
 800a456:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a458:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a45c:	e841 2300 	strex	r3, r2, [r1]
 800a460:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e6      	bne.n	800a436 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3308      	adds	r3, #8
 800a46e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	f043 0301 	orr.w	r3, r3, #1
 800a47e:	653b      	str	r3, [r7, #80]	; 0x50
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a488:	637a      	str	r2, [r7, #52]	; 0x34
 800a48a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e5      	bne.n	800a468 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4bc:	623a      	str	r2, [r7, #32]
 800a4be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c0:	69f9      	ldr	r1, [r7, #28]
 800a4c2:	6a3a      	ldr	r2, [r7, #32]
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e5      	bne.n	800a49c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3758      	adds	r7, #88	; 0x58
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	0800a639 	.word	0x0800a639
 800a4e0:	0800a761 	.word	0x0800a761
 800a4e4:	0800a79f 	.word	0x0800a79f

0800a4e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b08f      	sub	sp, #60	; 0x3c
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	e853 3f00 	ldrex	r3, [r3]
 800a4fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a504:	637b      	str	r3, [r7, #52]	; 0x34
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a510:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e6      	bne.n	800a4f0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3308      	adds	r3, #8
 800a528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	60bb      	str	r3, [r7, #8]
   return(result);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a538:	633b      	str	r3, [r7, #48]	; 0x30
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3308      	adds	r3, #8
 800a540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a542:	61ba      	str	r2, [r7, #24]
 800a544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a546:	6979      	ldr	r1, [r7, #20]
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	e841 2300 	strex	r3, r2, [r1]
 800a54e:	613b      	str	r3, [r7, #16]
   return(result);
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e5      	bne.n	800a522 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2220      	movs	r2, #32
 800a55a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a55e:	bf00      	nop
 800a560:	373c      	adds	r7, #60	; 0x3c
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
	...

0800a56c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b095      	sub	sp, #84	; 0x54
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57c:	e853 3f00 	ldrex	r3, [r3]
 800a580:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a592:	643b      	str	r3, [r7, #64]	; 0x40
 800a594:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a596:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a59a:	e841 2300 	strex	r3, r2, [r1]
 800a59e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1e6      	bne.n	800a574 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5b6:	69fa      	ldr	r2, [r7, #28]
 800a5b8:	4b1e      	ldr	r3, [pc, #120]	; (800a634 <UART_EndRxTransfer+0xc8>)
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3308      	adds	r3, #8
 800a5c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ce:	e841 2300 	strex	r3, r2, [r1]
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1e5      	bne.n	800a5a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d118      	bne.n	800a614 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	e853 3f00 	ldrex	r3, [r3]
 800a5ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f023 0310 	bic.w	r3, r3, #16
 800a5f6:	647b      	str	r3, [r7, #68]	; 0x44
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a600:	61bb      	str	r3, [r7, #24]
 800a602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a604:	6979      	ldr	r1, [r7, #20]
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	e841 2300 	strex	r3, r2, [r1]
 800a60c:	613b      	str	r3, [r7, #16]
   return(result);
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e6      	bne.n	800a5e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2220      	movs	r2, #32
 800a618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a628:	bf00      	nop
 800a62a:	3754      	adds	r7, #84	; 0x54
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	effffffe 	.word	0xeffffffe

0800a638 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b09c      	sub	sp, #112	; 0x70
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a64e:	d071      	beq.n	800a734 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a652:	2200      	movs	r2, #0
 800a654:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a660:	e853 3f00 	ldrex	r3, [r3]
 800a664:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a66c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a66e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a676:	65bb      	str	r3, [r7, #88]	; 0x58
 800a678:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a67c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a67e:	e841 2300 	strex	r3, r2, [r1]
 800a682:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1e6      	bne.n	800a658 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3308      	adds	r3, #8
 800a690:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a694:	e853 3f00 	ldrex	r3, [r3]
 800a698:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69c:	f023 0301 	bic.w	r3, r3, #1
 800a6a0:	667b      	str	r3, [r7, #100]	; 0x64
 800a6a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6aa:	647a      	str	r2, [r7, #68]	; 0x44
 800a6ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6b2:	e841 2300 	strex	r3, r2, [r1]
 800a6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1e5      	bne.n	800a68a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a6d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3308      	adds	r3, #8
 800a6dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6de:	633a      	str	r2, [r7, #48]	; 0x30
 800a6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e5      	bne.n	800a6be <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d118      	bne.n	800a734 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	e853 3f00 	ldrex	r3, [r3]
 800a70e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f023 0310 	bic.w	r3, r3, #16
 800a716:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	461a      	mov	r2, r3
 800a71e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a720:	61fb      	str	r3, [r7, #28]
 800a722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a724:	69b9      	ldr	r1, [r7, #24]
 800a726:	69fa      	ldr	r2, [r7, #28]
 800a728:	e841 2300 	strex	r3, r2, [r1]
 800a72c:	617b      	str	r3, [r7, #20]
   return(result);
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1e6      	bne.n	800a702 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a736:	2200      	movs	r2, #0
 800a738:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d107      	bne.n	800a752 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a748:	4619      	mov	r1, r3
 800a74a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a74c:	f7f5 ff5c 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a750:	e002      	b.n	800a758 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a752:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a754:	f7fe fde4 	bl	8009320 <HAL_UART_RxCpltCallback>
}
 800a758:	bf00      	nop
 800a75a:	3770      	adds	r7, #112	; 0x70
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2201      	movs	r2, #1
 800a772:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d109      	bne.n	800a790 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a782:	085b      	lsrs	r3, r3, #1
 800a784:	b29b      	uxth	r3, r3
 800a786:	4619      	mov	r1, r3
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f7f5 ff3d 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a78e:	e002      	b.n	800a796 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7fe fdcf 	bl	8009334 <HAL_UART_RxHalfCpltCallback>
}
 800a796:	bf00      	nop
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b086      	sub	sp, #24
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c6:	2b80      	cmp	r3, #128	; 0x80
 800a7c8:	d109      	bne.n	800a7de <UART_DMAError+0x40>
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	2b21      	cmp	r3, #33	; 0x21
 800a7ce:	d106      	bne.n	800a7de <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a7d8:	6978      	ldr	r0, [r7, #20]
 800a7da:	f7ff fe85 	bl	800a4e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e8:	2b40      	cmp	r3, #64	; 0x40
 800a7ea:	d109      	bne.n	800a800 <UART_DMAError+0x62>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b22      	cmp	r3, #34	; 0x22
 800a7f0:	d106      	bne.n	800a800 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a7fa:	6978      	ldr	r0, [r7, #20]
 800a7fc:	f7ff feb6 	bl	800a56c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a806:	f043 0210 	orr.w	r2, r3, #16
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a810:	6978      	ldr	r0, [r7, #20]
 800a812:	f7fe fd99 	bl	8009348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a816:	bf00      	nop
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f7fe fd83 	bl	8009348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a842:	bf00      	nop
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b088      	sub	sp, #32
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	e853 3f00 	ldrex	r3, [r3]
 800a85e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a866:	61fb      	str	r3, [r7, #28]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	461a      	mov	r2, r3
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	61bb      	str	r3, [r7, #24]
 800a872:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a874:	6979      	ldr	r1, [r7, #20]
 800a876:	69ba      	ldr	r2, [r7, #24]
 800a878:	e841 2300 	strex	r3, r2, [r1]
 800a87c:	613b      	str	r3, [r7, #16]
   return(result);
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1e6      	bne.n	800a852 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f7fe fd3a 	bl	800930c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a898:	bf00      	nop
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d101      	bne.n	800a8f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e027      	b.n	800a942 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2224      	movs	r2, #36	; 0x24
 800a8fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0201 	bic.w	r2, r2, #1
 800a918:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a920:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2220      	movs	r2, #32
 800a934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d101      	bne.n	800a966 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a962:	2302      	movs	r3, #2
 800a964:	e02d      	b.n	800a9c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2224      	movs	r2, #36	; 0x24
 800a972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0201 	bic.w	r2, r2, #1
 800a98c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f8a4 	bl	800aaf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2220      	movs	r2, #32
 800a9b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d101      	bne.n	800a9e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9de:	2302      	movs	r3, #2
 800a9e0:	e02d      	b.n	800aa3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2224      	movs	r2, #36	; 0x24
 800a9ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0201 	bic.w	r2, r2, #1
 800aa08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f866 	bl	800aaf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2220      	movs	r2, #32
 800aa30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b08c      	sub	sp, #48	; 0x30
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	4613      	mov	r3, r2
 800aa52:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa5a:	2b20      	cmp	r3, #32
 800aa5c:	d142      	bne.n	800aae4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800aa64:	88fb      	ldrh	r3, [r7, #6]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e03b      	b.n	800aae6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2201      	movs	r2, #1
 800aa72:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800aa7a:	88fb      	ldrh	r3, [r7, #6]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	68b9      	ldr	r1, [r7, #8]
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7ff fc8b 	bl	800a39c <UART_Start_Receive_DMA>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800aa8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d124      	bne.n	800aade <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d11d      	bne.n	800aad8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2210      	movs	r2, #16
 800aaa2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	617b      	str	r3, [r7, #20]
   return(result);
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f043 0310 	orr.w	r3, r3, #16
 800aab8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
 800aac4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac6:	6a39      	ldr	r1, [r7, #32]
 800aac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	61fb      	str	r3, [r7, #28]
   return(result);
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e6      	bne.n	800aaa4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800aad6:	e002      	b.n	800aade <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800aade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aae2:	e000      	b.n	800aae6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aae4:	2302      	movs	r3, #2
  }
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3730      	adds	r7, #48	; 0x30
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d108      	bne.n	800ab12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab10:	e031      	b.n	800ab76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab12:	2310      	movs	r3, #16
 800ab14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab16:	2310      	movs	r3, #16
 800ab18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	0e5b      	lsrs	r3, r3, #25
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	f003 0307 	and.w	r3, r3, #7
 800ab28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	0f5b      	lsrs	r3, r3, #29
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	f003 0307 	and.w	r3, r3, #7
 800ab38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab3a:	7bbb      	ldrb	r3, [r7, #14]
 800ab3c:	7b3a      	ldrb	r2, [r7, #12]
 800ab3e:	4911      	ldr	r1, [pc, #68]	; (800ab84 <UARTEx_SetNbDataToProcess+0x94>)
 800ab40:	5c8a      	ldrb	r2, [r1, r2]
 800ab42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab46:	7b3a      	ldrb	r2, [r7, #12]
 800ab48:	490f      	ldr	r1, [pc, #60]	; (800ab88 <UARTEx_SetNbDataToProcess+0x98>)
 800ab4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	7b7a      	ldrb	r2, [r7, #13]
 800ab5c:	4909      	ldr	r1, [pc, #36]	; (800ab84 <UARTEx_SetNbDataToProcess+0x94>)
 800ab5e:	5c8a      	ldrb	r2, [r1, r2]
 800ab60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab64:	7b7a      	ldrb	r2, [r7, #13]
 800ab66:	4908      	ldr	r1, [pc, #32]	; (800ab88 <UARTEx_SetNbDataToProcess+0x98>)
 800ab68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab76:	bf00      	nop
 800ab78:	3714      	adds	r7, #20
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	0800ac2c 	.word	0x0800ac2c
 800ab88:	0800ac34 	.word	0x0800ac34

0800ab8c <memset>:
 800ab8c:	4402      	add	r2, r0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d100      	bne.n	800ab96 <memset+0xa>
 800ab94:	4770      	bx	lr
 800ab96:	f803 1b01 	strb.w	r1, [r3], #1
 800ab9a:	e7f9      	b.n	800ab90 <memset+0x4>

0800ab9c <__libc_init_array>:
 800ab9c:	b570      	push	{r4, r5, r6, lr}
 800ab9e:	4d0d      	ldr	r5, [pc, #52]	; (800abd4 <__libc_init_array+0x38>)
 800aba0:	4c0d      	ldr	r4, [pc, #52]	; (800abd8 <__libc_init_array+0x3c>)
 800aba2:	1b64      	subs	r4, r4, r5
 800aba4:	10a4      	asrs	r4, r4, #2
 800aba6:	2600      	movs	r6, #0
 800aba8:	42a6      	cmp	r6, r4
 800abaa:	d109      	bne.n	800abc0 <__libc_init_array+0x24>
 800abac:	4d0b      	ldr	r5, [pc, #44]	; (800abdc <__libc_init_array+0x40>)
 800abae:	4c0c      	ldr	r4, [pc, #48]	; (800abe0 <__libc_init_array+0x44>)
 800abb0:	f000 f818 	bl	800abe4 <_init>
 800abb4:	1b64      	subs	r4, r4, r5
 800abb6:	10a4      	asrs	r4, r4, #2
 800abb8:	2600      	movs	r6, #0
 800abba:	42a6      	cmp	r6, r4
 800abbc:	d105      	bne.n	800abca <__libc_init_array+0x2e>
 800abbe:	bd70      	pop	{r4, r5, r6, pc}
 800abc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abc4:	4798      	blx	r3
 800abc6:	3601      	adds	r6, #1
 800abc8:	e7ee      	b.n	800aba8 <__libc_init_array+0xc>
 800abca:	f855 3b04 	ldr.w	r3, [r5], #4
 800abce:	4798      	blx	r3
 800abd0:	3601      	adds	r6, #1
 800abd2:	e7f2      	b.n	800abba <__libc_init_array+0x1e>
 800abd4:	0800ac44 	.word	0x0800ac44
 800abd8:	0800ac44 	.word	0x0800ac44
 800abdc:	0800ac44 	.word	0x0800ac44
 800abe0:	0800ac48 	.word	0x0800ac48

0800abe4 <_init>:
 800abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe6:	bf00      	nop
 800abe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abea:	bc08      	pop	{r3}
 800abec:	469e      	mov	lr, r3
 800abee:	4770      	bx	lr

0800abf0 <_fini>:
 800abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf2:	bf00      	nop
 800abf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf6:	bc08      	pop	{r3}
 800abf8:	469e      	mov	lr, r3
 800abfa:	4770      	bx	lr
