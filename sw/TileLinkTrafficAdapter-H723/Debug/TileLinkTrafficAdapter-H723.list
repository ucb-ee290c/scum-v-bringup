
TileLinkTrafficAdapter-H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b0  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b57c  0800b57c  0001b57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b5bc  0800b5bc  0001b5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b5c4  0800b5c4  0001b5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b5c8  0800b5c8  0001b5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800b5cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000514  24000010  0800b5dc  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000524  0800b5dc  00020524  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016e87  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000295f  00000000  00000000  00036f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001120  00000000  00000000  00039868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d6b  00000000  00000000  0003a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003398b  00000000  00000000  0003b6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017f65  00000000  00000000  0006f07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014cfcb  00000000  00000000  00086fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000048b0  00000000  00000000  001d3fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  001d8860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b564 	.word	0x0800b564

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800b564 	.word	0x0800b564

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_TIM_IC_CaptureCallback>:

TileLinkController tl;

char str[128];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  TL_update(&tl);
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x18>)
 8000612:	f000 fe0f 	bl	8001234 <TL_update>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	24000030 	.word	0x24000030

08000624 <HAL_UARTEx_RxEventCallback>:
uint8_t serial_rx_buffer[SERIAL_BUFFER_SIZE];
uint8_t serial_tx_buffer[SERIAL_BUFFER_SIZE];

uint8_t frame_pending = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d131      	bne.n	800069c <HAL_UARTEx_RxEventCallback+0x78>

    tl.tx_frame.chanid  = *(serial_rx_buffer);
 8000638:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800063e:	701a      	strb	r2, [r3, #0]
    tl.tx_frame.opcode  = (*(serial_rx_buffer + 1)) & 0b111;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000642:	785b      	ldrb	r3, [r3, #1]
 8000644:	f003 0307 	and.w	r3, r3, #7
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800064c:	705a      	strb	r2, [r3, #1]
    tl.tx_frame.param   = (*(serial_rx_buffer + 1)) >> 4;
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	091b      	lsrs	r3, r3, #4
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000658:	709a      	strb	r2, [r3, #2]
    tl.tx_frame.size    = *(serial_rx_buffer + 2);
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800065c:	789a      	ldrb	r2, [r3, #2]
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000660:	70da      	strb	r2, [r3, #3]
    tl.tx_frame.source  = 0;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	711a      	strb	r2, [r3, #4]
    tl.tx_frame.address = *(uint32_t *)(serial_rx_buffer + 4);
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800066e:	6093      	str	r3, [r2, #8]
    tl.tx_frame.data    = *(uint64_t *)(serial_rx_buffer + 8);
 8000670:	4910      	ldr	r1, [pc, #64]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000672:	688a      	ldr	r2, [r1, #8]
 8000674:	68cb      	ldr	r3, [r1, #12]
 8000676:	4910      	ldr	r1, [pc, #64]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000678:	e9c1 2304 	strd	r2, r3, [r1, #16]
    tl.tx_frame.corrupt = (*(serial_rx_buffer + 1) >> 7) & 0b1;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800067e:	785b      	ldrb	r3, [r3, #1]
 8000680:	09db      	lsrs	r3, r3, #7
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000686:	761a      	strb	r2, [r3, #24]
    tl.tx_frame.mask    = *(serial_rx_buffer + 3);
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800068a:	78da      	ldrb	r2, [r3, #3]
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 800068e:	765a      	strb	r2, [r3, #25]
    tl.tx_frame.last    = 1;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000692:	2201      	movs	r2, #1
 8000694:	769a      	strb	r2, [r3, #26]

    frame_pending = 1;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_UARTEx_RxEventCallback+0x98>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 800069c:	2220      	movs	r2, #32
 800069e:	4905      	ldr	r1, [pc, #20]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 80006a2:	f00a fe90 	bl	800b3c6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2400039c 	.word	0x2400039c
 80006b4:	24000280 	.word	0x24000280
 80006b8:	24000030 	.word	0x24000030
 80006bc:	24000300 	.word	0x24000300

080006c0 <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006c4:	2100      	movs	r1, #0
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <APP_init+0x24>)
 80006c8:	f007 f8b6 	bl	8007838 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <APP_init+0x28>)
 80006d0:	f007 fa26 	bl	8007b20 <HAL_TIM_IC_Start_IT>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 80006d4:	2220      	movs	r2, #32
 80006d6:	4905      	ldr	r1, [pc, #20]	; (80006ec <APP_init+0x2c>)
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <APP_init+0x30>)
 80006da:	f00a fe74 	bl	800b3c6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	24000304 	.word	0x24000304
 80006e8:	24000350 	.word	0x24000350
 80006ec:	24000280 	.word	0x24000280
 80006f0:	2400039c 	.word	0x2400039c

080006f4 <APP_main>:


void APP_main() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  if (frame_pending) {
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <APP_main+0x9c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d044      	beq.n	800078a <APP_main+0x96>
    TL_transmit(&tl);
 8000700:	4824      	ldr	r0, [pc, #144]	; (8000794 <APP_main+0xa0>)
 8000702:	f001 f87d 	bl	8001800 <TL_transmit>
    while (!tl.rx_finished) {}
 8000706:	bf00      	nop
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <APP_main+0xa0>)
 800070a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0fa      	beq.n	8000708 <APP_main+0x14>
    TL_deserialize(&tl.rx_frame);
 8000712:	4821      	ldr	r0, [pc, #132]	; (8000798 <APP_main+0xa4>)
 8000714:	f000 ff20 	bl	8001558 <TL_deserialize>
    frame_pending = 0;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <APP_main+0x9c>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]

    *(serial_tx_buffer) = tl.rx_frame.chanid;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <APP_main+0xa0>)
 8000720:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <APP_main+0xa8>)
 8000726:	701a      	strb	r2, [r3, #0]
    *(serial_tx_buffer + 1) = (tl.rx_frame.corrupt << 7) | (tl.rx_frame.param << 4) | tl.rx_frame.opcode;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <APP_main+0xa0>)
 800072a:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800072e:	01db      	lsls	r3, r3, #7
 8000730:	b25a      	sxtb	r2, r3
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <APP_main+0xa0>)
 8000734:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	b25b      	sxtb	r3, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	b25a      	sxtb	r2, r3
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <APP_main+0xa0>)
 8000742:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8000746:	b25b      	sxtb	r3, r3
 8000748:	4313      	orrs	r3, r2
 800074a:	b25b      	sxtb	r3, r3
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <APP_main+0xa8>)
 8000750:	705a      	strb	r2, [r3, #1]
    *(serial_tx_buffer + 2) = tl.rx_frame.size;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <APP_main+0xa0>)
 8000754:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <APP_main+0xa8>)
 800075a:	709a      	strb	r2, [r3, #2]
    *(serial_tx_buffer + 3) = tl.rx_frame.mask;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <APP_main+0xa0>)
 800075e:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <APP_main+0xa8>)
 8000764:	70da      	strb	r2, [r3, #3]
    *(uint32_t *)(serial_tx_buffer + 4) = tl.rx_frame.address;
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <APP_main+0xac>)
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <APP_main+0xa0>)
 800076a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800076e:	6013      	str	r3, [r2, #0]
    *(uint64_t *)(serial_tx_buffer + 8) = tl.rx_frame.data;
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <APP_main+0xb0>)
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <APP_main+0xa0>)
 8000774:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8000778:	e9c1 2300 	strd	r2, r3, [r1]

    HAL_UART_Transmit(&huart3, serial_tx_buffer, 16, 1000);
 800077c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000780:	2210      	movs	r2, #16
 8000782:	4906      	ldr	r1, [pc, #24]	; (800079c <APP_main+0xa8>)
 8000784:	4808      	ldr	r0, [pc, #32]	; (80007a8 <APP_main+0xb4>)
 8000786:	f008 fe39 	bl	80093fc <HAL_UART_Transmit>
  }
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	24000300 	.word	0x24000300
 8000794:	24000030 	.word	0x24000030
 8000798:	24000150 	.word	0x24000150
 800079c:	240002c0 	.word	0x240002c0
 80007a0:	240002c4 	.word	0x240002c4
 80007a4:	240002c8 	.word	0x240002c8
 80007a8:	2400039c 	.word	0x2400039c

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f001 f874 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f810 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 f9f2 	bl	8000ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f000 f9c8 	bl	8000b50 <MX_DMA_Init>
  MX_TIM4_Init();
 80007c0:	f000 f924 	bl	8000a0c <MX_TIM4_Init>
  MX_TIM1_Init();
 80007c4:	f000 f876 	bl	80008b4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80007c8:	f000 f974 	bl	8000ab4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 80007cc:	f7ff ff78 	bl	80006c0 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	APP_main();
 80007d0:	f7ff ff90 	bl	80006f4 <APP_main>
 80007d4:	e7fc      	b.n	80007d0 <main+0x24>
	...

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	; 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	224c      	movs	r2, #76	; 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f00a fe90 	bl	800b50c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00a fe8a 	bl	800b50c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f004 fa03 	bl	8004c04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <SystemClock_Config+0xd8>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <SystemClock_Config+0xd8>)
 8000808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <SystemClock_Config+0xd8>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800081a:	bf00      	nop
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <SystemClock_Config+0xd8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000828:	d1f8      	bne.n	800081c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082a:	2302      	movs	r3, #2
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800082e:	2301      	movs	r3, #1
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000832:	2340      	movs	r3, #64	; 0x40
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083a:	2300      	movs	r3, #0
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800083e:	2304      	movs	r3, #4
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000842:	2314      	movs	r3, #20
 8000844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000846:	2301      	movs	r3, #1
 8000848:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000852:	230c      	movs	r3, #12
 8000854:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fa08 	bl	8004c78 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 fa71 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	233f      	movs	r3, #63	; 0x3f
 8000874:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2303      	movs	r3, #3
 8000878:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800087e:	2308      	movs	r3, #8
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2102      	movs	r1, #2
 8000898:	4618      	mov	r0, r3
 800089a:	f004 fdc7 	bl	800542c <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008a4:	f000 fa56 	bl	8000d54 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3770      	adds	r7, #112	; 0x70
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58024800 	.word	0x58024800

080008b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b09c      	sub	sp, #112	; 0x70
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
 80008e4:	615a      	str	r2, [r3, #20]
 80008e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2234      	movs	r2, #52	; 0x34
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00a fe0c 	bl	800b50c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008f4:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <MX_TIM1_Init+0x150>)
 80008f6:	4a44      	ldr	r2, [pc, #272]	; (8000a08 <MX_TIM1_Init+0x154>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008fa:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <MX_TIM1_Init+0x150>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <MX_TIM1_Init+0x150>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <MX_TIM1_Init+0x150>)
 8000908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090e:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <MX_TIM1_Init+0x150>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <MX_TIM1_Init+0x150>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <MX_TIM1_Init+0x150>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000920:	4838      	ldr	r0, [pc, #224]	; (8000a04 <MX_TIM1_Init+0x150>)
 8000922:	f006 fed1 	bl	80076c8 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 fa12 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000934:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800093a:	4619      	mov	r1, r3
 800093c:	4831      	ldr	r0, [pc, #196]	; (8000a04 <MX_TIM1_Init+0x150>)
 800093e:	f007 fd1d 	bl	800837c <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000948:	f000 fa04 	bl	8000d54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800094c:	482d      	ldr	r0, [pc, #180]	; (8000a04 <MX_TIM1_Init+0x150>)
 800094e:	f006 ff12 	bl	8007776 <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000958:	f000 f9fc 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000960:	2300      	movs	r3, #0
 8000962:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000968:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800096c:	4619      	mov	r1, r3
 800096e:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_TIM1_Init+0x150>)
 8000970:	f008 fb9a 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800097a:	f000 f9eb 	bl	8000d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097e:	2360      	movs	r3, #96	; 0x60
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000986:	2300      	movs	r3, #0
 8000988:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800098a:	2300      	movs	r3, #0
 800098c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4818      	ldr	r0, [pc, #96]	; (8000a04 <MX_TIM1_Init+0x150>)
 80009a4:	f007 fbd6 	bl	8008154 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009ae:	f000 f9d1 	bl	8000d54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <MX_TIM1_Init+0x150>)
 80009e8:	f008 fbfa 	bl	80091e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009f2:	f000 f9af 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <MX_TIM1_Init+0x150>)
 80009f8:	f000 fa40 	bl	8000e7c <HAL_TIM_MspPostInit>

}
 80009fc:	bf00      	nop
 80009fe:	3770      	adds	r7, #112	; 0x70
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	24000304 	.word	0x24000304
 8000a08:	40010000 	.word	0x40010000

08000a0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_TIM4_Init+0xa0>)
 8000a2c:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <MX_TIM4_Init+0xa4>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_TIM4_Init+0xa0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_TIM4_Init+0xa0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_TIM4_Init+0xa0>)
 8000a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_TIM4_Init+0xa0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_TIM4_Init+0xa0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <MX_TIM4_Init+0xa0>)
 8000a52:	f007 f80d 	bl	8007a70 <HAL_TIM_IC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a5c:	f000 f97a 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_TIM4_Init+0xa0>)
 8000a70:	f008 fb1a 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000a7a:	f000 f96b 	bl	8000d54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a82:	2301      	movs	r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_TIM4_Init+0xa0>)
 8000a96:	f007 fac0 	bl	800801a <HAL_TIM_IC_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000aa0:	f000 f958 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	24000350 	.word	0x24000350
 8000ab0:	40000800 	.word	0x40000800

08000ab4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000aba:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <MX_USART3_UART_Init+0x94>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ac0:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <MX_USART3_UART_Init+0x98>)
 8000ac2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ad8:	220c      	movs	r2, #12
 8000ada:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000afa:	4812      	ldr	r0, [pc, #72]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000afc:	f008 fc2e 	bl	800935c <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000b06:	f000 f925 	bl	8000d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000b0e:	f00a fbde 	bl	800b2ce <HAL_UARTEx_SetTxFifoThreshold>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000b18:	f000 f91c 	bl	8000d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4809      	ldr	r0, [pc, #36]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000b20:	f00a fc13 	bl	800b34a <HAL_UARTEx_SetRxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000b2a:	f000 f913 	bl	8000d54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000b30:	f00a fb94 	bl	800b25c <HAL_UARTEx_DisableFifoMode>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000b3a:	f000 f90b 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2400039c 	.word	0x2400039c
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	001e8480 	.word	0x001e8480

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_DMA_Init+0x4c>)
 8000b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b5c:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <MX_DMA_Init+0x4c>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_DMA_Init+0x4c>)
 8000b68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2010      	movs	r0, #16
 8000b7a:	f000 fffc 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b7e:	2010      	movs	r0, #16
 8000b80:	f001 f813 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2011      	movs	r0, #17
 8000b8a:	f000 fff4 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b8e:	2011      	movs	r0, #17
 8000b90:	f001 f80b 	bl	8001baa <HAL_NVIC_EnableIRQ>

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58024400 	.word	0x58024400

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a60      	ldr	r2, [pc, #384]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b5e      	ldr	r3, [pc, #376]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd4:	4b5a      	ldr	r3, [pc, #360]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a59      	ldr	r2, [pc, #356]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000bdc:	f043 0320 	orr.w	r3, r3, #32
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0320 	and.w	r3, r3, #32
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a51      	ldr	r2, [pc, #324]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b4f      	ldr	r3, [pc, #316]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a4a      	ldr	r2, [pc, #296]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c2e:	4b44      	ldr	r3, [pc, #272]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a42      	ldr	r2, [pc, #264]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4c:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a3b      	ldr	r2, [pc, #236]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <MX_GPIO_Init+0x1a0>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c70:	4834      	ldr	r0, [pc, #208]	; (8000d44 <MX_GPIO_Init+0x1a4>)
 8000c72:	f003 ffad 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2104      	movs	r1, #4
 8000c7a:	4833      	ldr	r0, [pc, #204]	; (8000d48 <MX_GPIO_Init+0x1a8>)
 8000c7c:	f003 ffa8 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2108      	movs	r1, #8
 8000c84:	4831      	ldr	r0, [pc, #196]	; (8000d4c <MX_GPIO_Init+0x1ac>)
 8000c86:	f003 ffa3 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4830      	ldr	r0, [pc, #192]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000c90:	f003 ff9e 	bl	8004bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TL_OUT_VALID_Pin TL_OUT_DATA_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TL_OUT_VALID_Pin|TL_OUT_DATA_Pin;
 8000c94:	f242 0309 	movw	r3, #8201	; 0x2009
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4827      	ldr	r0, [pc, #156]	; (8000d48 <MX_GPIO_Init+0x1a8>)
 8000caa:	f003 fdd1 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_DATA_Pin */
  GPIO_InitStruct.Pin = TL_IN_DATA_Pin;
 8000cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_DATA_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	481f      	ldr	r0, [pc, #124]	; (8000d44 <MX_GPIO_Init+0x1a4>)
 8000cc8:	f003 fdc2 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_VALID_Pin */
  GPIO_InitStruct.Pin = TL_IN_VALID_Pin;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_VALID_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4819      	ldr	r0, [pc, #100]	; (8000d48 <MX_GPIO_Init+0x1a8>)
 8000ce4:	f003 fdb4 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_OUT_READY_Pin */
  GPIO_InitStruct.Pin = TL_OUT_READY_Pin;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_OUT_READY_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4813      	ldr	r0, [pc, #76]	; (8000d4c <MX_GPIO_Init+0x1ac>)
 8000d00:	f003 fda6 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000d1c:	f003 fd98 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_READY_Pin */
  GPIO_InitStruct.Pin = TL_IN_READY_Pin;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_IN_READY_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4807      	ldr	r0, [pc, #28]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000d34:	f003 fd8c 	bl	8004850 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d38:	bf00      	nop
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	58024400 	.word	0x58024400
 8000d44:	58021400 	.word	0x58021400
 8000d48:	58020800 	.word	0x58020800
 8000d4c:	58020000 	.word	0x58020000
 8000d50:	58020400 	.word	0x58020400

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>
	...

08000d60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_MspInit+0x30>)
 8000d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d6c:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x30>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	58024400 	.word	0x58024400

08000d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_TIM_Base_MspInit+0x3c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d10e      	bne.n	8000dc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_TIM_Base_MspInit+0x40>)
 8000da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <HAL_TIM_Base_MspInit+0x40>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <HAL_TIM_Base_MspInit+0x40>)
 8000db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	58024400 	.word	0x58024400

08000dd8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HAL_TIM_IC_MspInit+0x98>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d136      	bne.n	8000e68 <HAL_TIM_IC_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_TIM_IC_MspInit+0x9c>)
 8000dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_TIM_IC_MspInit+0x9c>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <HAL_TIM_IC_MspInit+0x9c>)
 8000e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_TIM_IC_MspInit+0x9c>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <HAL_TIM_IC_MspInit+0x9c>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_TIM_IC_MspInit+0x9c>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <HAL_TIM_IC_MspInit+0xa0>)
 8000e54:	f003 fcfc 	bl	8004850 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	201e      	movs	r0, #30
 8000e5e:	f000 fe8a 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e62:	201e      	movs	r0, #30
 8000e64:	f000 fea1 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40000800 	.word	0x40000800
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020c00 	.word	0x58020c00

08000e7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <HAL_TIM_MspPostInit+0x6c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d11f      	bne.n	8000ede <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_TIM_MspPostInit+0x70>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <HAL_TIM_MspPostInit+0x70>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_TIM_MspPostInit+0x70>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_TIM_MspPostInit+0x74>)
 8000eda:	f003 fcb9 	bl	8004850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3720      	adds	r7, #32
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58021000 	.word	0x58021000

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0b8      	sub	sp, #224	; 0xe0
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	22b8      	movs	r2, #184	; 0xb8
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f00a faf9 	bl	800b50c <memset>
  if(huart->Instance==USART3)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a59      	ldr	r2, [pc, #356]	; (8001084 <HAL_UART_MspInit+0x190>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	f040 80aa 	bne.w	800107a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f26:	f04f 0202 	mov.w	r2, #2
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fe01 	bl	8005b44 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000f48:	f7ff ff04 	bl	8000d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4c:	4b4e      	ldr	r3, [pc, #312]	; (8001088 <HAL_UART_MspInit+0x194>)
 8000f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f52:	4a4d      	ldr	r2, [pc, #308]	; (8001088 <HAL_UART_MspInit+0x194>)
 8000f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f5c:	4b4a      	ldr	r3, [pc, #296]	; (8001088 <HAL_UART_MspInit+0x194>)
 8000f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <HAL_UART_MspInit+0x194>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	4a45      	ldr	r2, [pc, #276]	; (8001088 <HAL_UART_MspInit+0x194>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7a:	4b43      	ldr	r3, [pc, #268]	; (8001088 <HAL_UART_MspInit+0x194>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fac:	4619      	mov	r1, r3
 8000fae:	4837      	ldr	r0, [pc, #220]	; (800108c <HAL_UART_MspInit+0x198>)
 8000fb0:	f003 fc4e 	bl	8004850 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8000fb4:	4b36      	ldr	r3, [pc, #216]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fb6:	4a37      	ldr	r2, [pc, #220]	; (8001094 <HAL_UART_MspInit+0x1a0>)
 8000fb8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fbc:	222d      	movs	r2, #45	; 0x2d
 8000fbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc6:	4b32      	ldr	r3, [pc, #200]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fcc:	4b30      	ldr	r3, [pc, #192]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd4:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ff2:	4827      	ldr	r0, [pc, #156]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8000ff4:	f000 fdf4 	bl	8001be0 <HAL_DMA_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000ffe:	f7ff fea9 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a22      	ldr	r2, [pc, #136]	; (8001090 <HAL_UART_MspInit+0x19c>)
 8001006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800100a:	4a21      	ldr	r2, [pc, #132]	; (8001090 <HAL_UART_MspInit+0x19c>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream6;
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 8001012:	4a22      	ldr	r2, [pc, #136]	; (800109c <HAL_UART_MspInit+0x1a8>)
 8001014:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 8001018:	222e      	movs	r2, #46	; 0x2e
 800101a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 800101e:	2240      	movs	r2, #64	; 0x40
 8001020:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 800102a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800104e:	4812      	ldr	r0, [pc, #72]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 8001050:	f000 fdc6 	bl	8001be0 <HAL_DMA_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800105a:	f7ff fe7b 	bl	8000d54 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 8001062:	67da      	str	r2, [r3, #124]	; 0x7c
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_UART_MspInit+0x1a4>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2027      	movs	r0, #39	; 0x27
 8001070:	f000 fd81 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001074:	2027      	movs	r0, #39	; 0x27
 8001076:	f000 fd98 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800107a:	bf00      	nop
 800107c:	37e0      	adds	r7, #224	; 0xe0
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40004800 	.word	0x40004800
 8001088:	58024400 	.word	0x58024400
 800108c:	58020c00 	.word	0x58020c00
 8001090:	24000430 	.word	0x24000430
 8001094:	40020088 	.word	0x40020088
 8001098:	240004a8 	.word	0x240004a8
 800109c:	400200a0 	.word	0x400200a0

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 fc48 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <DMA1_Stream5_IRQHandler+0x10>)
 80010fa:	f002 f897 	bl	800322c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000430 	.word	0x24000430

08001108 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <DMA1_Stream6_IRQHandler+0x10>)
 800110e:	f002 f88d 	bl	800322c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	240004a8 	.word	0x240004a8

0800111c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <TIM4_IRQHandler+0x10>)
 8001122:	f006 fe5b 	bl	8007ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	24000350 	.word	0x24000350

08001130 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <USART3_IRQHandler+0x10>)
 8001136:	f008 f9ef 	bl	8009518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2400039c 	.word	0x2400039c

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001148:	4b32      	ldr	r3, [pc, #200]	; (8001214 <SystemInit+0xd0>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114e:	4a31      	ldr	r2, [pc, #196]	; (8001214 <SystemInit+0xd0>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001158:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <SystemInit+0xd4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	2b06      	cmp	r3, #6
 8001162:	d807      	bhi.n	8001174 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <SystemInit+0xd4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f023 030f 	bic.w	r3, r3, #15
 800116c:	4a2a      	ldr	r2, [pc, #168]	; (8001218 <SystemInit+0xd4>)
 800116e:	f043 0307 	orr.w	r3, r3, #7
 8001172:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <SystemInit+0xd8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a28      	ldr	r2, [pc, #160]	; (800121c <SystemInit+0xd8>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001180:	4b26      	ldr	r3, [pc, #152]	; (800121c <SystemInit+0xd8>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <SystemInit+0xd8>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4924      	ldr	r1, [pc, #144]	; (800121c <SystemInit+0xd8>)
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <SystemInit+0xdc>)
 800118e:	4013      	ands	r3, r2
 8001190:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <SystemInit+0xd4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <SystemInit+0xd4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 030f 	bic.w	r3, r3, #15
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <SystemInit+0xd4>)
 80011a8:	f043 0307 	orr.w	r3, r3, #7
 80011ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <SystemInit+0xd8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <SystemInit+0xd8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <SystemInit+0xd8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <SystemInit+0xd8>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <SystemInit+0xe0>)
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <SystemInit+0xd8>)
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <SystemInit+0xe4>)
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <SystemInit+0xd8>)
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <SystemInit+0xe8>)
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <SystemInit+0xd8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <SystemInit+0xd8>)
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <SystemInit+0xe8>)
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <SystemInit+0xd8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	; (800121c <SystemInit+0xd8>)
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <SystemInit+0xe8>)
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <SystemInit+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <SystemInit+0xd8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a09      	ldr	r2, [pc, #36]	; (800121c <SystemInit+0xd8>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <SystemInit+0xd8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <SystemInit+0xec>)
 8001204:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001208:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00
 8001218:	52002000 	.word	0x52002000
 800121c:	58024400 	.word	0x58024400
 8001220:	eaf6ed7f 	.word	0xeaf6ed7f
 8001224:	02020200 	.word	0x02020200
 8001228:	01ff0000 	.word	0x01ff0000
 800122c:	01010280 	.word	0x01010280
 8001230:	52004000 	.word	0x52004000

08001234 <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8001242:	2b00      	cmp	r3, #0
 8001244:	d036      	beq.n	80012b4 <TL_update+0x80>
    HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 800124c:	461a      	mov	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	7edb      	ldrb	r3, [r3, #27]
 8001254:	461a      	mov	r2, r3
 8001256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125a:	4835      	ldr	r0, [pc, #212]	; (8001330 <TL_update+0xfc>)
 800125c:	f003 fcb8 	bl	8004bd0 <HAL_GPIO_WritePin>

    if (tl->tx_bit_offset == 0) {
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001266:	2b00      	cmp	r3, #0
 8001268:	d109      	bne.n	800127e <TL_update+0x4a>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	2108      	movs	r1, #8
 800126e:	4831      	ldr	r0, [pc, #196]	; (8001334 <TL_update+0x100>)
 8001270:	f003 fcae 	bl	8004bd0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2104      	movs	r1, #4
 8001278:	482f      	ldr	r0, [pc, #188]	; (8001338 <TL_update+0x104>)
 800127a:	f003 fca9 	bl	8004bd0 <HAL_GPIO_WritePin>
    }


    if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001284:	2b7b      	cmp	r3, #123	; 0x7b
 8001286:	d10c      	bne.n	80012a2 <TL_update+0x6e>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2104      	movs	r1, #4
 800128c:	482a      	ldr	r0, [pc, #168]	; (8001338 <TL_update+0x104>)
 800128e:	f003 fc9f 	bl	8004bd0 <HAL_GPIO_WritePin>
      tl->tx_pending = 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
      tl->tx_finished = 1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
    }

    tl->tx_bit_offset += 1;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
        tl->rx_finished = 1;
      }
    }
  }
}
 80012b2:	e038      	b.n	8001326 <TL_update+0xf2>
  else if (tl->rx_pending) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d033      	beq.n	8001326 <TL_update+0xf2>
    if (tl->rx_finished) {
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <TL_update+0xa6>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2108      	movs	r1, #8
 80012cc:	4819      	ldr	r0, [pc, #100]	; (8001334 <TL_update+0x100>)
 80012ce:	f003 fc7f 	bl	8004bd0 <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
    if (HAL_GPIO_ReadPin(TL_OUT_VALID_GPIO_Port, TL_OUT_VALID_Pin) == GPIO_PIN_SET) {
 80012da:	2101      	movs	r1, #1
 80012dc:	4816      	ldr	r0, [pc, #88]	; (8001338 <TL_update+0x104>)
 80012de:	f003 fc5f 	bl	8004ba0 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d11e      	bne.n	8001326 <TL_update+0xf2>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_OUT_DATA_GPIO_Port, TL_OUT_DATA_Pin);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 80012ee:	461c      	mov	r4, r3
 80012f0:	2108      	movs	r1, #8
 80012f2:	4811      	ldr	r0, [pc, #68]	; (8001338 <TL_update+0x104>)
 80012f4:	f003 fc54 	bl	8004ba0 <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4423      	add	r3, r4
 8001300:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      tl->rx_bit_offset += 1;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800130a:	3301      	adds	r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800131a:	2b7b      	cmp	r3, #123	; 0x7b
 800131c:	d103      	bne.n	8001326 <TL_update+0xf2>
        tl->rx_finished = 1;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}
 800132e:	bf00      	nop
 8001330:	58021400 	.word	0x58021400
 8001334:	58020000 	.word	0x58020000
 8001338:	58020800 	.word	0x58020800

0800133c <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 800133c:	b4f0      	push	{r4, r5, r6, r7}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001344:	2100      	movs	r1, #0
 8001346:	83f9      	strh	r1, [r7, #30]
 8001348:	e011      	b.n	800136e <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	7e89      	ldrb	r1, [r1, #26]
 800134e:	4608      	mov	r0, r1
 8001350:	8bf9      	ldrh	r1, [r7, #30]
 8001352:	fa40 f101 	asr.w	r1, r0, r1
 8001356:	b2c8      	uxtb	r0, r1
 8001358:	8bf9      	ldrh	r1, [r7, #30]
 800135a:	f000 0001 	and.w	r0, r0, #1
 800135e:	b2c4      	uxtb	r4, r0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	4401      	add	r1, r0
 8001364:	4620      	mov	r0, r4
 8001366:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001368:	8bf9      	ldrh	r1, [r7, #30]
 800136a:	3101      	adds	r1, #1
 800136c:	83f9      	strh	r1, [r7, #30]
 800136e:	8bf9      	ldrh	r1, [r7, #30]
 8001370:	2900      	cmp	r1, #0
 8001372:	d0ea      	beq.n	800134a <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001374:	2100      	movs	r1, #0
 8001376:	83b9      	strh	r1, [r7, #28]
 8001378:	e012      	b.n	80013a0 <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->mask >> i) & 0b1;
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	7e49      	ldrb	r1, [r1, #25]
 800137e:	4608      	mov	r0, r1
 8001380:	8bb9      	ldrh	r1, [r7, #28]
 8001382:	fa40 f101 	asr.w	r1, r0, r1
 8001386:	b2c8      	uxtb	r0, r1
 8001388:	8bb9      	ldrh	r1, [r7, #28]
 800138a:	3101      	adds	r1, #1
 800138c:	f000 0001 	and.w	r0, r0, #1
 8001390:	b2c4      	uxtb	r4, r0
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4401      	add	r1, r0
 8001396:	4620      	mov	r0, r4
 8001398:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800139a:	8bb9      	ldrh	r1, [r7, #28]
 800139c:	3101      	adds	r1, #1
 800139e:	83b9      	strh	r1, [r7, #28]
 80013a0:	8bb9      	ldrh	r1, [r7, #28]
 80013a2:	2907      	cmp	r1, #7
 80013a4:	d9e9      	bls.n	800137a <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80013a6:	2100      	movs	r1, #0
 80013a8:	8379      	strh	r1, [r7, #26]
 80013aa:	e012      	b.n	80013d2 <TL_serialize+0x96>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->corrupt >> i) & 0b1;
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	7e09      	ldrb	r1, [r1, #24]
 80013b0:	4608      	mov	r0, r1
 80013b2:	8b79      	ldrh	r1, [r7, #26]
 80013b4:	fa40 f101 	asr.w	r1, r0, r1
 80013b8:	b2c8      	uxtb	r0, r1
 80013ba:	8b79      	ldrh	r1, [r7, #26]
 80013bc:	3109      	adds	r1, #9
 80013be:	f000 0001 	and.w	r0, r0, #1
 80013c2:	b2c4      	uxtb	r4, r0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4401      	add	r1, r0
 80013c8:	4620      	mov	r0, r4
 80013ca:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80013cc:	8b79      	ldrh	r1, [r7, #26]
 80013ce:	3101      	adds	r1, #1
 80013d0:	8379      	strh	r1, [r7, #26]
 80013d2:	8b79      	ldrh	r1, [r7, #26]
 80013d4:	2900      	cmp	r1, #0
 80013d6:	d0e9      	beq.n	80013ac <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80013d8:	2100      	movs	r1, #0
 80013da:	8339      	strh	r1, [r7, #24]
 80013dc:	e01e      	b.n	800141c <TL_serialize+0xe0>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80013e4:	8b3c      	ldrh	r4, [r7, #24]
 80013e6:	f1c4 0620 	rsb	r6, r4, #32
 80013ea:	f1a4 0520 	sub.w	r5, r4, #32
 80013ee:	fa20 f204 	lsr.w	r2, r0, r4
 80013f2:	fa01 f606 	lsl.w	r6, r1, r6
 80013f6:	4332      	orrs	r2, r6
 80013f8:	fa21 f505 	lsr.w	r5, r1, r5
 80013fc:	432a      	orrs	r2, r5
 80013fe:	fa21 f304 	lsr.w	r3, r1, r4
 8001402:	b2d0      	uxtb	r0, r2
 8001404:	8b39      	ldrh	r1, [r7, #24]
 8001406:	310a      	adds	r1, #10
 8001408:	f000 0001 	and.w	r0, r0, #1
 800140c:	b2c4      	uxtb	r4, r0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4401      	add	r1, r0
 8001412:	4620      	mov	r0, r4
 8001414:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001416:	8b39      	ldrh	r1, [r7, #24]
 8001418:	3101      	adds	r1, #1
 800141a:	8339      	strh	r1, [r7, #24]
 800141c:	8b39      	ldrh	r1, [r7, #24]
 800141e:	293f      	cmp	r1, #63	; 0x3f
 8001420:	d9dd      	bls.n	80013de <TL_serialize+0xa2>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001422:	2300      	movs	r3, #0
 8001424:	82fb      	strh	r3, [r7, #22]
 8001426:	e011      	b.n	800144c <TL_serialize+0x110>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->address >> i) & 0b1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	8afb      	ldrh	r3, [r7, #22]
 800142e:	fa22 f303 	lsr.w	r3, r2, r3
 8001432:	b2da      	uxtb	r2, r3
 8001434:	8afb      	ldrh	r3, [r7, #22]
 8001436:	334a      	adds	r3, #74	; 0x4a
 8001438:	f002 0201 	and.w	r2, r2, #1
 800143c:	b2d1      	uxtb	r1, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	460a      	mov	r2, r1
 8001444:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001446:	8afb      	ldrh	r3, [r7, #22]
 8001448:	3301      	adds	r3, #1
 800144a:	82fb      	strh	r3, [r7, #22]
 800144c:	8afb      	ldrh	r3, [r7, #22]
 800144e:	2b1f      	cmp	r3, #31
 8001450:	d9ea      	bls.n	8001428 <TL_serialize+0xec>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001452:	2300      	movs	r3, #0
 8001454:	82bb      	strh	r3, [r7, #20]
 8001456:	e012      	b.n	800147e <TL_serialize+0x142>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	791b      	ldrb	r3, [r3, #4]
 800145c:	461a      	mov	r2, r3
 800145e:	8abb      	ldrh	r3, [r7, #20]
 8001460:	fa42 f303 	asr.w	r3, r2, r3
 8001464:	b2da      	uxtb	r2, r3
 8001466:	8abb      	ldrh	r3, [r7, #20]
 8001468:	336a      	adds	r3, #106	; 0x6a
 800146a:	f002 0201 	and.w	r2, r2, #1
 800146e:	b2d1      	uxtb	r1, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	460a      	mov	r2, r1
 8001476:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001478:	8abb      	ldrh	r3, [r7, #20]
 800147a:	3301      	adds	r3, #1
 800147c:	82bb      	strh	r3, [r7, #20]
 800147e:	8abb      	ldrh	r3, [r7, #20]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d9e9      	bls.n	8001458 <TL_serialize+0x11c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001484:	2300      	movs	r3, #0
 8001486:	827b      	strh	r3, [r7, #18]
 8001488:	e012      	b.n	80014b0 <TL_serialize+0x174>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	461a      	mov	r2, r3
 8001490:	8a7b      	ldrh	r3, [r7, #18]
 8001492:	fa42 f303 	asr.w	r3, r2, r3
 8001496:	b2da      	uxtb	r2, r3
 8001498:	8a7b      	ldrh	r3, [r7, #18]
 800149a:	336e      	adds	r3, #110	; 0x6e
 800149c:	f002 0201 	and.w	r2, r2, #1
 80014a0:	b2d1      	uxtb	r1, r2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	460a      	mov	r2, r1
 80014a8:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	3301      	adds	r3, #1
 80014ae:	827b      	strh	r3, [r7, #18]
 80014b0:	8a7b      	ldrh	r3, [r7, #18]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d9e9      	bls.n	800148a <TL_serialize+0x14e>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	823b      	strh	r3, [r7, #16]
 80014ba:	e012      	b.n	80014e2 <TL_serialize+0x1a6>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	461a      	mov	r2, r3
 80014c2:	8a3b      	ldrh	r3, [r7, #16]
 80014c4:	fa42 f303 	asr.w	r3, r2, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	8a3b      	ldrh	r3, [r7, #16]
 80014cc:	3372      	adds	r3, #114	; 0x72
 80014ce:	f002 0201 	and.w	r2, r2, #1
 80014d2:	b2d1      	uxtb	r1, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	460a      	mov	r2, r1
 80014da:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80014dc:	8a3b      	ldrh	r3, [r7, #16]
 80014de:	3301      	adds	r3, #1
 80014e0:	823b      	strh	r3, [r7, #16]
 80014e2:	8a3b      	ldrh	r3, [r7, #16]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d9e9      	bls.n	80014bc <TL_serialize+0x180>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	81fb      	strh	r3, [r7, #14]
 80014ec:	e012      	b.n	8001514 <TL_serialize+0x1d8>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	461a      	mov	r2, r3
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	fa42 f303 	asr.w	r3, r2, r3
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	3375      	adds	r3, #117	; 0x75
 8001500:	f002 0201 	and.w	r2, r2, #1
 8001504:	b2d1      	uxtb	r1, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	460a      	mov	r2, r1
 800150c:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	3301      	adds	r3, #1
 8001512:	81fb      	strh	r3, [r7, #14]
 8001514:	89fb      	ldrh	r3, [r7, #14]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d9e9      	bls.n	80014ee <TL_serialize+0x1b2>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800151a:	2300      	movs	r3, #0
 800151c:	81bb      	strh	r3, [r7, #12]
 800151e:	e012      	b.n	8001546 <TL_serialize+0x20a>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	fa42 f303 	asr.w	r3, r2, r3
 800152c:	b2da      	uxtb	r2, r3
 800152e:	89bb      	ldrh	r3, [r7, #12]
 8001530:	3378      	adds	r3, #120	; 0x78
 8001532:	f002 0201 	and.w	r2, r2, #1
 8001536:	b2d1      	uxtb	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	460a      	mov	r2, r1
 800153e:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001540:	89bb      	ldrh	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	81bb      	strh	r3, [r7, #12]
 8001546:	89bb      	ldrh	r3, [r7, #12]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d9e9      	bls.n	8001520 <TL_serialize+0x1e4>
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bcf0      	pop	{r4, r5, r6, r7}
 8001556:	4770      	bx	lr

08001558 <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 8001558:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800155c:	b08a      	sub	sp, #40	; 0x28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
  frame->chanid = 0;
 8001562:	68f9      	ldr	r1, [r7, #12]
 8001564:	2000      	movs	r0, #0
 8001566:	7008      	strb	r0, [r1, #0]
  frame->opcode = 0;
 8001568:	68f9      	ldr	r1, [r7, #12]
 800156a:	2000      	movs	r0, #0
 800156c:	7048      	strb	r0, [r1, #1]
  frame->param = 0;
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	2000      	movs	r0, #0
 8001572:	7088      	strb	r0, [r1, #2]
  frame->size = 0;
 8001574:	68f9      	ldr	r1, [r7, #12]
 8001576:	2000      	movs	r0, #0
 8001578:	70c8      	strb	r0, [r1, #3]
  frame->source = 0;
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	2000      	movs	r0, #0
 800157e:	7108      	strb	r0, [r1, #4]
  frame->address = 0;
 8001580:	68f9      	ldr	r1, [r7, #12]
 8001582:	2000      	movs	r0, #0
 8001584:	6088      	str	r0, [r1, #8]
  frame->data = 0;
 8001586:	68fe      	ldr	r6, [r7, #12]
 8001588:	f04f 0000 	mov.w	r0, #0
 800158c:	f04f 0100 	mov.w	r1, #0
 8001590:	e9c6 0104 	strd	r0, r1, [r6, #16]
  frame->corrupt = 0;
 8001594:	68f9      	ldr	r1, [r7, #12]
 8001596:	2000      	movs	r0, #0
 8001598:	7608      	strb	r0, [r1, #24]
  frame->mask = 0;
 800159a:	68f9      	ldr	r1, [r7, #12]
 800159c:	2000      	movs	r0, #0
 800159e:	7648      	strb	r0, [r1, #25]
  frame->last = 0;
 80015a0:	68f9      	ldr	r1, [r7, #12]
 80015a2:	2000      	movs	r0, #0
 80015a4:	7688      	strb	r0, [r1, #26]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80015a6:	2100      	movs	r1, #0
 80015a8:	84f9      	strh	r1, [r7, #38]	; 0x26
 80015aa:	e014      	b.n	80015d6 <TL_deserialize+0x7e>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 80015ac:	68f9      	ldr	r1, [r7, #12]
 80015ae:	7e89      	ldrb	r1, [r1, #26]
 80015b0:	b248      	sxtb	r0, r1
 80015b2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80015b4:	68fe      	ldr	r6, [r7, #12]
 80015b6:	4431      	add	r1, r6
 80015b8:	7ec9      	ldrb	r1, [r1, #27]
 80015ba:	f001 0601 	and.w	r6, r1, #1
 80015be:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80015c0:	fa06 f101 	lsl.w	r1, r6, r1
 80015c4:	b249      	sxtb	r1, r1
 80015c6:	4301      	orrs	r1, r0
 80015c8:	b249      	sxtb	r1, r1
 80015ca:	b2c8      	uxtb	r0, r1
 80015cc:	68f9      	ldr	r1, [r7, #12]
 80015ce:	7688      	strb	r0, [r1, #26]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80015d0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80015d2:	3101      	adds	r1, #1
 80015d4:	84f9      	strh	r1, [r7, #38]	; 0x26
 80015d6:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80015d8:	2900      	cmp	r1, #0
 80015da:	d0e7      	beq.n	80015ac <TL_deserialize+0x54>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80015dc:	2100      	movs	r1, #0
 80015de:	84b9      	strh	r1, [r7, #36]	; 0x24
 80015e0:	e015      	b.n	800160e <TL_deserialize+0xb6>
    frame->mask |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	7e49      	ldrb	r1, [r1, #25]
 80015e6:	b248      	sxtb	r0, r1
 80015e8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80015ea:	3101      	adds	r1, #1
 80015ec:	68fe      	ldr	r6, [r7, #12]
 80015ee:	4431      	add	r1, r6
 80015f0:	7ec9      	ldrb	r1, [r1, #27]
 80015f2:	f001 0601 	and.w	r6, r1, #1
 80015f6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80015f8:	fa06 f101 	lsl.w	r1, r6, r1
 80015fc:	b249      	sxtb	r1, r1
 80015fe:	4301      	orrs	r1, r0
 8001600:	b249      	sxtb	r1, r1
 8001602:	b2c8      	uxtb	r0, r1
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	7648      	strb	r0, [r1, #25]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001608:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800160a:	3101      	adds	r1, #1
 800160c:	84b9      	strh	r1, [r7, #36]	; 0x24
 800160e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001610:	2907      	cmp	r1, #7
 8001612:	d9e6      	bls.n	80015e2 <TL_deserialize+0x8a>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001614:	2100      	movs	r1, #0
 8001616:	8479      	strh	r1, [r7, #34]	; 0x22
 8001618:	e015      	b.n	8001646 <TL_deserialize+0xee>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 800161a:	68f9      	ldr	r1, [r7, #12]
 800161c:	7e09      	ldrb	r1, [r1, #24]
 800161e:	b248      	sxtb	r0, r1
 8001620:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001622:	3109      	adds	r1, #9
 8001624:	68fe      	ldr	r6, [r7, #12]
 8001626:	4431      	add	r1, r6
 8001628:	7ec9      	ldrb	r1, [r1, #27]
 800162a:	f001 0601 	and.w	r6, r1, #1
 800162e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001630:	fa06 f101 	lsl.w	r1, r6, r1
 8001634:	b249      	sxtb	r1, r1
 8001636:	4301      	orrs	r1, r0
 8001638:	b249      	sxtb	r1, r1
 800163a:	b2c8      	uxtb	r0, r1
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	7608      	strb	r0, [r1, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001640:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001642:	3101      	adds	r1, #1
 8001644:	8479      	strh	r1, [r7, #34]	; 0x22
 8001646:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001648:	2900      	cmp	r1, #0
 800164a:	d0e6      	beq.n	800161a <TL_deserialize+0xc2>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800164c:	2100      	movs	r1, #0
 800164e:	8439      	strh	r1, [r7, #32]
 8001650:	e028      	b.n	80016a4 <TL_deserialize+0x14c>
    frame->data |= ((uint64_t)(frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 8001652:	68f9      	ldr	r1, [r7, #12]
 8001654:	e9d1 ab04 	ldrd	sl, fp, [r1, #16]
 8001658:	8c39      	ldrh	r1, [r7, #32]
 800165a:	310a      	adds	r1, #10
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	4401      	add	r1, r0
 8001660:	7ec9      	ldrb	r1, [r1, #27]
 8001662:	b2c9      	uxtb	r1, r1
 8001664:	2000      	movs	r0, #0
 8001666:	6039      	str	r1, [r7, #0]
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6839      	ldr	r1, [r7, #0]
 800166c:	f001 0401 	and.w	r4, r1, #1
 8001670:	2500      	movs	r5, #0
 8001672:	8c39      	ldrh	r1, [r7, #32]
 8001674:	f1a1 0620 	sub.w	r6, r1, #32
 8001678:	f1c1 0020 	rsb	r0, r1, #32
 800167c:	fa05 f301 	lsl.w	r3, r5, r1
 8001680:	fa04 f606 	lsl.w	r6, r4, r6
 8001684:	4333      	orrs	r3, r6
 8001686:	fa24 f000 	lsr.w	r0, r4, r0
 800168a:	4303      	orrs	r3, r0
 800168c:	fa04 f201 	lsl.w	r2, r4, r1
 8001690:	ea4a 0802 	orr.w	r8, sl, r2
 8001694:	ea4b 0903 	orr.w	r9, fp, r3
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	e9c1 8904 	strd	r8, r9, [r1, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800169e:	8c39      	ldrh	r1, [r7, #32]
 80016a0:	3101      	adds	r1, #1
 80016a2:	8439      	strh	r1, [r7, #32]
 80016a4:	8c39      	ldrh	r1, [r7, #32]
 80016a6:	293f      	cmp	r1, #63	; 0x3f
 80016a8:	d9d3      	bls.n	8001652 <TL_deserialize+0xfa>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	83fb      	strh	r3, [r7, #30]
 80016ae:	e011      	b.n	80016d4 <TL_deserialize+0x17c>
    frame->address |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	8bfa      	ldrh	r2, [r7, #30]
 80016b6:	324a      	adds	r2, #74	; 0x4a
 80016b8:	68f9      	ldr	r1, [r7, #12]
 80016ba:	440a      	add	r2, r1
 80016bc:	7ed2      	ldrb	r2, [r2, #27]
 80016be:	f002 0101 	and.w	r1, r2, #1
 80016c2:	8bfa      	ldrh	r2, [r7, #30]
 80016c4:	fa01 f202 	lsl.w	r2, r1, r2
 80016c8:	431a      	orrs	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80016ce:	8bfb      	ldrh	r3, [r7, #30]
 80016d0:	3301      	adds	r3, #1
 80016d2:	83fb      	strh	r3, [r7, #30]
 80016d4:	8bfb      	ldrh	r3, [r7, #30]
 80016d6:	2b1f      	cmp	r3, #31
 80016d8:	d9ea      	bls.n	80016b0 <TL_deserialize+0x158>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80016da:	2300      	movs	r3, #0
 80016dc:	83bb      	strh	r3, [r7, #28]
 80016de:	e015      	b.n	800170c <TL_deserialize+0x1b4>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	8bbb      	ldrh	r3, [r7, #28]
 80016e8:	336a      	adds	r3, #106	; 0x6a
 80016ea:	68f9      	ldr	r1, [r7, #12]
 80016ec:	440b      	add	r3, r1
 80016ee:	7edb      	ldrb	r3, [r3, #27]
 80016f0:	f003 0101 	and.w	r1, r3, #1
 80016f4:	8bbb      	ldrh	r3, [r7, #28]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	b2da      	uxtb	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001706:	8bbb      	ldrh	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	83bb      	strh	r3, [r7, #28]
 800170c:	8bbb      	ldrh	r3, [r7, #28]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d9e6      	bls.n	80016e0 <TL_deserialize+0x188>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001712:	2300      	movs	r3, #0
 8001714:	837b      	strh	r3, [r7, #26]
 8001716:	e015      	b.n	8001744 <TL_deserialize+0x1ec>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	78db      	ldrb	r3, [r3, #3]
 800171c:	b25a      	sxtb	r2, r3
 800171e:	8b7b      	ldrh	r3, [r7, #26]
 8001720:	336e      	adds	r3, #110	; 0x6e
 8001722:	68f9      	ldr	r1, [r7, #12]
 8001724:	440b      	add	r3, r1
 8001726:	7edb      	ldrb	r3, [r3, #27]
 8001728:	f003 0101 	and.w	r1, r3, #1
 800172c:	8b7b      	ldrh	r3, [r7, #26]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	b25b      	sxtb	r3, r3
 8001734:	4313      	orrs	r3, r2
 8001736:	b25b      	sxtb	r3, r3
 8001738:	b2da      	uxtb	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800173e:	8b7b      	ldrh	r3, [r7, #26]
 8001740:	3301      	adds	r3, #1
 8001742:	837b      	strh	r3, [r7, #26]
 8001744:	8b7b      	ldrh	r3, [r7, #26]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d9e6      	bls.n	8001718 <TL_deserialize+0x1c0>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800174a:	2300      	movs	r3, #0
 800174c:	833b      	strh	r3, [r7, #24]
 800174e:	e015      	b.n	800177c <TL_deserialize+0x224>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	789b      	ldrb	r3, [r3, #2]
 8001754:	b25a      	sxtb	r2, r3
 8001756:	8b3b      	ldrh	r3, [r7, #24]
 8001758:	3372      	adds	r3, #114	; 0x72
 800175a:	68f9      	ldr	r1, [r7, #12]
 800175c:	440b      	add	r3, r1
 800175e:	7edb      	ldrb	r3, [r3, #27]
 8001760:	f003 0101 	and.w	r1, r3, #1
 8001764:	8b3b      	ldrh	r3, [r7, #24]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	b25b      	sxtb	r3, r3
 800176c:	4313      	orrs	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	b2da      	uxtb	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001776:	8b3b      	ldrh	r3, [r7, #24]
 8001778:	3301      	adds	r3, #1
 800177a:	833b      	strh	r3, [r7, #24]
 800177c:	8b3b      	ldrh	r3, [r7, #24]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d9e6      	bls.n	8001750 <TL_deserialize+0x1f8>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001782:	2300      	movs	r3, #0
 8001784:	82fb      	strh	r3, [r7, #22]
 8001786:	e015      	b.n	80017b4 <TL_deserialize+0x25c>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	b25a      	sxtb	r2, r3
 800178e:	8afb      	ldrh	r3, [r7, #22]
 8001790:	3375      	adds	r3, #117	; 0x75
 8001792:	68f9      	ldr	r1, [r7, #12]
 8001794:	440b      	add	r3, r1
 8001796:	7edb      	ldrb	r3, [r3, #27]
 8001798:	f003 0101 	and.w	r1, r3, #1
 800179c:	8afb      	ldrh	r3, [r7, #22]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80017ae:	8afb      	ldrh	r3, [r7, #22]
 80017b0:	3301      	adds	r3, #1
 80017b2:	82fb      	strh	r3, [r7, #22]
 80017b4:	8afb      	ldrh	r3, [r7, #22]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d9e6      	bls.n	8001788 <TL_deserialize+0x230>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	82bb      	strh	r3, [r7, #20]
 80017be:	e015      	b.n	80017ec <TL_deserialize+0x294>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	8abb      	ldrh	r3, [r7, #20]
 80017c8:	3378      	adds	r3, #120	; 0x78
 80017ca:	68f9      	ldr	r1, [r7, #12]
 80017cc:	440b      	add	r3, r1
 80017ce:	7edb      	ldrb	r3, [r3, #27]
 80017d0:	f003 0101 	and.w	r1, r3, #1
 80017d4:	8abb      	ldrh	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80017e6:	8abb      	ldrh	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	82bb      	strh	r3, [r7, #20]
 80017ec:	8abb      	ldrh	r3, [r7, #20]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d9e6      	bls.n	80017c0 <TL_deserialize+0x268>
  }
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	; 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80017fe:	4770      	bx	lr

08001800 <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fd96 	bl	800133c <TL_serialize>

  // reset state
  tl->tx_bit_offset = 0;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->rx_bit_offset = 0;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
  tl->tx_finished = 0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_finished = 0;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  // enable TX RX
  tl->rx_pending = 1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
  tl->tx_pending = 1;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800184c:	f7ff fc7a 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	; (8001888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	; (8001894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f009 fe51 	bl	800b51c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7fe ff97 	bl	80007ac <main>
  bx  lr
 800187e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001880:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001884:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001888:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800188c:	0800b5cc 	.word	0x0800b5cc
  ldr r2, =_sbss
 8001890:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001894:	24000524 	.word	0x24000524

08001898 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC3_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a2:	2003      	movs	r0, #3
 80018a4:	f000 f95c 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018a8:	f003 ff76 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_Init+0x68>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	4913      	ldr	r1, [pc, #76]	; (8001908 <HAL_Init+0x6c>)
 80018ba:	5ccb      	ldrb	r3, [r1, r3]
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_Init+0x68>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_Init+0x6c>)
 80018d0:	5cd3      	ldrb	r3, [r2, r3]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_Init+0x70>)
 80018de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018e0:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <HAL_Init+0x74>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018e6:	200f      	movs	r0, #15
 80018e8:	f000 f814 	bl	8001914 <HAL_InitTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e002      	b.n	80018fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018f6:	f7ff fa33 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	58024400 	.word	0x58024400
 8001908:	0800b57c 	.word	0x0800b57c
 800190c:	24000004 	.word	0x24000004
 8001910:	24000000 	.word	0x24000000

08001914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_InitTick+0x60>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e021      	b.n	800196c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_InitTick+0x64>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_InitTick+0x60>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f941 	bl	8001bc6 <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195c:	f000 f90b 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_InitTick+0x68>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2400000c 	.word	0x2400000c
 8001978:	24000000 	.word	0x24000000
 800197c:	24000008 	.word	0x24000008

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	2400000c 	.word	0x2400000c
 80019a4:	24000520 	.word	0x24000520

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	24000520 	.word	0x24000520

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <__NVIC_SetPriorityGrouping+0x40>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x40>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	05fa0000 	.word	0x05fa0000

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff40 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff90 	bl	8001ab4 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5f 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff33 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa4 	bl	8001b1c <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff fede 	bl	80019a8 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e312      	b.n	800221e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a66      	ldr	r2, [pc, #408]	; (8001d98 <HAL_DMA_Init+0x1b8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d04a      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <HAL_DMA_Init+0x1bc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d045      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a63      	ldr	r2, [pc, #396]	; (8001da0 <HAL_DMA_Init+0x1c0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d040      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a62      	ldr	r2, [pc, #392]	; (8001da4 <HAL_DMA_Init+0x1c4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d03b      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a60      	ldr	r2, [pc, #384]	; (8001da8 <HAL_DMA_Init+0x1c8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d036      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a5f      	ldr	r2, [pc, #380]	; (8001dac <HAL_DMA_Init+0x1cc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d031      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a5d      	ldr	r2, [pc, #372]	; (8001db0 <HAL_DMA_Init+0x1d0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02c      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a5c      	ldr	r2, [pc, #368]	; (8001db4 <HAL_DMA_Init+0x1d4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d027      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a5a      	ldr	r2, [pc, #360]	; (8001db8 <HAL_DMA_Init+0x1d8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d022      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a59      	ldr	r2, [pc, #356]	; (8001dbc <HAL_DMA_Init+0x1dc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d01d      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_DMA_Init+0x1e0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d018      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a56      	ldr	r2, [pc, #344]	; (8001dc4 <HAL_DMA_Init+0x1e4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d013      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a54      	ldr	r2, [pc, #336]	; (8001dc8 <HAL_DMA_Init+0x1e8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00e      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a53      	ldr	r2, [pc, #332]	; (8001dcc <HAL_DMA_Init+0x1ec>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d009      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a51      	ldr	r2, [pc, #324]	; (8001dd0 <HAL_DMA_Init+0x1f0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_DMA_Init+0xb8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a50      	ldr	r2, [pc, #320]	; (8001dd4 <HAL_DMA_Init+0x1f4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_DMA_Init+0xbc>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_DMA_Init+0xbe>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 813c 	beq.w	8001f1c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a37      	ldr	r2, [pc, #220]	; (8001d98 <HAL_DMA_Init+0x1b8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d04a      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a36      	ldr	r2, [pc, #216]	; (8001d9c <HAL_DMA_Init+0x1bc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d045      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <HAL_DMA_Init+0x1c0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d040      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a33      	ldr	r2, [pc, #204]	; (8001da4 <HAL_DMA_Init+0x1c4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d03b      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a31      	ldr	r2, [pc, #196]	; (8001da8 <HAL_DMA_Init+0x1c8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d036      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a30      	ldr	r2, [pc, #192]	; (8001dac <HAL_DMA_Init+0x1cc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d031      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a2e      	ldr	r2, [pc, #184]	; (8001db0 <HAL_DMA_Init+0x1d0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d02c      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a2d      	ldr	r2, [pc, #180]	; (8001db4 <HAL_DMA_Init+0x1d4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d027      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_DMA_Init+0x1d8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d022      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a2a      	ldr	r2, [pc, #168]	; (8001dbc <HAL_DMA_Init+0x1dc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d01d      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a28      	ldr	r2, [pc, #160]	; (8001dc0 <HAL_DMA_Init+0x1e0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d018      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <HAL_DMA_Init+0x1e4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d013      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a25      	ldr	r2, [pc, #148]	; (8001dc8 <HAL_DMA_Init+0x1e8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00e      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a24      	ldr	r2, [pc, #144]	; (8001dcc <HAL_DMA_Init+0x1ec>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d009      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <HAL_DMA_Init+0x1f0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_DMA_Init+0x174>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_DMA_Init+0x1f4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d108      	bne.n	8001d66 <HAL_DMA_Init+0x186>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e007      	b.n	8001d76 <HAL_DMA_Init+0x196>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d76:	e02f      	b.n	8001dd8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d78:	f7ff fe16 	bl	80019a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d928      	bls.n	8001dd8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e242      	b.n	800221e <HAL_DMA_Init+0x63e>
 8001d98:	40020010 	.word	0x40020010
 8001d9c:	40020028 	.word	0x40020028
 8001da0:	40020040 	.word	0x40020040
 8001da4:	40020058 	.word	0x40020058
 8001da8:	40020070 	.word	0x40020070
 8001dac:	40020088 	.word	0x40020088
 8001db0:	400200a0 	.word	0x400200a0
 8001db4:	400200b8 	.word	0x400200b8
 8001db8:	40020410 	.word	0x40020410
 8001dbc:	40020428 	.word	0x40020428
 8001dc0:	40020440 	.word	0x40020440
 8001dc4:	40020458 	.word	0x40020458
 8001dc8:	40020470 	.word	0x40020470
 8001dcc:	40020488 	.word	0x40020488
 8001dd0:	400204a0 	.word	0x400204a0
 8001dd4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1c8      	bne.n	8001d78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4b83      	ldr	r3, [pc, #524]	; (8002000 <HAL_DMA_Init+0x420>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001dfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d107      	bne.n	8001e3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4313      	orrs	r3, r2
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b28      	cmp	r3, #40	; 0x28
 8001e42:	d903      	bls.n	8001e4c <HAL_DMA_Init+0x26c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b2e      	cmp	r3, #46	; 0x2e
 8001e4a:	d91f      	bls.n	8001e8c <HAL_DMA_Init+0x2ac>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b3e      	cmp	r3, #62	; 0x3e
 8001e52:	d903      	bls.n	8001e5c <HAL_DMA_Init+0x27c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b42      	cmp	r3, #66	; 0x42
 8001e5a:	d917      	bls.n	8001e8c <HAL_DMA_Init+0x2ac>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b46      	cmp	r3, #70	; 0x46
 8001e62:	d903      	bls.n	8001e6c <HAL_DMA_Init+0x28c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b48      	cmp	r3, #72	; 0x48
 8001e6a:	d90f      	bls.n	8001e8c <HAL_DMA_Init+0x2ac>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b4e      	cmp	r3, #78	; 0x4e
 8001e72:	d903      	bls.n	8001e7c <HAL_DMA_Init+0x29c>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b52      	cmp	r3, #82	; 0x52
 8001e7a:	d907      	bls.n	8001e8c <HAL_DMA_Init+0x2ac>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b73      	cmp	r3, #115	; 0x73
 8001e82:	d905      	bls.n	8001e90 <HAL_DMA_Init+0x2b0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b77      	cmp	r3, #119	; 0x77
 8001e8a:	d801      	bhi.n	8001e90 <HAL_DMA_Init+0x2b0>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_DMA_Init+0x2b2>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e9c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f023 0307 	bic.w	r3, r3, #7
 8001eb4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d117      	bne.n	8001ef8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00e      	beq.n	8001ef8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f002 fb2e 	bl	800453c <DMA_CheckFifoParam>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2240      	movs	r2, #64	; 0x40
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e192      	b.n	800221e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f002 fa69 	bl	80043d8 <DMA_CalcBaseAndBitshift>
 8001f06:	4603      	mov	r3, r0
 8001f08:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	223f      	movs	r2, #63	; 0x3f
 8001f14:	409a      	lsls	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	e0c8      	b.n	80020ae <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a38      	ldr	r2, [pc, #224]	; (8002004 <HAL_DMA_Init+0x424>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d022      	beq.n	8001f6c <HAL_DMA_Init+0x38c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a37      	ldr	r2, [pc, #220]	; (8002008 <HAL_DMA_Init+0x428>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01d      	beq.n	8001f6c <HAL_DMA_Init+0x38c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a35      	ldr	r2, [pc, #212]	; (800200c <HAL_DMA_Init+0x42c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d018      	beq.n	8001f6c <HAL_DMA_Init+0x38c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a34      	ldr	r2, [pc, #208]	; (8002010 <HAL_DMA_Init+0x430>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_DMA_Init+0x38c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a32      	ldr	r2, [pc, #200]	; (8002014 <HAL_DMA_Init+0x434>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00e      	beq.n	8001f6c <HAL_DMA_Init+0x38c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a31      	ldr	r2, [pc, #196]	; (8002018 <HAL_DMA_Init+0x438>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_DMA_Init+0x38c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2f      	ldr	r2, [pc, #188]	; (800201c <HAL_DMA_Init+0x43c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d004      	beq.n	8001f6c <HAL_DMA_Init+0x38c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <HAL_DMA_Init+0x440>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_DMA_Init+0x390>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <HAL_DMA_Init+0x392>
 8001f70:	2300      	movs	r3, #0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8092 	beq.w	800209c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a21      	ldr	r2, [pc, #132]	; (8002004 <HAL_DMA_Init+0x424>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d021      	beq.n	8001fc6 <HAL_DMA_Init+0x3e6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a20      	ldr	r2, [pc, #128]	; (8002008 <HAL_DMA_Init+0x428>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d01c      	beq.n	8001fc6 <HAL_DMA_Init+0x3e6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	; (800200c <HAL_DMA_Init+0x42c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d017      	beq.n	8001fc6 <HAL_DMA_Init+0x3e6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_DMA_Init+0x430>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d012      	beq.n	8001fc6 <HAL_DMA_Init+0x3e6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_DMA_Init+0x434>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_DMA_Init+0x3e6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_DMA_Init+0x438>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d008      	beq.n	8001fc6 <HAL_DMA_Init+0x3e6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_DMA_Init+0x43c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_DMA_Init+0x3e6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_DMA_Init+0x440>)
 8001fc4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2202      	movs	r2, #2
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <HAL_DMA_Init+0x444>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b40      	cmp	r3, #64	; 0x40
 8001fec:	d01c      	beq.n	8002028 <HAL_DMA_Init+0x448>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b80      	cmp	r3, #128	; 0x80
 8001ff4:	d102      	bne.n	8001ffc <HAL_DMA_Init+0x41c>
 8001ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ffa:	e016      	b.n	800202a <HAL_DMA_Init+0x44a>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e014      	b.n	800202a <HAL_DMA_Init+0x44a>
 8002000:	fe10803f 	.word	0xfe10803f
 8002004:	58025408 	.word	0x58025408
 8002008:	5802541c 	.word	0x5802541c
 800200c:	58025430 	.word	0x58025430
 8002010:	58025444 	.word	0x58025444
 8002014:	58025458 	.word	0x58025458
 8002018:	5802546c 	.word	0x5802546c
 800201c:	58025480 	.word	0x58025480
 8002020:	58025494 	.word	0x58025494
 8002024:	fffe000f 	.word	0xfffe000f
 8002028:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68d2      	ldr	r2, [r2, #12]
 800202e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002030:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002038:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002040:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002048:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002050:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002058:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b6e      	ldr	r3, [pc, #440]	; (8002228 <HAL_DMA_Init+0x648>)
 8002070:	4413      	add	r3, r2
 8002072:	4a6e      	ldr	r2, [pc, #440]	; (800222c <HAL_DMA_Init+0x64c>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	009a      	lsls	r2, r3, #2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f002 f9a9 	bl	80043d8 <DMA_CalcBaseAndBitshift>
 8002086:	4603      	mov	r3, r0
 8002088:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	2201      	movs	r2, #1
 8002094:	409a      	lsls	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	e008      	b.n	80020ae <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2240      	movs	r2, #64	; 0x40
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2203      	movs	r2, #3
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0b7      	b.n	800221e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a5f      	ldr	r2, [pc, #380]	; (8002230 <HAL_DMA_Init+0x650>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d072      	beq.n	800219e <HAL_DMA_Init+0x5be>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a5d      	ldr	r2, [pc, #372]	; (8002234 <HAL_DMA_Init+0x654>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d06d      	beq.n	800219e <HAL_DMA_Init+0x5be>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5c      	ldr	r2, [pc, #368]	; (8002238 <HAL_DMA_Init+0x658>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d068      	beq.n	800219e <HAL_DMA_Init+0x5be>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a5a      	ldr	r2, [pc, #360]	; (800223c <HAL_DMA_Init+0x65c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d063      	beq.n	800219e <HAL_DMA_Init+0x5be>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a59      	ldr	r2, [pc, #356]	; (8002240 <HAL_DMA_Init+0x660>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05e      	beq.n	800219e <HAL_DMA_Init+0x5be>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a57      	ldr	r2, [pc, #348]	; (8002244 <HAL_DMA_Init+0x664>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d059      	beq.n	800219e <HAL_DMA_Init+0x5be>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a56      	ldr	r2, [pc, #344]	; (8002248 <HAL_DMA_Init+0x668>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d054      	beq.n	800219e <HAL_DMA_Init+0x5be>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a54      	ldr	r2, [pc, #336]	; (800224c <HAL_DMA_Init+0x66c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d04f      	beq.n	800219e <HAL_DMA_Init+0x5be>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a53      	ldr	r2, [pc, #332]	; (8002250 <HAL_DMA_Init+0x670>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04a      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a51      	ldr	r2, [pc, #324]	; (8002254 <HAL_DMA_Init+0x674>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d045      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a50      	ldr	r2, [pc, #320]	; (8002258 <HAL_DMA_Init+0x678>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_Init+0x5be>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a4e      	ldr	r2, [pc, #312]	; (800225c <HAL_DMA_Init+0x67c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d03b      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a4d      	ldr	r2, [pc, #308]	; (8002260 <HAL_DMA_Init+0x680>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d036      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4b      	ldr	r2, [pc, #300]	; (8002264 <HAL_DMA_Init+0x684>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_DMA_Init+0x5be>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a4a      	ldr	r2, [pc, #296]	; (8002268 <HAL_DMA_Init+0x688>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d02c      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a48      	ldr	r2, [pc, #288]	; (800226c <HAL_DMA_Init+0x68c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d027      	beq.n	800219e <HAL_DMA_Init+0x5be>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a47      	ldr	r2, [pc, #284]	; (8002270 <HAL_DMA_Init+0x690>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a45      	ldr	r2, [pc, #276]	; (8002274 <HAL_DMA_Init+0x694>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a44      	ldr	r2, [pc, #272]	; (8002278 <HAL_DMA_Init+0x698>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_Init+0x5be>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a42      	ldr	r2, [pc, #264]	; (800227c <HAL_DMA_Init+0x69c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a41      	ldr	r2, [pc, #260]	; (8002280 <HAL_DMA_Init+0x6a0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a3f      	ldr	r2, [pc, #252]	; (8002284 <HAL_DMA_Init+0x6a4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_DMA_Init+0x5be>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a3e      	ldr	r2, [pc, #248]	; (8002288 <HAL_DMA_Init+0x6a8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Init+0x5be>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a3c      	ldr	r2, [pc, #240]	; (800228c <HAL_DMA_Init+0x6ac>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_DMA_Init+0x5c2>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_DMA_Init+0x5c4>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d032      	beq.n	800220e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f002 fa43 	bl	8004634 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b80      	cmp	r3, #128	; 0x80
 80021b4:	d102      	bne.n	80021bc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d010      	beq.n	80021fc <HAL_DMA_Init+0x61c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d80c      	bhi.n	80021fc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f002 fac0 	bl	8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	e008      	b.n	800220e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	a7fdabf8 	.word	0xa7fdabf8
 800222c:	cccccccd 	.word	0xcccccccd
 8002230:	40020010 	.word	0x40020010
 8002234:	40020028 	.word	0x40020028
 8002238:	40020040 	.word	0x40020040
 800223c:	40020058 	.word	0x40020058
 8002240:	40020070 	.word	0x40020070
 8002244:	40020088 	.word	0x40020088
 8002248:	400200a0 	.word	0x400200a0
 800224c:	400200b8 	.word	0x400200b8
 8002250:	40020410 	.word	0x40020410
 8002254:	40020428 	.word	0x40020428
 8002258:	40020440 	.word	0x40020440
 800225c:	40020458 	.word	0x40020458
 8002260:	40020470 	.word	0x40020470
 8002264:	40020488 	.word	0x40020488
 8002268:	400204a0 	.word	0x400204a0
 800226c:	400204b8 	.word	0x400204b8
 8002270:	58025408 	.word	0x58025408
 8002274:	5802541c 	.word	0x5802541c
 8002278:	58025430 	.word	0x58025430
 800227c:	58025444 	.word	0x58025444
 8002280:	58025458 	.word	0x58025458
 8002284:	5802546c 	.word	0x5802546c
 8002288:	58025480 	.word	0x58025480
 800228c:	58025494 	.word	0x58025494

08002290 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e226      	b.n	80026fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_DMA_Start_IT+0x2a>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e21f      	b.n	80026fa <HAL_DMA_Start_IT+0x46a>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	f040 820a 	bne.w	80026e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a68      	ldr	r2, [pc, #416]	; (8002484 <HAL_DMA_Start_IT+0x1f4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d04a      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a66      	ldr	r2, [pc, #408]	; (8002488 <HAL_DMA_Start_IT+0x1f8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d045      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a65      	ldr	r2, [pc, #404]	; (800248c <HAL_DMA_Start_IT+0x1fc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d040      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a63      	ldr	r2, [pc, #396]	; (8002490 <HAL_DMA_Start_IT+0x200>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d03b      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a62      	ldr	r2, [pc, #392]	; (8002494 <HAL_DMA_Start_IT+0x204>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d036      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a60      	ldr	r2, [pc, #384]	; (8002498 <HAL_DMA_Start_IT+0x208>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d031      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_DMA_Start_IT+0x20c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d02c      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5d      	ldr	r2, [pc, #372]	; (80024a0 <HAL_DMA_Start_IT+0x210>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d027      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a5c      	ldr	r2, [pc, #368]	; (80024a4 <HAL_DMA_Start_IT+0x214>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_DMA_Start_IT+0x218>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01d      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a59      	ldr	r2, [pc, #356]	; (80024ac <HAL_DMA_Start_IT+0x21c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d018      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a57      	ldr	r2, [pc, #348]	; (80024b0 <HAL_DMA_Start_IT+0x220>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a56      	ldr	r2, [pc, #344]	; (80024b4 <HAL_DMA_Start_IT+0x224>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a54      	ldr	r2, [pc, #336]	; (80024b8 <HAL_DMA_Start_IT+0x228>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a53      	ldr	r2, [pc, #332]	; (80024bc <HAL_DMA_Start_IT+0x22c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_DMA_Start_IT+0xee>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a51      	ldr	r2, [pc, #324]	; (80024c0 <HAL_DMA_Start_IT+0x230>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d108      	bne.n	8002390 <HAL_DMA_Start_IT+0x100>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e007      	b.n	80023a0 <HAL_DMA_Start_IT+0x110>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f001 fe6a 	bl	8004080 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a34      	ldr	r2, [pc, #208]	; (8002484 <HAL_DMA_Start_IT+0x1f4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d04a      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a33      	ldr	r2, [pc, #204]	; (8002488 <HAL_DMA_Start_IT+0x1f8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d045      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a31      	ldr	r2, [pc, #196]	; (800248c <HAL_DMA_Start_IT+0x1fc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d040      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a30      	ldr	r2, [pc, #192]	; (8002490 <HAL_DMA_Start_IT+0x200>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d03b      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2e      	ldr	r2, [pc, #184]	; (8002494 <HAL_DMA_Start_IT+0x204>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d036      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2d      	ldr	r2, [pc, #180]	; (8002498 <HAL_DMA_Start_IT+0x208>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d031      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <HAL_DMA_Start_IT+0x20c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02c      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <HAL_DMA_Start_IT+0x210>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d027      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a28      	ldr	r2, [pc, #160]	; (80024a4 <HAL_DMA_Start_IT+0x214>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d022      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_DMA_Start_IT+0x218>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d01d      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a25      	ldr	r2, [pc, #148]	; (80024ac <HAL_DMA_Start_IT+0x21c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d018      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <HAL_DMA_Start_IT+0x220>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d013      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a22      	ldr	r2, [pc, #136]	; (80024b4 <HAL_DMA_Start_IT+0x224>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00e      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <HAL_DMA_Start_IT+0x228>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_DMA_Start_IT+0x22c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <HAL_DMA_Start_IT+0x1bc>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <HAL_DMA_Start_IT+0x230>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_DMA_Start_IT+0x1c0>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_DMA_Start_IT+0x1c2>
 8002450:	2300      	movs	r3, #0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d036      	beq.n	80024c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 021e 	bic.w	r2, r3, #30
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0216 	orr.w	r2, r2, #22
 8002468:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03e      	beq.n	80024f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0208 	orr.w	r2, r2, #8
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e035      	b.n	80024f0 <HAL_DMA_Start_IT+0x260>
 8002484:	40020010 	.word	0x40020010
 8002488:	40020028 	.word	0x40020028
 800248c:	40020040 	.word	0x40020040
 8002490:	40020058 	.word	0x40020058
 8002494:	40020070 	.word	0x40020070
 8002498:	40020088 	.word	0x40020088
 800249c:	400200a0 	.word	0x400200a0
 80024a0:	400200b8 	.word	0x400200b8
 80024a4:	40020410 	.word	0x40020410
 80024a8:	40020428 	.word	0x40020428
 80024ac:	40020440 	.word	0x40020440
 80024b0:	40020458 	.word	0x40020458
 80024b4:	40020470 	.word	0x40020470
 80024b8:	40020488 	.word	0x40020488
 80024bc:	400204a0 	.word	0x400204a0
 80024c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 020e 	bic.w	r2, r3, #14
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 020a 	orr.w	r2, r2, #10
 80024d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0204 	orr.w	r2, r2, #4
 80024ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a83      	ldr	r2, [pc, #524]	; (8002704 <HAL_DMA_Start_IT+0x474>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d072      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a82      	ldr	r2, [pc, #520]	; (8002708 <HAL_DMA_Start_IT+0x478>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d06d      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a80      	ldr	r2, [pc, #512]	; (800270c <HAL_DMA_Start_IT+0x47c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d068      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7f      	ldr	r2, [pc, #508]	; (8002710 <HAL_DMA_Start_IT+0x480>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d063      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a7d      	ldr	r2, [pc, #500]	; (8002714 <HAL_DMA_Start_IT+0x484>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d05e      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a7c      	ldr	r2, [pc, #496]	; (8002718 <HAL_DMA_Start_IT+0x488>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d059      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7a      	ldr	r2, [pc, #488]	; (800271c <HAL_DMA_Start_IT+0x48c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d054      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a79      	ldr	r2, [pc, #484]	; (8002720 <HAL_DMA_Start_IT+0x490>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d04f      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a77      	ldr	r2, [pc, #476]	; (8002724 <HAL_DMA_Start_IT+0x494>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d04a      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a76      	ldr	r2, [pc, #472]	; (8002728 <HAL_DMA_Start_IT+0x498>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d045      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a74      	ldr	r2, [pc, #464]	; (800272c <HAL_DMA_Start_IT+0x49c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d040      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a73      	ldr	r2, [pc, #460]	; (8002730 <HAL_DMA_Start_IT+0x4a0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d03b      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a71      	ldr	r2, [pc, #452]	; (8002734 <HAL_DMA_Start_IT+0x4a4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d036      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a70      	ldr	r2, [pc, #448]	; (8002738 <HAL_DMA_Start_IT+0x4a8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d031      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_DMA_Start_IT+0x4ac>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d02c      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6d      	ldr	r2, [pc, #436]	; (8002740 <HAL_DMA_Start_IT+0x4b0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d027      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6b      	ldr	r2, [pc, #428]	; (8002744 <HAL_DMA_Start_IT+0x4b4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d022      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_DMA_Start_IT+0x4b8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d01d      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a68      	ldr	r2, [pc, #416]	; (800274c <HAL_DMA_Start_IT+0x4bc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d018      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a67      	ldr	r2, [pc, #412]	; (8002750 <HAL_DMA_Start_IT+0x4c0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a65      	ldr	r2, [pc, #404]	; (8002754 <HAL_DMA_Start_IT+0x4c4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00e      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_DMA_Start_IT+0x4c8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a62      	ldr	r2, [pc, #392]	; (800275c <HAL_DMA_Start_IT+0x4cc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_DMA_Start_IT+0x350>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a61      	ldr	r2, [pc, #388]	; (8002760 <HAL_DMA_Start_IT+0x4d0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_DMA_Start_IT+0x354>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_DMA_Start_IT+0x356>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01a      	beq.n	8002620 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002606:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a37      	ldr	r2, [pc, #220]	; (8002704 <HAL_DMA_Start_IT+0x474>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d04a      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a36      	ldr	r2, [pc, #216]	; (8002708 <HAL_DMA_Start_IT+0x478>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d045      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a34      	ldr	r2, [pc, #208]	; (800270c <HAL_DMA_Start_IT+0x47c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d040      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a33      	ldr	r2, [pc, #204]	; (8002710 <HAL_DMA_Start_IT+0x480>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d03b      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a31      	ldr	r2, [pc, #196]	; (8002714 <HAL_DMA_Start_IT+0x484>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d036      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a30      	ldr	r2, [pc, #192]	; (8002718 <HAL_DMA_Start_IT+0x488>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d031      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2e      	ldr	r2, [pc, #184]	; (800271c <HAL_DMA_Start_IT+0x48c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d02c      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a2d      	ldr	r2, [pc, #180]	; (8002720 <HAL_DMA_Start_IT+0x490>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d027      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <HAL_DMA_Start_IT+0x494>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d022      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2a      	ldr	r2, [pc, #168]	; (8002728 <HAL_DMA_Start_IT+0x498>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d01d      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a28      	ldr	r2, [pc, #160]	; (800272c <HAL_DMA_Start_IT+0x49c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d018      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_DMA_Start_IT+0x4a0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d013      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a25      	ldr	r2, [pc, #148]	; (8002734 <HAL_DMA_Start_IT+0x4a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00e      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a24      	ldr	r2, [pc, #144]	; (8002738 <HAL_DMA_Start_IT+0x4a8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <HAL_DMA_Start_IT+0x4ac>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_DMA_Start_IT+0x430>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a21      	ldr	r2, [pc, #132]	; (8002740 <HAL_DMA_Start_IT+0x4b0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d108      	bne.n	80026d2 <HAL_DMA_Start_IT+0x442>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e012      	b.n	80026f8 <HAL_DMA_Start_IT+0x468>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e009      	b.n	80026f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40020010 	.word	0x40020010
 8002708:	40020028 	.word	0x40020028
 800270c:	40020040 	.word	0x40020040
 8002710:	40020058 	.word	0x40020058
 8002714:	40020070 	.word	0x40020070
 8002718:	40020088 	.word	0x40020088
 800271c:	400200a0 	.word	0x400200a0
 8002720:	400200b8 	.word	0x400200b8
 8002724:	40020410 	.word	0x40020410
 8002728:	40020428 	.word	0x40020428
 800272c:	40020440 	.word	0x40020440
 8002730:	40020458 	.word	0x40020458
 8002734:	40020470 	.word	0x40020470
 8002738:	40020488 	.word	0x40020488
 800273c:	400204a0 	.word	0x400204a0
 8002740:	400204b8 	.word	0x400204b8
 8002744:	58025408 	.word	0x58025408
 8002748:	5802541c 	.word	0x5802541c
 800274c:	58025430 	.word	0x58025430
 8002750:	58025444 	.word	0x58025444
 8002754:	58025458 	.word	0x58025458
 8002758:	5802546c 	.word	0x5802546c
 800275c:	58025480 	.word	0x58025480
 8002760:	58025494 	.word	0x58025494

08002764 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff f91c 	bl	80019a8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e2dc      	b.n	8002d36 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d008      	beq.n	800279a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e2cd      	b.n	8002d36 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a76      	ldr	r2, [pc, #472]	; (8002978 <HAL_DMA_Abort+0x214>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d04a      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a74      	ldr	r2, [pc, #464]	; (800297c <HAL_DMA_Abort+0x218>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d045      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a73      	ldr	r2, [pc, #460]	; (8002980 <HAL_DMA_Abort+0x21c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d040      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a71      	ldr	r2, [pc, #452]	; (8002984 <HAL_DMA_Abort+0x220>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d03b      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a70      	ldr	r2, [pc, #448]	; (8002988 <HAL_DMA_Abort+0x224>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d036      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a6e      	ldr	r2, [pc, #440]	; (800298c <HAL_DMA_Abort+0x228>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d031      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6d      	ldr	r2, [pc, #436]	; (8002990 <HAL_DMA_Abort+0x22c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d02c      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a6b      	ldr	r2, [pc, #428]	; (8002994 <HAL_DMA_Abort+0x230>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d027      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6a      	ldr	r2, [pc, #424]	; (8002998 <HAL_DMA_Abort+0x234>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d022      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a68      	ldr	r2, [pc, #416]	; (800299c <HAL_DMA_Abort+0x238>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01d      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a67      	ldr	r2, [pc, #412]	; (80029a0 <HAL_DMA_Abort+0x23c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d018      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_DMA_Abort+0x240>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a64      	ldr	r2, [pc, #400]	; (80029a8 <HAL_DMA_Abort+0x244>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d00e      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a62      	ldr	r2, [pc, #392]	; (80029ac <HAL_DMA_Abort+0x248>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a61      	ldr	r2, [pc, #388]	; (80029b0 <HAL_DMA_Abort+0x24c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d004      	beq.n	800283a <HAL_DMA_Abort+0xd6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a5f      	ldr	r2, [pc, #380]	; (80029b4 <HAL_DMA_Abort+0x250>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d101      	bne.n	800283e <HAL_DMA_Abort+0xda>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_DMA_Abort+0xdc>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 021e 	bic.w	r2, r2, #30
 8002852:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002862:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e00a      	b.n	8002882 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 020e 	bic.w	r2, r2, #14
 800287a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a3c      	ldr	r2, [pc, #240]	; (8002978 <HAL_DMA_Abort+0x214>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d072      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a3a      	ldr	r2, [pc, #232]	; (800297c <HAL_DMA_Abort+0x218>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d06d      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a39      	ldr	r2, [pc, #228]	; (8002980 <HAL_DMA_Abort+0x21c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d068      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a37      	ldr	r2, [pc, #220]	; (8002984 <HAL_DMA_Abort+0x220>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d063      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a36      	ldr	r2, [pc, #216]	; (8002988 <HAL_DMA_Abort+0x224>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d05e      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a34      	ldr	r2, [pc, #208]	; (800298c <HAL_DMA_Abort+0x228>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d059      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a33      	ldr	r2, [pc, #204]	; (8002990 <HAL_DMA_Abort+0x22c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d054      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a31      	ldr	r2, [pc, #196]	; (8002994 <HAL_DMA_Abort+0x230>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d04f      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a30      	ldr	r2, [pc, #192]	; (8002998 <HAL_DMA_Abort+0x234>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04a      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2e      	ldr	r2, [pc, #184]	; (800299c <HAL_DMA_Abort+0x238>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d045      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2d      	ldr	r2, [pc, #180]	; (80029a0 <HAL_DMA_Abort+0x23c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d040      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a2b      	ldr	r2, [pc, #172]	; (80029a4 <HAL_DMA_Abort+0x240>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d03b      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2a      	ldr	r2, [pc, #168]	; (80029a8 <HAL_DMA_Abort+0x244>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d036      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a28      	ldr	r2, [pc, #160]	; (80029ac <HAL_DMA_Abort+0x248>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <HAL_DMA_Abort+0x24c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d02c      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a25      	ldr	r2, [pc, #148]	; (80029b4 <HAL_DMA_Abort+0x250>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d027      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a24      	ldr	r2, [pc, #144]	; (80029b8 <HAL_DMA_Abort+0x254>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a22      	ldr	r2, [pc, #136]	; (80029bc <HAL_DMA_Abort+0x258>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01d      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <HAL_DMA_Abort+0x25c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <HAL_DMA_Abort+0x260>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_DMA_Abort+0x264>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_DMA_Abort+0x268>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_DMA_Abort+0x26c>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_DMA_Abort+0x20e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_DMA_Abort+0x270>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d132      	bne.n	80029d8 <HAL_DMA_Abort+0x274>
 8002972:	2301      	movs	r3, #1
 8002974:	e031      	b.n	80029da <HAL_DMA_Abort+0x276>
 8002976:	bf00      	nop
 8002978:	40020010 	.word	0x40020010
 800297c:	40020028 	.word	0x40020028
 8002980:	40020040 	.word	0x40020040
 8002984:	40020058 	.word	0x40020058
 8002988:	40020070 	.word	0x40020070
 800298c:	40020088 	.word	0x40020088
 8002990:	400200a0 	.word	0x400200a0
 8002994:	400200b8 	.word	0x400200b8
 8002998:	40020410 	.word	0x40020410
 800299c:	40020428 	.word	0x40020428
 80029a0:	40020440 	.word	0x40020440
 80029a4:	40020458 	.word	0x40020458
 80029a8:	40020470 	.word	0x40020470
 80029ac:	40020488 	.word	0x40020488
 80029b0:	400204a0 	.word	0x400204a0
 80029b4:	400204b8 	.word	0x400204b8
 80029b8:	58025408 	.word	0x58025408
 80029bc:	5802541c 	.word	0x5802541c
 80029c0:	58025430 	.word	0x58025430
 80029c4:	58025444 	.word	0x58025444
 80029c8:	58025458 	.word	0x58025458
 80029cc:	5802546c 	.word	0x5802546c
 80029d0:	58025480 	.word	0x58025480
 80029d4:	58025494 	.word	0x58025494
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6d      	ldr	r2, [pc, #436]	; (8002ba8 <HAL_DMA_Abort+0x444>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d04a      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6b      	ldr	r2, [pc, #428]	; (8002bac <HAL_DMA_Abort+0x448>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d045      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6a      	ldr	r2, [pc, #424]	; (8002bb0 <HAL_DMA_Abort+0x44c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d040      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a68      	ldr	r2, [pc, #416]	; (8002bb4 <HAL_DMA_Abort+0x450>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d03b      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a67      	ldr	r2, [pc, #412]	; (8002bb8 <HAL_DMA_Abort+0x454>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d036      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a65      	ldr	r2, [pc, #404]	; (8002bbc <HAL_DMA_Abort+0x458>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d031      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a64      	ldr	r2, [pc, #400]	; (8002bc0 <HAL_DMA_Abort+0x45c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d02c      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a62      	ldr	r2, [pc, #392]	; (8002bc4 <HAL_DMA_Abort+0x460>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d027      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a61      	ldr	r2, [pc, #388]	; (8002bc8 <HAL_DMA_Abort+0x464>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5f      	ldr	r2, [pc, #380]	; (8002bcc <HAL_DMA_Abort+0x468>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01d      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5e      	ldr	r2, [pc, #376]	; (8002bd0 <HAL_DMA_Abort+0x46c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d018      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a5c      	ldr	r2, [pc, #368]	; (8002bd4 <HAL_DMA_Abort+0x470>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a5b      	ldr	r2, [pc, #364]	; (8002bd8 <HAL_DMA_Abort+0x474>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a59      	ldr	r2, [pc, #356]	; (8002bdc <HAL_DMA_Abort+0x478>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <HAL_DMA_Abort+0x47c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_DMA_Abort+0x32a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a56      	ldr	r2, [pc, #344]	; (8002be4 <HAL_DMA_Abort+0x480>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d108      	bne.n	8002aa0 <HAL_DMA_Abort+0x33c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e007      	b.n	8002ab0 <HAL_DMA_Abort+0x34c>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ab0:	e013      	b.n	8002ada <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab2:	f7fe ff79 	bl	80019a8 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d90c      	bls.n	8002ada <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e12d      	b.n	8002d36 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e5      	bne.n	8002ab2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <HAL_DMA_Abort+0x444>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d04a      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <HAL_DMA_Abort+0x448>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d045      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <HAL_DMA_Abort+0x44c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d040      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2a      	ldr	r2, [pc, #168]	; (8002bb4 <HAL_DMA_Abort+0x450>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d03b      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <HAL_DMA_Abort+0x454>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d036      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <HAL_DMA_Abort+0x458>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d031      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <HAL_DMA_Abort+0x45c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d02c      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <HAL_DMA_Abort+0x460>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d027      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a23      	ldr	r2, [pc, #140]	; (8002bc8 <HAL_DMA_Abort+0x464>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <HAL_DMA_Abort+0x468>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01d      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <HAL_DMA_Abort+0x46c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_DMA_Abort+0x470>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_DMA_Abort+0x474>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <HAL_DMA_Abort+0x478>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <HAL_DMA_Abort+0x47c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_DMA_Abort+0x422>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_DMA_Abort+0x480>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_DMA_Abort+0x426>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_DMA_Abort+0x428>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d02b      	beq.n	8002be8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	223f      	movs	r2, #63	; 0x3f
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	e02a      	b.n	8002bfe <HAL_DMA_Abort+0x49a>
 8002ba8:	40020010 	.word	0x40020010
 8002bac:	40020028 	.word	0x40020028
 8002bb0:	40020040 	.word	0x40020040
 8002bb4:	40020058 	.word	0x40020058
 8002bb8:	40020070 	.word	0x40020070
 8002bbc:	40020088 	.word	0x40020088
 8002bc0:	400200a0 	.word	0x400200a0
 8002bc4:	400200b8 	.word	0x400200b8
 8002bc8:	40020410 	.word	0x40020410
 8002bcc:	40020428 	.word	0x40020428
 8002bd0:	40020440 	.word	0x40020440
 8002bd4:	40020458 	.word	0x40020458
 8002bd8:	40020470 	.word	0x40020470
 8002bdc:	40020488 	.word	0x40020488
 8002be0:	400204a0 	.word	0x400204a0
 8002be4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a4f      	ldr	r2, [pc, #316]	; (8002d40 <HAL_DMA_Abort+0x5dc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d072      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a4d      	ldr	r2, [pc, #308]	; (8002d44 <HAL_DMA_Abort+0x5e0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d06d      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a4c      	ldr	r2, [pc, #304]	; (8002d48 <HAL_DMA_Abort+0x5e4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d068      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a4a      	ldr	r2, [pc, #296]	; (8002d4c <HAL_DMA_Abort+0x5e8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d063      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a49      	ldr	r2, [pc, #292]	; (8002d50 <HAL_DMA_Abort+0x5ec>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d05e      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a47      	ldr	r2, [pc, #284]	; (8002d54 <HAL_DMA_Abort+0x5f0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d059      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a46      	ldr	r2, [pc, #280]	; (8002d58 <HAL_DMA_Abort+0x5f4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d054      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a44      	ldr	r2, [pc, #272]	; (8002d5c <HAL_DMA_Abort+0x5f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d04f      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a43      	ldr	r2, [pc, #268]	; (8002d60 <HAL_DMA_Abort+0x5fc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d04a      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a41      	ldr	r2, [pc, #260]	; (8002d64 <HAL_DMA_Abort+0x600>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d045      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <HAL_DMA_Abort+0x604>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d040      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3e      	ldr	r2, [pc, #248]	; (8002d6c <HAL_DMA_Abort+0x608>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d03b      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a3d      	ldr	r2, [pc, #244]	; (8002d70 <HAL_DMA_Abort+0x60c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d036      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <HAL_DMA_Abort+0x610>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d031      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3a      	ldr	r2, [pc, #232]	; (8002d78 <HAL_DMA_Abort+0x614>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d02c      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a38      	ldr	r2, [pc, #224]	; (8002d7c <HAL_DMA_Abort+0x618>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d027      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a37      	ldr	r2, [pc, #220]	; (8002d80 <HAL_DMA_Abort+0x61c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a35      	ldr	r2, [pc, #212]	; (8002d84 <HAL_DMA_Abort+0x620>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <HAL_DMA_Abort+0x624>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d018      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a32      	ldr	r2, [pc, #200]	; (8002d8c <HAL_DMA_Abort+0x628>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <HAL_DMA_Abort+0x62c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <HAL_DMA_Abort+0x630>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2e      	ldr	r2, [pc, #184]	; (8002d98 <HAL_DMA_Abort+0x634>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_DMA_Abort+0x58a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2c      	ldr	r2, [pc, #176]	; (8002d9c <HAL_DMA_Abort+0x638>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA_Abort+0x58e>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_DMA_Abort+0x590>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d00:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00c      	beq.n	8002d24 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d18:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d22:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40020010 	.word	0x40020010
 8002d44:	40020028 	.word	0x40020028
 8002d48:	40020040 	.word	0x40020040
 8002d4c:	40020058 	.word	0x40020058
 8002d50:	40020070 	.word	0x40020070
 8002d54:	40020088 	.word	0x40020088
 8002d58:	400200a0 	.word	0x400200a0
 8002d5c:	400200b8 	.word	0x400200b8
 8002d60:	40020410 	.word	0x40020410
 8002d64:	40020428 	.word	0x40020428
 8002d68:	40020440 	.word	0x40020440
 8002d6c:	40020458 	.word	0x40020458
 8002d70:	40020470 	.word	0x40020470
 8002d74:	40020488 	.word	0x40020488
 8002d78:	400204a0 	.word	0x400204a0
 8002d7c:	400204b8 	.word	0x400204b8
 8002d80:	58025408 	.word	0x58025408
 8002d84:	5802541c 	.word	0x5802541c
 8002d88:	58025430 	.word	0x58025430
 8002d8c:	58025444 	.word	0x58025444
 8002d90:	58025458 	.word	0x58025458
 8002d94:	5802546c 	.word	0x5802546c
 8002d98:	58025480 	.word	0x58025480
 8002d9c:	58025494 	.word	0x58025494

08002da0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e237      	b.n	8003222 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e22c      	b.n	8003222 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5c      	ldr	r2, [pc, #368]	; (8002f40 <HAL_DMA_Abort_IT+0x1a0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d04a      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	; (8002f44 <HAL_DMA_Abort_IT+0x1a4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d045      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a59      	ldr	r2, [pc, #356]	; (8002f48 <HAL_DMA_Abort_IT+0x1a8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d040      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_DMA_Abort_IT+0x1ac>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d03b      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a56      	ldr	r2, [pc, #344]	; (8002f50 <HAL_DMA_Abort_IT+0x1b0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d036      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a55      	ldr	r2, [pc, #340]	; (8002f54 <HAL_DMA_Abort_IT+0x1b4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d031      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a53      	ldr	r2, [pc, #332]	; (8002f58 <HAL_DMA_Abort_IT+0x1b8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02c      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_DMA_Abort_IT+0x1bc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d027      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a50      	ldr	r2, [pc, #320]	; (8002f60 <HAL_DMA_Abort_IT+0x1c0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d022      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_DMA_Abort_IT+0x1c4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d01d      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4d      	ldr	r2, [pc, #308]	; (8002f68 <HAL_DMA_Abort_IT+0x1c8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_DMA_Abort_IT+0x1cc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a4a      	ldr	r2, [pc, #296]	; (8002f70 <HAL_DMA_Abort_IT+0x1d0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a49      	ldr	r2, [pc, #292]	; (8002f74 <HAL_DMA_Abort_IT+0x1d4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_DMA_Abort_IT+0x1d8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xc8>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a46      	ldr	r2, [pc, #280]	; (8002f7c <HAL_DMA_Abort_IT+0x1dc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Abort_IT+0xcc>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_DMA_Abort_IT+0xce>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8086 	beq.w	8002f80 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2204      	movs	r2, #4
 8002e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a2f      	ldr	r2, [pc, #188]	; (8002f40 <HAL_DMA_Abort_IT+0x1a0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d04a      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2e      	ldr	r2, [pc, #184]	; (8002f44 <HAL_DMA_Abort_IT+0x1a4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d045      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <HAL_DMA_Abort_IT+0x1a8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d040      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <HAL_DMA_Abort_IT+0x1ac>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d03b      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a29      	ldr	r2, [pc, #164]	; (8002f50 <HAL_DMA_Abort_IT+0x1b0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d036      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a28      	ldr	r2, [pc, #160]	; (8002f54 <HAL_DMA_Abort_IT+0x1b4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d031      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a26      	ldr	r2, [pc, #152]	; (8002f58 <HAL_DMA_Abort_IT+0x1b8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d02c      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a25      	ldr	r2, [pc, #148]	; (8002f5c <HAL_DMA_Abort_IT+0x1bc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d027      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_DMA_Abort_IT+0x1c0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d022      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <HAL_DMA_Abort_IT+0x1c4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d01d      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <HAL_DMA_Abort_IT+0x1c8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d018      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <HAL_DMA_Abort_IT+0x1cc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_DMA_Abort_IT+0x1d0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00e      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_DMA_Abort_IT+0x1d4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_DMA_Abort_IT+0x1d8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x17c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_DMA_Abort_IT+0x1dc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d108      	bne.n	8002f2e <HAL_DMA_Abort_IT+0x18e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e178      	b.n	8003220 <HAL_DMA_Abort_IT+0x480>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e16f      	b.n	8003220 <HAL_DMA_Abort_IT+0x480>
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 020e 	bic.w	r2, r2, #14
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6c      	ldr	r2, [pc, #432]	; (8003148 <HAL_DMA_Abort_IT+0x3a8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d04a      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a6b      	ldr	r2, [pc, #428]	; (800314c <HAL_DMA_Abort_IT+0x3ac>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d045      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a69      	ldr	r2, [pc, #420]	; (8003150 <HAL_DMA_Abort_IT+0x3b0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d040      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a68      	ldr	r2, [pc, #416]	; (8003154 <HAL_DMA_Abort_IT+0x3b4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d03b      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a66      	ldr	r2, [pc, #408]	; (8003158 <HAL_DMA_Abort_IT+0x3b8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d036      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a65      	ldr	r2, [pc, #404]	; (800315c <HAL_DMA_Abort_IT+0x3bc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d031      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_DMA_Abort_IT+0x3c0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02c      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a62      	ldr	r2, [pc, #392]	; (8003164 <HAL_DMA_Abort_IT+0x3c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d027      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a60      	ldr	r2, [pc, #384]	; (8003168 <HAL_DMA_Abort_IT+0x3c8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d022      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5f      	ldr	r2, [pc, #380]	; (800316c <HAL_DMA_Abort_IT+0x3cc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d01d      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5d      	ldr	r2, [pc, #372]	; (8003170 <HAL_DMA_Abort_IT+0x3d0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d018      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a5c      	ldr	r2, [pc, #368]	; (8003174 <HAL_DMA_Abort_IT+0x3d4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_DMA_Abort_IT+0x3d8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00e      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a59      	ldr	r2, [pc, #356]	; (800317c <HAL_DMA_Abort_IT+0x3dc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d009      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_DMA_Abort_IT+0x3e0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_DMA_Abort_IT+0x290>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_DMA_Abort_IT+0x3e4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d108      	bne.n	8003042 <HAL_DMA_Abort_IT+0x2a2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e007      	b.n	8003052 <HAL_DMA_Abort_IT+0x2b2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3c      	ldr	r2, [pc, #240]	; (8003148 <HAL_DMA_Abort_IT+0x3a8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d072      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a3a      	ldr	r2, [pc, #232]	; (800314c <HAL_DMA_Abort_IT+0x3ac>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d06d      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a39      	ldr	r2, [pc, #228]	; (8003150 <HAL_DMA_Abort_IT+0x3b0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d068      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a37      	ldr	r2, [pc, #220]	; (8003154 <HAL_DMA_Abort_IT+0x3b4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d063      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a36      	ldr	r2, [pc, #216]	; (8003158 <HAL_DMA_Abort_IT+0x3b8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d05e      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a34      	ldr	r2, [pc, #208]	; (800315c <HAL_DMA_Abort_IT+0x3bc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d059      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a33      	ldr	r2, [pc, #204]	; (8003160 <HAL_DMA_Abort_IT+0x3c0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d054      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a31      	ldr	r2, [pc, #196]	; (8003164 <HAL_DMA_Abort_IT+0x3c4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d04f      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a30      	ldr	r2, [pc, #192]	; (8003168 <HAL_DMA_Abort_IT+0x3c8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d04a      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a2e      	ldr	r2, [pc, #184]	; (800316c <HAL_DMA_Abort_IT+0x3cc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d045      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2d      	ldr	r2, [pc, #180]	; (8003170 <HAL_DMA_Abort_IT+0x3d0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d040      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2b      	ldr	r2, [pc, #172]	; (8003174 <HAL_DMA_Abort_IT+0x3d4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d03b      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <HAL_DMA_Abort_IT+0x3d8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d036      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a28      	ldr	r2, [pc, #160]	; (800317c <HAL_DMA_Abort_IT+0x3dc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d031      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a27      	ldr	r2, [pc, #156]	; (8003180 <HAL_DMA_Abort_IT+0x3e0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d02c      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a25      	ldr	r2, [pc, #148]	; (8003184 <HAL_DMA_Abort_IT+0x3e4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d027      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a24      	ldr	r2, [pc, #144]	; (8003188 <HAL_DMA_Abort_IT+0x3e8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a22      	ldr	r2, [pc, #136]	; (800318c <HAL_DMA_Abort_IT+0x3ec>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01d      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a21      	ldr	r2, [pc, #132]	; (8003190 <HAL_DMA_Abort_IT+0x3f0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d018      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <HAL_DMA_Abort_IT+0x3f4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_DMA_Abort_IT+0x3f8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_DMA_Abort_IT+0x3fc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d009      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_DMA_Abort_IT+0x400>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_DMA_Abort_IT+0x3a2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_DMA_Abort_IT+0x404>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d132      	bne.n	80031a8 <HAL_DMA_Abort_IT+0x408>
 8003142:	2301      	movs	r3, #1
 8003144:	e031      	b.n	80031aa <HAL_DMA_Abort_IT+0x40a>
 8003146:	bf00      	nop
 8003148:	40020010 	.word	0x40020010
 800314c:	40020028 	.word	0x40020028
 8003150:	40020040 	.word	0x40020040
 8003154:	40020058 	.word	0x40020058
 8003158:	40020070 	.word	0x40020070
 800315c:	40020088 	.word	0x40020088
 8003160:	400200a0 	.word	0x400200a0
 8003164:	400200b8 	.word	0x400200b8
 8003168:	40020410 	.word	0x40020410
 800316c:	40020428 	.word	0x40020428
 8003170:	40020440 	.word	0x40020440
 8003174:	40020458 	.word	0x40020458
 8003178:	40020470 	.word	0x40020470
 800317c:	40020488 	.word	0x40020488
 8003180:	400204a0 	.word	0x400204a0
 8003184:	400204b8 	.word	0x400204b8
 8003188:	58025408 	.word	0x58025408
 800318c:	5802541c 	.word	0x5802541c
 8003190:	58025430 	.word	0x58025430
 8003194:	58025444 	.word	0x58025444
 8003198:	58025458 	.word	0x58025458
 800319c:	5802546c 	.word	0x5802546c
 80031a0:	58025480 	.word	0x58025480
 80031a4:	58025494 	.word	0x58025494
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d028      	beq.n	8003200 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2201      	movs	r2, #1
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop

0800322c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003238:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_DMA_IRQHandler+0x1ac>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a67      	ldr	r2, [pc, #412]	; (80033dc <HAL_DMA_IRQHandler+0x1b0>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	0a9b      	lsrs	r3, r3, #10
 8003244:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a5f      	ldr	r2, [pc, #380]	; (80033e0 <HAL_DMA_IRQHandler+0x1b4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d04a      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a5d      	ldr	r2, [pc, #372]	; (80033e4 <HAL_DMA_IRQHandler+0x1b8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d045      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a5c      	ldr	r2, [pc, #368]	; (80033e8 <HAL_DMA_IRQHandler+0x1bc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d040      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5a      	ldr	r2, [pc, #360]	; (80033ec <HAL_DMA_IRQHandler+0x1c0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d03b      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a59      	ldr	r2, [pc, #356]	; (80033f0 <HAL_DMA_IRQHandler+0x1c4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d036      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a57      	ldr	r2, [pc, #348]	; (80033f4 <HAL_DMA_IRQHandler+0x1c8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d031      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a56      	ldr	r2, [pc, #344]	; (80033f8 <HAL_DMA_IRQHandler+0x1cc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d02c      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a54      	ldr	r2, [pc, #336]	; (80033fc <HAL_DMA_IRQHandler+0x1d0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d027      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a53      	ldr	r2, [pc, #332]	; (8003400 <HAL_DMA_IRQHandler+0x1d4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d022      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a51      	ldr	r2, [pc, #324]	; (8003404 <HAL_DMA_IRQHandler+0x1d8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01d      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a50      	ldr	r2, [pc, #320]	; (8003408 <HAL_DMA_IRQHandler+0x1dc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a4e      	ldr	r2, [pc, #312]	; (800340c <HAL_DMA_IRQHandler+0x1e0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4d      	ldr	r2, [pc, #308]	; (8003410 <HAL_DMA_IRQHandler+0x1e4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a4b      	ldr	r2, [pc, #300]	; (8003414 <HAL_DMA_IRQHandler+0x1e8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a4a      	ldr	r2, [pc, #296]	; (8003418 <HAL_DMA_IRQHandler+0x1ec>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_DMA_IRQHandler+0xd2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a48      	ldr	r2, [pc, #288]	; (800341c <HAL_DMA_IRQHandler+0x1f0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_DMA_IRQHandler+0xd6>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_DMA_IRQHandler+0xd8>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 842b 	beq.w	8003b60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2208      	movs	r2, #8
 8003314:	409a      	lsls	r2, r3
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80a2 	beq.w	8003464 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2e      	ldr	r2, [pc, #184]	; (80033e0 <HAL_DMA_IRQHandler+0x1b4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d04a      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2d      	ldr	r2, [pc, #180]	; (80033e4 <HAL_DMA_IRQHandler+0x1b8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d045      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2b      	ldr	r2, [pc, #172]	; (80033e8 <HAL_DMA_IRQHandler+0x1bc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d040      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <HAL_DMA_IRQHandler+0x1c0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d03b      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <HAL_DMA_IRQHandler+0x1c4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d036      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a27      	ldr	r2, [pc, #156]	; (80033f4 <HAL_DMA_IRQHandler+0x1c8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d031      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <HAL_DMA_IRQHandler+0x1cc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02c      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <HAL_DMA_IRQHandler+0x1d0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d027      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a22      	ldr	r2, [pc, #136]	; (8003400 <HAL_DMA_IRQHandler+0x1d4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d022      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a21      	ldr	r2, [pc, #132]	; (8003404 <HAL_DMA_IRQHandler+0x1d8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d01d      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <HAL_DMA_IRQHandler+0x1dc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d018      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1e      	ldr	r2, [pc, #120]	; (800340c <HAL_DMA_IRQHandler+0x1e0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d013      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <HAL_DMA_IRQHandler+0x1e4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00e      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <HAL_DMA_IRQHandler+0x1e8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_DMA_IRQHandler+0x1ec>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x194>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_DMA_IRQHandler+0x1f0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d12f      	bne.n	8003420 <HAL_DMA_IRQHandler+0x1f4>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	e02e      	b.n	8003434 <HAL_DMA_IRQHandler+0x208>
 80033d6:	bf00      	nop
 80033d8:	24000000 	.word	0x24000000
 80033dc:	1b4e81b5 	.word	0x1b4e81b5
 80033e0:	40020010 	.word	0x40020010
 80033e4:	40020028 	.word	0x40020028
 80033e8:	40020040 	.word	0x40020040
 80033ec:	40020058 	.word	0x40020058
 80033f0:	40020070 	.word	0x40020070
 80033f4:	40020088 	.word	0x40020088
 80033f8:	400200a0 	.word	0x400200a0
 80033fc:	400200b8 	.word	0x400200b8
 8003400:	40020410 	.word	0x40020410
 8003404:	40020428 	.word	0x40020428
 8003408:	40020440 	.word	0x40020440
 800340c:	40020458 	.word	0x40020458
 8003410:	40020470 	.word	0x40020470
 8003414:	40020488 	.word	0x40020488
 8003418:	400204a0 	.word	0x400204a0
 800341c:	400204b8 	.word	0x400204b8
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf14      	ite	ne
 800342e:	2301      	movne	r3, #1
 8003430:	2300      	moveq	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d015      	beq.n	8003464 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0204 	bic.w	r2, r2, #4
 8003446:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2208      	movs	r2, #8
 8003452:	409a      	lsls	r2, r3
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	fa22 f303 	lsr.w	r3, r2, r3
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d06e      	beq.n	8003558 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a69      	ldr	r2, [pc, #420]	; (8003624 <HAL_DMA_IRQHandler+0x3f8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d04a      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a67      	ldr	r2, [pc, #412]	; (8003628 <HAL_DMA_IRQHandler+0x3fc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d045      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a66      	ldr	r2, [pc, #408]	; (800362c <HAL_DMA_IRQHandler+0x400>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d040      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a64      	ldr	r2, [pc, #400]	; (8003630 <HAL_DMA_IRQHandler+0x404>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d03b      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a63      	ldr	r2, [pc, #396]	; (8003634 <HAL_DMA_IRQHandler+0x408>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d036      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a61      	ldr	r2, [pc, #388]	; (8003638 <HAL_DMA_IRQHandler+0x40c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d031      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a60      	ldr	r2, [pc, #384]	; (800363c <HAL_DMA_IRQHandler+0x410>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d02c      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a5e      	ldr	r2, [pc, #376]	; (8003640 <HAL_DMA_IRQHandler+0x414>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d027      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5d      	ldr	r2, [pc, #372]	; (8003644 <HAL_DMA_IRQHandler+0x418>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a5b      	ldr	r2, [pc, #364]	; (8003648 <HAL_DMA_IRQHandler+0x41c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01d      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a5a      	ldr	r2, [pc, #360]	; (800364c <HAL_DMA_IRQHandler+0x420>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d018      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a58      	ldr	r2, [pc, #352]	; (8003650 <HAL_DMA_IRQHandler+0x424>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a57      	ldr	r2, [pc, #348]	; (8003654 <HAL_DMA_IRQHandler+0x428>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00e      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a55      	ldr	r2, [pc, #340]	; (8003658 <HAL_DMA_IRQHandler+0x42c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a54      	ldr	r2, [pc, #336]	; (800365c <HAL_DMA_IRQHandler+0x430>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_DMA_IRQHandler+0x2ee>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_DMA_IRQHandler+0x434>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10a      	bne.n	8003530 <HAL_DMA_IRQHandler+0x304>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e003      	b.n	8003538 <HAL_DMA_IRQHandler+0x30c>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	2201      	movs	r2, #1
 8003546:	409a      	lsls	r2, r3
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	f043 0202 	orr.w	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	2204      	movs	r2, #4
 8003562:	409a      	lsls	r2, r3
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 808f 	beq.w	800368c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <HAL_DMA_IRQHandler+0x3f8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d04a      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a2a      	ldr	r2, [pc, #168]	; (8003628 <HAL_DMA_IRQHandler+0x3fc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d045      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a29      	ldr	r2, [pc, #164]	; (800362c <HAL_DMA_IRQHandler+0x400>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d040      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <HAL_DMA_IRQHandler+0x404>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d03b      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a26      	ldr	r2, [pc, #152]	; (8003634 <HAL_DMA_IRQHandler+0x408>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d036      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <HAL_DMA_IRQHandler+0x40c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d031      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a23      	ldr	r2, [pc, #140]	; (800363c <HAL_DMA_IRQHandler+0x410>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d02c      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a21      	ldr	r2, [pc, #132]	; (8003640 <HAL_DMA_IRQHandler+0x414>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d027      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a20      	ldr	r2, [pc, #128]	; (8003644 <HAL_DMA_IRQHandler+0x418>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <HAL_DMA_IRQHandler+0x41c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01d      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_DMA_IRQHandler+0x420>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <HAL_DMA_IRQHandler+0x424>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <HAL_DMA_IRQHandler+0x428>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a18      	ldr	r2, [pc, #96]	; (8003658 <HAL_DMA_IRQHandler+0x42c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a17      	ldr	r2, [pc, #92]	; (800365c <HAL_DMA_IRQHandler+0x430>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_DMA_IRQHandler+0x3e2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a15      	ldr	r2, [pc, #84]	; (8003660 <HAL_DMA_IRQHandler+0x434>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d12a      	bne.n	8003664 <HAL_DMA_IRQHandler+0x438>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e023      	b.n	800366c <HAL_DMA_IRQHandler+0x440>
 8003624:	40020010 	.word	0x40020010
 8003628:	40020028 	.word	0x40020028
 800362c:	40020040 	.word	0x40020040
 8003630:	40020058 	.word	0x40020058
 8003634:	40020070 	.word	0x40020070
 8003638:	40020088 	.word	0x40020088
 800363c:	400200a0 	.word	0x400200a0
 8003640:	400200b8 	.word	0x400200b8
 8003644:	40020410 	.word	0x40020410
 8003648:	40020428 	.word	0x40020428
 800364c:	40020440 	.word	0x40020440
 8003650:	40020458 	.word	0x40020458
 8003654:	40020470 	.word	0x40020470
 8003658:	40020488 	.word	0x40020488
 800365c:	400204a0 	.word	0x400204a0
 8003660:	400204b8 	.word	0x400204b8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2204      	movs	r2, #4
 800367a:	409a      	lsls	r2, r3
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	2210      	movs	r2, #16
 8003696:	409a      	lsls	r2, r3
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80a6 	beq.w	80037ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a85      	ldr	r2, [pc, #532]	; (80038bc <HAL_DMA_IRQHandler+0x690>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d04a      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a83      	ldr	r2, [pc, #524]	; (80038c0 <HAL_DMA_IRQHandler+0x694>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d045      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a82      	ldr	r2, [pc, #520]	; (80038c4 <HAL_DMA_IRQHandler+0x698>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d040      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a80      	ldr	r2, [pc, #512]	; (80038c8 <HAL_DMA_IRQHandler+0x69c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d03b      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7f      	ldr	r2, [pc, #508]	; (80038cc <HAL_DMA_IRQHandler+0x6a0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d036      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a7d      	ldr	r2, [pc, #500]	; (80038d0 <HAL_DMA_IRQHandler+0x6a4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d031      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a7c      	ldr	r2, [pc, #496]	; (80038d4 <HAL_DMA_IRQHandler+0x6a8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d02c      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a7a      	ldr	r2, [pc, #488]	; (80038d8 <HAL_DMA_IRQHandler+0x6ac>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d027      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a79      	ldr	r2, [pc, #484]	; (80038dc <HAL_DMA_IRQHandler+0x6b0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d022      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a77      	ldr	r2, [pc, #476]	; (80038e0 <HAL_DMA_IRQHandler+0x6b4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a76      	ldr	r2, [pc, #472]	; (80038e4 <HAL_DMA_IRQHandler+0x6b8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d018      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a74      	ldr	r2, [pc, #464]	; (80038e8 <HAL_DMA_IRQHandler+0x6bc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a73      	ldr	r2, [pc, #460]	; (80038ec <HAL_DMA_IRQHandler+0x6c0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a71      	ldr	r2, [pc, #452]	; (80038f0 <HAL_DMA_IRQHandler+0x6c4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a70      	ldr	r2, [pc, #448]	; (80038f4 <HAL_DMA_IRQHandler+0x6c8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_DMA_IRQHandler+0x516>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a6e      	ldr	r2, [pc, #440]	; (80038f8 <HAL_DMA_IRQHandler+0x6cc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10a      	bne.n	8003758 <HAL_DMA_IRQHandler+0x52c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e009      	b.n	800376c <HAL_DMA_IRQHandler+0x540>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	bf14      	ite	ne
 8003766:	2301      	movne	r3, #1
 8003768:	2300      	moveq	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d03e      	beq.n	80037ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2210      	movs	r2, #16
 800377a:	409a      	lsls	r2, r3
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d108      	bne.n	80037ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d024      	beq.n	80037ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
 80037ac:	e01f      	b.n	80037ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d01b      	beq.n	80037ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	4798      	blx	r3
 80037be:	e016      	b.n	80037ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2220      	movs	r2, #32
 80037f8:	409a      	lsls	r2, r3
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8110 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2c      	ldr	r2, [pc, #176]	; (80038bc <HAL_DMA_IRQHandler+0x690>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d04a      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_DMA_IRQHandler+0x694>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d045      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a29      	ldr	r2, [pc, #164]	; (80038c4 <HAL_DMA_IRQHandler+0x698>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d040      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a28      	ldr	r2, [pc, #160]	; (80038c8 <HAL_DMA_IRQHandler+0x69c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d03b      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a26      	ldr	r2, [pc, #152]	; (80038cc <HAL_DMA_IRQHandler+0x6a0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d036      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a25      	ldr	r2, [pc, #148]	; (80038d0 <HAL_DMA_IRQHandler+0x6a4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d031      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a23      	ldr	r2, [pc, #140]	; (80038d4 <HAL_DMA_IRQHandler+0x6a8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d02c      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a22      	ldr	r2, [pc, #136]	; (80038d8 <HAL_DMA_IRQHandler+0x6ac>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d027      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a20      	ldr	r2, [pc, #128]	; (80038dc <HAL_DMA_IRQHandler+0x6b0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d022      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <HAL_DMA_IRQHandler+0x6b4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d01d      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_DMA_IRQHandler+0x6b8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d018      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <HAL_DMA_IRQHandler+0x6bc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <HAL_DMA_IRQHandler+0x6c0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00e      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_DMA_IRQHandler+0x6c4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <HAL_DMA_IRQHandler+0x6c8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x678>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <HAL_DMA_IRQHandler+0x6cc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d12b      	bne.n	80038fc <HAL_DMA_IRQHandler+0x6d0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf14      	ite	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	2300      	moveq	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	e02a      	b.n	8003910 <HAL_DMA_IRQHandler+0x6e4>
 80038ba:	bf00      	nop
 80038bc:	40020010 	.word	0x40020010
 80038c0:	40020028 	.word	0x40020028
 80038c4:	40020040 	.word	0x40020040
 80038c8:	40020058 	.word	0x40020058
 80038cc:	40020070 	.word	0x40020070
 80038d0:	40020088 	.word	0x40020088
 80038d4:	400200a0 	.word	0x400200a0
 80038d8:	400200b8 	.word	0x400200b8
 80038dc:	40020410 	.word	0x40020410
 80038e0:	40020428 	.word	0x40020428
 80038e4:	40020440 	.word	0x40020440
 80038e8:	40020458 	.word	0x40020458
 80038ec:	40020470 	.word	0x40020470
 80038f0:	40020488 	.word	0x40020488
 80038f4:	400204a0 	.word	0x400204a0
 80038f8:	400204b8 	.word	0x400204b8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8087 	beq.w	8003a24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	2220      	movs	r2, #32
 8003920:	409a      	lsls	r2, r3
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b04      	cmp	r3, #4
 8003930:	d139      	bne.n	80039a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0216 	bic.w	r2, r2, #22
 8003940:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003950:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_DMA_IRQHandler+0x736>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0208 	bic.w	r2, r2, #8
 8003970:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	223f      	movs	r2, #63	; 0x3f
 800397c:	409a      	lsls	r2, r3
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 834a 	beq.w	8004030 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
          }
          return;
 80039a4:	e344      	b.n	8004030 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02c      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
 80039d2:	e027      	b.n	8003a24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d023      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
 80039e4:	e01e      	b.n	8003a24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10f      	bne.n	8003a14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0210 	bic.w	r2, r2, #16
 8003a02:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8306 	beq.w	800403a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8088 	beq.w	8003b4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a7a      	ldr	r2, [pc, #488]	; (8003c34 <HAL_DMA_IRQHandler+0xa08>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d04a      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a79      	ldr	r2, [pc, #484]	; (8003c38 <HAL_DMA_IRQHandler+0xa0c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d045      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a77      	ldr	r2, [pc, #476]	; (8003c3c <HAL_DMA_IRQHandler+0xa10>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d040      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a76      	ldr	r2, [pc, #472]	; (8003c40 <HAL_DMA_IRQHandler+0xa14>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d03b      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a74      	ldr	r2, [pc, #464]	; (8003c44 <HAL_DMA_IRQHandler+0xa18>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d036      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a73      	ldr	r2, [pc, #460]	; (8003c48 <HAL_DMA_IRQHandler+0xa1c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d031      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a71      	ldr	r2, [pc, #452]	; (8003c4c <HAL_DMA_IRQHandler+0xa20>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d02c      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a70      	ldr	r2, [pc, #448]	; (8003c50 <HAL_DMA_IRQHandler+0xa24>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d027      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a6e      	ldr	r2, [pc, #440]	; (8003c54 <HAL_DMA_IRQHandler+0xa28>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d022      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a6d      	ldr	r2, [pc, #436]	; (8003c58 <HAL_DMA_IRQHandler+0xa2c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d01d      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a6b      	ldr	r2, [pc, #428]	; (8003c5c <HAL_DMA_IRQHandler+0xa30>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d018      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6a      	ldr	r2, [pc, #424]	; (8003c60 <HAL_DMA_IRQHandler+0xa34>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a68      	ldr	r2, [pc, #416]	; (8003c64 <HAL_DMA_IRQHandler+0xa38>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00e      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a67      	ldr	r2, [pc, #412]	; (8003c68 <HAL_DMA_IRQHandler+0xa3c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d009      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_DMA_IRQHandler+0xa40>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x8b8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a64      	ldr	r2, [pc, #400]	; (8003c70 <HAL_DMA_IRQHandler+0xa44>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d108      	bne.n	8003af6 <HAL_DMA_IRQHandler+0x8ca>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e007      	b.n	8003b06 <HAL_DMA_IRQHandler+0x8da>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d307      	bcc.n	8003b22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f2      	bne.n	8003b06 <HAL_DMA_IRQHandler+0x8da>
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b22:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2203      	movs	r2, #3
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b3a:	e003      	b.n	8003b44 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8272 	beq.w	800403a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
 8003b5e:	e26c      	b.n	800403a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a43      	ldr	r2, [pc, #268]	; (8003c74 <HAL_DMA_IRQHandler+0xa48>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d022      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x984>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a42      	ldr	r2, [pc, #264]	; (8003c78 <HAL_DMA_IRQHandler+0xa4c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d01d      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x984>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a40      	ldr	r2, [pc, #256]	; (8003c7c <HAL_DMA_IRQHandler+0xa50>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d018      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x984>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3f      	ldr	r2, [pc, #252]	; (8003c80 <HAL_DMA_IRQHandler+0xa54>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d013      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x984>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a3d      	ldr	r2, [pc, #244]	; (8003c84 <HAL_DMA_IRQHandler+0xa58>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00e      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x984>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a3c      	ldr	r2, [pc, #240]	; (8003c88 <HAL_DMA_IRQHandler+0xa5c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d009      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x984>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a3a      	ldr	r2, [pc, #232]	; (8003c8c <HAL_DMA_IRQHandler+0xa60>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d004      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x984>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a39      	ldr	r2, [pc, #228]	; (8003c90 <HAL_DMA_IRQHandler+0xa64>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x988>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_DMA_IRQHandler+0x98a>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 823f 	beq.w	800403a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2204      	movs	r2, #4
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80cd 	beq.w	8003d74 <HAL_DMA_IRQHandler+0xb48>
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80c7 	beq.w	8003d74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2204      	movs	r2, #4
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d049      	beq.n	8003c94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8210 	beq.w	8004034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c1c:	e20a      	b.n	8004034 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8206 	beq.w	8004034 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c30:	e200      	b.n	8004034 <HAL_DMA_IRQHandler+0xe08>
 8003c32:	bf00      	nop
 8003c34:	40020010 	.word	0x40020010
 8003c38:	40020028 	.word	0x40020028
 8003c3c:	40020040 	.word	0x40020040
 8003c40:	40020058 	.word	0x40020058
 8003c44:	40020070 	.word	0x40020070
 8003c48:	40020088 	.word	0x40020088
 8003c4c:	400200a0 	.word	0x400200a0
 8003c50:	400200b8 	.word	0x400200b8
 8003c54:	40020410 	.word	0x40020410
 8003c58:	40020428 	.word	0x40020428
 8003c5c:	40020440 	.word	0x40020440
 8003c60:	40020458 	.word	0x40020458
 8003c64:	40020470 	.word	0x40020470
 8003c68:	40020488 	.word	0x40020488
 8003c6c:	400204a0 	.word	0x400204a0
 8003c70:	400204b8 	.word	0x400204b8
 8003c74:	58025408 	.word	0x58025408
 8003c78:	5802541c 	.word	0x5802541c
 8003c7c:	58025430 	.word	0x58025430
 8003c80:	58025444 	.word	0x58025444
 8003c84:	58025458 	.word	0x58025458
 8003c88:	5802546c 	.word	0x5802546c
 8003c8c:	58025480 	.word	0x58025480
 8003c90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d160      	bne.n	8003d60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7f      	ldr	r2, [pc, #508]	; (8003ea0 <HAL_DMA_IRQHandler+0xc74>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d04a      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a7d      	ldr	r2, [pc, #500]	; (8003ea4 <HAL_DMA_IRQHandler+0xc78>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d045      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a7c      	ldr	r2, [pc, #496]	; (8003ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d040      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a7a      	ldr	r2, [pc, #488]	; (8003eac <HAL_DMA_IRQHandler+0xc80>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d03b      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a79      	ldr	r2, [pc, #484]	; (8003eb0 <HAL_DMA_IRQHandler+0xc84>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d036      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a77      	ldr	r2, [pc, #476]	; (8003eb4 <HAL_DMA_IRQHandler+0xc88>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d031      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a76      	ldr	r2, [pc, #472]	; (8003eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d02c      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a74      	ldr	r2, [pc, #464]	; (8003ebc <HAL_DMA_IRQHandler+0xc90>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d027      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a73      	ldr	r2, [pc, #460]	; (8003ec0 <HAL_DMA_IRQHandler+0xc94>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d022      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a71      	ldr	r2, [pc, #452]	; (8003ec4 <HAL_DMA_IRQHandler+0xc98>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01d      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a70      	ldr	r2, [pc, #448]	; (8003ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d018      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <HAL_DMA_IRQHandler+0xca0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a6d      	ldr	r2, [pc, #436]	; (8003ed0 <HAL_DMA_IRQHandler+0xca4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a6b      	ldr	r2, [pc, #428]	; (8003ed4 <HAL_DMA_IRQHandler+0xca8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d009      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a6a      	ldr	r2, [pc, #424]	; (8003ed8 <HAL_DMA_IRQHandler+0xcac>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <HAL_DMA_IRQHandler+0xb12>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a68      	ldr	r2, [pc, #416]	; (8003edc <HAL_DMA_IRQHandler+0xcb0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d108      	bne.n	8003d50 <HAL_DMA_IRQHandler+0xb24>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0208 	bic.w	r2, r2, #8
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e007      	b.n	8003d60 <HAL_DMA_IRQHandler+0xb34>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0204 	bic.w	r2, r2, #4
 8003d5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8165 	beq.w	8004034 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d72:	e15f      	b.n	8004034 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80c5 	beq.w	8003f14 <HAL_DMA_IRQHandler+0xce8>
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80bf 	beq.w	8003f14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2202      	movs	r2, #2
 8003da0:	409a      	lsls	r2, r3
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d018      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 813a 	beq.w	8004038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dcc:	e134      	b.n	8004038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8130 	beq.w	8004038 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003de0:	e12a      	b.n	8004038 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f040 8089 	bne.w	8003f00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2b      	ldr	r2, [pc, #172]	; (8003ea0 <HAL_DMA_IRQHandler+0xc74>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d04a      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a29      	ldr	r2, [pc, #164]	; (8003ea4 <HAL_DMA_IRQHandler+0xc78>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d045      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a28      	ldr	r2, [pc, #160]	; (8003ea8 <HAL_DMA_IRQHandler+0xc7c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d040      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a26      	ldr	r2, [pc, #152]	; (8003eac <HAL_DMA_IRQHandler+0xc80>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d03b      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a25      	ldr	r2, [pc, #148]	; (8003eb0 <HAL_DMA_IRQHandler+0xc84>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d036      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <HAL_DMA_IRQHandler+0xc88>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d031      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <HAL_DMA_IRQHandler+0xc8c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d02c      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <HAL_DMA_IRQHandler+0xc90>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d027      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <HAL_DMA_IRQHandler+0xc94>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d022      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <HAL_DMA_IRQHandler+0xc98>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01d      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <HAL_DMA_IRQHandler+0xc9c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1a      	ldr	r2, [pc, #104]	; (8003ecc <HAL_DMA_IRQHandler+0xca0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <HAL_DMA_IRQHandler+0xca4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <HAL_DMA_IRQHandler+0xca8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a16      	ldr	r2, [pc, #88]	; (8003ed8 <HAL_DMA_IRQHandler+0xcac>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xc62>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <HAL_DMA_IRQHandler+0xcb0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d128      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0xcb4>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0214 	bic.w	r2, r2, #20
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e027      	b.n	8003ef0 <HAL_DMA_IRQHandler+0xcc4>
 8003ea0:	40020010 	.word	0x40020010
 8003ea4:	40020028 	.word	0x40020028
 8003ea8:	40020040 	.word	0x40020040
 8003eac:	40020058 	.word	0x40020058
 8003eb0:	40020070 	.word	0x40020070
 8003eb4:	40020088 	.word	0x40020088
 8003eb8:	400200a0 	.word	0x400200a0
 8003ebc:	400200b8 	.word	0x400200b8
 8003ec0:	40020410 	.word	0x40020410
 8003ec4:	40020428 	.word	0x40020428
 8003ec8:	40020440 	.word	0x40020440
 8003ecc:	40020458 	.word	0x40020458
 8003ed0:	40020470 	.word	0x40020470
 8003ed4:	40020488 	.word	0x40020488
 8003ed8:	400204a0 	.word	0x400204a0
 8003edc:	400204b8 	.word	0x400204b8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 020a 	bic.w	r2, r2, #10
 8003eee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8097 	beq.w	8004038 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f12:	e091      	b.n	8004038 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8088 	beq.w	800403a <HAL_DMA_IRQHandler+0xe0e>
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8082 	beq.w	800403a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a41      	ldr	r2, [pc, #260]	; (8004040 <HAL_DMA_IRQHandler+0xe14>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d04a      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a3f      	ldr	r2, [pc, #252]	; (8004044 <HAL_DMA_IRQHandler+0xe18>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d045      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a3e      	ldr	r2, [pc, #248]	; (8004048 <HAL_DMA_IRQHandler+0xe1c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d040      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a3c      	ldr	r2, [pc, #240]	; (800404c <HAL_DMA_IRQHandler+0xe20>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d03b      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a3b      	ldr	r2, [pc, #236]	; (8004050 <HAL_DMA_IRQHandler+0xe24>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d036      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a39      	ldr	r2, [pc, #228]	; (8004054 <HAL_DMA_IRQHandler+0xe28>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d031      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a38      	ldr	r2, [pc, #224]	; (8004058 <HAL_DMA_IRQHandler+0xe2c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d02c      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a36      	ldr	r2, [pc, #216]	; (800405c <HAL_DMA_IRQHandler+0xe30>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d027      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a35      	ldr	r2, [pc, #212]	; (8004060 <HAL_DMA_IRQHandler+0xe34>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d022      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a33      	ldr	r2, [pc, #204]	; (8004064 <HAL_DMA_IRQHandler+0xe38>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01d      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a32      	ldr	r2, [pc, #200]	; (8004068 <HAL_DMA_IRQHandler+0xe3c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d018      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a30      	ldr	r2, [pc, #192]	; (800406c <HAL_DMA_IRQHandler+0xe40>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2f      	ldr	r2, [pc, #188]	; (8004070 <HAL_DMA_IRQHandler+0xe44>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <HAL_DMA_IRQHandler+0xe48>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d009      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2c      	ldr	r2, [pc, #176]	; (8004078 <HAL_DMA_IRQHandler+0xe4c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0xdaa>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	; (800407c <HAL_DMA_IRQHandler+0xe50>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d108      	bne.n	8003fe8 <HAL_DMA_IRQHandler+0xdbc>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 021c 	bic.w	r2, r2, #28
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e007      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xdcc>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 020e 	bic.w	r2, r2, #14
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2201      	movs	r2, #1
 8004002:	409a      	lsls	r2, r3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4798      	blx	r3
 800402e:	e004      	b.n	800403a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004030:	bf00      	nop
 8004032:	e002      	b.n	800403a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004038:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800403a:	3728      	adds	r7, #40	; 0x28
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40020010 	.word	0x40020010
 8004044:	40020028 	.word	0x40020028
 8004048:	40020040 	.word	0x40020040
 800404c:	40020058 	.word	0x40020058
 8004050:	40020070 	.word	0x40020070
 8004054:	40020088 	.word	0x40020088
 8004058:	400200a0 	.word	0x400200a0
 800405c:	400200b8 	.word	0x400200b8
 8004060:	40020410 	.word	0x40020410
 8004064:	40020428 	.word	0x40020428
 8004068:	40020440 	.word	0x40020440
 800406c:	40020458 	.word	0x40020458
 8004070:	40020470 	.word	0x40020470
 8004074:	40020488 	.word	0x40020488
 8004078:	400204a0 	.word	0x400204a0
 800407c:	400204b8 	.word	0x400204b8

08004080 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a7f      	ldr	r2, [pc, #508]	; (800429c <DMA_SetConfig+0x21c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d072      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a7d      	ldr	r2, [pc, #500]	; (80042a0 <DMA_SetConfig+0x220>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d06d      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a7c      	ldr	r2, [pc, #496]	; (80042a4 <DMA_SetConfig+0x224>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d068      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a7a      	ldr	r2, [pc, #488]	; (80042a8 <DMA_SetConfig+0x228>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d063      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a79      	ldr	r2, [pc, #484]	; (80042ac <DMA_SetConfig+0x22c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d05e      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a77      	ldr	r2, [pc, #476]	; (80042b0 <DMA_SetConfig+0x230>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d059      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a76      	ldr	r2, [pc, #472]	; (80042b4 <DMA_SetConfig+0x234>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d054      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a74      	ldr	r2, [pc, #464]	; (80042b8 <DMA_SetConfig+0x238>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d04f      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a73      	ldr	r2, [pc, #460]	; (80042bc <DMA_SetConfig+0x23c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d04a      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a71      	ldr	r2, [pc, #452]	; (80042c0 <DMA_SetConfig+0x240>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d045      	beq.n	800418a <DMA_SetConfig+0x10a>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a70      	ldr	r2, [pc, #448]	; (80042c4 <DMA_SetConfig+0x244>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d040      	beq.n	800418a <DMA_SetConfig+0x10a>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a6e      	ldr	r2, [pc, #440]	; (80042c8 <DMA_SetConfig+0x248>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d03b      	beq.n	800418a <DMA_SetConfig+0x10a>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6d      	ldr	r2, [pc, #436]	; (80042cc <DMA_SetConfig+0x24c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d036      	beq.n	800418a <DMA_SetConfig+0x10a>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a6b      	ldr	r2, [pc, #428]	; (80042d0 <DMA_SetConfig+0x250>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <DMA_SetConfig+0x10a>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a6a      	ldr	r2, [pc, #424]	; (80042d4 <DMA_SetConfig+0x254>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d02c      	beq.n	800418a <DMA_SetConfig+0x10a>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a68      	ldr	r2, [pc, #416]	; (80042d8 <DMA_SetConfig+0x258>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d027      	beq.n	800418a <DMA_SetConfig+0x10a>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a67      	ldr	r2, [pc, #412]	; (80042dc <DMA_SetConfig+0x25c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <DMA_SetConfig+0x10a>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a65      	ldr	r2, [pc, #404]	; (80042e0 <DMA_SetConfig+0x260>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <DMA_SetConfig+0x10a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a64      	ldr	r2, [pc, #400]	; (80042e4 <DMA_SetConfig+0x264>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <DMA_SetConfig+0x10a>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a62      	ldr	r2, [pc, #392]	; (80042e8 <DMA_SetConfig+0x268>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <DMA_SetConfig+0x10a>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a61      	ldr	r2, [pc, #388]	; (80042ec <DMA_SetConfig+0x26c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <DMA_SetConfig+0x10a>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a5f      	ldr	r2, [pc, #380]	; (80042f0 <DMA_SetConfig+0x270>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <DMA_SetConfig+0x10a>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a5e      	ldr	r2, [pc, #376]	; (80042f4 <DMA_SetConfig+0x274>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <DMA_SetConfig+0x10a>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a5c      	ldr	r2, [pc, #368]	; (80042f8 <DMA_SetConfig+0x278>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <DMA_SetConfig+0x10e>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <DMA_SetConfig+0x110>
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00d      	beq.n	80041b0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800419c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80041ae:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a39      	ldr	r2, [pc, #228]	; (800429c <DMA_SetConfig+0x21c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d04a      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a38      	ldr	r2, [pc, #224]	; (80042a0 <DMA_SetConfig+0x220>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d045      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a36      	ldr	r2, [pc, #216]	; (80042a4 <DMA_SetConfig+0x224>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d040      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a35      	ldr	r2, [pc, #212]	; (80042a8 <DMA_SetConfig+0x228>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d03b      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a33      	ldr	r2, [pc, #204]	; (80042ac <DMA_SetConfig+0x22c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d036      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a32      	ldr	r2, [pc, #200]	; (80042b0 <DMA_SetConfig+0x230>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d031      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a30      	ldr	r2, [pc, #192]	; (80042b4 <DMA_SetConfig+0x234>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d02c      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2f      	ldr	r2, [pc, #188]	; (80042b8 <DMA_SetConfig+0x238>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d027      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2d      	ldr	r2, [pc, #180]	; (80042bc <DMA_SetConfig+0x23c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d022      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2c      	ldr	r2, [pc, #176]	; (80042c0 <DMA_SetConfig+0x240>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d01d      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2a      	ldr	r2, [pc, #168]	; (80042c4 <DMA_SetConfig+0x244>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d018      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a29      	ldr	r2, [pc, #164]	; (80042c8 <DMA_SetConfig+0x248>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d013      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a27      	ldr	r2, [pc, #156]	; (80042cc <DMA_SetConfig+0x24c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00e      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <DMA_SetConfig+0x250>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a24      	ldr	r2, [pc, #144]	; (80042d4 <DMA_SetConfig+0x254>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <DMA_SetConfig+0x1d0>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <DMA_SetConfig+0x258>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <DMA_SetConfig+0x1d4>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <DMA_SetConfig+0x1d6>
 8004254:	2300      	movs	r3, #0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d059      	beq.n	800430e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	223f      	movs	r2, #63	; 0x3f
 8004264:	409a      	lsls	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004278:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d138      	bne.n	80042fc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800429a:	e086      	b.n	80043aa <DMA_SetConfig+0x32a>
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	58025408 	.word	0x58025408
 80042e0:	5802541c 	.word	0x5802541c
 80042e4:	58025430 	.word	0x58025430
 80042e8:	58025444 	.word	0x58025444
 80042ec:	58025458 	.word	0x58025458
 80042f0:	5802546c 	.word	0x5802546c
 80042f4:	58025480 	.word	0x58025480
 80042f8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	60da      	str	r2, [r3, #12]
}
 800430c:	e04d      	b.n	80043aa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <DMA_SetConfig+0x338>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d022      	beq.n	800435e <DMA_SetConfig+0x2de>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a27      	ldr	r2, [pc, #156]	; (80043bc <DMA_SetConfig+0x33c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01d      	beq.n	800435e <DMA_SetConfig+0x2de>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a26      	ldr	r2, [pc, #152]	; (80043c0 <DMA_SetConfig+0x340>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d018      	beq.n	800435e <DMA_SetConfig+0x2de>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <DMA_SetConfig+0x344>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <DMA_SetConfig+0x2de>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <DMA_SetConfig+0x348>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00e      	beq.n	800435e <DMA_SetConfig+0x2de>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a21      	ldr	r2, [pc, #132]	; (80043cc <DMA_SetConfig+0x34c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d009      	beq.n	800435e <DMA_SetConfig+0x2de>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a20      	ldr	r2, [pc, #128]	; (80043d0 <DMA_SetConfig+0x350>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d004      	beq.n	800435e <DMA_SetConfig+0x2de>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <DMA_SetConfig+0x354>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d101      	bne.n	8004362 <DMA_SetConfig+0x2e2>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <DMA_SetConfig+0x2e4>
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d020      	beq.n	80043aa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	2201      	movs	r2, #1
 8004372:	409a      	lsls	r2, r3
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d108      	bne.n	800439a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	60da      	str	r2, [r3, #12]
}
 8004398:	e007      	b.n	80043aa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	60da      	str	r2, [r3, #12]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	58025408 	.word	0x58025408
 80043bc:	5802541c 	.word	0x5802541c
 80043c0:	58025430 	.word	0x58025430
 80043c4:	58025444 	.word	0x58025444
 80043c8:	58025458 	.word	0x58025458
 80043cc:	5802546c 	.word	0x5802546c
 80043d0:	58025480 	.word	0x58025480
 80043d4:	58025494 	.word	0x58025494

080043d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <DMA_CalcBaseAndBitshift+0x118>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d04a      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a41      	ldr	r2, [pc, #260]	; (80044f4 <DMA_CalcBaseAndBitshift+0x11c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d045      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a3f      	ldr	r2, [pc, #252]	; (80044f8 <DMA_CalcBaseAndBitshift+0x120>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d040      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3e      	ldr	r2, [pc, #248]	; (80044fc <DMA_CalcBaseAndBitshift+0x124>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d03b      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3c      	ldr	r2, [pc, #240]	; (8004500 <DMA_CalcBaseAndBitshift+0x128>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d036      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a3b      	ldr	r2, [pc, #236]	; (8004504 <DMA_CalcBaseAndBitshift+0x12c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d031      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a39      	ldr	r2, [pc, #228]	; (8004508 <DMA_CalcBaseAndBitshift+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d02c      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a38      	ldr	r2, [pc, #224]	; (800450c <DMA_CalcBaseAndBitshift+0x134>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d027      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a36      	ldr	r2, [pc, #216]	; (8004510 <DMA_CalcBaseAndBitshift+0x138>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d022      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a35      	ldr	r2, [pc, #212]	; (8004514 <DMA_CalcBaseAndBitshift+0x13c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d01d      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a33      	ldr	r2, [pc, #204]	; (8004518 <DMA_CalcBaseAndBitshift+0x140>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d018      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a32      	ldr	r2, [pc, #200]	; (800451c <DMA_CalcBaseAndBitshift+0x144>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a30      	ldr	r2, [pc, #192]	; (8004520 <DMA_CalcBaseAndBitshift+0x148>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00e      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <DMA_CalcBaseAndBitshift+0x14c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d009      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2d      	ldr	r2, [pc, #180]	; (8004528 <DMA_CalcBaseAndBitshift+0x150>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xa8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2c      	ldr	r2, [pc, #176]	; (800452c <DMA_CalcBaseAndBitshift+0x154>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <DMA_CalcBaseAndBitshift+0xac>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <DMA_CalcBaseAndBitshift+0xae>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d024      	beq.n	80044d4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	3b10      	subs	r3, #16
 8004492:	4a27      	ldr	r2, [pc, #156]	; (8004530 <DMA_CalcBaseAndBitshift+0x158>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	4a24      	ldr	r2, [pc, #144]	; (8004534 <DMA_CalcBaseAndBitshift+0x15c>)
 80044a4:	5cd3      	ldrb	r3, [r2, r3]
 80044a6:	461a      	mov	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d908      	bls.n	80044c4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <DMA_CalcBaseAndBitshift+0x160>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	1d1a      	adds	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	659a      	str	r2, [r3, #88]	; 0x58
 80044c2:	e00d      	b.n	80044e0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <DMA_CalcBaseAndBitshift+0x160>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6593      	str	r3, [r2, #88]	; 0x58
 80044d2:	e005      	b.n	80044e0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	40020010 	.word	0x40020010
 80044f4:	40020028 	.word	0x40020028
 80044f8:	40020040 	.word	0x40020040
 80044fc:	40020058 	.word	0x40020058
 8004500:	40020070 	.word	0x40020070
 8004504:	40020088 	.word	0x40020088
 8004508:	400200a0 	.word	0x400200a0
 800450c:	400200b8 	.word	0x400200b8
 8004510:	40020410 	.word	0x40020410
 8004514:	40020428 	.word	0x40020428
 8004518:	40020440 	.word	0x40020440
 800451c:	40020458 	.word	0x40020458
 8004520:	40020470 	.word	0x40020470
 8004524:	40020488 	.word	0x40020488
 8004528:	400204a0 	.word	0x400204a0
 800452c:	400204b8 	.word	0x400204b8
 8004530:	aaaaaaab 	.word	0xaaaaaaab
 8004534:	0800b58c 	.word	0x0800b58c
 8004538:	fffffc00 	.word	0xfffffc00

0800453c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d120      	bne.n	8004592 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	2b03      	cmp	r3, #3
 8004556:	d858      	bhi.n	800460a <DMA_CheckFifoParam+0xce>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <DMA_CheckFifoParam+0x24>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004571 	.word	0x08004571
 8004564:	08004583 	.word	0x08004583
 8004568:	08004571 	.word	0x08004571
 800456c:	0800460b 	.word	0x0800460b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d048      	beq.n	800460e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004580:	e045      	b.n	800460e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800458a:	d142      	bne.n	8004612 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004590:	e03f      	b.n	8004612 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459a:	d123      	bne.n	80045e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d838      	bhi.n	8004616 <DMA_CheckFifoParam+0xda>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <DMA_CheckFifoParam+0x70>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045c3 	.word	0x080045c3
 80045b4:	080045bd 	.word	0x080045bd
 80045b8:	080045d5 	.word	0x080045d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
        break;
 80045c0:	e030      	b.n	8004624 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d025      	beq.n	800461a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045d2:	e022      	b.n	800461a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045dc:	d11f      	bne.n	800461e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045e2:	e01c      	b.n	800461e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d902      	bls.n	80045f2 <DMA_CheckFifoParam+0xb6>
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d003      	beq.n	80045f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045f0:	e018      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
        break;
 80045f6:	e015      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
    break;
 8004608:	e00b      	b.n	8004622 <DMA_CheckFifoParam+0xe6>
        break;
 800460a:	bf00      	nop
 800460c:	e00a      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
        break;
 800460e:	bf00      	nop
 8004610:	e008      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
        break;
 8004612:	bf00      	nop
 8004614:	e006      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
        break;
 8004616:	bf00      	nop
 8004618:	e004      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
        break;
 800461a:	bf00      	nop
 800461c:	e002      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
        break;
 800461e:	bf00      	nop
 8004620:	e000      	b.n	8004624 <DMA_CheckFifoParam+0xe8>
    break;
 8004622:	bf00      	nop
    }
  }

  return status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop

08004634 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a38      	ldr	r2, [pc, #224]	; (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d022      	beq.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a36      	ldr	r2, [pc, #216]	; (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01d      	beq.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a35      	ldr	r2, [pc, #212]	; (8004730 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d018      	beq.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a33      	ldr	r2, [pc, #204]	; (8004734 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a32      	ldr	r2, [pc, #200]	; (8004738 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00e      	beq.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a30      	ldr	r2, [pc, #192]	; (800473c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d009      	beq.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2f      	ldr	r2, [pc, #188]	; (8004740 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2d      	ldr	r2, [pc, #180]	; (8004744 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004696:	2300      	movs	r3, #0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01a      	beq.n	80046d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	3b08      	subs	r3, #8
 80046a4:	4a28      	ldr	r2, [pc, #160]	; (8004748 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4b26      	ldr	r3, [pc, #152]	; (800474c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	461a      	mov	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a24      	ldr	r2, [pc, #144]	; (8004750 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2201      	movs	r2, #1
 80046ca:	409a      	lsls	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80046d0:	e024      	b.n	800471c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	3b10      	subs	r3, #16
 80046da:	4a1e      	ldr	r2, [pc, #120]	; (8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d806      	bhi.n	80046fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4a1b      	ldr	r2, [pc, #108]	; (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d902      	bls.n	80046fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3308      	adds	r3, #8
 80046f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4b18      	ldr	r3, [pc, #96]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	461a      	mov	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a16      	ldr	r2, [pc, #88]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800470c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2201      	movs	r2, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	58025408 	.word	0x58025408
 800472c:	5802541c 	.word	0x5802541c
 8004730:	58025430 	.word	0x58025430
 8004734:	58025444 	.word	0x58025444
 8004738:	58025458 	.word	0x58025458
 800473c:	5802546c 	.word	0x5802546c
 8004740:	58025480 	.word	0x58025480
 8004744:	58025494 	.word	0x58025494
 8004748:	cccccccd 	.word	0xcccccccd
 800474c:	16009600 	.word	0x16009600
 8004750:	58025880 	.word	0x58025880
 8004754:	aaaaaaab 	.word	0xaaaaaaab
 8004758:	400204b8 	.word	0x400204b8
 800475c:	4002040f 	.word	0x4002040f
 8004760:	10008200 	.word	0x10008200
 8004764:	40020880 	.word	0x40020880

08004768 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d04a      	beq.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d847      	bhi.n	8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a25      	ldr	r2, [pc, #148]	; (8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d022      	beq.n	80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a24      	ldr	r2, [pc, #144]	; (8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d01d      	beq.n	80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a22      	ldr	r2, [pc, #136]	; (8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d018      	beq.n	80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a21      	ldr	r2, [pc, #132]	; (800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00e      	beq.n	80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1b      	ldr	r2, [pc, #108]	; (800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d101      	bne.n	80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4b17      	ldr	r3, [pc, #92]	; (8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	461a      	mov	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047f0:	671a      	str	r2, [r3, #112]	; 0x70
 80047f2:	e009      	b.n	8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	461a      	mov	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a11      	ldr	r2, [pc, #68]	; (800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004806:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3b01      	subs	r3, #1
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	58025408 	.word	0x58025408
 8004824:	5802541c 	.word	0x5802541c
 8004828:	58025430 	.word	0x58025430
 800482c:	58025444 	.word	0x58025444
 8004830:	58025458 	.word	0x58025458
 8004834:	5802546c 	.word	0x5802546c
 8004838:	58025480 	.word	0x58025480
 800483c:	58025494 	.word	0x58025494
 8004840:	1600963f 	.word	0x1600963f
 8004844:	58025940 	.word	0x58025940
 8004848:	1000823f 	.word	0x1000823f
 800484c:	40020940 	.word	0x40020940

08004850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	; 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800485e:	4b86      	ldr	r3, [pc, #536]	; (8004a78 <HAL_GPIO_Init+0x228>)
 8004860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004862:	e18c      	b.n	8004b7e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2101      	movs	r1, #1
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	fa01 f303 	lsl.w	r3, r1, r3
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 817e 	beq.w	8004b78 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 0303 	and.w	r3, r3, #3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d005      	beq.n	8004894 <HAL_GPIO_Init+0x44>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d130      	bne.n	80048f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	2203      	movs	r2, #3
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ca:	2201      	movs	r2, #1
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	f003 0201 	and.w	r2, r3, #1
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d017      	beq.n	8004932 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	2203      	movs	r2, #3
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d123      	bne.n	8004986 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3208      	adds	r2, #8
 8004946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	220f      	movs	r2, #15
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4013      	ands	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	08da      	lsrs	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3208      	adds	r2, #8
 8004980:	69b9      	ldr	r1, [r7, #24]
 8004982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	2203      	movs	r2, #3
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 0203 	and.w	r2, r3, #3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80d8 	beq.w	8004b78 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <HAL_GPIO_Init+0x22c>)
 80049ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049ce:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <HAL_GPIO_Init+0x22c>)
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80049d8:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <HAL_GPIO_Init+0x22c>)
 80049da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049e6:	4a26      	ldr	r2, [pc, #152]	; (8004a80 <HAL_GPIO_Init+0x230>)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	3302      	adds	r3, #2
 80049ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	220f      	movs	r2, #15
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <HAL_GPIO_Init+0x234>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d04a      	beq.n	8004aa8 <HAL_GPIO_Init+0x258>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <HAL_GPIO_Init+0x238>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d02b      	beq.n	8004a72 <HAL_GPIO_Init+0x222>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <HAL_GPIO_Init+0x23c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d025      	beq.n	8004a6e <HAL_GPIO_Init+0x21e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <HAL_GPIO_Init+0x240>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01f      	beq.n	8004a6a <HAL_GPIO_Init+0x21a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <HAL_GPIO_Init+0x244>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d019      	beq.n	8004a66 <HAL_GPIO_Init+0x216>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <HAL_GPIO_Init+0x248>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_GPIO_Init+0x212>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <HAL_GPIO_Init+0x24c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00d      	beq.n	8004a5e <HAL_GPIO_Init+0x20e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <HAL_GPIO_Init+0x250>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <HAL_GPIO_Init+0x20a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a15      	ldr	r2, [pc, #84]	; (8004aa4 <HAL_GPIO_Init+0x254>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <HAL_GPIO_Init+0x206>
 8004a52:	2309      	movs	r3, #9
 8004a54:	e029      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a56:	230a      	movs	r3, #10
 8004a58:	e027      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a5a:	2307      	movs	r3, #7
 8004a5c:	e025      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a5e:	2306      	movs	r3, #6
 8004a60:	e023      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a62:	2305      	movs	r3, #5
 8004a64:	e021      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a66:	2304      	movs	r3, #4
 8004a68:	e01f      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e01d      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e01b      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e019      	b.n	8004aaa <HAL_GPIO_Init+0x25a>
 8004a76:	bf00      	nop
 8004a78:	58000080 	.word	0x58000080
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	58000400 	.word	0x58000400
 8004a84:	58020000 	.word	0x58020000
 8004a88:	58020400 	.word	0x58020400
 8004a8c:	58020800 	.word	0x58020800
 8004a90:	58020c00 	.word	0x58020c00
 8004a94:	58021000 	.word	0x58021000
 8004a98:	58021400 	.word	0x58021400
 8004a9c:	58021800 	.word	0x58021800
 8004aa0:	58021c00 	.word	0x58021c00
 8004aa4:	58022400 	.word	0x58022400
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	f002 0203 	and.w	r2, r2, #3
 8004ab0:	0092      	lsls	r2, r2, #2
 8004ab2:	4093      	lsls	r3, r2
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aba:	4938      	ldr	r1, [pc, #224]	; (8004b9c <HAL_GPIO_Init+0x34c>)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4013      	ands	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f47f ae6b 	bne.w	8004864 <HAL_GPIO_Init+0x14>
  }
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	3724      	adds	r7, #36	; 0x24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	58000400 	.word	0x58000400

08004ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	887b      	ldrh	r3, [r7, #2]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
 8004bbc:	e001      	b.n	8004bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004be0:	787b      	ldrb	r3, [r7, #1]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004be6:	887a      	ldrh	r2, [r7, #2]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bec:	e003      	b.n	8004bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bee:	887b      	ldrh	r3, [r7, #2]
 8004bf0:	041a      	lsls	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	619a      	str	r2, [r3, #24]
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
	...

08004c04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c0c:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d00a      	beq.n	8004c2e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c18:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d001      	beq.n	8004c2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e01f      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e01d      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f023 0207 	bic.w	r2, r3, #7
 8004c36:	490f      	ldr	r1, [pc, #60]	; (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c3e:	f7fc feb3 	bl	80019a8 <HAL_GetTick>
 8004c42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c44:	e009      	b.n	8004c5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c46:	f7fc feaf 	bl	80019a8 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c54:	d901      	bls.n	8004c5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e007      	b.n	8004c6a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_PWREx_ConfigSupply+0x70>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c66:	d1ee      	bne.n	8004c46 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	58024800 	.word	0x58024800

08004c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	; 0x30
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e3c8      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8087 	beq.w	8004da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c98:	4b88      	ldr	r3, [pc, #544]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ca2:	4b86      	ldr	r3, [pc, #536]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d007      	beq.n	8004cbe <HAL_RCC_OscConfig+0x46>
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	2b18      	cmp	r3, #24
 8004cb2:	d110      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5e>
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbe:	4b7f      	ldr	r3, [pc, #508]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d06c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x12c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d168      	bne.n	8004da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e3a2      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x76>
 8004ce0:	4b76      	ldr	r3, [pc, #472]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a75      	ldr	r2, [pc, #468]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e02e      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x98>
 8004cf6:	4b71      	ldr	r3, [pc, #452]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a70      	ldr	r2, [pc, #448]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b6e      	ldr	r3, [pc, #440]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a6d      	ldr	r2, [pc, #436]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e01d      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0xbc>
 8004d1a:	4b68      	ldr	r3, [pc, #416]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a67      	ldr	r2, [pc, #412]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b65      	ldr	r3, [pc, #404]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a64      	ldr	r2, [pc, #400]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e00b      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004d34:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a60      	ldr	r2, [pc, #384]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b5e      	ldr	r3, [pc, #376]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5d      	ldr	r2, [pc, #372]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fc fe28 	bl	80019a8 <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d5c:	f7fc fe24 	bl	80019a8 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	; 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e356      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d6e:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0xe4>
 8004d7a:	e014      	b.n	8004da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fc fe14 	bl	80019a8 <HAL_GetTick>
 8004d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fc fe10 	bl	80019a8 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e342      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d96:	4b49      	ldr	r3, [pc, #292]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x10c>
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 808c 	beq.w	8004ecc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db4:	4b41      	ldr	r3, [pc, #260]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dbe:	4b3f      	ldr	r3, [pc, #252]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_RCC_OscConfig+0x162>
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	2b18      	cmp	r3, #24
 8004dce:	d137      	bne.n	8004e40 <HAL_RCC_OscConfig+0x1c8>
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d132      	bne.n	8004e40 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dda:	4b38      	ldr	r3, [pc, #224]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_RCC_OscConfig+0x17a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e314      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004df2:	4b32      	ldr	r3, [pc, #200]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f023 0219 	bic.w	r2, r3, #25
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	492f      	ldr	r1, [pc, #188]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fc fdd0 	bl	80019a8 <HAL_GetTick>
 8004e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0c:	f7fc fdcc 	bl	80019a8 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e2fe      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e1e:	4b27      	ldr	r3, [pc, #156]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2a:	4b24      	ldr	r3, [pc, #144]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	061b      	lsls	r3, r3, #24
 8004e38:	4920      	ldr	r1, [pc, #128]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3e:	e045      	b.n	8004ecc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d026      	beq.n	8004e96 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e48:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 0219 	bic.w	r2, r3, #25
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4919      	ldr	r1, [pc, #100]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5a:	f7fc fda5 	bl	80019a8 <HAL_GetTick>
 8004e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e62:	f7fc fda1 	bl	80019a8 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e2d3      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e80:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	490b      	ldr	r1, [pc, #44]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]
 8004e94:	e01a      	b.n	8004ecc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <HAL_RCC_OscConfig+0x244>)
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea2:	f7fc fd81 	bl	80019a8 <HAL_GetTick>
 8004ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7fc fd7d 	bl	80019a8 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d903      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e2af      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
 8004ebc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec0:	4b96      	ldr	r3, [pc, #600]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1ee      	bne.n	8004eaa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d06a      	beq.n	8004fae <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed8:	4b90      	ldr	r3, [pc, #576]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ee2:	4b8e      	ldr	r3, [pc, #568]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d007      	beq.n	8004efe <HAL_RCC_OscConfig+0x286>
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b18      	cmp	r3, #24
 8004ef2:	d11b      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2b4>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d116      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004efe:	4b87      	ldr	r3, [pc, #540]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_RCC_OscConfig+0x29e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d001      	beq.n	8004f16 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e282      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f16:	4b81      	ldr	r3, [pc, #516]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	061b      	lsls	r3, r3, #24
 8004f24:	497d      	ldr	r1, [pc, #500]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f2a:	e040      	b.n	8004fae <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d023      	beq.n	8004f7c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f34:	4b79      	ldr	r3, [pc, #484]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a78      	ldr	r2, [pc, #480]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fc fd32 	bl	80019a8 <HAL_GetTick>
 8004f44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f48:	f7fc fd2e 	bl	80019a8 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e260      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f5a:	4b70      	ldr	r3, [pc, #448]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f66:	4b6d      	ldr	r3, [pc, #436]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	4969      	ldr	r1, [pc, #420]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60cb      	str	r3, [r1, #12]
 8004f7a:	e018      	b.n	8004fae <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f7c:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a66      	ldr	r2, [pc, #408]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fc fd0e 	bl	80019a8 <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f90:	f7fc fd0a 	bl	80019a8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e23c      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fa2:	4b5e      	ldr	r3, [pc, #376]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d036      	beq.n	8005028 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d019      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc2:	4b56      	ldr	r3, [pc, #344]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc6:	4a55      	ldr	r2, [pc, #340]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fce:	f7fc fceb 	bl	80019a8 <HAL_GetTick>
 8004fd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd6:	f7fc fce7 	bl	80019a8 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e219      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fe8:	4b4c      	ldr	r3, [pc, #304]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x35e>
 8004ff4:	e018      	b.n	8005028 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff6:	4b49      	ldr	r3, [pc, #292]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffa:	4a48      	ldr	r2, [pc, #288]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
 8005000:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005002:	f7fc fcd1 	bl	80019a8 <HAL_GetTick>
 8005006:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500a:	f7fc fccd 	bl	80019a8 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e1ff      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800501c:	4b3f      	ldr	r3, [pc, #252]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 800501e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f0      	bne.n	800500a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d036      	beq.n	80050a2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d019      	beq.n	8005070 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800503c:	4b37      	ldr	r3, [pc, #220]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a36      	ldr	r2, [pc, #216]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005042:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005046:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005048:	f7fc fcae 	bl	80019a8 <HAL_GetTick>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005050:	f7fc fcaa 	bl	80019a8 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1dc      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005062:	4b2e      	ldr	r3, [pc, #184]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCC_OscConfig+0x3d8>
 800506e:	e018      	b.n	80050a2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005070:	4b2a      	ldr	r3, [pc, #168]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a29      	ldr	r2, [pc, #164]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800507a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800507c:	f7fc fc94 	bl	80019a8 <HAL_GetTick>
 8005080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005084:	f7fc fc90 	bl	80019a8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e1c2      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005096:	4b21      	ldr	r3, [pc, #132]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 8086 	beq.w	80051bc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050b0:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <HAL_RCC_OscConfig+0x4a8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a1a      	ldr	r2, [pc, #104]	; (8005120 <HAL_RCC_OscConfig+0x4a8>)
 80050b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050bc:	f7fc fc74 	bl	80019a8 <HAL_GetTick>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c4:	f7fc fc70 	bl	80019a8 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b64      	cmp	r3, #100	; 0x64
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e1a2      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_OscConfig+0x4a8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d106      	bne.n	80050f8 <HAL_RCC_OscConfig+0x480>
 80050ea:	4b0c      	ldr	r3, [pc, #48]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	4a0b      	ldr	r2, [pc, #44]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	6713      	str	r3, [r2, #112]	; 0x70
 80050f6:	e032      	b.n	800515e <HAL_RCC_OscConfig+0x4e6>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d111      	bne.n	8005124 <HAL_RCC_OscConfig+0x4ac>
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a05      	ldr	r2, [pc, #20]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	4a02      	ldr	r2, [pc, #8]	; (800511c <HAL_RCC_OscConfig+0x4a4>)
 8005112:	f023 0304 	bic.w	r3, r3, #4
 8005116:	6713      	str	r3, [r2, #112]	; 0x70
 8005118:	e021      	b.n	800515e <HAL_RCC_OscConfig+0x4e6>
 800511a:	bf00      	nop
 800511c:	58024400 	.word	0x58024400
 8005120:	58024800 	.word	0x58024800
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b05      	cmp	r3, #5
 800512a:	d10c      	bne.n	8005146 <HAL_RCC_OscConfig+0x4ce>
 800512c:	4b83      	ldr	r3, [pc, #524]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a82      	ldr	r2, [pc, #520]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005132:	f043 0304 	orr.w	r3, r3, #4
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
 8005138:	4b80      	ldr	r3, [pc, #512]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	4a7f      	ldr	r2, [pc, #508]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
 8005144:	e00b      	b.n	800515e <HAL_RCC_OscConfig+0x4e6>
 8005146:	4b7d      	ldr	r3, [pc, #500]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a7c      	ldr	r2, [pc, #496]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800514c:	f023 0301 	bic.w	r3, r3, #1
 8005150:	6713      	str	r3, [r2, #112]	; 0x70
 8005152:	4b7a      	ldr	r3, [pc, #488]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	4a79      	ldr	r2, [pc, #484]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d015      	beq.n	8005192 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005166:	f7fc fc1f 	bl	80019a8 <HAL_GetTick>
 800516a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800516c:	e00a      	b.n	8005184 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516e:	f7fc fc1b 	bl	80019a8 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	f241 3288 	movw	r2, #5000	; 0x1388
 800517c:	4293      	cmp	r3, r2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e14b      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005184:	4b6d      	ldr	r3, [pc, #436]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0ee      	beq.n	800516e <HAL_RCC_OscConfig+0x4f6>
 8005190:	e014      	b.n	80051bc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005192:	f7fc fc09 	bl	80019a8 <HAL_GetTick>
 8005196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7fc fc05 	bl	80019a8 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e135      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051b0:	4b62      	ldr	r3, [pc, #392]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1ee      	bne.n	800519a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 812a 	beq.w	800541a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051c6:	4b5d      	ldr	r3, [pc, #372]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051ce:	2b18      	cmp	r3, #24
 80051d0:	f000 80ba 	beq.w	8005348 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	2b02      	cmp	r3, #2
 80051da:	f040 8095 	bne.w	8005308 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051de:	4b57      	ldr	r3, [pc, #348]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a56      	ldr	r2, [pc, #344]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80051e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fc fbdd 	bl	80019a8 <HAL_GetTick>
 80051ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fc fbd9 	bl	80019a8 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e10b      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005204:	4b4d      	ldr	r3, [pc, #308]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005210:	4b4a      	ldr	r3, [pc, #296]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005214:	4b4a      	ldr	r3, [pc, #296]	; (8005340 <HAL_RCC_OscConfig+0x6c8>)
 8005216:	4013      	ands	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005220:	0112      	lsls	r2, r2, #4
 8005222:	430a      	orrs	r2, r1
 8005224:	4945      	ldr	r1, [pc, #276]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005226:	4313      	orrs	r3, r2
 8005228:	628b      	str	r3, [r1, #40]	; 0x28
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	3b01      	subs	r3, #1
 8005230:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005238:	3b01      	subs	r3, #1
 800523a:	025b      	lsls	r3, r3, #9
 800523c:	b29b      	uxth	r3, r3
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	3b01      	subs	r3, #1
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	3b01      	subs	r3, #1
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800525a:	4938      	ldr	r1, [pc, #224]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800525c:	4313      	orrs	r3, r2
 800525e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005260:	4b36      	ldr	r3, [pc, #216]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	4a35      	ldr	r2, [pc, #212]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800526c:	4b33      	ldr	r3, [pc, #204]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800526e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005270:	4b34      	ldr	r3, [pc, #208]	; (8005344 <HAL_RCC_OscConfig+0x6cc>)
 8005272:	4013      	ands	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005278:	00d2      	lsls	r2, r2, #3
 800527a:	4930      	ldr	r1, [pc, #192]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800527c:	4313      	orrs	r3, r2
 800527e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005280:	4b2e      	ldr	r3, [pc, #184]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	f023 020c 	bic.w	r2, r3, #12
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	492b      	ldr	r1, [pc, #172]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800528e:	4313      	orrs	r3, r2
 8005290:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005292:	4b2a      	ldr	r3, [pc, #168]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	f023 0202 	bic.w	r2, r3, #2
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529e:	4927      	ldr	r1, [pc, #156]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	4a24      	ldr	r2, [pc, #144]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b0:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	4a21      	ldr	r2, [pc, #132]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052bc:	4b1f      	ldr	r3, [pc, #124]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052c8:	4b1c      	ldr	r3, [pc, #112]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	4a1b      	ldr	r2, [pc, #108]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d4:	4b19      	ldr	r3, [pc, #100]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a18      	ldr	r2, [pc, #96]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fc fb62 	bl	80019a8 <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fc fb5e 	bl	80019a8 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e090      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052fa:	4b10      	ldr	r3, [pc, #64]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x670>
 8005306:	e088      	b.n	800541a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0b      	ldr	r2, [pc, #44]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 800530e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fc fb48 	bl	80019a8 <HAL_GetTick>
 8005318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531c:	f7fc fb44 	bl	80019a8 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e076      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800532e:	4b03      	ldr	r3, [pc, #12]	; (800533c <HAL_RCC_OscConfig+0x6c4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x6a4>
 800533a:	e06e      	b.n	800541a <HAL_RCC_OscConfig+0x7a2>
 800533c:	58024400 	.word	0x58024400
 8005340:	fffffc0c 	.word	0xfffffc0c
 8005344:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005348:	4b36      	ldr	r3, [pc, #216]	; (8005424 <HAL_RCC_OscConfig+0x7ac>)
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800534e:	4b35      	ldr	r3, [pc, #212]	; (8005424 <HAL_RCC_OscConfig+0x7ac>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2b01      	cmp	r3, #1
 800535a:	d031      	beq.n	80053c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f003 0203 	and.w	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d12a      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	091b      	lsrs	r3, r3, #4
 800536e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005376:	429a      	cmp	r2, r3
 8005378:	d122      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d11a      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	0a5b      	lsrs	r3, r3, #9
 800538e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d111      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0c1b      	lsrs	r3, r3, #16
 80053a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d108      	bne.n	80053c0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	0e1b      	lsrs	r3, r3, #24
 80053b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d001      	beq.n	80053c4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e02b      	b.n	800541c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053c4:	4b17      	ldr	r3, [pc, #92]	; (8005424 <HAL_RCC_OscConfig+0x7ac>)
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	08db      	lsrs	r3, r3, #3
 80053ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d01f      	beq.n	800541a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <HAL_RCC_OscConfig+0x7ac>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	4a11      	ldr	r2, [pc, #68]	; (8005424 <HAL_RCC_OscConfig+0x7ac>)
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053e6:	f7fc fadf 	bl	80019a8 <HAL_GetTick>
 80053ea:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053ec:	bf00      	nop
 80053ee:	f7fc fadb 	bl	80019a8 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d0f9      	beq.n	80053ee <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053fa:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <HAL_RCC_OscConfig+0x7ac>)
 80053fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <HAL_RCC_OscConfig+0x7b0>)
 8005400:	4013      	ands	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005406:	00d2      	lsls	r2, r2, #3
 8005408:	4906      	ldr	r1, [pc, #24]	; (8005424 <HAL_RCC_OscConfig+0x7ac>)
 800540a:	4313      	orrs	r3, r2
 800540c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_RCC_OscConfig+0x7ac>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	4a04      	ldr	r2, [pc, #16]	; (8005424 <HAL_RCC_OscConfig+0x7ac>)
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3730      	adds	r7, #48	; 0x30
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	58024400 	.word	0x58024400
 8005428:	ffff0007 	.word	0xffff0007

0800542c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e19c      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005440:	4b8a      	ldr	r3, [pc, #552]	; (800566c <HAL_RCC_ClockConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d910      	bls.n	8005470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b87      	ldr	r3, [pc, #540]	; (800566c <HAL_RCC_ClockConfig+0x240>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 020f 	bic.w	r2, r3, #15
 8005456:	4985      	ldr	r1, [pc, #532]	; (800566c <HAL_RCC_ClockConfig+0x240>)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4313      	orrs	r3, r2
 800545c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800545e:	4b83      	ldr	r3, [pc, #524]	; (800566c <HAL_RCC_ClockConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e184      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d010      	beq.n	800549e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	4b7b      	ldr	r3, [pc, #492]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005488:	429a      	cmp	r2, r3
 800548a:	d908      	bls.n	800549e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800548c:	4b78      	ldr	r3, [pc, #480]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	4975      	ldr	r1, [pc, #468]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 800549a:	4313      	orrs	r3, r2
 800549c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d010      	beq.n	80054cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	4b70      	ldr	r3, [pc, #448]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d908      	bls.n	80054cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054ba:	4b6d      	ldr	r3, [pc, #436]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	496a      	ldr	r1, [pc, #424]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d010      	beq.n	80054fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	4b64      	ldr	r3, [pc, #400]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d908      	bls.n	80054fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054e8:	4b61      	ldr	r3, [pc, #388]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	495e      	ldr	r1, [pc, #376]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	4b59      	ldr	r3, [pc, #356]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005512:	429a      	cmp	r2, r3
 8005514:	d908      	bls.n	8005528 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005516:	4b56      	ldr	r3, [pc, #344]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4953      	ldr	r1, [pc, #332]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005524:	4313      	orrs	r3, r2
 8005526:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d010      	beq.n	8005556 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	4b4d      	ldr	r3, [pc, #308]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	429a      	cmp	r2, r3
 8005542:	d908      	bls.n	8005556 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005544:	4b4a      	ldr	r3, [pc, #296]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f023 020f 	bic.w	r2, r3, #15
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4947      	ldr	r1, [pc, #284]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005552:	4313      	orrs	r3, r2
 8005554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d055      	beq.n	800560e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005562:	4b43      	ldr	r3, [pc, #268]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	4940      	ldr	r1, [pc, #256]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005570:	4313      	orrs	r3, r2
 8005572:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d107      	bne.n	800558c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800557c:	4b3c      	ldr	r3, [pc, #240]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d121      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0f6      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d107      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005594:	4b36      	ldr	r3, [pc, #216]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d115      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0ea      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ac:	4b30      	ldr	r3, [pc, #192]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0de      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055bc:	4b2c      	ldr	r3, [pc, #176]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0d6      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055cc:	4b28      	ldr	r3, [pc, #160]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f023 0207 	bic.w	r2, r3, #7
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4925      	ldr	r1, [pc, #148]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055de:	f7fc f9e3 	bl	80019a8 <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e4:	e00a      	b.n	80055fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e6:	f7fc f9df 	bl	80019a8 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e0be      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fc:	4b1c      	ldr	r3, [pc, #112]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	429a      	cmp	r2, r3
 800560c:	d1eb      	bne.n	80055e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d010      	beq.n	800563c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	4b14      	ldr	r3, [pc, #80]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	429a      	cmp	r2, r3
 8005628:	d208      	bcs.n	800563c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800562a:	4b11      	ldr	r3, [pc, #68]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f023 020f 	bic.w	r2, r3, #15
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	490e      	ldr	r1, [pc, #56]	; (8005670 <HAL_RCC_ClockConfig+0x244>)
 8005638:	4313      	orrs	r3, r2
 800563a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_RCC_ClockConfig+0x240>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d214      	bcs.n	8005674 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_RCC_ClockConfig+0x240>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 020f 	bic.w	r2, r3, #15
 8005652:	4906      	ldr	r1, [pc, #24]	; (800566c <HAL_RCC_ClockConfig+0x240>)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565a:	4b04      	ldr	r3, [pc, #16]	; (800566c <HAL_RCC_ClockConfig+0x240>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d005      	beq.n	8005674 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e086      	b.n	800577a <HAL_RCC_ClockConfig+0x34e>
 800566c:	52002000 	.word	0x52002000
 8005670:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d010      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	4b3f      	ldr	r3, [pc, #252]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800568c:	429a      	cmp	r2, r3
 800568e:	d208      	bcs.n	80056a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005690:	4b3c      	ldr	r3, [pc, #240]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	4939      	ldr	r1, [pc, #228]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	4b34      	ldr	r3, [pc, #208]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d208      	bcs.n	80056d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056be:	4b31      	ldr	r3, [pc, #196]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	492e      	ldr	r1, [pc, #184]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	4b28      	ldr	r3, [pc, #160]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d208      	bcs.n	80056fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056ec:	4b25      	ldr	r3, [pc, #148]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	4922      	ldr	r1, [pc, #136]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69da      	ldr	r2, [r3, #28]
 800570e:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005716:	429a      	cmp	r2, r3
 8005718:	d208      	bcs.n	800572c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800571a:	4b1a      	ldr	r3, [pc, #104]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4917      	ldr	r1, [pc, #92]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005728:	4313      	orrs	r3, r2
 800572a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800572c:	f000 f834 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8005730:	4602      	mov	r2, r0
 8005732:	4b14      	ldr	r3, [pc, #80]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	4912      	ldr	r1, [pc, #72]	; (8005788 <HAL_RCC_ClockConfig+0x35c>)
 800573e:	5ccb      	ldrb	r3, [r1, r3]
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	fa22 f303 	lsr.w	r3, r2, r3
 8005748:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800574a:	4b0e      	ldr	r3, [pc, #56]	; (8005784 <HAL_RCC_ClockConfig+0x358>)
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <HAL_RCC_ClockConfig+0x35c>)
 8005754:	5cd3      	ldrb	r3, [r2, r3]
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
 8005760:	4a0a      	ldr	r2, [pc, #40]	; (800578c <HAL_RCC_ClockConfig+0x360>)
 8005762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005764:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <HAL_RCC_ClockConfig+0x364>)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_RCC_ClockConfig+0x368>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fc f8d0 	bl	8001914 <HAL_InitTick>
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	58024400 	.word	0x58024400
 8005788:	0800b57c 	.word	0x0800b57c
 800578c:	24000004 	.word	0x24000004
 8005790:	24000000 	.word	0x24000000
 8005794:	24000008 	.word	0x24000008

08005798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	; 0x24
 800579c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800579e:	4bb3      	ldr	r3, [pc, #716]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057a6:	2b18      	cmp	r3, #24
 80057a8:	f200 8155 	bhi.w	8005a56 <HAL_RCC_GetSysClockFreq+0x2be>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	08005819 	.word	0x08005819
 80057b8:	08005a57 	.word	0x08005a57
 80057bc:	08005a57 	.word	0x08005a57
 80057c0:	08005a57 	.word	0x08005a57
 80057c4:	08005a57 	.word	0x08005a57
 80057c8:	08005a57 	.word	0x08005a57
 80057cc:	08005a57 	.word	0x08005a57
 80057d0:	08005a57 	.word	0x08005a57
 80057d4:	0800583f 	.word	0x0800583f
 80057d8:	08005a57 	.word	0x08005a57
 80057dc:	08005a57 	.word	0x08005a57
 80057e0:	08005a57 	.word	0x08005a57
 80057e4:	08005a57 	.word	0x08005a57
 80057e8:	08005a57 	.word	0x08005a57
 80057ec:	08005a57 	.word	0x08005a57
 80057f0:	08005a57 	.word	0x08005a57
 80057f4:	08005845 	.word	0x08005845
 80057f8:	08005a57 	.word	0x08005a57
 80057fc:	08005a57 	.word	0x08005a57
 8005800:	08005a57 	.word	0x08005a57
 8005804:	08005a57 	.word	0x08005a57
 8005808:	08005a57 	.word	0x08005a57
 800580c:	08005a57 	.word	0x08005a57
 8005810:	08005a57 	.word	0x08005a57
 8005814:	0800584b 	.word	0x0800584b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005818:	4b94      	ldr	r3, [pc, #592]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005824:	4b91      	ldr	r3, [pc, #580]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	08db      	lsrs	r3, r3, #3
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	4a90      	ldr	r2, [pc, #576]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
 8005834:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005836:	e111      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005838:	4b8d      	ldr	r3, [pc, #564]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800583a:	61bb      	str	r3, [r7, #24]
      break;
 800583c:	e10e      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800583e:	4b8d      	ldr	r3, [pc, #564]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005840:	61bb      	str	r3, [r7, #24]
      break;
 8005842:	e10b      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005844:	4b8c      	ldr	r3, [pc, #560]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005846:	61bb      	str	r3, [r7, #24]
      break;
 8005848:	e108      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800584a:	4b88      	ldr	r3, [pc, #544]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005854:	4b85      	ldr	r3, [pc, #532]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800585e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005860:	4b82      	ldr	r3, [pc, #520]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800586a:	4b80      	ldr	r3, [pc, #512]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800586c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586e:	08db      	lsrs	r3, r3, #3
 8005870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 80e1 	beq.w	8005a50 <HAL_RCC_GetSysClockFreq+0x2b8>
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b02      	cmp	r3, #2
 8005892:	f000 8083 	beq.w	800599c <HAL_RCC_GetSysClockFreq+0x204>
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b02      	cmp	r3, #2
 800589a:	f200 80a1 	bhi.w	80059e0 <HAL_RCC_GetSysClockFreq+0x248>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x114>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d056      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058aa:	e099      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ac:	4b6f      	ldr	r3, [pc, #444]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d02d      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058b8:	4b6c      	ldr	r3, [pc, #432]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	4a6b      	ldr	r2, [pc, #428]	; (8005a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	ee07 3a90 	vmov	s15, r3
 80058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058e2:	4b62      	ldr	r3, [pc, #392]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80058fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005912:	e087      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005926:	4b51      	ldr	r3, [pc, #324]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592e:	ee07 3a90 	vmov	s15, r3
 8005932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005936:	ed97 6a02 	vldr	s12, [r7, #8]
 800593a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800593e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800594a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005956:	e065      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005962:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800596a:	4b40      	ldr	r3, [pc, #256]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a02 	vldr	s12, [r7, #8]
 800597e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800599a:	e043      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a88 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ae:	4b2f      	ldr	r3, [pc, #188]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059be:	ed97 6a02 	vldr	s12, [r7, #8]
 80059c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80059c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059de:	e021      	b.n	8005a24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 80059ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059f2:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	0a5b      	lsrs	r3, r3, #9
 8005a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2e:	3301      	adds	r3, #1
 8005a30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a48:	ee17 3a90 	vmov	r3, s15
 8005a4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a4e:	e005      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61bb      	str	r3, [r7, #24]
      break;
 8005a54:	e002      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a56:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a58:	61bb      	str	r3, [r7, #24]
      break;
 8005a5a:	bf00      	nop
  }

  return sysclockfreq;
 8005a5c:	69bb      	ldr	r3, [r7, #24]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3724      	adds	r7, #36	; 0x24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	58024400 	.word	0x58024400
 8005a70:	03d09000 	.word	0x03d09000
 8005a74:	003d0900 	.word	0x003d0900
 8005a78:	017d7840 	.word	0x017d7840
 8005a7c:	46000000 	.word	0x46000000
 8005a80:	4c742400 	.word	0x4c742400
 8005a84:	4a742400 	.word	0x4a742400
 8005a88:	4bbebc20 	.word	0x4bbebc20

08005a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a92:	f7ff fe81 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8005a96:	4602      	mov	r2, r0
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCC_GetHCLKFreq+0x50>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	0a1b      	lsrs	r3, r3, #8
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	490f      	ldr	r1, [pc, #60]	; (8005ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005aa4:	5ccb      	ldrb	r3, [r1, r3]
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8005aae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <HAL_RCC_GetHCLKFreq+0x50>)
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005aba:	5cd3      	ldrb	r3, [r2, r3]
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac6:	4a07      	ldr	r2, [pc, #28]	; (8005ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ac8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005aca:	4a07      	ldr	r2, [pc, #28]	; (8005ae8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ad0:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	0800b57c 	.word	0x0800b57c
 8005ae4:	24000004 	.word	0x24000004
 8005ae8:	24000000 	.word	0x24000000

08005aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005af0:	f7ff ffcc 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	4904      	ldr	r1, [pc, #16]	; (8005b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b02:	5ccb      	ldrb	r3, [r1, r3]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	58024400 	.word	0x58024400
 8005b14:	0800b57c 	.word	0x0800b57c

08005b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b1c:	f7ff ffb6 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4904      	ldr	r1, [pc, #16]	; (8005b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	0800b57c 	.word	0x0800b57c

08005b44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b48:	b0c6      	sub	sp, #280	; 0x118
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b56:	2300      	movs	r3, #0
 8005b58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005b68:	2500      	movs	r5, #0
 8005b6a:	ea54 0305 	orrs.w	r3, r4, r5
 8005b6e:	d049      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b7a:	d02f      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b80:	d828      	bhi.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b86:	d01a      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b8c:	d822      	bhi.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b96:	d007      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b98:	e01c      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b9a:	4bab      	ldr	r3, [pc, #684]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	4aaa      	ldr	r2, [pc, #680]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ba6:	e01a      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bac:	3308      	adds	r3, #8
 8005bae:	2102      	movs	r1, #2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 fc25 	bl	8007400 <RCCEx_PLL2_Config>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bbc:	e00f      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc2:	3328      	adds	r3, #40	; 0x28
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 fccc 	bl	8007564 <RCCEx_PLL3_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bd2:	e004      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005bda:	e000      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005be6:	4b98      	ldr	r3, [pc, #608]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bf4:	4a94      	ldr	r2, [pc, #592]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	6513      	str	r3, [r2, #80]	; 0x50
 8005bfa:	e003      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005c10:	f04f 0900 	mov.w	r9, #0
 8005c14:	ea58 0309 	orrs.w	r3, r8, r9
 8005c18:	d047      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d82a      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c41 	.word	0x08005c41
 8005c30:	08005c4f 	.word	0x08005c4f
 8005c34:	08005c65 	.word	0x08005c65
 8005c38:	08005c83 	.word	0x08005c83
 8005c3c:	08005c83 	.word	0x08005c83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c40:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a80      	ldr	r2, [pc, #512]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c4c:	e01a      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c52:	3308      	adds	r3, #8
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fbd2 	bl	8007400 <RCCEx_PLL2_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c62:	e00f      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c68:	3328      	adds	r3, #40	; 0x28
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fc79 	bl	8007564 <RCCEx_PLL3_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c78:	e004      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c80:	e000      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c8c:	4b6e      	ldr	r3, [pc, #440]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c90:	f023 0107 	bic.w	r1, r3, #7
 8005c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9a:	4a6b      	ldr	r2, [pc, #428]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6513      	str	r3, [r2, #80]	; 0x50
 8005ca0:	e003      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ca6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005cb6:	f04f 0b00 	mov.w	fp, #0
 8005cba:	ea5a 030b 	orrs.w	r3, sl, fp
 8005cbe:	d05b      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cc8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005ccc:	d03b      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005cce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005cd2:	d834      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cd8:	d037      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005cda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cde:	d82e      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ce0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ce4:	d033      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005ce6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cea:	d828      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf0:	d01a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf6:	d822      	bhi.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d00:	d007      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005d02:	e01c      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d04:	4b50      	ldr	r3, [pc, #320]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	4a4f      	ldr	r2, [pc, #316]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d10:	e01e      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d16:	3308      	adds	r3, #8
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 fb70 	bl	8007400 <RCCEx_PLL2_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d26:	e013      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	3328      	adds	r3, #40	; 0x28
 8005d2e:	2100      	movs	r1, #0
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 fc17 	bl	8007564 <RCCEx_PLL3_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d3c:	e008      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d44:	e004      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d46:	bf00      	nop
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10b      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d58:	4b3b      	ldr	r3, [pc, #236]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d68:	4a37      	ldr	r2, [pc, #220]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d6e:	e003      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005d84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005d92:	460b      	mov	r3, r1
 8005d94:	4313      	orrs	r3, r2
 8005d96:	d05d      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005da0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005da4:	d03b      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005da6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005daa:	d834      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005db0:	d037      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005db2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005db6:	d82e      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005db8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dbc:	d033      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005dbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dc2:	d828      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dc8:	d01a      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dce:	d822      	bhi.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dd8:	d007      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005dda:	e01c      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ddc:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de0:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005de8:	e01e      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dee:	3308      	adds	r3, #8
 8005df0:	2100      	movs	r1, #0
 8005df2:	4618      	mov	r0, r3
 8005df4:	f001 fb04 	bl	8007400 <RCCEx_PLL2_Config>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005dfe:	e013      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e04:	3328      	adds	r3, #40	; 0x28
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fbab 	bl	8007564 <RCCEx_PLL3_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e14:	e008      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e1c:	e004      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10d      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e30:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e40:	4a01      	ldr	r2, [pc, #4]	; (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e42:	430b      	orrs	r3, r1
 8005e44:	6593      	str	r3, [r2, #88]	; 0x58
 8005e46:	e005      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005e48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005e60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e64:	2300      	movs	r3, #0
 8005e66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e6a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	d03a      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7a:	2b30      	cmp	r3, #48	; 0x30
 8005e7c:	d01f      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e7e:	2b30      	cmp	r3, #48	; 0x30
 8005e80:	d819      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d00c      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d815      	bhi.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d019      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e8e:	2b10      	cmp	r3, #16
 8005e90:	d111      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e92:	4baa      	ldr	r3, [pc, #680]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4aa9      	ldr	r2, [pc, #676]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e9e:	e011      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 faa9 	bl	8007400 <RCCEx_PLL2_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ecc:	4b9b      	ldr	r3, [pc, #620]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eda:	4a98      	ldr	r2, [pc, #608]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005edc:	430b      	orrs	r3, r1
 8005ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ee0:	e003      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ee6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005efa:	2300      	movs	r3, #0
 8005efc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005f04:	460b      	mov	r3, r1
 8005f06:	4313      	orrs	r3, r2
 8005f08:	d051      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f14:	d035      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1a:	d82e      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f20:	d031      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005f22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f26:	d828      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2c:	d01a      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f32:	d822      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3c:	d007      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005f3e:	e01c      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f40:	4b7e      	ldr	r3, [pc, #504]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	4a7d      	ldr	r2, [pc, #500]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f4c:	e01c      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f52:	3308      	adds	r3, #8
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 fa52 	bl	8007400 <RCCEx_PLL2_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f62:	e011      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f68:	3328      	adds	r3, #40	; 0x28
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 faf9 	bl	8007564 <RCCEx_PLL3_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f78:	e006      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f80:	e002      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f90:	4b6a      	ldr	r3, [pc, #424]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9e:	4a67      	ldr	r2, [pc, #412]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6513      	str	r3, [r2, #80]	; 0x50
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005faa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005fba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fc4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d053      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fd8:	d033      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005fda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fde:	d82c      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fe0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fe4:	d02f      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005fe6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fea:	d826      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ff0:	d02b      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005ff2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ff6:	d820      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ffc:	d012      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006002:	d81a      	bhi.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d022      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600c:	d115      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800600e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006012:	3308      	adds	r3, #8
 8006014:	2101      	movs	r1, #1
 8006016:	4618      	mov	r0, r3
 8006018:	f001 f9f2 	bl	8007400 <RCCEx_PLL2_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006022:	e015      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006028:	3328      	adds	r3, #40	; 0x28
 800602a:	2101      	movs	r1, #1
 800602c:	4618      	mov	r0, r3
 800602e:	f001 fa99 	bl	8007564 <RCCEx_PLL3_Config>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006038:	e00a      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006040:	e006      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006042:	bf00      	nop
 8006044:	e004      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006046:	bf00      	nop
 8006048:	e002      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800604e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006050:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006058:	4b38      	ldr	r3, [pc, #224]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006066:	4a35      	ldr	r2, [pc, #212]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6513      	str	r3, [r2, #80]	; 0x50
 800606c:	e003      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006072:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800608c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006090:	460b      	mov	r3, r1
 8006092:	4313      	orrs	r3, r2
 8006094:	d058      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800609e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060a2:	d033      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80060a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060a8:	d82c      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ae:	d02f      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80060b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b4:	d826      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060ba:	d02b      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80060bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060c0:	d820      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060c6:	d012      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80060c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060cc:	d81a      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d022      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80060d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060d6:	d115      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060dc:	3308      	adds	r3, #8
 80060de:	2101      	movs	r1, #1
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 f98d 	bl	8007400 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060ec:	e015      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f2:	3328      	adds	r3, #40	; 0x28
 80060f4:	2101      	movs	r1, #1
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 fa34 	bl	8007564 <RCCEx_PLL3_Config>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006102:	e00a      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800610a:	e006      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800610c:	bf00      	nop
 800610e:	e004      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006110:	bf00      	nop
 8006112:	e002      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006114:	bf00      	nop
 8006116:	e000      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10e      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800612a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006132:	4a02      	ldr	r2, [pc, #8]	; (800613c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006134:	430b      	orrs	r3, r1
 8006136:	6593      	str	r3, [r2, #88]	; 0x58
 8006138:	e006      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800613a:	bf00      	nop
 800613c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006144:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800615e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	d037      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006172:	d00e      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006178:	d816      	bhi.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d018      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800617e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006182:	d111      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006184:	4bc4      	ldr	r3, [pc, #784]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	4ac3      	ldr	r2, [pc, #780]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800618a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800618e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006190:	e00f      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006196:	3308      	adds	r3, #8
 8006198:	2101      	movs	r1, #1
 800619a:	4618      	mov	r0, r3
 800619c:	f001 f930 	bl	8007400 <RCCEx_PLL2_Config>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061a6:	e004      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061ae:	e000      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80061b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061ba:	4bb7      	ldr	r3, [pc, #732]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061be:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80061c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061c8:	4ab3      	ldr	r2, [pc, #716]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ca:	430b      	orrs	r3, r1
 80061cc:	6513      	str	r3, [r2, #80]	; 0x50
 80061ce:	e003      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80061e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061e8:	2300      	movs	r3, #0
 80061ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80061f2:	460b      	mov	r3, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	d039      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d81c      	bhi.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006202:	a201      	add	r2, pc, #4	; (adr r2, 8006208 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006208:	08006245 	.word	0x08006245
 800620c:	08006219 	.word	0x08006219
 8006210:	08006227 	.word	0x08006227
 8006214:	08006245 	.word	0x08006245
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006218:	4b9f      	ldr	r3, [pc, #636]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	4a9e      	ldr	r2, [pc, #632]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800621e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006224:	e00f      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622a:	3308      	adds	r3, #8
 800622c:	2102      	movs	r1, #2
 800622e:	4618      	mov	r0, r3
 8006230:	f001 f8e6 	bl	8007400 <RCCEx_PLL2_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800623a:	e004      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006242:	e000      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006246:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800624e:	4b92      	ldr	r3, [pc, #584]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006252:	f023 0103 	bic.w	r1, r3, #3
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625c:	4a8e      	ldr	r2, [pc, #568]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800625e:	430b      	orrs	r3, r1
 8006260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006262:	e003      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006264:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006268:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006282:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006286:	460b      	mov	r3, r1
 8006288:	4313      	orrs	r3, r2
 800628a:	f000 8099 	beq.w	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800628e:	4b83      	ldr	r3, [pc, #524]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a82      	ldr	r2, [pc, #520]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800629a:	f7fb fb85 	bl	80019a8 <HAL_GetTick>
 800629e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062a2:	e00b      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062a4:	f7fb fb80 	bl	80019a8 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b64      	cmp	r3, #100	; 0x64
 80062b2:	d903      	bls.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80062ba:	e005      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062bc:	4b77      	ldr	r3, [pc, #476]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0ed      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80062c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d173      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062d0:	4b71      	ldr	r3, [pc, #452]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062dc:	4053      	eors	r3, r2
 80062de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d015      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062e6:	4b6c      	ldr	r3, [pc, #432]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062f2:	4b69      	ldr	r3, [pc, #420]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	4a68      	ldr	r2, [pc, #416]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062fe:	4b66      	ldr	r3, [pc, #408]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	4a65      	ldr	r2, [pc, #404]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006308:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800630a:	4a63      	ldr	r2, [pc, #396]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800630c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006310:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d118      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fb fb42 	bl	80019a8 <HAL_GetTick>
 8006324:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006328:	e00d      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632a:	f7fb fb3d 	bl	80019a8 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006334:	1ad2      	subs	r2, r2, r3
 8006336:	f241 3388 	movw	r3, #5000	; 0x1388
 800633a:	429a      	cmp	r2, r3
 800633c:	d903      	bls.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006344:	e005      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006346:	4b54      	ldr	r3, [pc, #336]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0eb      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006356:	2b00      	cmp	r3, #0
 8006358:	d129      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800636a:	d10e      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800636c:	4b4a      	ldr	r3, [pc, #296]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800637c:	091a      	lsrs	r2, r3, #4
 800637e:	4b48      	ldr	r3, [pc, #288]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006380:	4013      	ands	r3, r2
 8006382:	4a45      	ldr	r2, [pc, #276]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006384:	430b      	orrs	r3, r1
 8006386:	6113      	str	r3, [r2, #16]
 8006388:	e005      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800638a:	4b43      	ldr	r3, [pc, #268]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	4a42      	ldr	r2, [pc, #264]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006390:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006394:	6113      	str	r3, [r2, #16]
 8006396:	4b40      	ldr	r3, [pc, #256]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006398:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800639a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063a6:	4a3c      	ldr	r2, [pc, #240]	; (8006498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	6713      	str	r3, [r2, #112]	; 0x70
 80063ac:	e008      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80063b6:	e003      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	f002 0301 	and.w	r3, r2, #1
 80063cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80063da:	460b      	mov	r3, r1
 80063dc:	4313      	orrs	r3, r2
 80063de:	f000 808f 	beq.w	8006500 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063e8:	2b28      	cmp	r3, #40	; 0x28
 80063ea:	d871      	bhi.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	080064d9 	.word	0x080064d9
 80063f8:	080064d1 	.word	0x080064d1
 80063fc:	080064d1 	.word	0x080064d1
 8006400:	080064d1 	.word	0x080064d1
 8006404:	080064d1 	.word	0x080064d1
 8006408:	080064d1 	.word	0x080064d1
 800640c:	080064d1 	.word	0x080064d1
 8006410:	080064d1 	.word	0x080064d1
 8006414:	080064a5 	.word	0x080064a5
 8006418:	080064d1 	.word	0x080064d1
 800641c:	080064d1 	.word	0x080064d1
 8006420:	080064d1 	.word	0x080064d1
 8006424:	080064d1 	.word	0x080064d1
 8006428:	080064d1 	.word	0x080064d1
 800642c:	080064d1 	.word	0x080064d1
 8006430:	080064d1 	.word	0x080064d1
 8006434:	080064bb 	.word	0x080064bb
 8006438:	080064d1 	.word	0x080064d1
 800643c:	080064d1 	.word	0x080064d1
 8006440:	080064d1 	.word	0x080064d1
 8006444:	080064d1 	.word	0x080064d1
 8006448:	080064d1 	.word	0x080064d1
 800644c:	080064d1 	.word	0x080064d1
 8006450:	080064d1 	.word	0x080064d1
 8006454:	080064d9 	.word	0x080064d9
 8006458:	080064d1 	.word	0x080064d1
 800645c:	080064d1 	.word	0x080064d1
 8006460:	080064d1 	.word	0x080064d1
 8006464:	080064d1 	.word	0x080064d1
 8006468:	080064d1 	.word	0x080064d1
 800646c:	080064d1 	.word	0x080064d1
 8006470:	080064d1 	.word	0x080064d1
 8006474:	080064d9 	.word	0x080064d9
 8006478:	080064d1 	.word	0x080064d1
 800647c:	080064d1 	.word	0x080064d1
 8006480:	080064d1 	.word	0x080064d1
 8006484:	080064d1 	.word	0x080064d1
 8006488:	080064d1 	.word	0x080064d1
 800648c:	080064d1 	.word	0x080064d1
 8006490:	080064d1 	.word	0x080064d1
 8006494:	080064d9 	.word	0x080064d9
 8006498:	58024400 	.word	0x58024400
 800649c:	58024800 	.word	0x58024800
 80064a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a8:	3308      	adds	r3, #8
 80064aa:	2101      	movs	r1, #1
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 ffa7 	bl	8007400 <RCCEx_PLL2_Config>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064b8:	e00f      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	3328      	adds	r3, #40	; 0x28
 80064c0:	2101      	movs	r1, #1
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 f84e 	bl	8007564 <RCCEx_PLL3_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064ce:	e004      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064d6:	e000      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80064d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064e2:	4bbf      	ldr	r3, [pc, #764]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f0:	4abb      	ldr	r2, [pc, #748]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064f2:	430b      	orrs	r3, r1
 80064f4:	6553      	str	r3, [r2, #84]	; 0x54
 80064f6:	e003      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	f002 0302 	and.w	r3, r2, #2
 800650c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006510:	2300      	movs	r3, #0
 8006512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006516:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800651a:	460b      	mov	r3, r1
 800651c:	4313      	orrs	r3, r2
 800651e:	d041      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006526:	2b05      	cmp	r3, #5
 8006528:	d824      	bhi.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800652a:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	0800657d 	.word	0x0800657d
 8006534:	08006549 	.word	0x08006549
 8006538:	0800655f 	.word	0x0800655f
 800653c:	0800657d 	.word	0x0800657d
 8006540:	0800657d 	.word	0x0800657d
 8006544:	0800657d 	.word	0x0800657d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654c:	3308      	adds	r3, #8
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f000 ff55 	bl	8007400 <RCCEx_PLL2_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800655c:	e00f      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006562:	3328      	adds	r3, #40	; 0x28
 8006564:	2101      	movs	r1, #1
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fffc 	bl	8007564 <RCCEx_PLL3_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006572:	e004      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800657a:	e000      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800657c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800657e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006586:	4b96      	ldr	r3, [pc, #600]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	f023 0107 	bic.w	r1, r3, #7
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006594:	4a92      	ldr	r2, [pc, #584]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006596:	430b      	orrs	r3, r1
 8006598:	6553      	str	r3, [r2, #84]	; 0x54
 800659a:	e003      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	f002 0304 	and.w	r3, r2, #4
 80065b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065b4:	2300      	movs	r3, #0
 80065b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065be:	460b      	mov	r3, r1
 80065c0:	4313      	orrs	r3, r2
 80065c2:	d044      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065cc:	2b05      	cmp	r3, #5
 80065ce:	d825      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80065d0:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	08006625 	.word	0x08006625
 80065dc:	080065f1 	.word	0x080065f1
 80065e0:	08006607 	.word	0x08006607
 80065e4:	08006625 	.word	0x08006625
 80065e8:	08006625 	.word	0x08006625
 80065ec:	08006625 	.word	0x08006625
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f4:	3308      	adds	r3, #8
 80065f6:	2101      	movs	r1, #1
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 ff01 	bl	8007400 <RCCEx_PLL2_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006604:	e00f      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660a:	3328      	adds	r3, #40	; 0x28
 800660c:	2101      	movs	r1, #1
 800660e:	4618      	mov	r0, r3
 8006610:	f000 ffa8 	bl	8007564 <RCCEx_PLL3_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800661a:	e004      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006622:	e000      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006626:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800662e:	4b6c      	ldr	r3, [pc, #432]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006632:	f023 0107 	bic.w	r1, r3, #7
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663e:	4a68      	ldr	r2, [pc, #416]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006640:	430b      	orrs	r3, r1
 8006642:	6593      	str	r3, [r2, #88]	; 0x58
 8006644:	e003      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006646:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800664a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	f002 0320 	and.w	r3, r2, #32
 800665a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800665e:	2300      	movs	r3, #0
 8006660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006664:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006668:	460b      	mov	r3, r1
 800666a:	4313      	orrs	r3, r2
 800666c:	d055      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800667a:	d033      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800667c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006680:	d82c      	bhi.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006686:	d02f      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668c:	d826      	bhi.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800668e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006692:	d02b      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006694:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006698:	d820      	bhi.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800669a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669e:	d012      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80066a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a4:	d81a      	bhi.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d022      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80066aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ae:	d115      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b4:	3308      	adds	r3, #8
 80066b6:	2100      	movs	r1, #0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fea1 	bl	8007400 <RCCEx_PLL2_Config>
 80066be:	4603      	mov	r3, r0
 80066c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066c4:	e015      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ca:	3328      	adds	r3, #40	; 0x28
 80066cc:	2102      	movs	r1, #2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 ff48 	bl	8007564 <RCCEx_PLL3_Config>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066da:	e00a      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066e2:	e006      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066e4:	bf00      	nop
 80066e6:	e004      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066e8:	bf00      	nop
 80066ea:	e002      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066ec:	bf00      	nop
 80066ee:	e000      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066fa:	4b39      	ldr	r3, [pc, #228]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800670a:	4a35      	ldr	r2, [pc, #212]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800670c:	430b      	orrs	r3, r1
 800670e:	6553      	str	r3, [r2, #84]	; 0x54
 8006710:	e003      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006712:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006716:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006726:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800672a:	2300      	movs	r3, #0
 800672c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006730:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006734:	460b      	mov	r3, r1
 8006736:	4313      	orrs	r3, r2
 8006738:	d058      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006742:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006746:	d033      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006748:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800674c:	d82c      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006752:	d02f      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006758:	d826      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800675a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800675e:	d02b      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006764:	d820      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676a:	d012      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800676c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006770:	d81a      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d022      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	d115      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006780:	3308      	adds	r3, #8
 8006782:	2100      	movs	r1, #0
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fe3b 	bl	8007400 <RCCEx_PLL2_Config>
 800678a:	4603      	mov	r3, r0
 800678c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006790:	e015      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006796:	3328      	adds	r3, #40	; 0x28
 8006798:	2102      	movs	r1, #2
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fee2 	bl	8007564 <RCCEx_PLL3_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067a6:	e00a      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80067ae:	e006      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067b0:	bf00      	nop
 80067b2:	e004      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067b4:	bf00      	nop
 80067b6:	e002      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067b8:	bf00      	nop
 80067ba:	e000      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10e      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067d6:	4a02      	ldr	r2, [pc, #8]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067d8:	430b      	orrs	r3, r1
 80067da:	6593      	str	r3, [r2, #88]	; 0x58
 80067dc:	e006      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80067de:	bf00      	nop
 80067e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80067f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067fc:	2300      	movs	r3, #0
 80067fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006802:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006806:	460b      	mov	r3, r1
 8006808:	4313      	orrs	r3, r2
 800680a:	d055      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006814:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006818:	d033      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800681a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800681e:	d82c      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006824:	d02f      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682a:	d826      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800682c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006830:	d02b      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006832:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006836:	d820      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800683c:	d012      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800683e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006842:	d81a      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d022      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684c:	d115      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006852:	3308      	adds	r3, #8
 8006854:	2100      	movs	r1, #0
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fdd2 	bl	8007400 <RCCEx_PLL2_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006862:	e015      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006868:	3328      	adds	r3, #40	; 0x28
 800686a:	2102      	movs	r1, #2
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fe79 	bl	8007564 <RCCEx_PLL3_Config>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006878:	e00a      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006880:	e006      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006882:	bf00      	nop
 8006884:	e004      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006886:	bf00      	nop
 8006888:	e002      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800688a:	bf00      	nop
 800688c:	e000      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800688e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006890:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10b      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006898:	4ba0      	ldr	r3, [pc, #640]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800689a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80068a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068a8:	4a9c      	ldr	r2, [pc, #624]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068aa:	430b      	orrs	r3, r1
 80068ac:	6593      	str	r3, [r2, #88]	; 0x58
 80068ae:	e003      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f002 0308 	and.w	r3, r2, #8
 80068c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068c8:	2300      	movs	r3, #0
 80068ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80068ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80068d2:	460b      	mov	r3, r1
 80068d4:	4313      	orrs	r3, r2
 80068d6:	d01e      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e4:	d10c      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ea:	3328      	adds	r3, #40	; 0x28
 80068ec:	2102      	movs	r1, #2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 fe38 	bl	8007564 <RCCEx_PLL3_Config>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006900:	4b86      	ldr	r3, [pc, #536]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006904:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006910:	4a82      	ldr	r2, [pc, #520]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006912:	430b      	orrs	r3, r1
 8006914:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f002 0310 	and.w	r3, r2, #16
 8006922:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006926:	2300      	movs	r3, #0
 8006928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800692c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006930:	460b      	mov	r3, r1
 8006932:	4313      	orrs	r3, r2
 8006934:	d01e      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800693e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006942:	d10c      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006948:	3328      	adds	r3, #40	; 0x28
 800694a:	2102      	movs	r1, #2
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fe09 	bl	8007564 <RCCEx_PLL3_Config>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800695e:	4b6f      	ldr	r3, [pc, #444]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800696e:	4a6b      	ldr	r2, [pc, #428]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006970:	430b      	orrs	r3, r1
 8006972:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006980:	67bb      	str	r3, [r7, #120]	; 0x78
 8006982:	2300      	movs	r3, #0
 8006984:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006986:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800698a:	460b      	mov	r3, r1
 800698c:	4313      	orrs	r3, r2
 800698e:	d03e      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800699c:	d022      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800699e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a2:	d81b      	bhi.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80069a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ac:	d00b      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80069ae:	e015      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b4:	3308      	adds	r3, #8
 80069b6:	2100      	movs	r1, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fd21 	bl	8007400 <RCCEx_PLL2_Config>
 80069be:	4603      	mov	r3, r0
 80069c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069c4:	e00f      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ca:	3328      	adds	r3, #40	; 0x28
 80069cc:	2102      	movs	r1, #2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fdc8 	bl	8007564 <RCCEx_PLL3_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069da:	e004      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069e2:	e000      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80069e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10b      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069ee:	4b4b      	ldr	r3, [pc, #300]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069fe:	4a47      	ldr	r2, [pc, #284]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6593      	str	r3, [r2, #88]	; 0x58
 8006a04:	e003      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	677b      	str	r3, [r7, #116]	; 0x74
 8006a20:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006a24:	460b      	mov	r3, r1
 8006a26:	4313      	orrs	r3, r2
 8006a28:	d03b      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a36:	d01f      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006a38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a3c:	d818      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a42:	d003      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a48:	d007      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006a4a:	e011      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4c:	4b33      	ldr	r3, [pc, #204]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	4a32      	ldr	r2, [pc, #200]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a58:	e00f      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5e:	3328      	adds	r3, #40	; 0x28
 8006a60:	2101      	movs	r1, #1
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fd7e 	bl	8007564 <RCCEx_PLL3_Config>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a6e:	e004      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a76:	e000      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a82:	4b26      	ldr	r3, [pc, #152]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a92:	4a22      	ldr	r2, [pc, #136]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a94:	430b      	orrs	r3, r1
 8006a96:	6553      	str	r3, [r2, #84]	; 0x54
 8006a98:	e003      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ab4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4313      	orrs	r3, r2
 8006abc:	d034      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006acc:	d007      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006ace:	e011      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad0:	4b12      	ldr	r3, [pc, #72]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	4a11      	ldr	r2, [pc, #68]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006adc:	e00e      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fc8a 	bl	8007400 <RCCEx_PLL2_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006af2:	e003      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10d      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b12:	4a02      	ldr	r2, [pc, #8]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b14:	430b      	orrs	r3, r1
 8006b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b18:	e006      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006b1a:	bf00      	nop
 8006b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006b34:	663b      	str	r3, [r7, #96]	; 0x60
 8006b36:	2300      	movs	r3, #0
 8006b38:	667b      	str	r3, [r7, #100]	; 0x64
 8006b3a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d00c      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b48:	3328      	adds	r3, #40	; 0x28
 8006b4a:	2102      	movs	r1, #2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fd09 	bl	8007564 <RCCEx_PLL3_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006b6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b70:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006b74:	460b      	mov	r3, r1
 8006b76:	4313      	orrs	r3, r2
 8006b78:	d036      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b84:	d018      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b8a:	d811      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b90:	d014      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b96:	d80b      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d011      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ba2:	4bb7      	ldr	r3, [pc, #732]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	4ab6      	ldr	r2, [pc, #728]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006bae:	e008      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bb8:	bf00      	nop
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bca:	4bad      	ldr	r3, [pc, #692]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd8:	4aa9      	ldr	r2, [pc, #676]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	6553      	str	r3, [r2, #84]	; 0x54
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006be4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006bf4:	653b      	str	r3, [r7, #80]	; 0x50
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	657b      	str	r3, [r7, #84]	; 0x54
 8006bfa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4313      	orrs	r3, r2
 8006c02:	d009      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c04:	4b9e      	ldr	r3, [pc, #632]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c12:	4a9b      	ldr	r2, [pc, #620]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c26:	2300      	movs	r3, #0
 8006c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4313      	orrs	r3, r2
 8006c32:	d009      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c34:	4b92      	ldr	r3, [pc, #584]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c38:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c42:	4a8f      	ldr	r2, [pc, #572]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c44:	430b      	orrs	r3, r1
 8006c46:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
 8006c56:	2300      	movs	r3, #0
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4313      	orrs	r3, r2
 8006c62:	d00e      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c64:	4b86      	ldr	r3, [pc, #536]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	4a85      	ldr	r2, [pc, #532]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c6e:	6113      	str	r3, [r2, #16]
 8006c70:	4b83      	ldr	r3, [pc, #524]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c72:	6919      	ldr	r1, [r3, #16]
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c7c:	4a80      	ldr	r2, [pc, #512]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c7e:	430b      	orrs	r3, r1
 8006c80:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c90:	2300      	movs	r3, #0
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c94:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d009      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c9e:	4b78      	ldr	r3, [pc, #480]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cac:	4a74      	ldr	r2, [pc, #464]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	d00a      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cce:	4b6c      	ldr	r3, [pc, #432]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cde:	4a68      	ldr	r2, [pc, #416]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	2100      	movs	r1, #0
 8006cee:	62b9      	str	r1, [r7, #40]	; 0x28
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	d011      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d04:	3308      	adds	r3, #8
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fb79 	bl	8007400 <RCCEx_PLL2_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	6239      	str	r1, [r7, #32]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
 8006d36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	d011      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d44:	3308      	adds	r3, #8
 8006d46:	2101      	movs	r1, #1
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fb59 	bl	8007400 <RCCEx_PLL2_Config>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	61b9      	str	r1, [r7, #24]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	d011      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d84:	3308      	adds	r3, #8
 8006d86:	2102      	movs	r1, #2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 fb39 	bl	8007400 <RCCEx_PLL2_Config>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006da0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	2100      	movs	r1, #0
 8006dae:	6139      	str	r1, [r7, #16]
 8006db0:	f003 0308 	and.w	r3, r3, #8
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	d011      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc4:	3328      	adds	r3, #40	; 0x28
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 fbcb 	bl	8007564 <RCCEx_PLL3_Config>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006de0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	2100      	movs	r1, #0
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	d011      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	3328      	adds	r3, #40	; 0x28
 8006e06:	2101      	movs	r1, #1
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fbab 	bl	8007564 <RCCEx_PLL3_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	6039      	str	r1, [r7, #0]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	d011      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e44:	3328      	adds	r3, #40	; 0x28
 8006e46:	2102      	movs	r1, #2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fb8b 	bl	8007564 <RCCEx_PLL3_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006e64:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e000      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e7e:	bf00      	nop
 8006e80:	58024400 	.word	0x58024400

08006e84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e88:	f7fe fe00 	bl	8005a8c <HAL_RCC_GetHCLKFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	091b      	lsrs	r3, r3, #4
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	4904      	ldr	r1, [pc, #16]	; (8006eac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	0800b57c 	.word	0x0800b57c

08006eb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b089      	sub	sp, #36	; 0x24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006eb8:	4ba1      	ldr	r3, [pc, #644]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ec2:	4b9f      	ldr	r3, [pc, #636]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec6:	0b1b      	lsrs	r3, r3, #12
 8006ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ecc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ece:	4b9c      	ldr	r3, [pc, #624]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	091b      	lsrs	r3, r3, #4
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006eda:	4b99      	ldr	r3, [pc, #612]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	08db      	lsrs	r3, r3, #3
 8006ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	fb02 f303 	mul.w	r3, r2, r3
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8111 	beq.w	8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	f000 8083 	beq.w	800700c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	f200 80a1 	bhi.w	8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d056      	beq.n	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f1a:	e099      	b.n	8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f1c:	4b88      	ldr	r3, [pc, #544]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d02d      	beq.n	8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f28:	4b85      	ldr	r3, [pc, #532]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	08db      	lsrs	r3, r3, #3
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	4a84      	ldr	r2, [pc, #528]	; (8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
 8006f38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	ee07 3a90 	vmov	s15, r3
 8006f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f52:	4b7b      	ldr	r3, [pc, #492]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007148 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f82:	e087      	b.n	8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800714c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f96:	4b6a      	ldr	r3, [pc, #424]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006faa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007148 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fc6:	e065      	b.n	8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b59      	ldr	r3, [pc, #356]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007148 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800700a:	e043      	b.n	8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007016:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800701a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800701e:	4b48      	ldr	r3, [pc, #288]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800702e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007032:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007148 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800703e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800704e:	e021      	b.n	8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	ee07 3a90 	vmov	s15, r3
 8007056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800705e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007062:	4b37      	ldr	r3, [pc, #220]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007072:	ed97 6a03 	vldr	s12, [r7, #12]
 8007076:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007148 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800707a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800707e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007092:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007094:	4b2a      	ldr	r3, [pc, #168]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	0a5b      	lsrs	r3, r3, #9
 800709a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ba:	ee17 2a90 	vmov	r2, s15
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80070c2:	4b1f      	ldr	r3, [pc, #124]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	0c1b      	lsrs	r3, r3, #16
 80070c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070cc:	ee07 3a90 	vmov	s15, r3
 80070d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070e8:	ee17 2a90 	vmov	r2, s15
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80070f0:	4b13      	ldr	r3, [pc, #76]	; (8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	0e1b      	lsrs	r3, r3, #24
 80070f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800710a:	edd7 6a07 	vldr	s13, [r7, #28]
 800710e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007116:	ee17 2a90 	vmov	r2, s15
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800711e:	e008      	b.n	8007132 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	609a      	str	r2, [r3, #8]
}
 8007132:	bf00      	nop
 8007134:	3724      	adds	r7, #36	; 0x24
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	58024400 	.word	0x58024400
 8007144:	03d09000 	.word	0x03d09000
 8007148:	46000000 	.word	0x46000000
 800714c:	4c742400 	.word	0x4c742400
 8007150:	4a742400 	.word	0x4a742400
 8007154:	4bbebc20 	.word	0x4bbebc20

08007158 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007158:	b480      	push	{r7}
 800715a:	b089      	sub	sp, #36	; 0x24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007160:	4ba1      	ldr	r3, [pc, #644]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800716a:	4b9f      	ldr	r3, [pc, #636]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	0d1b      	lsrs	r3, r3, #20
 8007170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007174:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007176:	4b9c      	ldr	r3, [pc, #624]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	0a1b      	lsrs	r3, r3, #8
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007182:	4b99      	ldr	r3, [pc, #612]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	08db      	lsrs	r3, r3, #3
 8007188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	fb02 f303 	mul.w	r3, r2, r3
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8111 	beq.w	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	f000 8083 	beq.w	80072b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	f200 80a1 	bhi.w	80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d056      	beq.n	8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80071c2:	e099      	b.n	80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071c4:	4b88      	ldr	r3, [pc, #544]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d02d      	beq.n	800722c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071d0:	4b85      	ldr	r3, [pc, #532]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	08db      	lsrs	r3, r3, #3
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	4a84      	ldr	r2, [pc, #528]	; (80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071dc:	fa22 f303 	lsr.w	r3, r2, r3
 80071e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	ee07 3a90 	vmov	s15, r3
 80071e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fa:	4b7b      	ldr	r3, [pc, #492]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720a:	ed97 6a03 	vldr	s12, [r7, #12]
 800720e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800721e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007226:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800722a:	e087      	b.n	800733c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800723a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723e:	4b6a      	ldr	r3, [pc, #424]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007252:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726e:	e065      	b.n	800733c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800727e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007282:	4b59      	ldr	r3, [pc, #356]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007292:	ed97 6a03 	vldr	s12, [r7, #12]
 8007296:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800729a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b2:	e043      	b.n	800733c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80072c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c6:	4b48      	ldr	r3, [pc, #288]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f6:	e021      	b.n	800733c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	ee07 3a90 	vmov	s15, r3
 80072fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007302:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730a:	4b37      	ldr	r3, [pc, #220]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731a:	ed97 6a03 	vldr	s12, [r7, #12]
 800731e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800733a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800733c:	4b2a      	ldr	r3, [pc, #168]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	0a5b      	lsrs	r3, r3, #9
 8007342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007356:	edd7 6a07 	vldr	s13, [r7, #28]
 800735a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007362:	ee17 2a90 	vmov	r2, s15
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800736a:	4b1f      	ldr	r3, [pc, #124]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	0c1b      	lsrs	r3, r3, #16
 8007370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007374:	ee07 3a90 	vmov	s15, r3
 8007378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007380:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007384:	edd7 6a07 	vldr	s13, [r7, #28]
 8007388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800738c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007390:	ee17 2a90 	vmov	r2, s15
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007398:	4b13      	ldr	r3, [pc, #76]	; (80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	0e1b      	lsrs	r3, r3, #24
 800739e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073be:	ee17 2a90 	vmov	r2, s15
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073c6:	e008      	b.n	80073da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	609a      	str	r2, [r3, #8]
}
 80073da:	bf00      	nop
 80073dc:	3724      	adds	r7, #36	; 0x24
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	58024400 	.word	0x58024400
 80073ec:	03d09000 	.word	0x03d09000
 80073f0:	46000000 	.word	0x46000000
 80073f4:	4c742400 	.word	0x4c742400
 80073f8:	4a742400 	.word	0x4a742400
 80073fc:	4bbebc20 	.word	0x4bbebc20

08007400 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800740e:	4b53      	ldr	r3, [pc, #332]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b03      	cmp	r3, #3
 8007418:	d101      	bne.n	800741e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e099      	b.n	8007552 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800741e:	4b4f      	ldr	r3, [pc, #316]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a4e      	ldr	r2, [pc, #312]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007424:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800742a:	f7fa fabd 	bl	80019a8 <HAL_GetTick>
 800742e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007430:	e008      	b.n	8007444 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007432:	f7fa fab9 	bl	80019a8 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e086      	b.n	8007552 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007444:	4b45      	ldr	r3, [pc, #276]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1f0      	bne.n	8007432 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007450:	4b42      	ldr	r3, [pc, #264]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	031b      	lsls	r3, r3, #12
 800745e:	493f      	ldr	r1, [pc, #252]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007460:	4313      	orrs	r3, r2
 8007462:	628b      	str	r3, [r1, #40]	; 0x28
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	3b01      	subs	r3, #1
 800746a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	3b01      	subs	r3, #1
 8007474:	025b      	lsls	r3, r3, #9
 8007476:	b29b      	uxth	r3, r3
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	3b01      	subs	r3, #1
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	3b01      	subs	r3, #1
 800748e:	061b      	lsls	r3, r3, #24
 8007490:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007494:	4931      	ldr	r1, [pc, #196]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007496:	4313      	orrs	r3, r2
 8007498:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800749a:	4b30      	ldr	r3, [pc, #192]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	492d      	ldr	r1, [pc, #180]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074ac:	4b2b      	ldr	r3, [pc, #172]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	f023 0220 	bic.w	r2, r3, #32
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	4928      	ldr	r1, [pc, #160]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074be:	4b27      	ldr	r3, [pc, #156]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	4a26      	ldr	r2, [pc, #152]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074c4:	f023 0310 	bic.w	r3, r3, #16
 80074c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074ca:	4b24      	ldr	r3, [pc, #144]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ce:	4b24      	ldr	r3, [pc, #144]	; (8007560 <RCCEx_PLL2_Config+0x160>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	69d2      	ldr	r2, [r2, #28]
 80074d6:	00d2      	lsls	r2, r2, #3
 80074d8:	4920      	ldr	r1, [pc, #128]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074de:	4b1f      	ldr	r3, [pc, #124]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	4a1e      	ldr	r2, [pc, #120]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074e4:	f043 0310 	orr.w	r3, r3, #16
 80074e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074f0:	4b1a      	ldr	r3, [pc, #104]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	4a19      	ldr	r2, [pc, #100]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 80074f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074fc:	e00f      	b.n	800751e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d106      	bne.n	8007512 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007504:	4b15      	ldr	r3, [pc, #84]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	4a14      	ldr	r2, [pc, #80]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 800750a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800750e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007510:	e005      	b.n	800751e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007512:	4b12      	ldr	r3, [pc, #72]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	4a11      	ldr	r2, [pc, #68]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800751c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800751e:	4b0f      	ldr	r3, [pc, #60]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a0e      	ldr	r2, [pc, #56]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007524:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800752a:	f7fa fa3d 	bl	80019a8 <HAL_GetTick>
 800752e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007530:	e008      	b.n	8007544 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007532:	f7fa fa39 	bl	80019a8 <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	2b02      	cmp	r3, #2
 800753e:	d901      	bls.n	8007544 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e006      	b.n	8007552 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <RCCEx_PLL2_Config+0x15c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0f0      	beq.n	8007532 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	58024400 	.word	0x58024400
 8007560:	ffff0007 	.word	0xffff0007

08007564 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007572:	4b53      	ldr	r3, [pc, #332]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b03      	cmp	r3, #3
 800757c:	d101      	bne.n	8007582 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e099      	b.n	80076b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007582:	4b4f      	ldr	r3, [pc, #316]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a4e      	ldr	r2, [pc, #312]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800758c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800758e:	f7fa fa0b 	bl	80019a8 <HAL_GetTick>
 8007592:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007594:	e008      	b.n	80075a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007596:	f7fa fa07 	bl	80019a8 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e086      	b.n	80076b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075a8:	4b45      	ldr	r3, [pc, #276]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80075b4:	4b42      	ldr	r3, [pc, #264]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	051b      	lsls	r3, r3, #20
 80075c2:	493f      	ldr	r1, [pc, #252]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	628b      	str	r3, [r1, #40]	; 0x28
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	025b      	lsls	r3, r3, #9
 80075da:	b29b      	uxth	r3, r3
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	041b      	lsls	r3, r3, #16
 80075e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	061b      	lsls	r3, r3, #24
 80075f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075f8:	4931      	ldr	r1, [pc, #196]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075fe:	4b30      	ldr	r3, [pc, #192]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	492d      	ldr	r1, [pc, #180]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 800760c:	4313      	orrs	r3, r2
 800760e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007610:	4b2b      	ldr	r3, [pc, #172]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	4928      	ldr	r1, [pc, #160]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 800761e:	4313      	orrs	r3, r2
 8007620:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007622:	4b27      	ldr	r3, [pc, #156]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	4a26      	ldr	r2, [pc, #152]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800762c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800762e:	4b24      	ldr	r3, [pc, #144]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007632:	4b24      	ldr	r3, [pc, #144]	; (80076c4 <RCCEx_PLL3_Config+0x160>)
 8007634:	4013      	ands	r3, r2
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	69d2      	ldr	r2, [r2, #28]
 800763a:	00d2      	lsls	r2, r2, #3
 800763c:	4920      	ldr	r1, [pc, #128]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 800763e:	4313      	orrs	r3, r2
 8007640:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007642:	4b1f      	ldr	r3, [pc, #124]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	4a1e      	ldr	r2, [pc, #120]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800764c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007654:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	4a19      	ldr	r2, [pc, #100]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 800765a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800765e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007660:	e00f      	b.n	8007682 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d106      	bne.n	8007676 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007668:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4a14      	ldr	r2, [pc, #80]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 800766e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007672:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007674:	e005      	b.n	8007682 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007676:	4b12      	ldr	r3, [pc, #72]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767a:	4a11      	ldr	r2, [pc, #68]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 800767c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007680:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007682:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a0e      	ldr	r2, [pc, #56]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 8007688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800768c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768e:	f7fa f98b 	bl	80019a8 <HAL_GetTick>
 8007692:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007694:	e008      	b.n	80076a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007696:	f7fa f987 	bl	80019a8 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d901      	bls.n	80076a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e006      	b.n	80076b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076a8:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <RCCEx_PLL3_Config+0x15c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0f0      	beq.n	8007696 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	58024400 	.word	0x58024400
 80076c4:	ffff0007 	.word	0xffff0007

080076c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e049      	b.n	800776e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7f9 fb50 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3304      	adds	r3, #4
 8007704:	4619      	mov	r1, r3
 8007706:	4610      	mov	r0, r2
 8007708:	f000 ff58 	bl	80085bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e049      	b.n	800781c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f841 	bl	8007824 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2202      	movs	r2, #2
 80077a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4619      	mov	r1, r3
 80077b4:	4610      	mov	r0, r2
 80077b6:	f000 ff01 	bl	80085bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <HAL_TIM_PWM_Start+0x24>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b01      	cmp	r3, #1
 8007852:	bf14      	ite	ne
 8007854:	2301      	movne	r3, #1
 8007856:	2300      	moveq	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	e03c      	b.n	80078d6 <HAL_TIM_PWM_Start+0x9e>
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b04      	cmp	r3, #4
 8007860:	d109      	bne.n	8007876 <HAL_TIM_PWM_Start+0x3e>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b01      	cmp	r3, #1
 800786c:	bf14      	ite	ne
 800786e:	2301      	movne	r3, #1
 8007870:	2300      	moveq	r3, #0
 8007872:	b2db      	uxtb	r3, r3
 8007874:	e02f      	b.n	80078d6 <HAL_TIM_PWM_Start+0x9e>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b08      	cmp	r3, #8
 800787a:	d109      	bne.n	8007890 <HAL_TIM_PWM_Start+0x58>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b01      	cmp	r3, #1
 8007886:	bf14      	ite	ne
 8007888:	2301      	movne	r3, #1
 800788a:	2300      	moveq	r3, #0
 800788c:	b2db      	uxtb	r3, r3
 800788e:	e022      	b.n	80078d6 <HAL_TIM_PWM_Start+0x9e>
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b0c      	cmp	r3, #12
 8007894:	d109      	bne.n	80078aa <HAL_TIM_PWM_Start+0x72>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b01      	cmp	r3, #1
 80078a0:	bf14      	ite	ne
 80078a2:	2301      	movne	r3, #1
 80078a4:	2300      	moveq	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	e015      	b.n	80078d6 <HAL_TIM_PWM_Start+0x9e>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b10      	cmp	r3, #16
 80078ae:	d109      	bne.n	80078c4 <HAL_TIM_PWM_Start+0x8c>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	bf14      	ite	ne
 80078bc:	2301      	movne	r3, #1
 80078be:	2300      	moveq	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	e008      	b.n	80078d6 <HAL_TIM_PWM_Start+0x9e>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	bf14      	ite	ne
 80078d0:	2301      	movne	r3, #1
 80078d2:	2300      	moveq	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e0ab      	b.n	8007a36 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <HAL_TIM_PWM_Start+0xb6>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ec:	e023      	b.n	8007936 <HAL_TIM_PWM_Start+0xfe>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d104      	bne.n	80078fe <HAL_TIM_PWM_Start+0xc6>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078fc:	e01b      	b.n	8007936 <HAL_TIM_PWM_Start+0xfe>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b08      	cmp	r3, #8
 8007902:	d104      	bne.n	800790e <HAL_TIM_PWM_Start+0xd6>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800790c:	e013      	b.n	8007936 <HAL_TIM_PWM_Start+0xfe>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b0c      	cmp	r3, #12
 8007912:	d104      	bne.n	800791e <HAL_TIM_PWM_Start+0xe6>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800791c:	e00b      	b.n	8007936 <HAL_TIM_PWM_Start+0xfe>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b10      	cmp	r3, #16
 8007922:	d104      	bne.n	800792e <HAL_TIM_PWM_Start+0xf6>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800792c:	e003      	b.n	8007936 <HAL_TIM_PWM_Start+0xfe>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2202      	movs	r2, #2
 8007932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2201      	movs	r2, #1
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f001 fb8c 	bl	800905c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a3d      	ldr	r2, [pc, #244]	; (8007a40 <HAL_TIM_PWM_Start+0x208>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d013      	beq.n	8007976 <HAL_TIM_PWM_Start+0x13e>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a3c      	ldr	r2, [pc, #240]	; (8007a44 <HAL_TIM_PWM_Start+0x20c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00e      	beq.n	8007976 <HAL_TIM_PWM_Start+0x13e>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a3a      	ldr	r2, [pc, #232]	; (8007a48 <HAL_TIM_PWM_Start+0x210>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d009      	beq.n	8007976 <HAL_TIM_PWM_Start+0x13e>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a39      	ldr	r2, [pc, #228]	; (8007a4c <HAL_TIM_PWM_Start+0x214>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d004      	beq.n	8007976 <HAL_TIM_PWM_Start+0x13e>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a37      	ldr	r2, [pc, #220]	; (8007a50 <HAL_TIM_PWM_Start+0x218>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d101      	bne.n	800797a <HAL_TIM_PWM_Start+0x142>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <HAL_TIM_PWM_Start+0x144>
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800798e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a2a      	ldr	r2, [pc, #168]	; (8007a40 <HAL_TIM_PWM_Start+0x208>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d02c      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x1bc>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a2:	d027      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x1bc>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2a      	ldr	r2, [pc, #168]	; (8007a54 <HAL_TIM_PWM_Start+0x21c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d022      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x1bc>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a29      	ldr	r2, [pc, #164]	; (8007a58 <HAL_TIM_PWM_Start+0x220>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d01d      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x1bc>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a27      	ldr	r2, [pc, #156]	; (8007a5c <HAL_TIM_PWM_Start+0x224>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d018      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x1bc>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1f      	ldr	r2, [pc, #124]	; (8007a44 <HAL_TIM_PWM_Start+0x20c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d013      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x1bc>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a23      	ldr	r2, [pc, #140]	; (8007a60 <HAL_TIM_PWM_Start+0x228>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00e      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x1bc>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <HAL_TIM_PWM_Start+0x210>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d009      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x1bc>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1f      	ldr	r2, [pc, #124]	; (8007a64 <HAL_TIM_PWM_Start+0x22c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x1bc>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a1e      	ldr	r2, [pc, #120]	; (8007a68 <HAL_TIM_PWM_Start+0x230>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d115      	bne.n	8007a20 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <HAL_TIM_PWM_Start+0x234>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b06      	cmp	r3, #6
 8007a04:	d015      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x1fa>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0c:	d011      	beq.n	8007a32 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0201 	orr.w	r2, r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1e:	e008      	b.n	8007a32 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0201 	orr.w	r2, r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	e000      	b.n	8007a34 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	40010000 	.word	0x40010000
 8007a44:	40010400 	.word	0x40010400
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800
 8007a54:	40000400 	.word	0x40000400
 8007a58:	40000800 	.word	0x40000800
 8007a5c:	40000c00 	.word	0x40000c00
 8007a60:	40001800 	.word	0x40001800
 8007a64:	4000e000 	.word	0x4000e000
 8007a68:	4000e400 	.word	0x4000e400
 8007a6c:	00010007 	.word	0x00010007

08007a70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e049      	b.n	8007b16 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d106      	bne.n	8007a9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7f9 f99e 	bl	8000dd8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f000 fd84 	bl	80085bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d104      	bne.n	8007b3e <HAL_TIM_IC_Start_IT+0x1e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	e023      	b.n	8007b86 <HAL_TIM_IC_Start_IT+0x66>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d104      	bne.n	8007b4e <HAL_TIM_IC_Start_IT+0x2e>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	e01b      	b.n	8007b86 <HAL_TIM_IC_Start_IT+0x66>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d104      	bne.n	8007b5e <HAL_TIM_IC_Start_IT+0x3e>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	e013      	b.n	8007b86 <HAL_TIM_IC_Start_IT+0x66>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b0c      	cmp	r3, #12
 8007b62:	d104      	bne.n	8007b6e <HAL_TIM_IC_Start_IT+0x4e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	e00b      	b.n	8007b86 <HAL_TIM_IC_Start_IT+0x66>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	d104      	bne.n	8007b7e <HAL_TIM_IC_Start_IT+0x5e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	e003      	b.n	8007b86 <HAL_TIM_IC_Start_IT+0x66>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d104      	bne.n	8007b98 <HAL_TIM_IC_Start_IT+0x78>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	e013      	b.n	8007bc0 <HAL_TIM_IC_Start_IT+0xa0>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d104      	bne.n	8007ba8 <HAL_TIM_IC_Start_IT+0x88>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	e00b      	b.n	8007bc0 <HAL_TIM_IC_Start_IT+0xa0>
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d104      	bne.n	8007bb8 <HAL_TIM_IC_Start_IT+0x98>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	e003      	b.n	8007bc0 <HAL_TIM_IC_Start_IT+0xa0>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d102      	bne.n	8007bce <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bc8:	7b7b      	ldrb	r3, [r7, #13]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d001      	beq.n	8007bd2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e0ec      	b.n	8007dac <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <HAL_TIM_IC_Start_IT+0xc2>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007be0:	e023      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0x10a>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d104      	bne.n	8007bf2 <HAL_TIM_IC_Start_IT+0xd2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf0:	e01b      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0x10a>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d104      	bne.n	8007c02 <HAL_TIM_IC_Start_IT+0xe2>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c00:	e013      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0x10a>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b0c      	cmp	r3, #12
 8007c06:	d104      	bne.n	8007c12 <HAL_TIM_IC_Start_IT+0xf2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c10:	e00b      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0x10a>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b10      	cmp	r3, #16
 8007c16:	d104      	bne.n	8007c22 <HAL_TIM_IC_Start_IT+0x102>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c20:	e003      	b.n	8007c2a <HAL_TIM_IC_Start_IT+0x10a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <HAL_TIM_IC_Start_IT+0x11a>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c38:	e013      	b.n	8007c62 <HAL_TIM_IC_Start_IT+0x142>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d104      	bne.n	8007c4a <HAL_TIM_IC_Start_IT+0x12a>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c48:	e00b      	b.n	8007c62 <HAL_TIM_IC_Start_IT+0x142>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d104      	bne.n	8007c5a <HAL_TIM_IC_Start_IT+0x13a>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c58:	e003      	b.n	8007c62 <HAL_TIM_IC_Start_IT+0x142>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b0c      	cmp	r3, #12
 8007c66:	d841      	bhi.n	8007cec <HAL_TIM_IC_Start_IT+0x1cc>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <HAL_TIM_IC_Start_IT+0x150>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007ca5 	.word	0x08007ca5
 8007c74:	08007ced 	.word	0x08007ced
 8007c78:	08007ced 	.word	0x08007ced
 8007c7c:	08007ced 	.word	0x08007ced
 8007c80:	08007cb7 	.word	0x08007cb7
 8007c84:	08007ced 	.word	0x08007ced
 8007c88:	08007ced 	.word	0x08007ced
 8007c8c:	08007ced 	.word	0x08007ced
 8007c90:	08007cc9 	.word	0x08007cc9
 8007c94:	08007ced 	.word	0x08007ced
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007ced 	.word	0x08007ced
 8007ca0:	08007cdb 	.word	0x08007cdb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0202 	orr.w	r2, r2, #2
 8007cb2:	60da      	str	r2, [r3, #12]
      break;
 8007cb4:	e01d      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0204 	orr.w	r2, r2, #4
 8007cc4:	60da      	str	r2, [r3, #12]
      break;
 8007cc6:	e014      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0208 	orr.w	r2, r2, #8
 8007cd6:	60da      	str	r2, [r3, #12]
      break;
 8007cd8:	e00b      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0210 	orr.w	r2, r2, #16
 8007ce8:	60da      	str	r2, [r3, #12]
      break;
 8007cea:	e002      	b.n	8007cf2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d158      	bne.n	8007daa <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 f9ab 	bl	800905c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a2a      	ldr	r2, [pc, #168]	; (8007db4 <HAL_TIM_IC_Start_IT+0x294>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d02c      	beq.n	8007d6a <HAL_TIM_IC_Start_IT+0x24a>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d18:	d027      	beq.n	8007d6a <HAL_TIM_IC_Start_IT+0x24a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a26      	ldr	r2, [pc, #152]	; (8007db8 <HAL_TIM_IC_Start_IT+0x298>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d022      	beq.n	8007d6a <HAL_TIM_IC_Start_IT+0x24a>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a24      	ldr	r2, [pc, #144]	; (8007dbc <HAL_TIM_IC_Start_IT+0x29c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d01d      	beq.n	8007d6a <HAL_TIM_IC_Start_IT+0x24a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a23      	ldr	r2, [pc, #140]	; (8007dc0 <HAL_TIM_IC_Start_IT+0x2a0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d018      	beq.n	8007d6a <HAL_TIM_IC_Start_IT+0x24a>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a21      	ldr	r2, [pc, #132]	; (8007dc4 <HAL_TIM_IC_Start_IT+0x2a4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d013      	beq.n	8007d6a <HAL_TIM_IC_Start_IT+0x24a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a20      	ldr	r2, [pc, #128]	; (8007dc8 <HAL_TIM_IC_Start_IT+0x2a8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00e      	beq.n	8007d6a <HAL_TIM_IC_Start_IT+0x24a>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a1e      	ldr	r2, [pc, #120]	; (8007dcc <HAL_TIM_IC_Start_IT+0x2ac>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d009      	beq.n	8007d6a <HAL_TIM_IC_Start_IT+0x24a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a1d      	ldr	r2, [pc, #116]	; (8007dd0 <HAL_TIM_IC_Start_IT+0x2b0>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d004      	beq.n	8007d6a <HAL_TIM_IC_Start_IT+0x24a>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a1b      	ldr	r2, [pc, #108]	; (8007dd4 <HAL_TIM_IC_Start_IT+0x2b4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d115      	bne.n	8007d96 <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	4b19      	ldr	r3, [pc, #100]	; (8007dd8 <HAL_TIM_IC_Start_IT+0x2b8>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b06      	cmp	r3, #6
 8007d7a:	d015      	beq.n	8007da8 <HAL_TIM_IC_Start_IT+0x288>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d82:	d011      	beq.n	8007da8 <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
 8007d92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d94:	e008      	b.n	8007da8 <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0201 	orr.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	e000      	b.n	8007daa <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40010000 	.word	0x40010000
 8007db8:	40000400 	.word	0x40000400
 8007dbc:	40000800 	.word	0x40000800
 8007dc0:	40000c00 	.word	0x40000c00
 8007dc4:	40010400 	.word	0x40010400
 8007dc8:	40001800 	.word	0x40001800
 8007dcc:	40014000 	.word	0x40014000
 8007dd0:	4000e000 	.word	0x4000e000
 8007dd4:	4000e400 	.word	0x4000e400
 8007dd8:	00010007 	.word	0x00010007

08007ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d122      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d11b      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0202 	mvn.w	r2, #2
 8007e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7f8 fbf2 	bl	8000608 <HAL_TIM_IC_CaptureCallback>
 8007e24:	e005      	b.n	8007e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fbaa 	bl	8008580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fbb1 	bl	8008594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d122      	bne.n	8007e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d11b      	bne.n	8007e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0204 	mvn.w	r2, #4
 8007e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2202      	movs	r2, #2
 8007e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7f8 fbc8 	bl	8000608 <HAL_TIM_IC_CaptureCallback>
 8007e78:	e005      	b.n	8007e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fb80 	bl	8008580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fb87 	bl	8008594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d122      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f003 0308 	and.w	r3, r3, #8
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d11b      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0208 	mvn.w	r2, #8
 8007eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2204      	movs	r2, #4
 8007eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7f8 fb9e 	bl	8000608 <HAL_TIM_IC_CaptureCallback>
 8007ecc:	e005      	b.n	8007eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fb56 	bl	8008580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fb5d 	bl	8008594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f003 0310 	and.w	r3, r3, #16
 8007eea:	2b10      	cmp	r3, #16
 8007eec:	d122      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	2b10      	cmp	r3, #16
 8007efa:	d11b      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f06f 0210 	mvn.w	r2, #16
 8007f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2208      	movs	r2, #8
 8007f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7f8 fb74 	bl	8000608 <HAL_TIM_IC_CaptureCallback>
 8007f20:	e005      	b.n	8007f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fb2c 	bl	8008580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb33 	bl	8008594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d10e      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d107      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0201 	mvn.w	r2, #1
 8007f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fb06 	bl	800856c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6a:	2b80      	cmp	r3, #128	; 0x80
 8007f6c:	d10e      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f78:	2b80      	cmp	r3, #128	; 0x80
 8007f7a:	d107      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f9d4 	bl	8009334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9a:	d10e      	bne.n	8007fba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b80      	cmp	r3, #128	; 0x80
 8007fa8:	d107      	bne.n	8007fba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f9c7 	bl	8009348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	d10e      	bne.n	8007fe6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d107      	bne.n	8007fe6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fae1 	bl	80085a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d10e      	bne.n	8008012 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d107      	bne.n	8008012 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f06f 0220 	mvn.w	r2, #32
 800800a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f987 	bl	8009320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b086      	sub	sp, #24
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008034:	2302      	movs	r3, #2
 8008036:	e088      	b.n	800814a <HAL_TIM_IC_ConfigChannel+0x130>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d11b      	bne.n	800807e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008056:	f000 fe2d 	bl	8008cb4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699a      	ldr	r2, [r3, #24]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 020c 	bic.w	r2, r2, #12
 8008068:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6999      	ldr	r1, [r3, #24]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	619a      	str	r2, [r3, #24]
 800807c:	e060      	b.n	8008140 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b04      	cmp	r3, #4
 8008082:	d11c      	bne.n	80080be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008094:	f000 febd 	bl	8008e12 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80080a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6999      	ldr	r1, [r3, #24]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	021a      	lsls	r2, r3, #8
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	619a      	str	r2, [r3, #24]
 80080bc:	e040      	b.n	8008140 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d11b      	bne.n	80080fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80080d4:	f000 ff0a 	bl	8008eec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69da      	ldr	r2, [r3, #28]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 020c 	bic.w	r2, r2, #12
 80080e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69d9      	ldr	r1, [r3, #28]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	61da      	str	r2, [r3, #28]
 80080fa:	e021      	b.n	8008140 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b0c      	cmp	r3, #12
 8008100:	d11c      	bne.n	800813c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008112:	f000 ff27 	bl	8008f64 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69da      	ldr	r2, [r3, #28]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008124:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	69d9      	ldr	r1, [r3, #28]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	021a      	lsls	r2, r3, #8
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	61da      	str	r2, [r3, #28]
 800813a:	e001      	b.n	8008140 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008148:	7dfb      	ldrb	r3, [r7, #23]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800816e:	2302      	movs	r3, #2
 8008170:	e0ff      	b.n	8008372 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b14      	cmp	r3, #20
 800817e:	f200 80f0 	bhi.w	8008362 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081dd 	.word	0x080081dd
 800818c:	08008363 	.word	0x08008363
 8008190:	08008363 	.word	0x08008363
 8008194:	08008363 	.word	0x08008363
 8008198:	0800821d 	.word	0x0800821d
 800819c:	08008363 	.word	0x08008363
 80081a0:	08008363 	.word	0x08008363
 80081a4:	08008363 	.word	0x08008363
 80081a8:	0800825f 	.word	0x0800825f
 80081ac:	08008363 	.word	0x08008363
 80081b0:	08008363 	.word	0x08008363
 80081b4:	08008363 	.word	0x08008363
 80081b8:	0800829f 	.word	0x0800829f
 80081bc:	08008363 	.word	0x08008363
 80081c0:	08008363 	.word	0x08008363
 80081c4:	08008363 	.word	0x08008363
 80081c8:	080082e1 	.word	0x080082e1
 80081cc:	08008363 	.word	0x08008363
 80081d0:	08008363 	.word	0x08008363
 80081d4:	08008363 	.word	0x08008363
 80081d8:	08008321 	.word	0x08008321
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fa90 	bl	8008708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0208 	orr.w	r2, r2, #8
 80081f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0204 	bic.w	r2, r2, #4
 8008206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6999      	ldr	r1, [r3, #24]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	619a      	str	r2, [r3, #24]
      break;
 800821a:	e0a5      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fb00 	bl	8008828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	699a      	ldr	r2, [r3, #24]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6999      	ldr	r1, [r3, #24]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	021a      	lsls	r2, r3, #8
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	619a      	str	r2, [r3, #24]
      break;
 800825c:	e084      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fb69 	bl	800893c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0208 	orr.w	r2, r2, #8
 8008278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69da      	ldr	r2, [r3, #28]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0204 	bic.w	r2, r2, #4
 8008288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69d9      	ldr	r1, [r3, #28]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	61da      	str	r2, [r3, #28]
      break;
 800829c:	e064      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68b9      	ldr	r1, [r7, #8]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fbd1 	bl	8008a4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69da      	ldr	r2, [r3, #28]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69d9      	ldr	r1, [r3, #28]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	021a      	lsls	r2, r3, #8
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	61da      	str	r2, [r3, #28]
      break;
 80082de:	e043      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fc1a 	bl	8008b20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0208 	orr.w	r2, r2, #8
 80082fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0204 	bic.w	r2, r2, #4
 800830a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800831e:	e023      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fc5e 	bl	8008be8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800833a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800834a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	021a      	lsls	r2, r3, #8
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008360:	e002      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	75fb      	strb	r3, [r7, #23]
      break;
 8008366:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008370:	7dfb      	ldrb	r3, [r7, #23]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop

0800837c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_TIM_ConfigClockSource+0x1c>
 8008394:	2302      	movs	r3, #2
 8008396:	e0dc      	b.n	8008552 <HAL_TIM_ConfigClockSource+0x1d6>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	4b6a      	ldr	r3, [pc, #424]	; (800855c <HAL_TIM_ConfigClockSource+0x1e0>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a64      	ldr	r2, [pc, #400]	; (8008560 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	f000 80a9 	beq.w	8008526 <HAL_TIM_ConfigClockSource+0x1aa>
 80083d4:	4a62      	ldr	r2, [pc, #392]	; (8008560 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	f200 80ae 	bhi.w	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 80083dc:	4a61      	ldr	r2, [pc, #388]	; (8008564 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	f000 80a1 	beq.w	8008526 <HAL_TIM_ConfigClockSource+0x1aa>
 80083e4:	4a5f      	ldr	r2, [pc, #380]	; (8008564 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	f200 80a6 	bhi.w	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 80083ec:	4a5e      	ldr	r2, [pc, #376]	; (8008568 <HAL_TIM_ConfigClockSource+0x1ec>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	f000 8099 	beq.w	8008526 <HAL_TIM_ConfigClockSource+0x1aa>
 80083f4:	4a5c      	ldr	r2, [pc, #368]	; (8008568 <HAL_TIM_ConfigClockSource+0x1ec>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	f200 809e 	bhi.w	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 80083fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008400:	f000 8091 	beq.w	8008526 <HAL_TIM_ConfigClockSource+0x1aa>
 8008404:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008408:	f200 8096 	bhi.w	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 800840c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008410:	f000 8089 	beq.w	8008526 <HAL_TIM_ConfigClockSource+0x1aa>
 8008414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008418:	f200 808e 	bhi.w	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 800841c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008420:	d03e      	beq.n	80084a0 <HAL_TIM_ConfigClockSource+0x124>
 8008422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008426:	f200 8087 	bhi.w	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 800842a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800842e:	f000 8086 	beq.w	800853e <HAL_TIM_ConfigClockSource+0x1c2>
 8008432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008436:	d87f      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 8008438:	2b70      	cmp	r3, #112	; 0x70
 800843a:	d01a      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0xf6>
 800843c:	2b70      	cmp	r3, #112	; 0x70
 800843e:	d87b      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 8008440:	2b60      	cmp	r3, #96	; 0x60
 8008442:	d050      	beq.n	80084e6 <HAL_TIM_ConfigClockSource+0x16a>
 8008444:	2b60      	cmp	r3, #96	; 0x60
 8008446:	d877      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 8008448:	2b50      	cmp	r3, #80	; 0x50
 800844a:	d03c      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x14a>
 800844c:	2b50      	cmp	r3, #80	; 0x50
 800844e:	d873      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 8008450:	2b40      	cmp	r3, #64	; 0x40
 8008452:	d058      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0x18a>
 8008454:	2b40      	cmp	r3, #64	; 0x40
 8008456:	d86f      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 8008458:	2b30      	cmp	r3, #48	; 0x30
 800845a:	d064      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x1aa>
 800845c:	2b30      	cmp	r3, #48	; 0x30
 800845e:	d86b      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 8008460:	2b20      	cmp	r3, #32
 8008462:	d060      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x1aa>
 8008464:	2b20      	cmp	r3, #32
 8008466:	d867      	bhi.n	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
 8008468:	2b00      	cmp	r3, #0
 800846a:	d05c      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x1aa>
 800846c:	2b10      	cmp	r3, #16
 800846e:	d05a      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x1aa>
 8008470:	e062      	b.n	8008538 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008482:	f000 fdcb 	bl	800901c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	609a      	str	r2, [r3, #8]
      break;
 800849e:	e04f      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084b0:	f000 fdb4 	bl	800901c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084c2:	609a      	str	r2, [r3, #8]
      break;
 80084c4:	e03c      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d2:	461a      	mov	r2, r3
 80084d4:	f000 fc6e 	bl	8008db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2150      	movs	r1, #80	; 0x50
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fd7e 	bl	8008fe0 <TIM_ITRx_SetConfig>
      break;
 80084e4:	e02c      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084f2:	461a      	mov	r2, r3
 80084f4:	f000 fcca 	bl	8008e8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2160      	movs	r1, #96	; 0x60
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fd6e 	bl	8008fe0 <TIM_ITRx_SetConfig>
      break;
 8008504:	e01c      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008512:	461a      	mov	r2, r3
 8008514:	f000 fc4e 	bl	8008db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2140      	movs	r1, #64	; 0x40
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fd5e 	bl	8008fe0 <TIM_ITRx_SetConfig>
      break;
 8008524:	e00c      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4619      	mov	r1, r3
 8008530:	4610      	mov	r0, r2
 8008532:	f000 fd55 	bl	8008fe0 <TIM_ITRx_SetConfig>
      break;
 8008536:	e003      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
      break;
 800853c:	e000      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800853e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	ffceff88 	.word	0xffceff88
 8008560:	00100040 	.word	0x00100040
 8008564:	00100030 	.word	0x00100030
 8008568:	00100020 	.word	0x00100020

0800856c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a44      	ldr	r2, [pc, #272]	; (80086e0 <TIM_Base_SetConfig+0x124>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d013      	beq.n	80085fc <TIM_Base_SetConfig+0x40>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085da:	d00f      	beq.n	80085fc <TIM_Base_SetConfig+0x40>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a41      	ldr	r2, [pc, #260]	; (80086e4 <TIM_Base_SetConfig+0x128>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d00b      	beq.n	80085fc <TIM_Base_SetConfig+0x40>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a40      	ldr	r2, [pc, #256]	; (80086e8 <TIM_Base_SetConfig+0x12c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d007      	beq.n	80085fc <TIM_Base_SetConfig+0x40>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a3f      	ldr	r2, [pc, #252]	; (80086ec <TIM_Base_SetConfig+0x130>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d003      	beq.n	80085fc <TIM_Base_SetConfig+0x40>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a3e      	ldr	r2, [pc, #248]	; (80086f0 <TIM_Base_SetConfig+0x134>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d108      	bne.n	800860e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a33      	ldr	r2, [pc, #204]	; (80086e0 <TIM_Base_SetConfig+0x124>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d027      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861c:	d023      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a30      	ldr	r2, [pc, #192]	; (80086e4 <TIM_Base_SetConfig+0x128>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01f      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a2f      	ldr	r2, [pc, #188]	; (80086e8 <TIM_Base_SetConfig+0x12c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d01b      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a2e      	ldr	r2, [pc, #184]	; (80086ec <TIM_Base_SetConfig+0x130>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d017      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a2d      	ldr	r2, [pc, #180]	; (80086f0 <TIM_Base_SetConfig+0x134>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d013      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a2c      	ldr	r2, [pc, #176]	; (80086f4 <TIM_Base_SetConfig+0x138>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00f      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a2b      	ldr	r2, [pc, #172]	; (80086f8 <TIM_Base_SetConfig+0x13c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00b      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2a      	ldr	r2, [pc, #168]	; (80086fc <TIM_Base_SetConfig+0x140>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d007      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a29      	ldr	r2, [pc, #164]	; (8008700 <TIM_Base_SetConfig+0x144>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d003      	beq.n	8008666 <TIM_Base_SetConfig+0xaa>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a28      	ldr	r2, [pc, #160]	; (8008704 <TIM_Base_SetConfig+0x148>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d108      	bne.n	8008678 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800866c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a10      	ldr	r2, [pc, #64]	; (80086e0 <TIM_Base_SetConfig+0x124>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00f      	beq.n	80086c4 <TIM_Base_SetConfig+0x108>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a12      	ldr	r2, [pc, #72]	; (80086f0 <TIM_Base_SetConfig+0x134>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00b      	beq.n	80086c4 <TIM_Base_SetConfig+0x108>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a11      	ldr	r2, [pc, #68]	; (80086f4 <TIM_Base_SetConfig+0x138>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d007      	beq.n	80086c4 <TIM_Base_SetConfig+0x108>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a10      	ldr	r2, [pc, #64]	; (80086f8 <TIM_Base_SetConfig+0x13c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d003      	beq.n	80086c4 <TIM_Base_SetConfig+0x108>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a0f      	ldr	r2, [pc, #60]	; (80086fc <TIM_Base_SetConfig+0x140>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d103      	bne.n	80086cc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	691a      	ldr	r2, [r3, #16]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	615a      	str	r2, [r3, #20]
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40010000 	.word	0x40010000
 80086e4:	40000400 	.word	0x40000400
 80086e8:	40000800 	.word	0x40000800
 80086ec:	40000c00 	.word	0x40000c00
 80086f0:	40010400 	.word	0x40010400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40014400 	.word	0x40014400
 80086fc:	40014800 	.word	0x40014800
 8008700:	4000e000 	.word	0x4000e000
 8008704:	4000e400 	.word	0x4000e400

08008708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4b37      	ldr	r3, [pc, #220]	; (8008810 <TIM_OC1_SetConfig+0x108>)
 8008734:	4013      	ands	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f023 0302 	bic.w	r3, r3, #2
 8008750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a2d      	ldr	r2, [pc, #180]	; (8008814 <TIM_OC1_SetConfig+0x10c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d00f      	beq.n	8008784 <TIM_OC1_SetConfig+0x7c>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a2c      	ldr	r2, [pc, #176]	; (8008818 <TIM_OC1_SetConfig+0x110>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00b      	beq.n	8008784 <TIM_OC1_SetConfig+0x7c>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a2b      	ldr	r2, [pc, #172]	; (800881c <TIM_OC1_SetConfig+0x114>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d007      	beq.n	8008784 <TIM_OC1_SetConfig+0x7c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a2a      	ldr	r2, [pc, #168]	; (8008820 <TIM_OC1_SetConfig+0x118>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d003      	beq.n	8008784 <TIM_OC1_SetConfig+0x7c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a29      	ldr	r2, [pc, #164]	; (8008824 <TIM_OC1_SetConfig+0x11c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d10c      	bne.n	800879e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f023 0308 	bic.w	r3, r3, #8
 800878a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f023 0304 	bic.w	r3, r3, #4
 800879c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <TIM_OC1_SetConfig+0x10c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00f      	beq.n	80087c6 <TIM_OC1_SetConfig+0xbe>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <TIM_OC1_SetConfig+0x110>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00b      	beq.n	80087c6 <TIM_OC1_SetConfig+0xbe>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a1a      	ldr	r2, [pc, #104]	; (800881c <TIM_OC1_SetConfig+0x114>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d007      	beq.n	80087c6 <TIM_OC1_SetConfig+0xbe>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a19      	ldr	r2, [pc, #100]	; (8008820 <TIM_OC1_SetConfig+0x118>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d003      	beq.n	80087c6 <TIM_OC1_SetConfig+0xbe>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a18      	ldr	r2, [pc, #96]	; (8008824 <TIM_OC1_SetConfig+0x11c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d111      	bne.n	80087ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	4313      	orrs	r3, r2
 80087de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	621a      	str	r2, [r3, #32]
}
 8008804:	bf00      	nop
 8008806:	371c      	adds	r7, #28
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	fffeff8f 	.word	0xfffeff8f
 8008814:	40010000 	.word	0x40010000
 8008818:	40010400 	.word	0x40010400
 800881c:	40014000 	.word	0x40014000
 8008820:	40014400 	.word	0x40014400
 8008824:	40014800 	.word	0x40014800

08008828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	f023 0210 	bic.w	r2, r3, #16
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	4b34      	ldr	r3, [pc, #208]	; (8008924 <TIM_OC2_SetConfig+0xfc>)
 8008854:	4013      	ands	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800885e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4313      	orrs	r3, r2
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 0320 	bic.w	r3, r3, #32
 8008872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a29      	ldr	r2, [pc, #164]	; (8008928 <TIM_OC2_SetConfig+0x100>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d003      	beq.n	8008890 <TIM_OC2_SetConfig+0x68>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a28      	ldr	r2, [pc, #160]	; (800892c <TIM_OC2_SetConfig+0x104>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d10d      	bne.n	80088ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a1e      	ldr	r2, [pc, #120]	; (8008928 <TIM_OC2_SetConfig+0x100>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00f      	beq.n	80088d4 <TIM_OC2_SetConfig+0xac>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a1d      	ldr	r2, [pc, #116]	; (800892c <TIM_OC2_SetConfig+0x104>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00b      	beq.n	80088d4 <TIM_OC2_SetConfig+0xac>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a1c      	ldr	r2, [pc, #112]	; (8008930 <TIM_OC2_SetConfig+0x108>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d007      	beq.n	80088d4 <TIM_OC2_SetConfig+0xac>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a1b      	ldr	r2, [pc, #108]	; (8008934 <TIM_OC2_SetConfig+0x10c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d003      	beq.n	80088d4 <TIM_OC2_SetConfig+0xac>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a1a      	ldr	r2, [pc, #104]	; (8008938 <TIM_OC2_SetConfig+0x110>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d113      	bne.n	80088fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	feff8fff 	.word	0xfeff8fff
 8008928:	40010000 	.word	0x40010000
 800892c:	40010400 	.word	0x40010400
 8008930:	40014000 	.word	0x40014000
 8008934:	40014400 	.word	0x40014400
 8008938:	40014800 	.word	0x40014800

0800893c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4b33      	ldr	r3, [pc, #204]	; (8008a34 <TIM_OC3_SetConfig+0xf8>)
 8008968:	4013      	ands	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a28      	ldr	r2, [pc, #160]	; (8008a38 <TIM_OC3_SetConfig+0xfc>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d003      	beq.n	80089a2 <TIM_OC3_SetConfig+0x66>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a27      	ldr	r2, [pc, #156]	; (8008a3c <TIM_OC3_SetConfig+0x100>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d10d      	bne.n	80089be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a1d      	ldr	r2, [pc, #116]	; (8008a38 <TIM_OC3_SetConfig+0xfc>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00f      	beq.n	80089e6 <TIM_OC3_SetConfig+0xaa>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a1c      	ldr	r2, [pc, #112]	; (8008a3c <TIM_OC3_SetConfig+0x100>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d00b      	beq.n	80089e6 <TIM_OC3_SetConfig+0xaa>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <TIM_OC3_SetConfig+0x104>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d007      	beq.n	80089e6 <TIM_OC3_SetConfig+0xaa>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a1a      	ldr	r2, [pc, #104]	; (8008a44 <TIM_OC3_SetConfig+0x108>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d003      	beq.n	80089e6 <TIM_OC3_SetConfig+0xaa>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a19      	ldr	r2, [pc, #100]	; (8008a48 <TIM_OC3_SetConfig+0x10c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d113      	bne.n	8008a0e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	621a      	str	r2, [r3, #32]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	fffeff8f 	.word	0xfffeff8f
 8008a38:	40010000 	.word	0x40010000
 8008a3c:	40010400 	.word	0x40010400
 8008a40:	40014000 	.word	0x40014000
 8008a44:	40014400 	.word	0x40014400
 8008a48:	40014800 	.word	0x40014800

08008a4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <TIM_OC4_SetConfig+0xbc>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	021b      	lsls	r3, r3, #8
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	031b      	lsls	r3, r3, #12
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <TIM_OC4_SetConfig+0xc0>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00f      	beq.n	8008acc <TIM_OC4_SetConfig+0x80>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a18      	ldr	r2, [pc, #96]	; (8008b10 <TIM_OC4_SetConfig+0xc4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00b      	beq.n	8008acc <TIM_OC4_SetConfig+0x80>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <TIM_OC4_SetConfig+0xc8>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d007      	beq.n	8008acc <TIM_OC4_SetConfig+0x80>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a16      	ldr	r2, [pc, #88]	; (8008b18 <TIM_OC4_SetConfig+0xcc>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d003      	beq.n	8008acc <TIM_OC4_SetConfig+0x80>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a15      	ldr	r2, [pc, #84]	; (8008b1c <TIM_OC4_SetConfig+0xd0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d109      	bne.n	8008ae0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	019b      	lsls	r3, r3, #6
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	621a      	str	r2, [r3, #32]
}
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	feff8fff 	.word	0xfeff8fff
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40010400 	.word	0x40010400
 8008b14:	40014000 	.word	0x40014000
 8008b18:	40014400 	.word	0x40014400
 8008b1c:	40014800 	.word	0x40014800

08008b20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4b21      	ldr	r3, [pc, #132]	; (8008bd0 <TIM_OC5_SetConfig+0xb0>)
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	041b      	lsls	r3, r3, #16
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a18      	ldr	r2, [pc, #96]	; (8008bd4 <TIM_OC5_SetConfig+0xb4>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00f      	beq.n	8008b96 <TIM_OC5_SetConfig+0x76>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <TIM_OC5_SetConfig+0xb8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00b      	beq.n	8008b96 <TIM_OC5_SetConfig+0x76>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a16      	ldr	r2, [pc, #88]	; (8008bdc <TIM_OC5_SetConfig+0xbc>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d007      	beq.n	8008b96 <TIM_OC5_SetConfig+0x76>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a15      	ldr	r2, [pc, #84]	; (8008be0 <TIM_OC5_SetConfig+0xc0>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d003      	beq.n	8008b96 <TIM_OC5_SetConfig+0x76>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a14      	ldr	r2, [pc, #80]	; (8008be4 <TIM_OC5_SetConfig+0xc4>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d109      	bne.n	8008baa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	621a      	str	r2, [r3, #32]
}
 8008bc4:	bf00      	nop
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	fffeff8f 	.word	0xfffeff8f
 8008bd4:	40010000 	.word	0x40010000
 8008bd8:	40010400 	.word	0x40010400
 8008bdc:	40014000 	.word	0x40014000
 8008be0:	40014400 	.word	0x40014400
 8008be4:	40014800 	.word	0x40014800

08008be8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4b22      	ldr	r3, [pc, #136]	; (8008c9c <TIM_OC6_SetConfig+0xb4>)
 8008c14:	4013      	ands	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	021b      	lsls	r3, r3, #8
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	051b      	lsls	r3, r3, #20
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a19      	ldr	r2, [pc, #100]	; (8008ca0 <TIM_OC6_SetConfig+0xb8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00f      	beq.n	8008c60 <TIM_OC6_SetConfig+0x78>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a18      	ldr	r2, [pc, #96]	; (8008ca4 <TIM_OC6_SetConfig+0xbc>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00b      	beq.n	8008c60 <TIM_OC6_SetConfig+0x78>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a17      	ldr	r2, [pc, #92]	; (8008ca8 <TIM_OC6_SetConfig+0xc0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d007      	beq.n	8008c60 <TIM_OC6_SetConfig+0x78>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a16      	ldr	r2, [pc, #88]	; (8008cac <TIM_OC6_SetConfig+0xc4>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d003      	beq.n	8008c60 <TIM_OC6_SetConfig+0x78>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a15      	ldr	r2, [pc, #84]	; (8008cb0 <TIM_OC6_SetConfig+0xc8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d109      	bne.n	8008c74 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	029b      	lsls	r3, r3, #10
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	621a      	str	r2, [r3, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	feff8fff 	.word	0xfeff8fff
 8008ca0:	40010000 	.word	0x40010000
 8008ca4:	40010400 	.word	0x40010400
 8008ca8:	40014000 	.word	0x40014000
 8008cac:	40014400 	.word	0x40014400
 8008cb0:	40014800 	.word	0x40014800

08008cb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	f023 0201 	bic.w	r2, r3, #1
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	4a2c      	ldr	r2, [pc, #176]	; (8008d90 <TIM_TI1_SetConfig+0xdc>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d023      	beq.n	8008d2a <TIM_TI1_SetConfig+0x76>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce8:	d01f      	beq.n	8008d2a <TIM_TI1_SetConfig+0x76>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4a29      	ldr	r2, [pc, #164]	; (8008d94 <TIM_TI1_SetConfig+0xe0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d01b      	beq.n	8008d2a <TIM_TI1_SetConfig+0x76>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4a28      	ldr	r2, [pc, #160]	; (8008d98 <TIM_TI1_SetConfig+0xe4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d017      	beq.n	8008d2a <TIM_TI1_SetConfig+0x76>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4a27      	ldr	r2, [pc, #156]	; (8008d9c <TIM_TI1_SetConfig+0xe8>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d013      	beq.n	8008d2a <TIM_TI1_SetConfig+0x76>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4a26      	ldr	r2, [pc, #152]	; (8008da0 <TIM_TI1_SetConfig+0xec>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00f      	beq.n	8008d2a <TIM_TI1_SetConfig+0x76>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4a25      	ldr	r2, [pc, #148]	; (8008da4 <TIM_TI1_SetConfig+0xf0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00b      	beq.n	8008d2a <TIM_TI1_SetConfig+0x76>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4a24      	ldr	r2, [pc, #144]	; (8008da8 <TIM_TI1_SetConfig+0xf4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d007      	beq.n	8008d2a <TIM_TI1_SetConfig+0x76>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	4a23      	ldr	r2, [pc, #140]	; (8008dac <TIM_TI1_SetConfig+0xf8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_TI1_SetConfig+0x76>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4a22      	ldr	r2, [pc, #136]	; (8008db0 <TIM_TI1_SetConfig+0xfc>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d101      	bne.n	8008d2e <TIM_TI1_SetConfig+0x7a>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <TIM_TI1_SetConfig+0x7c>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d008      	beq.n	8008d46 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e003      	b.n	8008d4e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f043 0301 	orr.w	r3, r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f023 030a 	bic.w	r3, r3, #10
 8008d68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f003 030a 	and.w	r3, r3, #10
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40000c00 	.word	0x40000c00
 8008da0:	40010400 	.word	0x40010400
 8008da4:	40001800 	.word	0x40001800
 8008da8:	40014000 	.word	0x40014000
 8008dac:	4000e000 	.word	0x4000e000
 8008db0:	4000e400 	.word	0x4000e400

08008db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	f023 0201 	bic.w	r2, r3, #1
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f023 030a 	bic.w	r3, r3, #10
 8008df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	621a      	str	r2, [r3, #32]
}
 8008e06:	bf00      	nop
 8008e08:	371c      	adds	r7, #28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b087      	sub	sp, #28
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
 8008e1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	f023 0210 	bic.w	r2, r3, #16
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
 8008e36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	021b      	lsls	r3, r3, #8
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	031b      	lsls	r3, r3, #12
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	011b      	lsls	r3, r3, #4
 8008e6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	621a      	str	r2, [r3, #32]
}
 8008e80:	bf00      	nop
 8008e82:	371c      	adds	r7, #28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	f023 0210 	bic.w	r2, r3, #16
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	031b      	lsls	r3, r3, #12
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	011b      	lsls	r3, r3, #4
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	621a      	str	r2, [r3, #32]
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f023 0303 	bic.w	r3, r3, #3
 8008f18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008f3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	621a      	str	r2, [r3, #32]
}
 8008f58:	bf00      	nop
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fa2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	031b      	lsls	r3, r3, #12
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008fb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	031b      	lsls	r3, r3, #12
 8008fbc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	621a      	str	r2, [r3, #32]
}
 8008fd2:	bf00      	nop
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
	...

08008fe0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4b09      	ldr	r3, [pc, #36]	; (8009018 <TIM_ITRx_SetConfig+0x38>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	f043 0307 	orr.w	r3, r3, #7
 8009002:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	609a      	str	r2, [r3, #8]
}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	ffcfff8f 	.word	0xffcfff8f

0800901c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800901c:	b480      	push	{r7}
 800901e:	b087      	sub	sp, #28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	021a      	lsls	r2, r3, #8
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	431a      	orrs	r2, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	4313      	orrs	r3, r2
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	4313      	orrs	r3, r2
 8009048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	609a      	str	r2, [r3, #8]
}
 8009050:	bf00      	nop
 8009052:	371c      	adds	r7, #28
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f003 031f 	and.w	r3, r3, #31
 800906e:	2201      	movs	r2, #1
 8009070:	fa02 f303 	lsl.w	r3, r2, r3
 8009074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6a1a      	ldr	r2, [r3, #32]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	43db      	mvns	r3, r3
 800907e:	401a      	ands	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	fa01 f303 	lsl.w	r3, r1, r3
 8009094:	431a      	orrs	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	621a      	str	r2, [r3, #32]
}
 800909a:	bf00      	nop
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090bc:	2302      	movs	r3, #2
 80090be:	e077      	b.n	80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a35      	ldr	r2, [pc, #212]	; (80091bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d004      	beq.n	80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a34      	ldr	r2, [pc, #208]	; (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d108      	bne.n	8009106 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800910c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4313      	orrs	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a25      	ldr	r2, [pc, #148]	; (80091bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d02c      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009132:	d027      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a22      	ldr	r2, [pc, #136]	; (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d022      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a21      	ldr	r2, [pc, #132]	; (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d01d      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a1f      	ldr	r2, [pc, #124]	; (80091cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d018      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1a      	ldr	r2, [pc, #104]	; (80091c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d013      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1b      	ldr	r2, [pc, #108]	; (80091d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d00e      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a1a      	ldr	r2, [pc, #104]	; (80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d009      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d004      	beq.n	8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a17      	ldr	r2, [pc, #92]	; (80091dc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d10c      	bne.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800918a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	4313      	orrs	r3, r2
 8009194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	40010000 	.word	0x40010000
 80091c0:	40010400 	.word	0x40010400
 80091c4:	40000400 	.word	0x40000400
 80091c8:	40000800 	.word	0x40000800
 80091cc:	40000c00 	.word	0x40000c00
 80091d0:	40001800 	.word	0x40001800
 80091d4:	40014000 	.word	0x40014000
 80091d8:	4000e000 	.word	0x4000e000
 80091dc:	4000e400 	.word	0x4000e400

080091e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d101      	bne.n	80091fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091f8:	2302      	movs	r3, #2
 80091fa:	e087      	b.n	800930c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	4313      	orrs	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	4313      	orrs	r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	041b      	lsls	r3, r3, #16
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a27      	ldr	r2, [pc, #156]	; (8009318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d004      	beq.n	800928a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a25      	ldr	r2, [pc, #148]	; (800931c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d106      	bne.n	8009298 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a1e      	ldr	r2, [pc, #120]	; (8009318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d004      	beq.n	80092ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a1d      	ldr	r2, [pc, #116]	; (800931c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d126      	bne.n	80092fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	051b      	lsls	r3, r3, #20
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a0e      	ldr	r2, [pc, #56]	; (8009318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d004      	beq.n	80092ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a0d      	ldr	r2, [pc, #52]	; (800931c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d106      	bne.n	80092fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	40010000 	.word	0x40010000
 800931c:	40010400 	.word	0x40010400

08009320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e042      	b.n	80093f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009374:	2b00      	cmp	r3, #0
 8009376:	d106      	bne.n	8009386 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7f7 fdb7 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2224      	movs	r2, #36	; 0x24
 800938a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f022 0201 	bic.w	r2, r2, #1
 800939c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fc9c 	bl	8009cdc <UART_SetConfig>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e022      	b.n	80093f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 fafc 	bl	800a9b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f042 0201 	orr.w	r2, r2, #1
 80093ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 fb83 	bl	800aaf8 <UART_CheckIdleState>
 80093f2:	4603      	mov	r3, r0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08a      	sub	sp, #40	; 0x28
 8009400:	af02      	add	r7, sp, #8
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	4613      	mov	r3, r2
 800940a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009412:	2b20      	cmp	r3, #32
 8009414:	d17b      	bne.n	800950e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <HAL_UART_Transmit+0x26>
 800941c:	88fb      	ldrh	r3, [r7, #6]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e074      	b.n	8009510 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2221      	movs	r2, #33	; 0x21
 8009432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009436:	f7f8 fab7 	bl	80019a8 <HAL_GetTick>
 800943a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	88fa      	ldrh	r2, [r7, #6]
 8009440:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	88fa      	ldrh	r2, [r7, #6]
 8009448:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009454:	d108      	bne.n	8009468 <HAL_UART_Transmit+0x6c>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d104      	bne.n	8009468 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800945e:	2300      	movs	r3, #0
 8009460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	61bb      	str	r3, [r7, #24]
 8009466:	e003      	b.n	8009470 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800946c:	2300      	movs	r3, #0
 800946e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009470:	e030      	b.n	80094d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2200      	movs	r2, #0
 800947a:	2180      	movs	r1, #128	; 0x80
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f001 fbe5 	bl	800ac4c <UART_WaitOnFlagUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2220      	movs	r2, #32
 800948c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e03d      	b.n	8009510 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	3302      	adds	r3, #2
 80094ae:	61bb      	str	r3, [r7, #24]
 80094b0:	e007      	b.n	80094c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	781a      	ldrb	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	3301      	adds	r3, #1
 80094c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094da:	b29b      	uxth	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1c8      	bne.n	8009472 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2200      	movs	r2, #0
 80094e8:	2140      	movs	r1, #64	; 0x40
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f001 fbae 	bl	800ac4c <UART_WaitOnFlagUntilTimeout>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e006      	b.n	8009510 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2220      	movs	r2, #32
 8009506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	e000      	b.n	8009510 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800950e:	2302      	movs	r3, #2
  }
}
 8009510:	4618      	mov	r0, r3
 8009512:	3720      	adds	r7, #32
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b0ba      	sub	sp, #232	; 0xe8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800953e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009542:	f640 030f 	movw	r3, #2063	; 0x80f
 8009546:	4013      	ands	r3, r2
 8009548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800954c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009550:	2b00      	cmp	r3, #0
 8009552:	d11b      	bne.n	800958c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009558:	f003 0320 	and.w	r3, r3, #32
 800955c:	2b00      	cmp	r3, #0
 800955e:	d015      	beq.n	800958c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009564:	f003 0320 	and.w	r3, r3, #32
 8009568:	2b00      	cmp	r3, #0
 800956a:	d105      	bne.n	8009578 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800956c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d009      	beq.n	800958c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 8377 	beq.w	8009c70 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
      }
      return;
 800958a:	e371      	b.n	8009c70 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800958c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 8123 	beq.w	80097dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009596:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800959a:	4b8d      	ldr	r3, [pc, #564]	; (80097d0 <HAL_UART_IRQHandler+0x2b8>)
 800959c:	4013      	ands	r3, r2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d106      	bne.n	80095b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80095a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80095a6:	4b8b      	ldr	r3, [pc, #556]	; (80097d4 <HAL_UART_IRQHandler+0x2bc>)
 80095a8:	4013      	ands	r3, r2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 8116 	beq.w	80097dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d011      	beq.n	80095e0 <HAL_UART_IRQHandler+0xc8>
 80095bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00b      	beq.n	80095e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2201      	movs	r2, #1
 80095ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d6:	f043 0201 	orr.w	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e4:	f003 0302 	and.w	r3, r3, #2
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d011      	beq.n	8009610 <HAL_UART_IRQHandler+0xf8>
 80095ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00b      	beq.n	8009610 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2202      	movs	r2, #2
 80095fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009606:	f043 0204 	orr.w	r2, r3, #4
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d011      	beq.n	8009640 <HAL_UART_IRQHandler+0x128>
 800961c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2204      	movs	r2, #4
 800962e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009636:	f043 0202 	orr.w	r2, r3, #2
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009644:	f003 0308 	and.w	r3, r3, #8
 8009648:	2b00      	cmp	r3, #0
 800964a:	d017      	beq.n	800967c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800964c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009650:	f003 0320 	and.w	r3, r3, #32
 8009654:	2b00      	cmp	r3, #0
 8009656:	d105      	bne.n	8009664 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009658:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800965c:	4b5c      	ldr	r3, [pc, #368]	; (80097d0 <HAL_UART_IRQHandler+0x2b8>)
 800965e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2208      	movs	r2, #8
 800966a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009672:	f043 0208 	orr.w	r2, r3, #8
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800967c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009684:	2b00      	cmp	r3, #0
 8009686:	d012      	beq.n	80096ae <HAL_UART_IRQHandler+0x196>
 8009688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800968c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00c      	beq.n	80096ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800969c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a4:	f043 0220 	orr.w	r2, r3, #32
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 82dd 	beq.w	8009c74 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096be:	f003 0320 	and.w	r3, r3, #32
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d013      	beq.n	80096ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ca:	f003 0320 	and.w	r3, r3, #32
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d105      	bne.n	80096de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d007      	beq.n	80096ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009702:	2b40      	cmp	r3, #64	; 0x40
 8009704:	d005      	beq.n	8009712 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800970a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800970e:	2b00      	cmp	r3, #0
 8009710:	d054      	beq.n	80097bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 fbea 	bl	800aeec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009722:	2b40      	cmp	r3, #64	; 0x40
 8009724:	d146      	bne.n	80097b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3308      	adds	r3, #8
 800972c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009734:	e853 3f00 	ldrex	r3, [r3]
 8009738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800973c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3308      	adds	r3, #8
 800974e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800975e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800976a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1d9      	bne.n	8009726 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009778:	2b00      	cmp	r3, #0
 800977a:	d017      	beq.n	80097ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009782:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <HAL_UART_IRQHandler+0x2c0>)
 8009784:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800978c:	4618      	mov	r0, r3
 800978e:	f7f9 fb07 	bl	8002da0 <HAL_DMA_Abort_IT>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d019      	beq.n	80097cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800979e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80097a6:	4610      	mov	r0, r2
 80097a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097aa:	e00f      	b.n	80097cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fa8b 	bl	8009cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b2:	e00b      	b.n	80097cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 fa87 	bl	8009cc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ba:	e007      	b.n	80097cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fa83 	bl	8009cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80097ca:	e253      	b.n	8009c74 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097cc:	bf00      	nop
    return;
 80097ce:	e251      	b.n	8009c74 <HAL_UART_IRQHandler+0x75c>
 80097d0:	10000001 	.word	0x10000001
 80097d4:	04000120 	.word	0x04000120
 80097d8:	0800b19f 	.word	0x0800b19f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	f040 81e7 	bne.w	8009bb4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ea:	f003 0310 	and.w	r3, r3, #16
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 81e0 	beq.w	8009bb4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80097f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097f8:	f003 0310 	and.w	r3, r3, #16
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 81d9 	beq.w	8009bb4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2210      	movs	r2, #16
 8009808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009814:	2b40      	cmp	r3, #64	; 0x40
 8009816:	f040 8151 	bne.w	8009abc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a96      	ldr	r2, [pc, #600]	; (8009a7c <HAL_UART_IRQHandler+0x564>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d068      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a93      	ldr	r2, [pc, #588]	; (8009a80 <HAL_UART_IRQHandler+0x568>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d061      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a91      	ldr	r2, [pc, #580]	; (8009a84 <HAL_UART_IRQHandler+0x56c>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d05a      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a8e      	ldr	r2, [pc, #568]	; (8009a88 <HAL_UART_IRQHandler+0x570>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d053      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a8c      	ldr	r2, [pc, #560]	; (8009a8c <HAL_UART_IRQHandler+0x574>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d04c      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a89      	ldr	r2, [pc, #548]	; (8009a90 <HAL_UART_IRQHandler+0x578>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d045      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a87      	ldr	r2, [pc, #540]	; (8009a94 <HAL_UART_IRQHandler+0x57c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d03e      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a84      	ldr	r2, [pc, #528]	; (8009a98 <HAL_UART_IRQHandler+0x580>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d037      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a82      	ldr	r2, [pc, #520]	; (8009a9c <HAL_UART_IRQHandler+0x584>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d030      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a7f      	ldr	r2, [pc, #508]	; (8009aa0 <HAL_UART_IRQHandler+0x588>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d029      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a7d      	ldr	r2, [pc, #500]	; (8009aa4 <HAL_UART_IRQHandler+0x58c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d022      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a7a      	ldr	r2, [pc, #488]	; (8009aa8 <HAL_UART_IRQHandler+0x590>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d01b      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a78      	ldr	r2, [pc, #480]	; (8009aac <HAL_UART_IRQHandler+0x594>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d014      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a75      	ldr	r2, [pc, #468]	; (8009ab0 <HAL_UART_IRQHandler+0x598>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00d      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a73      	ldr	r2, [pc, #460]	; (8009ab4 <HAL_UART_IRQHandler+0x59c>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d006      	beq.n	80098fa <HAL_UART_IRQHandler+0x3e2>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a70      	ldr	r2, [pc, #448]	; (8009ab8 <HAL_UART_IRQHandler+0x5a0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d106      	bne.n	8009908 <HAL_UART_IRQHandler+0x3f0>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	b29b      	uxth	r3, r3
 8009906:	e005      	b.n	8009914 <HAL_UART_IRQHandler+0x3fc>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 81ab 	beq.w	8009c78 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009928:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800992c:	429a      	cmp	r2, r3
 800992e:	f080 81a3 	bcs.w	8009c78 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009938:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009948:	f000 8087 	beq.w	8009a5a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	461a      	mov	r2, r3
 8009972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800997a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009982:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800998e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1da      	bne.n	800994c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3308      	adds	r3, #8
 800999c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099a0:	e853 3f00 	ldrex	r3, [r3]
 80099a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099a8:	f023 0301 	bic.w	r3, r3, #1
 80099ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3308      	adds	r3, #8
 80099b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80099ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80099be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e1      	bne.n	8009996 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3308      	adds	r3, #8
 80099f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099fe:	e841 2300 	strex	r3, r2, [r1]
 8009a02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e3      	bne.n	80099d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a28:	f023 0310 	bic.w	r3, r3, #16
 8009a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	461a      	mov	r2, r3
 8009a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e4      	bne.n	8009a18 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7f8 fe85 	bl	8002764 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7f6 fdd5 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a7a:	e0fd      	b.n	8009c78 <HAL_UART_IRQHandler+0x760>
 8009a7c:	40020010 	.word	0x40020010
 8009a80:	40020028 	.word	0x40020028
 8009a84:	40020040 	.word	0x40020040
 8009a88:	40020058 	.word	0x40020058
 8009a8c:	40020070 	.word	0x40020070
 8009a90:	40020088 	.word	0x40020088
 8009a94:	400200a0 	.word	0x400200a0
 8009a98:	400200b8 	.word	0x400200b8
 8009a9c:	40020410 	.word	0x40020410
 8009aa0:	40020428 	.word	0x40020428
 8009aa4:	40020440 	.word	0x40020440
 8009aa8:	40020458 	.word	0x40020458
 8009aac:	40020470 	.word	0x40020470
 8009ab0:	40020488 	.word	0x40020488
 8009ab4:	400204a0 	.word	0x400204a0
 8009ab8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 80cf 	beq.w	8009c7c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 80ca 	beq.w	8009c7c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e4      	bne.n	8009ae8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3308      	adds	r3, #8
 8009b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	e853 3f00 	ldrex	r3, [r3]
 8009b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b2e:	6a3a      	ldr	r2, [r7, #32]
 8009b30:	4b55      	ldr	r3, [pc, #340]	; (8009c88 <HAL_UART_IRQHandler+0x770>)
 8009b32:	4013      	ands	r3, r2
 8009b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b42:	633a      	str	r2, [r7, #48]	; 0x30
 8009b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e3      	bne.n	8009b1e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	e853 3f00 	ldrex	r3, [r3]
 8009b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0310 	bic.w	r3, r3, #16
 8009b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b8c:	61fb      	str	r3, [r7, #28]
 8009b8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b90:	69b9      	ldr	r1, [r7, #24]
 8009b92:	69fa      	ldr	r2, [r7, #28]
 8009b94:	e841 2300 	strex	r3, r2, [r1]
 8009b98:	617b      	str	r3, [r7, #20]
   return(result);
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1e4      	bne.n	8009b6a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7f6 fd39 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bb2:	e063      	b.n	8009c7c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00e      	beq.n	8009bde <HAL_UART_IRQHandler+0x6c6>
 8009bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d008      	beq.n	8009bde <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f001 fb22 	bl	800b220 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bdc:	e051      	b.n	8009c82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d014      	beq.n	8009c14 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d105      	bne.n	8009c02 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d008      	beq.n	8009c14 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d03a      	beq.n	8009c80 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	4798      	blx	r3
    }
    return;
 8009c12:	e035      	b.n	8009c80 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d009      	beq.n	8009c34 <HAL_UART_IRQHandler+0x71c>
 8009c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d003      	beq.n	8009c34 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 facc 	bl	800b1ca <UART_EndTransmit_IT>
    return;
 8009c32:	e026      	b.n	8009c82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d009      	beq.n	8009c54 <HAL_UART_IRQHandler+0x73c>
 8009c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f001 fafb 	bl	800b248 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c52:	e016      	b.n	8009c82 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d010      	beq.n	8009c82 <HAL_UART_IRQHandler+0x76a>
 8009c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	da0c      	bge.n	8009c82 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f001 fae3 	bl	800b234 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c6e:	e008      	b.n	8009c82 <HAL_UART_IRQHandler+0x76a>
      return;
 8009c70:	bf00      	nop
 8009c72:	e006      	b.n	8009c82 <HAL_UART_IRQHandler+0x76a>
    return;
 8009c74:	bf00      	nop
 8009c76:	e004      	b.n	8009c82 <HAL_UART_IRQHandler+0x76a>
      return;
 8009c78:	bf00      	nop
 8009c7a:	e002      	b.n	8009c82 <HAL_UART_IRQHandler+0x76a>
      return;
 8009c7c:	bf00      	nop
 8009c7e:	e000      	b.n	8009c82 <HAL_UART_IRQHandler+0x76a>
    return;
 8009c80:	bf00      	nop
  }
}
 8009c82:	37e8      	adds	r7, #232	; 0xe8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	effffffe 	.word	0xeffffffe

08009c8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ce0:	b092      	sub	sp, #72	; 0x48
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	689a      	ldr	r2, [r3, #8]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4bbe      	ldr	r3, [pc, #760]	; (800a004 <UART_SetConfig+0x328>)
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	6812      	ldr	r2, [r2, #0]
 8009d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d14:	430b      	orrs	r3, r1
 8009d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	68da      	ldr	r2, [r3, #12]
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4ab3      	ldr	r2, [pc, #716]	; (800a008 <UART_SetConfig+0x32c>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d004      	beq.n	8009d48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d44:	4313      	orrs	r3, r2
 8009d46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	689a      	ldr	r2, [r3, #8]
 8009d4e:	4baf      	ldr	r3, [pc, #700]	; (800a00c <UART_SetConfig+0x330>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	6812      	ldr	r2, [r2, #0]
 8009d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d58:	430b      	orrs	r3, r1
 8009d5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d62:	f023 010f 	bic.w	r1, r3, #15
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4aa6      	ldr	r2, [pc, #664]	; (800a010 <UART_SetConfig+0x334>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d177      	bne.n	8009e6c <UART_SetConfig+0x190>
 8009d7c:	4ba5      	ldr	r3, [pc, #660]	; (800a014 <UART_SetConfig+0x338>)
 8009d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d84:	2b28      	cmp	r3, #40	; 0x28
 8009d86:	d86d      	bhi.n	8009e64 <UART_SetConfig+0x188>
 8009d88:	a201      	add	r2, pc, #4	; (adr r2, 8009d90 <UART_SetConfig+0xb4>)
 8009d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8e:	bf00      	nop
 8009d90:	08009e35 	.word	0x08009e35
 8009d94:	08009e65 	.word	0x08009e65
 8009d98:	08009e65 	.word	0x08009e65
 8009d9c:	08009e65 	.word	0x08009e65
 8009da0:	08009e65 	.word	0x08009e65
 8009da4:	08009e65 	.word	0x08009e65
 8009da8:	08009e65 	.word	0x08009e65
 8009dac:	08009e65 	.word	0x08009e65
 8009db0:	08009e3d 	.word	0x08009e3d
 8009db4:	08009e65 	.word	0x08009e65
 8009db8:	08009e65 	.word	0x08009e65
 8009dbc:	08009e65 	.word	0x08009e65
 8009dc0:	08009e65 	.word	0x08009e65
 8009dc4:	08009e65 	.word	0x08009e65
 8009dc8:	08009e65 	.word	0x08009e65
 8009dcc:	08009e65 	.word	0x08009e65
 8009dd0:	08009e45 	.word	0x08009e45
 8009dd4:	08009e65 	.word	0x08009e65
 8009dd8:	08009e65 	.word	0x08009e65
 8009ddc:	08009e65 	.word	0x08009e65
 8009de0:	08009e65 	.word	0x08009e65
 8009de4:	08009e65 	.word	0x08009e65
 8009de8:	08009e65 	.word	0x08009e65
 8009dec:	08009e65 	.word	0x08009e65
 8009df0:	08009e4d 	.word	0x08009e4d
 8009df4:	08009e65 	.word	0x08009e65
 8009df8:	08009e65 	.word	0x08009e65
 8009dfc:	08009e65 	.word	0x08009e65
 8009e00:	08009e65 	.word	0x08009e65
 8009e04:	08009e65 	.word	0x08009e65
 8009e08:	08009e65 	.word	0x08009e65
 8009e0c:	08009e65 	.word	0x08009e65
 8009e10:	08009e55 	.word	0x08009e55
 8009e14:	08009e65 	.word	0x08009e65
 8009e18:	08009e65 	.word	0x08009e65
 8009e1c:	08009e65 	.word	0x08009e65
 8009e20:	08009e65 	.word	0x08009e65
 8009e24:	08009e65 	.word	0x08009e65
 8009e28:	08009e65 	.word	0x08009e65
 8009e2c:	08009e65 	.word	0x08009e65
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	2301      	movs	r3, #1
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e326      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009e3c:	2304      	movs	r3, #4
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e42:	e322      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009e44:	2308      	movs	r3, #8
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4a:	e31e      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e52:	e31a      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009e54:	2320      	movs	r3, #32
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5a:	e316      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009e5c:	2340      	movs	r3, #64	; 0x40
 8009e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e62:	e312      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009e64:	2380      	movs	r3, #128	; 0x80
 8009e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6a:	e30e      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a69      	ldr	r2, [pc, #420]	; (800a018 <UART_SetConfig+0x33c>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d130      	bne.n	8009ed8 <UART_SetConfig+0x1fc>
 8009e76:	4b67      	ldr	r3, [pc, #412]	; (800a014 <UART_SetConfig+0x338>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	2b05      	cmp	r3, #5
 8009e80:	d826      	bhi.n	8009ed0 <UART_SetConfig+0x1f4>
 8009e82:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <UART_SetConfig+0x1ac>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ea1 	.word	0x08009ea1
 8009e8c:	08009ea9 	.word	0x08009ea9
 8009e90:	08009eb1 	.word	0x08009eb1
 8009e94:	08009eb9 	.word	0x08009eb9
 8009e98:	08009ec1 	.word	0x08009ec1
 8009e9c:	08009ec9 	.word	0x08009ec9
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e2f0      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eae:	e2ec      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009eb0:	2308      	movs	r3, #8
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb6:	e2e8      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009eb8:	2310      	movs	r3, #16
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e2e4      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec6:	e2e0      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009ec8:	2340      	movs	r3, #64	; 0x40
 8009eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ece:	e2dc      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009ed0:	2380      	movs	r3, #128	; 0x80
 8009ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed6:	e2d8      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a4f      	ldr	r2, [pc, #316]	; (800a01c <UART_SetConfig+0x340>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d130      	bne.n	8009f44 <UART_SetConfig+0x268>
 8009ee2:	4b4c      	ldr	r3, [pc, #304]	; (800a014 <UART_SetConfig+0x338>)
 8009ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d826      	bhi.n	8009f3c <UART_SetConfig+0x260>
 8009eee:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <UART_SetConfig+0x218>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f0d 	.word	0x08009f0d
 8009ef8:	08009f15 	.word	0x08009f15
 8009efc:	08009f1d 	.word	0x08009f1d
 8009f00:	08009f25 	.word	0x08009f25
 8009f04:	08009f2d 	.word	0x08009f2d
 8009f08:	08009f35 	.word	0x08009f35
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e2ba      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f14:	2304      	movs	r3, #4
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1a:	e2b6      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f1c:	2308      	movs	r3, #8
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f22:	e2b2      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f24:	2310      	movs	r3, #16
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e2ae      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f2c:	2320      	movs	r3, #32
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f32:	e2aa      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f34:	2340      	movs	r3, #64	; 0x40
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3a:	e2a6      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f3c:	2380      	movs	r3, #128	; 0x80
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f42:	e2a2      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a35      	ldr	r2, [pc, #212]	; (800a020 <UART_SetConfig+0x344>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d130      	bne.n	8009fb0 <UART_SetConfig+0x2d4>
 8009f4e:	4b31      	ldr	r3, [pc, #196]	; (800a014 <UART_SetConfig+0x338>)
 8009f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f52:	f003 0307 	and.w	r3, r3, #7
 8009f56:	2b05      	cmp	r3, #5
 8009f58:	d826      	bhi.n	8009fa8 <UART_SetConfig+0x2cc>
 8009f5a:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <UART_SetConfig+0x284>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f79 	.word	0x08009f79
 8009f64:	08009f81 	.word	0x08009f81
 8009f68:	08009f89 	.word	0x08009f89
 8009f6c:	08009f91 	.word	0x08009f91
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009fa1 	.word	0x08009fa1
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7e:	e284      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f80:	2304      	movs	r3, #4
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f86:	e280      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f88:	2308      	movs	r3, #8
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8e:	e27c      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f90:	2310      	movs	r3, #16
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f96:	e278      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009f98:	2320      	movs	r3, #32
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9e:	e274      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009fa0:	2340      	movs	r3, #64	; 0x40
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa6:	e270      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009fa8:	2380      	movs	r3, #128	; 0x80
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fae:	e26c      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a1b      	ldr	r2, [pc, #108]	; (800a024 <UART_SetConfig+0x348>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d142      	bne.n	800a040 <UART_SetConfig+0x364>
 8009fba:	4b16      	ldr	r3, [pc, #88]	; (800a014 <UART_SetConfig+0x338>)
 8009fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fbe:	f003 0307 	and.w	r3, r3, #7
 8009fc2:	2b05      	cmp	r3, #5
 8009fc4:	d838      	bhi.n	800a038 <UART_SetConfig+0x35c>
 8009fc6:	a201      	add	r2, pc, #4	; (adr r2, 8009fcc <UART_SetConfig+0x2f0>)
 8009fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fcc:	08009fe5 	.word	0x08009fe5
 8009fd0:	08009fed 	.word	0x08009fed
 8009fd4:	08009ff5 	.word	0x08009ff5
 8009fd8:	08009ffd 	.word	0x08009ffd
 8009fdc:	0800a029 	.word	0x0800a029
 8009fe0:	0800a031 	.word	0x0800a031
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fea:	e24e      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009fec:	2304      	movs	r3, #4
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ff2:	e24a      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009ff4:	2308      	movs	r3, #8
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffa:	e246      	b.n	800a48a <UART_SetConfig+0x7ae>
 8009ffc:	2310      	movs	r3, #16
 8009ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a002:	e242      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a004:	cfff69f3 	.word	0xcfff69f3
 800a008:	58000c00 	.word	0x58000c00
 800a00c:	11fff4ff 	.word	0x11fff4ff
 800a010:	40011000 	.word	0x40011000
 800a014:	58024400 	.word	0x58024400
 800a018:	40004400 	.word	0x40004400
 800a01c:	40004800 	.word	0x40004800
 800a020:	40004c00 	.word	0x40004c00
 800a024:	40005000 	.word	0x40005000
 800a028:	2320      	movs	r3, #32
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02e:	e22c      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a030:	2340      	movs	r3, #64	; 0x40
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a036:	e228      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a038:	2380      	movs	r3, #128	; 0x80
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03e:	e224      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4ab1      	ldr	r2, [pc, #708]	; (800a30c <UART_SetConfig+0x630>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d176      	bne.n	800a138 <UART_SetConfig+0x45c>
 800a04a:	4bb1      	ldr	r3, [pc, #708]	; (800a310 <UART_SetConfig+0x634>)
 800a04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a052:	2b28      	cmp	r3, #40	; 0x28
 800a054:	d86c      	bhi.n	800a130 <UART_SetConfig+0x454>
 800a056:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <UART_SetConfig+0x380>)
 800a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05c:	0800a101 	.word	0x0800a101
 800a060:	0800a131 	.word	0x0800a131
 800a064:	0800a131 	.word	0x0800a131
 800a068:	0800a131 	.word	0x0800a131
 800a06c:	0800a131 	.word	0x0800a131
 800a070:	0800a131 	.word	0x0800a131
 800a074:	0800a131 	.word	0x0800a131
 800a078:	0800a131 	.word	0x0800a131
 800a07c:	0800a109 	.word	0x0800a109
 800a080:	0800a131 	.word	0x0800a131
 800a084:	0800a131 	.word	0x0800a131
 800a088:	0800a131 	.word	0x0800a131
 800a08c:	0800a131 	.word	0x0800a131
 800a090:	0800a131 	.word	0x0800a131
 800a094:	0800a131 	.word	0x0800a131
 800a098:	0800a131 	.word	0x0800a131
 800a09c:	0800a111 	.word	0x0800a111
 800a0a0:	0800a131 	.word	0x0800a131
 800a0a4:	0800a131 	.word	0x0800a131
 800a0a8:	0800a131 	.word	0x0800a131
 800a0ac:	0800a131 	.word	0x0800a131
 800a0b0:	0800a131 	.word	0x0800a131
 800a0b4:	0800a131 	.word	0x0800a131
 800a0b8:	0800a131 	.word	0x0800a131
 800a0bc:	0800a119 	.word	0x0800a119
 800a0c0:	0800a131 	.word	0x0800a131
 800a0c4:	0800a131 	.word	0x0800a131
 800a0c8:	0800a131 	.word	0x0800a131
 800a0cc:	0800a131 	.word	0x0800a131
 800a0d0:	0800a131 	.word	0x0800a131
 800a0d4:	0800a131 	.word	0x0800a131
 800a0d8:	0800a131 	.word	0x0800a131
 800a0dc:	0800a121 	.word	0x0800a121
 800a0e0:	0800a131 	.word	0x0800a131
 800a0e4:	0800a131 	.word	0x0800a131
 800a0e8:	0800a131 	.word	0x0800a131
 800a0ec:	0800a131 	.word	0x0800a131
 800a0f0:	0800a131 	.word	0x0800a131
 800a0f4:	0800a131 	.word	0x0800a131
 800a0f8:	0800a131 	.word	0x0800a131
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	2301      	movs	r3, #1
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a106:	e1c0      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a108:	2304      	movs	r3, #4
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a10e:	e1bc      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a110:	2308      	movs	r3, #8
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a116:	e1b8      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a118:	2310      	movs	r3, #16
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a11e:	e1b4      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a120:	2320      	movs	r3, #32
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a126:	e1b0      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a128:	2340      	movs	r3, #64	; 0x40
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a12e:	e1ac      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a130:	2380      	movs	r3, #128	; 0x80
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a136:	e1a8      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a75      	ldr	r2, [pc, #468]	; (800a314 <UART_SetConfig+0x638>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d130      	bne.n	800a1a4 <UART_SetConfig+0x4c8>
 800a142:	4b73      	ldr	r3, [pc, #460]	; (800a310 <UART_SetConfig+0x634>)
 800a144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b05      	cmp	r3, #5
 800a14c:	d826      	bhi.n	800a19c <UART_SetConfig+0x4c0>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <UART_SetConfig+0x478>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a16d 	.word	0x0800a16d
 800a158:	0800a175 	.word	0x0800a175
 800a15c:	0800a17d 	.word	0x0800a17d
 800a160:	0800a185 	.word	0x0800a185
 800a164:	0800a18d 	.word	0x0800a18d
 800a168:	0800a195 	.word	0x0800a195
 800a16c:	2300      	movs	r3, #0
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a172:	e18a      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a174:	2304      	movs	r3, #4
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17a:	e186      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a17c:	2308      	movs	r3, #8
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a182:	e182      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a184:	2310      	movs	r3, #16
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a18a:	e17e      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a18c:	2320      	movs	r3, #32
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a192:	e17a      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a194:	2340      	movs	r3, #64	; 0x40
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a19a:	e176      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a19c:	2380      	movs	r3, #128	; 0x80
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1a2:	e172      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a5b      	ldr	r2, [pc, #364]	; (800a318 <UART_SetConfig+0x63c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d130      	bne.n	800a210 <UART_SetConfig+0x534>
 800a1ae:	4b58      	ldr	r3, [pc, #352]	; (800a310 <UART_SetConfig+0x634>)
 800a1b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	2b05      	cmp	r3, #5
 800a1b8:	d826      	bhi.n	800a208 <UART_SetConfig+0x52c>
 800a1ba:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <UART_SetConfig+0x4e4>)
 800a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c0:	0800a1d9 	.word	0x0800a1d9
 800a1c4:	0800a1e1 	.word	0x0800a1e1
 800a1c8:	0800a1e9 	.word	0x0800a1e9
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a1f9 	.word	0x0800a1f9
 800a1d4:	0800a201 	.word	0x0800a201
 800a1d8:	2300      	movs	r3, #0
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1de:	e154      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a1e0:	2304      	movs	r3, #4
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e6:	e150      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ee:	e14c      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a1f0:	2310      	movs	r3, #16
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f6:	e148      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a1f8:	2320      	movs	r3, #32
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1fe:	e144      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a200:	2340      	movs	r3, #64	; 0x40
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a206:	e140      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a208:	2380      	movs	r3, #128	; 0x80
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a20e:	e13c      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a41      	ldr	r2, [pc, #260]	; (800a31c <UART_SetConfig+0x640>)
 800a216:	4293      	cmp	r3, r2
 800a218:	f040 8082 	bne.w	800a320 <UART_SetConfig+0x644>
 800a21c:	4b3c      	ldr	r3, [pc, #240]	; (800a310 <UART_SetConfig+0x634>)
 800a21e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a224:	2b28      	cmp	r3, #40	; 0x28
 800a226:	d86d      	bhi.n	800a304 <UART_SetConfig+0x628>
 800a228:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <UART_SetConfig+0x554>)
 800a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22e:	bf00      	nop
 800a230:	0800a2d5 	.word	0x0800a2d5
 800a234:	0800a305 	.word	0x0800a305
 800a238:	0800a305 	.word	0x0800a305
 800a23c:	0800a305 	.word	0x0800a305
 800a240:	0800a305 	.word	0x0800a305
 800a244:	0800a305 	.word	0x0800a305
 800a248:	0800a305 	.word	0x0800a305
 800a24c:	0800a305 	.word	0x0800a305
 800a250:	0800a2dd 	.word	0x0800a2dd
 800a254:	0800a305 	.word	0x0800a305
 800a258:	0800a305 	.word	0x0800a305
 800a25c:	0800a305 	.word	0x0800a305
 800a260:	0800a305 	.word	0x0800a305
 800a264:	0800a305 	.word	0x0800a305
 800a268:	0800a305 	.word	0x0800a305
 800a26c:	0800a305 	.word	0x0800a305
 800a270:	0800a2e5 	.word	0x0800a2e5
 800a274:	0800a305 	.word	0x0800a305
 800a278:	0800a305 	.word	0x0800a305
 800a27c:	0800a305 	.word	0x0800a305
 800a280:	0800a305 	.word	0x0800a305
 800a284:	0800a305 	.word	0x0800a305
 800a288:	0800a305 	.word	0x0800a305
 800a28c:	0800a305 	.word	0x0800a305
 800a290:	0800a2ed 	.word	0x0800a2ed
 800a294:	0800a305 	.word	0x0800a305
 800a298:	0800a305 	.word	0x0800a305
 800a29c:	0800a305 	.word	0x0800a305
 800a2a0:	0800a305 	.word	0x0800a305
 800a2a4:	0800a305 	.word	0x0800a305
 800a2a8:	0800a305 	.word	0x0800a305
 800a2ac:	0800a305 	.word	0x0800a305
 800a2b0:	0800a2f5 	.word	0x0800a2f5
 800a2b4:	0800a305 	.word	0x0800a305
 800a2b8:	0800a305 	.word	0x0800a305
 800a2bc:	0800a305 	.word	0x0800a305
 800a2c0:	0800a305 	.word	0x0800a305
 800a2c4:	0800a305 	.word	0x0800a305
 800a2c8:	0800a305 	.word	0x0800a305
 800a2cc:	0800a305 	.word	0x0800a305
 800a2d0:	0800a2fd 	.word	0x0800a2fd
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2da:	e0d6      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a2dc:	2304      	movs	r3, #4
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2e2:	e0d2      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a2e4:	2308      	movs	r3, #8
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ea:	e0ce      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a2ec:	2310      	movs	r3, #16
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f2:	e0ca      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a2f4:	2320      	movs	r3, #32
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fa:	e0c6      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a2fc:	2340      	movs	r3, #64	; 0x40
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a302:	e0c2      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a304:	2380      	movs	r3, #128	; 0x80
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30a:	e0be      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a30c:	40011400 	.word	0x40011400
 800a310:	58024400 	.word	0x58024400
 800a314:	40007800 	.word	0x40007800
 800a318:	40007c00 	.word	0x40007c00
 800a31c:	40011800 	.word	0x40011800
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4aad      	ldr	r2, [pc, #692]	; (800a5dc <UART_SetConfig+0x900>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d176      	bne.n	800a418 <UART_SetConfig+0x73c>
 800a32a:	4bad      	ldr	r3, [pc, #692]	; (800a5e0 <UART_SetConfig+0x904>)
 800a32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a332:	2b28      	cmp	r3, #40	; 0x28
 800a334:	d86c      	bhi.n	800a410 <UART_SetConfig+0x734>
 800a336:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <UART_SetConfig+0x660>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a3e1 	.word	0x0800a3e1
 800a340:	0800a411 	.word	0x0800a411
 800a344:	0800a411 	.word	0x0800a411
 800a348:	0800a411 	.word	0x0800a411
 800a34c:	0800a411 	.word	0x0800a411
 800a350:	0800a411 	.word	0x0800a411
 800a354:	0800a411 	.word	0x0800a411
 800a358:	0800a411 	.word	0x0800a411
 800a35c:	0800a3e9 	.word	0x0800a3e9
 800a360:	0800a411 	.word	0x0800a411
 800a364:	0800a411 	.word	0x0800a411
 800a368:	0800a411 	.word	0x0800a411
 800a36c:	0800a411 	.word	0x0800a411
 800a370:	0800a411 	.word	0x0800a411
 800a374:	0800a411 	.word	0x0800a411
 800a378:	0800a411 	.word	0x0800a411
 800a37c:	0800a3f1 	.word	0x0800a3f1
 800a380:	0800a411 	.word	0x0800a411
 800a384:	0800a411 	.word	0x0800a411
 800a388:	0800a411 	.word	0x0800a411
 800a38c:	0800a411 	.word	0x0800a411
 800a390:	0800a411 	.word	0x0800a411
 800a394:	0800a411 	.word	0x0800a411
 800a398:	0800a411 	.word	0x0800a411
 800a39c:	0800a3f9 	.word	0x0800a3f9
 800a3a0:	0800a411 	.word	0x0800a411
 800a3a4:	0800a411 	.word	0x0800a411
 800a3a8:	0800a411 	.word	0x0800a411
 800a3ac:	0800a411 	.word	0x0800a411
 800a3b0:	0800a411 	.word	0x0800a411
 800a3b4:	0800a411 	.word	0x0800a411
 800a3b8:	0800a411 	.word	0x0800a411
 800a3bc:	0800a401 	.word	0x0800a401
 800a3c0:	0800a411 	.word	0x0800a411
 800a3c4:	0800a411 	.word	0x0800a411
 800a3c8:	0800a411 	.word	0x0800a411
 800a3cc:	0800a411 	.word	0x0800a411
 800a3d0:	0800a411 	.word	0x0800a411
 800a3d4:	0800a411 	.word	0x0800a411
 800a3d8:	0800a411 	.word	0x0800a411
 800a3dc:	0800a409 	.word	0x0800a409
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e6:	e050      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a3e8:	2304      	movs	r3, #4
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ee:	e04c      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a3f0:	2308      	movs	r3, #8
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f6:	e048      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fe:	e044      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a400:	2320      	movs	r3, #32
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a406:	e040      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a408:	2340      	movs	r3, #64	; 0x40
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a40e:	e03c      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a410:	2380      	movs	r3, #128	; 0x80
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a416:	e038      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a71      	ldr	r2, [pc, #452]	; (800a5e4 <UART_SetConfig+0x908>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d130      	bne.n	800a484 <UART_SetConfig+0x7a8>
 800a422:	4b6f      	ldr	r3, [pc, #444]	; (800a5e0 <UART_SetConfig+0x904>)
 800a424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	2b05      	cmp	r3, #5
 800a42c:	d826      	bhi.n	800a47c <UART_SetConfig+0x7a0>
 800a42e:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <UART_SetConfig+0x758>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a44d 	.word	0x0800a44d
 800a438:	0800a455 	.word	0x0800a455
 800a43c:	0800a45d 	.word	0x0800a45d
 800a440:	0800a465 	.word	0x0800a465
 800a444:	0800a46d 	.word	0x0800a46d
 800a448:	0800a475 	.word	0x0800a475
 800a44c:	2302      	movs	r3, #2
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a452:	e01a      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a454:	2304      	movs	r3, #4
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45a:	e016      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a45c:	2308      	movs	r3, #8
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a462:	e012      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a464:	2310      	movs	r3, #16
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46a:	e00e      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a46c:	2320      	movs	r3, #32
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a472:	e00a      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a474:	2340      	movs	r3, #64	; 0x40
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47a:	e006      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a47c:	2380      	movs	r3, #128	; 0x80
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a482:	e002      	b.n	800a48a <UART_SetConfig+0x7ae>
 800a484:	2380      	movs	r3, #128	; 0x80
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a55      	ldr	r2, [pc, #340]	; (800a5e4 <UART_SetConfig+0x908>)
 800a490:	4293      	cmp	r3, r2
 800a492:	f040 80f8 	bne.w	800a686 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a496:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a49a:	2b20      	cmp	r3, #32
 800a49c:	dc46      	bgt.n	800a52c <UART_SetConfig+0x850>
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	db75      	blt.n	800a58e <UART_SetConfig+0x8b2>
 800a4a2:	3b02      	subs	r3, #2
 800a4a4:	2b1e      	cmp	r3, #30
 800a4a6:	d872      	bhi.n	800a58e <UART_SetConfig+0x8b2>
 800a4a8:	a201      	add	r2, pc, #4	; (adr r2, 800a4b0 <UART_SetConfig+0x7d4>)
 800a4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ae:	bf00      	nop
 800a4b0:	0800a533 	.word	0x0800a533
 800a4b4:	0800a58f 	.word	0x0800a58f
 800a4b8:	0800a53b 	.word	0x0800a53b
 800a4bc:	0800a58f 	.word	0x0800a58f
 800a4c0:	0800a58f 	.word	0x0800a58f
 800a4c4:	0800a58f 	.word	0x0800a58f
 800a4c8:	0800a54b 	.word	0x0800a54b
 800a4cc:	0800a58f 	.word	0x0800a58f
 800a4d0:	0800a58f 	.word	0x0800a58f
 800a4d4:	0800a58f 	.word	0x0800a58f
 800a4d8:	0800a58f 	.word	0x0800a58f
 800a4dc:	0800a58f 	.word	0x0800a58f
 800a4e0:	0800a58f 	.word	0x0800a58f
 800a4e4:	0800a58f 	.word	0x0800a58f
 800a4e8:	0800a55b 	.word	0x0800a55b
 800a4ec:	0800a58f 	.word	0x0800a58f
 800a4f0:	0800a58f 	.word	0x0800a58f
 800a4f4:	0800a58f 	.word	0x0800a58f
 800a4f8:	0800a58f 	.word	0x0800a58f
 800a4fc:	0800a58f 	.word	0x0800a58f
 800a500:	0800a58f 	.word	0x0800a58f
 800a504:	0800a58f 	.word	0x0800a58f
 800a508:	0800a58f 	.word	0x0800a58f
 800a50c:	0800a58f 	.word	0x0800a58f
 800a510:	0800a58f 	.word	0x0800a58f
 800a514:	0800a58f 	.word	0x0800a58f
 800a518:	0800a58f 	.word	0x0800a58f
 800a51c:	0800a58f 	.word	0x0800a58f
 800a520:	0800a58f 	.word	0x0800a58f
 800a524:	0800a58f 	.word	0x0800a58f
 800a528:	0800a581 	.word	0x0800a581
 800a52c:	2b40      	cmp	r3, #64	; 0x40
 800a52e:	d02a      	beq.n	800a586 <UART_SetConfig+0x8aa>
 800a530:	e02d      	b.n	800a58e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a532:	f7fc fca7 	bl	8006e84 <HAL_RCCEx_GetD3PCLK1Freq>
 800a536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a538:	e02f      	b.n	800a59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a53a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fc fcb6 	bl	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a548:	e027      	b.n	800a59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a54a:	f107 0318 	add.w	r3, r7, #24
 800a54e:	4618      	mov	r0, r3
 800a550:	f7fc fe02 	bl	8007158 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a558:	e01f      	b.n	800a59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a55a:	4b21      	ldr	r3, [pc, #132]	; (800a5e0 <UART_SetConfig+0x904>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0320 	and.w	r3, r3, #32
 800a562:	2b00      	cmp	r3, #0
 800a564:	d009      	beq.n	800a57a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a566:	4b1e      	ldr	r3, [pc, #120]	; (800a5e0 <UART_SetConfig+0x904>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	08db      	lsrs	r3, r3, #3
 800a56c:	f003 0303 	and.w	r3, r3, #3
 800a570:	4a1d      	ldr	r2, [pc, #116]	; (800a5e8 <UART_SetConfig+0x90c>)
 800a572:	fa22 f303 	lsr.w	r3, r2, r3
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a578:	e00f      	b.n	800a59a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a57a:	4b1b      	ldr	r3, [pc, #108]	; (800a5e8 <UART_SetConfig+0x90c>)
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a57e:	e00c      	b.n	800a59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a580:	4b1a      	ldr	r3, [pc, #104]	; (800a5ec <UART_SetConfig+0x910>)
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a584:	e009      	b.n	800a59a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a58c:	e005      	b.n	800a59a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a58e:	2300      	movs	r3, #0
 800a590:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a598:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 81ee 	beq.w	800a97e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	4a12      	ldr	r2, [pc, #72]	; (800a5f0 <UART_SetConfig+0x914>)
 800a5a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5b4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	4413      	add	r3, r2
 800a5c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d305      	bcc.n	800a5d2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d910      	bls.n	800a5f4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a5d8:	e1d1      	b.n	800a97e <UART_SetConfig+0xca2>
 800a5da:	bf00      	nop
 800a5dc:	40011c00 	.word	0x40011c00
 800a5e0:	58024400 	.word	0x58024400
 800a5e4:	58000c00 	.word	0x58000c00
 800a5e8:	03d09000 	.word	0x03d09000
 800a5ec:	003d0900 	.word	0x003d0900
 800a5f0:	0800b594 	.word	0x0800b594
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	60bb      	str	r3, [r7, #8]
 800a5fa:	60fa      	str	r2, [r7, #12]
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a600:	4ac0      	ldr	r2, [pc, #768]	; (800a904 <UART_SetConfig+0xc28>)
 800a602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a606:	b29b      	uxth	r3, r3
 800a608:	2200      	movs	r2, #0
 800a60a:	603b      	str	r3, [r7, #0]
 800a60c:	607a      	str	r2, [r7, #4]
 800a60e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a616:	f7f5 fe79 	bl	800030c <__aeabi_uldivmod>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4610      	mov	r0, r2
 800a620:	4619      	mov	r1, r3
 800a622:	f04f 0200 	mov.w	r2, #0
 800a626:	f04f 0300 	mov.w	r3, #0
 800a62a:	020b      	lsls	r3, r1, #8
 800a62c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a630:	0202      	lsls	r2, r0, #8
 800a632:	6979      	ldr	r1, [r7, #20]
 800a634:	6849      	ldr	r1, [r1, #4]
 800a636:	0849      	lsrs	r1, r1, #1
 800a638:	2000      	movs	r0, #0
 800a63a:	460c      	mov	r4, r1
 800a63c:	4605      	mov	r5, r0
 800a63e:	eb12 0804 	adds.w	r8, r2, r4
 800a642:	eb43 0905 	adc.w	r9, r3, r5
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	469a      	mov	sl, r3
 800a64e:	4693      	mov	fp, r2
 800a650:	4652      	mov	r2, sl
 800a652:	465b      	mov	r3, fp
 800a654:	4640      	mov	r0, r8
 800a656:	4649      	mov	r1, r9
 800a658:	f7f5 fe58 	bl	800030c <__aeabi_uldivmod>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4613      	mov	r3, r2
 800a662:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a66a:	d308      	bcc.n	800a67e <UART_SetConfig+0x9a2>
 800a66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a672:	d204      	bcs.n	800a67e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a67a:	60da      	str	r2, [r3, #12]
 800a67c:	e17f      	b.n	800a97e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a684:	e17b      	b.n	800a97e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	69db      	ldr	r3, [r3, #28]
 800a68a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a68e:	f040 80bd 	bne.w	800a80c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a692:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a696:	2b20      	cmp	r3, #32
 800a698:	dc48      	bgt.n	800a72c <UART_SetConfig+0xa50>
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	db7b      	blt.n	800a796 <UART_SetConfig+0xaba>
 800a69e:	2b20      	cmp	r3, #32
 800a6a0:	d879      	bhi.n	800a796 <UART_SetConfig+0xaba>
 800a6a2:	a201      	add	r2, pc, #4	; (adr r2, 800a6a8 <UART_SetConfig+0x9cc>)
 800a6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a8:	0800a733 	.word	0x0800a733
 800a6ac:	0800a73b 	.word	0x0800a73b
 800a6b0:	0800a797 	.word	0x0800a797
 800a6b4:	0800a797 	.word	0x0800a797
 800a6b8:	0800a743 	.word	0x0800a743
 800a6bc:	0800a797 	.word	0x0800a797
 800a6c0:	0800a797 	.word	0x0800a797
 800a6c4:	0800a797 	.word	0x0800a797
 800a6c8:	0800a753 	.word	0x0800a753
 800a6cc:	0800a797 	.word	0x0800a797
 800a6d0:	0800a797 	.word	0x0800a797
 800a6d4:	0800a797 	.word	0x0800a797
 800a6d8:	0800a797 	.word	0x0800a797
 800a6dc:	0800a797 	.word	0x0800a797
 800a6e0:	0800a797 	.word	0x0800a797
 800a6e4:	0800a797 	.word	0x0800a797
 800a6e8:	0800a763 	.word	0x0800a763
 800a6ec:	0800a797 	.word	0x0800a797
 800a6f0:	0800a797 	.word	0x0800a797
 800a6f4:	0800a797 	.word	0x0800a797
 800a6f8:	0800a797 	.word	0x0800a797
 800a6fc:	0800a797 	.word	0x0800a797
 800a700:	0800a797 	.word	0x0800a797
 800a704:	0800a797 	.word	0x0800a797
 800a708:	0800a797 	.word	0x0800a797
 800a70c:	0800a797 	.word	0x0800a797
 800a710:	0800a797 	.word	0x0800a797
 800a714:	0800a797 	.word	0x0800a797
 800a718:	0800a797 	.word	0x0800a797
 800a71c:	0800a797 	.word	0x0800a797
 800a720:	0800a797 	.word	0x0800a797
 800a724:	0800a797 	.word	0x0800a797
 800a728:	0800a789 	.word	0x0800a789
 800a72c:	2b40      	cmp	r3, #64	; 0x40
 800a72e:	d02e      	beq.n	800a78e <UART_SetConfig+0xab2>
 800a730:	e031      	b.n	800a796 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a732:	f7fb f9db 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 800a736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a738:	e033      	b.n	800a7a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a73a:	f7fb f9ed 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 800a73e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a740:	e02f      	b.n	800a7a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a746:	4618      	mov	r0, r3
 800a748:	f7fc fbb2 	bl	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a750:	e027      	b.n	800a7a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a752:	f107 0318 	add.w	r3, r7, #24
 800a756:	4618      	mov	r0, r3
 800a758:	f7fc fcfe 	bl	8007158 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a760:	e01f      	b.n	800a7a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a762:	4b69      	ldr	r3, [pc, #420]	; (800a908 <UART_SetConfig+0xc2c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 0320 	and.w	r3, r3, #32
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d009      	beq.n	800a782 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a76e:	4b66      	ldr	r3, [pc, #408]	; (800a908 <UART_SetConfig+0xc2c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	08db      	lsrs	r3, r3, #3
 800a774:	f003 0303 	and.w	r3, r3, #3
 800a778:	4a64      	ldr	r2, [pc, #400]	; (800a90c <UART_SetConfig+0xc30>)
 800a77a:	fa22 f303 	lsr.w	r3, r2, r3
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a780:	e00f      	b.n	800a7a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a782:	4b62      	ldr	r3, [pc, #392]	; (800a90c <UART_SetConfig+0xc30>)
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a786:	e00c      	b.n	800a7a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a788:	4b61      	ldr	r3, [pc, #388]	; (800a910 <UART_SetConfig+0xc34>)
 800a78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a78c:	e009      	b.n	800a7a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a78e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a794:	e005      	b.n	800a7a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a796:	2300      	movs	r3, #0
 800a798:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a7a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 80ea 	beq.w	800a97e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	4a55      	ldr	r2, [pc, #340]	; (800a904 <UART_SetConfig+0xc28>)
 800a7b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7bc:	005a      	lsls	r2, r3, #1
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	085b      	lsrs	r3, r3, #1
 800a7c4:	441a      	add	r2, r3
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	2b0f      	cmp	r3, #15
 800a7d4:	d916      	bls.n	800a804 <UART_SetConfig+0xb28>
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7dc:	d212      	bcs.n	800a804 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	f023 030f 	bic.w	r3, r3, #15
 800a7e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ea:	085b      	lsrs	r3, r3, #1
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	f003 0307 	and.w	r3, r3, #7
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a800:	60da      	str	r2, [r3, #12]
 800a802:	e0bc      	b.n	800a97e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a80a:	e0b8      	b.n	800a97e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a80c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a810:	2b20      	cmp	r3, #32
 800a812:	dc4b      	bgt.n	800a8ac <UART_SetConfig+0xbd0>
 800a814:	2b00      	cmp	r3, #0
 800a816:	f2c0 8087 	blt.w	800a928 <UART_SetConfig+0xc4c>
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	f200 8084 	bhi.w	800a928 <UART_SetConfig+0xc4c>
 800a820:	a201      	add	r2, pc, #4	; (adr r2, 800a828 <UART_SetConfig+0xb4c>)
 800a822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a826:	bf00      	nop
 800a828:	0800a8b3 	.word	0x0800a8b3
 800a82c:	0800a8bb 	.word	0x0800a8bb
 800a830:	0800a929 	.word	0x0800a929
 800a834:	0800a929 	.word	0x0800a929
 800a838:	0800a8c3 	.word	0x0800a8c3
 800a83c:	0800a929 	.word	0x0800a929
 800a840:	0800a929 	.word	0x0800a929
 800a844:	0800a929 	.word	0x0800a929
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a929 	.word	0x0800a929
 800a850:	0800a929 	.word	0x0800a929
 800a854:	0800a929 	.word	0x0800a929
 800a858:	0800a929 	.word	0x0800a929
 800a85c:	0800a929 	.word	0x0800a929
 800a860:	0800a929 	.word	0x0800a929
 800a864:	0800a929 	.word	0x0800a929
 800a868:	0800a8e3 	.word	0x0800a8e3
 800a86c:	0800a929 	.word	0x0800a929
 800a870:	0800a929 	.word	0x0800a929
 800a874:	0800a929 	.word	0x0800a929
 800a878:	0800a929 	.word	0x0800a929
 800a87c:	0800a929 	.word	0x0800a929
 800a880:	0800a929 	.word	0x0800a929
 800a884:	0800a929 	.word	0x0800a929
 800a888:	0800a929 	.word	0x0800a929
 800a88c:	0800a929 	.word	0x0800a929
 800a890:	0800a929 	.word	0x0800a929
 800a894:	0800a929 	.word	0x0800a929
 800a898:	0800a929 	.word	0x0800a929
 800a89c:	0800a929 	.word	0x0800a929
 800a8a0:	0800a929 	.word	0x0800a929
 800a8a4:	0800a929 	.word	0x0800a929
 800a8a8:	0800a91b 	.word	0x0800a91b
 800a8ac:	2b40      	cmp	r3, #64	; 0x40
 800a8ae:	d037      	beq.n	800a920 <UART_SetConfig+0xc44>
 800a8b0:	e03a      	b.n	800a928 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8b2:	f7fb f91b 	bl	8005aec <HAL_RCC_GetPCLK1Freq>
 800a8b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8b8:	e03c      	b.n	800a934 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8ba:	f7fb f92d 	bl	8005b18 <HAL_RCC_GetPCLK2Freq>
 800a8be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8c0:	e038      	b.n	800a934 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fc faf2 	bl	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d0:	e030      	b.n	800a934 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d2:	f107 0318 	add.w	r3, r7, #24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fc fc3e 	bl	8007158 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e0:	e028      	b.n	800a934 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e2:	4b09      	ldr	r3, [pc, #36]	; (800a908 <UART_SetConfig+0xc2c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0320 	and.w	r3, r3, #32
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d012      	beq.n	800a914 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8ee:	4b06      	ldr	r3, [pc, #24]	; (800a908 <UART_SetConfig+0xc2c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	08db      	lsrs	r3, r3, #3
 800a8f4:	f003 0303 	and.w	r3, r3, #3
 800a8f8:	4a04      	ldr	r2, [pc, #16]	; (800a90c <UART_SetConfig+0xc30>)
 800a8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a900:	e018      	b.n	800a934 <UART_SetConfig+0xc58>
 800a902:	bf00      	nop
 800a904:	0800b594 	.word	0x0800b594
 800a908:	58024400 	.word	0x58024400
 800a90c:	03d09000 	.word	0x03d09000
 800a910:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a914:	4b24      	ldr	r3, [pc, #144]	; (800a9a8 <UART_SetConfig+0xccc>)
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a918:	e00c      	b.n	800a934 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a91a:	4b24      	ldr	r3, [pc, #144]	; (800a9ac <UART_SetConfig+0xcd0>)
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a91e:	e009      	b.n	800a934 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a926:	e005      	b.n	800a934 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a928:	2300      	movs	r3, #0
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a932:	bf00      	nop
    }

    if (pclk != 0U)
 800a934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d021      	beq.n	800a97e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93e:	4a1c      	ldr	r2, [pc, #112]	; (800a9b0 <UART_SetConfig+0xcd4>)
 800a940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a944:	461a      	mov	r2, r3
 800a946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a948:	fbb3 f2f2 	udiv	r2, r3, r2
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	085b      	lsrs	r3, r3, #1
 800a952:	441a      	add	r2, r3
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	fbb2 f3f3 	udiv	r3, r2, r3
 800a95c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a960:	2b0f      	cmp	r3, #15
 800a962:	d909      	bls.n	800a978 <UART_SetConfig+0xc9c>
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a96a:	d205      	bcs.n	800a978 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	b29a      	uxth	r2, r3
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	60da      	str	r2, [r3, #12]
 800a976:	e002      	b.n	800a97e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2201      	movs	r2, #1
 800a982:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	2201      	movs	r2, #1
 800a98a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2200      	movs	r2, #0
 800a992:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2200      	movs	r2, #0
 800a998:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a99a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3748      	adds	r7, #72	; 0x48
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9a8:	03d09000 	.word	0x03d09000
 800a9ac:	003d0900 	.word	0x003d0900
 800a9b0:	0800b594 	.word	0x0800b594

0800a9b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00a      	beq.n	800a9de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00a      	beq.n	800aa22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa26:	f003 0308 	and.w	r3, r3, #8
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00a      	beq.n	800aa44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	430a      	orrs	r2, r1
 800aa42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa48:	f003 0310 	and.w	r3, r3, #16
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00a      	beq.n	800aa66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00a      	beq.n	800aa88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	430a      	orrs	r2, r1
 800aa86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d01a      	beq.n	800aaca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	430a      	orrs	r2, r1
 800aaa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aab2:	d10a      	bne.n	800aaca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	430a      	orrs	r2, r1
 800aac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00a      	beq.n	800aaec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	430a      	orrs	r2, r1
 800aaea:	605a      	str	r2, [r3, #4]
  }
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b098      	sub	sp, #96	; 0x60
 800aafc:	af02      	add	r7, sp, #8
 800aafe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab08:	f7f6 ff4e 	bl	80019a8 <HAL_GetTick>
 800ab0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0308 	and.w	r3, r3, #8
 800ab18:	2b08      	cmp	r3, #8
 800ab1a:	d12f      	bne.n	800ab7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab24:	2200      	movs	r2, #0
 800ab26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f88e 	bl	800ac4c <UART_WaitOnFlagUntilTimeout>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d022      	beq.n	800ab7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab4a:	653b      	str	r3, [r7, #80]	; 0x50
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	461a      	mov	r2, r3
 800ab52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab54:	647b      	str	r3, [r7, #68]	; 0x44
 800ab56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e6      	bne.n	800ab36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e063      	b.n	800ac44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 0304 	and.w	r3, r3, #4
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	d149      	bne.n	800ac1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab92:	2200      	movs	r2, #0
 800ab94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f857 	bl	800ac4c <UART_WaitOnFlagUntilTimeout>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d03c      	beq.n	800ac1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	e853 3f00 	ldrex	r3, [r3]
 800abb0:	623b      	str	r3, [r7, #32]
   return(result);
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	461a      	mov	r2, r3
 800abc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc2:	633b      	str	r3, [r7, #48]	; 0x30
 800abc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abca:	e841 2300 	strex	r3, r2, [r1]
 800abce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1e6      	bne.n	800aba4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3308      	adds	r3, #8
 800abdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	e853 3f00 	ldrex	r3, [r3]
 800abe4:	60fb      	str	r3, [r7, #12]
   return(result);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f023 0301 	bic.w	r3, r3, #1
 800abec:	64bb      	str	r3, [r7, #72]	; 0x48
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3308      	adds	r3, #8
 800abf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abf6:	61fa      	str	r2, [r7, #28]
 800abf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfa:	69b9      	ldr	r1, [r7, #24]
 800abfc:	69fa      	ldr	r2, [r7, #28]
 800abfe:	e841 2300 	strex	r3, r2, [r1]
 800ac02:	617b      	str	r3, [r7, #20]
   return(result);
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1e5      	bne.n	800abd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e012      	b.n	800ac44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2220      	movs	r2, #32
 800ac22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2220      	movs	r2, #32
 800ac2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3758      	adds	r7, #88	; 0x58
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	603b      	str	r3, [r7, #0]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac5c:	e049      	b.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac64:	d045      	beq.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac66:	f7f6 fe9f 	bl	80019a8 <HAL_GetTick>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	69ba      	ldr	r2, [r7, #24]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d302      	bcc.n	800ac7c <UART_WaitOnFlagUntilTimeout+0x30>
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e048      	b.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0304 	and.w	r3, r3, #4
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d031      	beq.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	f003 0308 	and.w	r3, r3, #8
 800ac98:	2b08      	cmp	r3, #8
 800ac9a:	d110      	bne.n	800acbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2208      	movs	r2, #8
 800aca2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 f921 	bl	800aeec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2208      	movs	r2, #8
 800acae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e029      	b.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	69db      	ldr	r3, [r3, #28]
 800acc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800accc:	d111      	bne.n	800acf2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 f907 	bl	800aeec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2220      	movs	r2, #32
 800ace2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	e00f      	b.n	800ad12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69da      	ldr	r2, [r3, #28]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	4013      	ands	r3, r2
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	bf0c      	ite	eq
 800ad02:	2301      	moveq	r3, #1
 800ad04:	2300      	movne	r3, #0
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	461a      	mov	r2, r3
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d0a6      	beq.n	800ac5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
	...

0800ad1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b096      	sub	sp, #88	; 0x58
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	4613      	mov	r3, r2
 800ad28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	68ba      	ldr	r2, [r7, #8]
 800ad2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	88fa      	ldrh	r2, [r7, #6]
 800ad34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2222      	movs	r2, #34	; 0x22
 800ad44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d02d      	beq.n	800adae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad58:	4a40      	ldr	r2, [pc, #256]	; (800ae5c <UART_Start_Receive_DMA+0x140>)
 800ad5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad62:	4a3f      	ldr	r2, [pc, #252]	; (800ae60 <UART_Start_Receive_DMA+0x144>)
 800ad64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad6c:	4a3d      	ldr	r2, [pc, #244]	; (800ae64 <UART_Start_Receive_DMA+0x148>)
 800ad6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad76:	2200      	movs	r2, #0
 800ad78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3324      	adds	r3, #36	; 0x24
 800ad86:	4619      	mov	r1, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	88fb      	ldrh	r3, [r7, #6]
 800ad90:	f7f7 fa7e 	bl	8002290 <HAL_DMA_Start_IT>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2210      	movs	r2, #16
 800ad9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e051      	b.n	800ae52 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d018      	beq.n	800ade8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adbe:	e853 3f00 	ldrex	r3, [r3]
 800adc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adca:	657b      	str	r3, [r7, #84]	; 0x54
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	461a      	mov	r2, r3
 800add2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800add4:	64bb      	str	r3, [r7, #72]	; 0x48
 800add6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800adda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800addc:	e841 2300 	strex	r3, r2, [r1]
 800ade0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ade2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e6      	bne.n	800adb6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3308      	adds	r3, #8
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	e853 3f00 	ldrex	r3, [r3]
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	f043 0301 	orr.w	r3, r3, #1
 800adfe:	653b      	str	r3, [r7, #80]	; 0x50
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3308      	adds	r3, #8
 800ae06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae08:	637a      	str	r2, [r7, #52]	; 0x34
 800ae0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae10:	e841 2300 	strex	r3, r2, [r1]
 800ae14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e5      	bne.n	800ade8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3308      	adds	r3, #8
 800ae22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	e853 3f00 	ldrex	r3, [r3]
 800ae2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3308      	adds	r3, #8
 800ae3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae3c:	623a      	str	r2, [r7, #32]
 800ae3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae40:	69f9      	ldr	r1, [r7, #28]
 800ae42:	6a3a      	ldr	r2, [r7, #32]
 800ae44:	e841 2300 	strex	r3, r2, [r1]
 800ae48:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e5      	bne.n	800ae1c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3758      	adds	r7, #88	; 0x58
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	0800afb9 	.word	0x0800afb9
 800ae60:	0800b0e1 	.word	0x0800b0e1
 800ae64:	0800b11f 	.word	0x0800b11f

0800ae68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b08f      	sub	sp, #60	; 0x3c
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	e853 3f00 	ldrex	r3, [r3]
 800ae7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ae84:	637b      	str	r3, [r7, #52]	; 0x34
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae90:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae96:	e841 2300 	strex	r3, r2, [r1]
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e6      	bne.n	800ae70 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3308      	adds	r3, #8
 800aea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	e853 3f00 	ldrex	r3, [r3]
 800aeb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aeb8:	633b      	str	r3, [r7, #48]	; 0x30
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3308      	adds	r3, #8
 800aec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aec2:	61ba      	str	r2, [r7, #24]
 800aec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	6979      	ldr	r1, [r7, #20]
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	613b      	str	r3, [r7, #16]
   return(result);
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e5      	bne.n	800aea2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2220      	movs	r2, #32
 800aeda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800aede:	bf00      	nop
 800aee0:	373c      	adds	r7, #60	; 0x3c
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
	...

0800aeec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b095      	sub	sp, #84	; 0x54
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefc:	e853 3f00 	ldrex	r3, [r3]
 800af00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	461a      	mov	r2, r3
 800af10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af12:	643b      	str	r3, [r7, #64]	; 0x40
 800af14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e6      	bne.n	800aef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	3308      	adds	r3, #8
 800af2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	e853 3f00 	ldrex	r3, [r3]
 800af34:	61fb      	str	r3, [r7, #28]
   return(result);
 800af36:	69fa      	ldr	r2, [r7, #28]
 800af38:	4b1e      	ldr	r3, [pc, #120]	; (800afb4 <UART_EndRxTransfer+0xc8>)
 800af3a:	4013      	ands	r3, r2
 800af3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3308      	adds	r3, #8
 800af44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af4e:	e841 2300 	strex	r3, r2, [r1]
 800af52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1e5      	bne.n	800af26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d118      	bne.n	800af94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	f023 0310 	bic.w	r3, r3, #16
 800af76:	647b      	str	r3, [r7, #68]	; 0x44
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af80:	61bb      	str	r3, [r7, #24]
 800af82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6979      	ldr	r1, [r7, #20]
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	613b      	str	r3, [r7, #16]
   return(result);
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e6      	bne.n	800af62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2220      	movs	r2, #32
 800af98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800afa8:	bf00      	nop
 800afaa:	3754      	adds	r7, #84	; 0x54
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	effffffe 	.word	0xeffffffe

0800afb8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b09c      	sub	sp, #112	; 0x70
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afce:	d071      	beq.n	800b0b4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800afd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afd2:	2200      	movs	r2, #0
 800afd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afec:	66bb      	str	r3, [r7, #104]	; 0x68
 800afee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aff6:	65bb      	str	r3, [r7, #88]	; 0x58
 800aff8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800affc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e6      	bne.n	800afd8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3308      	adds	r3, #8
 800b010:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b014:	e853 3f00 	ldrex	r3, [r3]
 800b018:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01c:	f023 0301 	bic.w	r3, r3, #1
 800b020:	667b      	str	r3, [r7, #100]	; 0x64
 800b022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b02a:	647a      	str	r2, [r7, #68]	; 0x44
 800b02c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b032:	e841 2300 	strex	r3, r2, [r1]
 800b036:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e5      	bne.n	800b00a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b03e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3308      	adds	r3, #8
 800b044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	623b      	str	r3, [r7, #32]
   return(result);
 800b04e:	6a3b      	ldr	r3, [r7, #32]
 800b050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b054:	663b      	str	r3, [r7, #96]	; 0x60
 800b056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3308      	adds	r3, #8
 800b05c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b05e:	633a      	str	r2, [r7, #48]	; 0x30
 800b060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1e5      	bne.n	800b03e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d118      	bne.n	800b0b4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	e853 3f00 	ldrex	r3, [r3]
 800b08e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f023 0310 	bic.w	r3, r3, #16
 800b096:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	461a      	mov	r2, r3
 800b09e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0a0:	61fb      	str	r3, [r7, #28]
 800b0a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	69b9      	ldr	r1, [r7, #24]
 800b0a6:	69fa      	ldr	r2, [r7, #28]
 800b0a8:	e841 2300 	strex	r3, r2, [r1]
 800b0ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e6      	bne.n	800b082 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d107      	bne.n	800b0d2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b0cc:	f7f5 faaa 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0d0:	e002      	b.n	800b0d8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b0d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b0d4:	f7fe fde4 	bl	8009ca0 <HAL_UART_RxCpltCallback>
}
 800b0d8:	bf00      	nop
 800b0da:	3770      	adds	r7, #112	; 0x70
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d109      	bne.n	800b110 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b102:	085b      	lsrs	r3, r3, #1
 800b104:	b29b      	uxth	r3, r3
 800b106:	4619      	mov	r1, r3
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7f5 fa8b 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b10e:	e002      	b.n	800b116 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f7fe fdcf 	bl	8009cb4 <HAL_UART_RxHalfCpltCallback>
}
 800b116:	bf00      	nop
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b086      	sub	sp, #24
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b132:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b13a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b146:	2b80      	cmp	r3, #128	; 0x80
 800b148:	d109      	bne.n	800b15e <UART_DMAError+0x40>
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2b21      	cmp	r3, #33	; 0x21
 800b14e:	d106      	bne.n	800b15e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2200      	movs	r2, #0
 800b154:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b158:	6978      	ldr	r0, [r7, #20]
 800b15a:	f7ff fe85 	bl	800ae68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b168:	2b40      	cmp	r3, #64	; 0x40
 800b16a:	d109      	bne.n	800b180 <UART_DMAError+0x62>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b22      	cmp	r3, #34	; 0x22
 800b170:	d106      	bne.n	800b180 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2200      	movs	r2, #0
 800b176:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b17a:	6978      	ldr	r0, [r7, #20]
 800b17c:	f7ff feb6 	bl	800aeec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b186:	f043 0210 	orr.w	r2, r3, #16
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b190:	6978      	ldr	r0, [r7, #20]
 800b192:	f7fe fd99 	bl	8009cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b196:	bf00      	nop
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f7fe fd83 	bl	8009cc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1c2:	bf00      	nop
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b088      	sub	sp, #32
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	e853 3f00 	ldrex	r3, [r3]
 800b1de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1e6:	61fb      	str	r3, [r7, #28]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	61bb      	str	r3, [r7, #24]
 800b1f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f4:	6979      	ldr	r1, [r7, #20]
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	e841 2300 	strex	r3, r2, [r1]
 800b1fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1e6      	bne.n	800b1d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2220      	movs	r2, #32
 800b208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7fe fd3a 	bl	8009c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b218:	bf00      	nop
 800b21a:	3720      	adds	r7, #32
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b228:	bf00      	nop
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d101      	bne.n	800b272 <HAL_UARTEx_DisableFifoMode+0x16>
 800b26e:	2302      	movs	r3, #2
 800b270:	e027      	b.n	800b2c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2224      	movs	r2, #36	; 0x24
 800b27e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f022 0201 	bic.w	r2, r2, #1
 800b298:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b2a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d101      	bne.n	800b2e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2e2:	2302      	movs	r3, #2
 800b2e4:	e02d      	b.n	800b342 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2224      	movs	r2, #36	; 0x24
 800b2f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f022 0201 	bic.w	r2, r2, #1
 800b30c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	430a      	orrs	r2, r1
 800b320:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f8a4 	bl	800b470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2220      	movs	r2, #32
 800b334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d101      	bne.n	800b362 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b35e:	2302      	movs	r3, #2
 800b360:	e02d      	b.n	800b3be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2224      	movs	r2, #36	; 0x24
 800b36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f022 0201 	bic.w	r2, r2, #1
 800b388:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	430a      	orrs	r2, r1
 800b39c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f866 	bl	800b470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2220      	movs	r2, #32
 800b3b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b08c      	sub	sp, #48	; 0x30
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	d142      	bne.n	800b464 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b3e4:	88fb      	ldrh	r3, [r7, #6]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d101      	bne.n	800b3ee <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e03b      	b.n	800b466 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b3fa:	88fb      	ldrh	r3, [r7, #6]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	68b9      	ldr	r1, [r7, #8]
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f7ff fc8b 	bl	800ad1c <UART_Start_Receive_DMA>
 800b406:	4603      	mov	r3, r0
 800b408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b40c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b410:	2b00      	cmp	r3, #0
 800b412:	d124      	bne.n	800b45e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d11d      	bne.n	800b458 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2210      	movs	r2, #16
 800b422:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	e853 3f00 	ldrex	r3, [r3]
 800b430:	617b      	str	r3, [r7, #20]
   return(result);
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f043 0310 	orr.w	r3, r3, #16
 800b438:	62bb      	str	r3, [r7, #40]	; 0x28
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
 800b444:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b446:	6a39      	ldr	r1, [r7, #32]
 800b448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b44a:	e841 2300 	strex	r3, r2, [r1]
 800b44e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1e6      	bne.n	800b424 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b456:	e002      	b.n	800b45e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b45e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b462:	e000      	b.n	800b466 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b464:	2302      	movs	r3, #2
  }
}
 800b466:	4618      	mov	r0, r3
 800b468:	3730      	adds	r7, #48	; 0x30
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d108      	bne.n	800b492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b490:	e031      	b.n	800b4f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b492:	2310      	movs	r3, #16
 800b494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b496:	2310      	movs	r3, #16
 800b498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	689b      	ldr	r3, [r3, #8]
 800b4a0:	0e5b      	lsrs	r3, r3, #25
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	f003 0307 	and.w	r3, r3, #7
 800b4a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	0f5b      	lsrs	r3, r3, #29
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	f003 0307 	and.w	r3, r3, #7
 800b4b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
 800b4bc:	7b3a      	ldrb	r2, [r7, #12]
 800b4be:	4911      	ldr	r1, [pc, #68]	; (800b504 <UARTEx_SetNbDataToProcess+0x94>)
 800b4c0:	5c8a      	ldrb	r2, [r1, r2]
 800b4c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4c6:	7b3a      	ldrb	r2, [r7, #12]
 800b4c8:	490f      	ldr	r1, [pc, #60]	; (800b508 <UARTEx_SetNbDataToProcess+0x98>)
 800b4ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	7b7a      	ldrb	r2, [r7, #13]
 800b4dc:	4909      	ldr	r1, [pc, #36]	; (800b504 <UARTEx_SetNbDataToProcess+0x94>)
 800b4de:	5c8a      	ldrb	r2, [r1, r2]
 800b4e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b4e4:	7b7a      	ldrb	r2, [r7, #13]
 800b4e6:	4908      	ldr	r1, [pc, #32]	; (800b508 <UARTEx_SetNbDataToProcess+0x98>)
 800b4e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	0800b5ac 	.word	0x0800b5ac
 800b508:	0800b5b4 	.word	0x0800b5b4

0800b50c <memset>:
 800b50c:	4402      	add	r2, r0
 800b50e:	4603      	mov	r3, r0
 800b510:	4293      	cmp	r3, r2
 800b512:	d100      	bne.n	800b516 <memset+0xa>
 800b514:	4770      	bx	lr
 800b516:	f803 1b01 	strb.w	r1, [r3], #1
 800b51a:	e7f9      	b.n	800b510 <memset+0x4>

0800b51c <__libc_init_array>:
 800b51c:	b570      	push	{r4, r5, r6, lr}
 800b51e:	4d0d      	ldr	r5, [pc, #52]	; (800b554 <__libc_init_array+0x38>)
 800b520:	4c0d      	ldr	r4, [pc, #52]	; (800b558 <__libc_init_array+0x3c>)
 800b522:	1b64      	subs	r4, r4, r5
 800b524:	10a4      	asrs	r4, r4, #2
 800b526:	2600      	movs	r6, #0
 800b528:	42a6      	cmp	r6, r4
 800b52a:	d109      	bne.n	800b540 <__libc_init_array+0x24>
 800b52c:	4d0b      	ldr	r5, [pc, #44]	; (800b55c <__libc_init_array+0x40>)
 800b52e:	4c0c      	ldr	r4, [pc, #48]	; (800b560 <__libc_init_array+0x44>)
 800b530:	f000 f818 	bl	800b564 <_init>
 800b534:	1b64      	subs	r4, r4, r5
 800b536:	10a4      	asrs	r4, r4, #2
 800b538:	2600      	movs	r6, #0
 800b53a:	42a6      	cmp	r6, r4
 800b53c:	d105      	bne.n	800b54a <__libc_init_array+0x2e>
 800b53e:	bd70      	pop	{r4, r5, r6, pc}
 800b540:	f855 3b04 	ldr.w	r3, [r5], #4
 800b544:	4798      	blx	r3
 800b546:	3601      	adds	r6, #1
 800b548:	e7ee      	b.n	800b528 <__libc_init_array+0xc>
 800b54a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b54e:	4798      	blx	r3
 800b550:	3601      	adds	r6, #1
 800b552:	e7f2      	b.n	800b53a <__libc_init_array+0x1e>
 800b554:	0800b5c4 	.word	0x0800b5c4
 800b558:	0800b5c4 	.word	0x0800b5c4
 800b55c:	0800b5c4 	.word	0x0800b5c4
 800b560:	0800b5c8 	.word	0x0800b5c8

0800b564 <_init>:
 800b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b566:	bf00      	nop
 800b568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b56a:	bc08      	pop	{r3}
 800b56c:	469e      	mov	lr, r3
 800b56e:	4770      	bx	lr

0800b570 <_fini>:
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b572:	bf00      	nop
 800b574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b576:	bc08      	pop	{r3}
 800b578:	469e      	mov	lr, r3
 800b57a:	4770      	bx	lr
