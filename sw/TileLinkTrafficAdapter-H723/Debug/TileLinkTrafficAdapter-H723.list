
TileLinkTrafficAdapter-H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b258  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b564  0800b564  0001b564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b570  0800b570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800b574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004f4  24000010  0800b584  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000504  0800b584  00020504  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016e57  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000295f  00000000  00000000  00036ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001120  00000000  00000000  00039838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d6b  00000000  00000000  0003a958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003398b  00000000  00000000  0003b6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017f5f  00000000  00000000  0006f04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014cfcb  00000000  00000000  00086fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004894  00000000  00000000  001d3f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  001d880c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b50c 	.word	0x0800b50c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800b50c 	.word	0x0800b50c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_TIM_IC_CaptureCallback>:

TileLinkController tl;

char str[128];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  TL_update(&tl);
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <HAL_TIM_IC_CaptureCallback+0x18>)
 8000612:	f000 fe0b 	bl	800122c <TL_update>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2400002c 	.word	0x2400002c

08000624 <HAL_UARTEx_RxEventCallback>:
uint8_t serial_rx_buffer[SERIAL_BUFFER_SIZE];
uint8_t serial_tx_buffer[SERIAL_BUFFER_SIZE];

uint8_t frame_pending = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
  if (huart == &huart3) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <HAL_UARTEx_RxEventCallback+0x88>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d12f      	bne.n	8000698 <HAL_UARTEx_RxEventCallback+0x74>

    tl.tx_frame.chanid  = *(serial_rx_buffer);
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800063e:	701a      	strb	r2, [r3, #0]
    tl.tx_frame.opcode  = (*(serial_rx_buffer + 1)) & 0b111;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000642:	785b      	ldrb	r3, [r3, #1]
 8000644:	f003 0307 	and.w	r3, r3, #7
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800064c:	705a      	strb	r2, [r3, #1]
    tl.tx_frame.param   = (*(serial_rx_buffer + 1)) >> 4;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	091b      	lsrs	r3, r3, #4
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000658:	709a      	strb	r2, [r3, #2]
    tl.tx_frame.size    = *(serial_rx_buffer + 2);
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 800065c:	789a      	ldrb	r2, [r3, #2]
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000660:	70da      	strb	r2, [r3, #3]
    tl.tx_frame.source  = 0;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	711a      	strb	r2, [r3, #4]
    tl.tx_frame.address = *(uint32_t *)(serial_rx_buffer + 4);
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800066e:	6093      	str	r3, [r2, #8]
    tl.tx_frame.data    = *(uint32_t *)(serial_rx_buffer + 8);
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000676:	60d3      	str	r3, [r2, #12]
    tl.tx_frame.corrupt = (*(serial_rx_buffer + 1) >> 7) & 0b1;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	09db      	lsrs	r3, r3, #7
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000682:	741a      	strb	r2, [r3, #16]
    tl.tx_frame.mask    = *(serial_rx_buffer + 3);
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000686:	78da      	ldrb	r2, [r3, #3]
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800068a:	745a      	strb	r2, [r3, #17]
    tl.tx_frame.last    = 1;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x90>)
 800068e:	2201      	movs	r2, #1
 8000690:	749a      	strb	r2, [r3, #18]

    frame_pending = 1;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x94>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 20);
 8000698:	2214      	movs	r2, #20
 800069a:	4905      	ldr	r1, [pc, #20]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x8c>)
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <HAL_UARTEx_RxEventCallback+0x88>)
 800069e:	f00a fe66 	bl	800b36e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2400037c 	.word	0x2400037c
 80006b0:	24000260 	.word	0x24000260
 80006b4:	2400002c 	.word	0x2400002c
 80006b8:	240002e0 	.word	0x240002e0

080006bc <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006c0:	2100      	movs	r1, #0
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <APP_init+0x24>)
 80006c4:	f007 f88c 	bl	80077e0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80006c8:	2100      	movs	r1, #0
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <APP_init+0x28>)
 80006cc:	f007 f9fc 	bl	8007ac8 <HAL_TIM_IC_Start_IT>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 20);
 80006d0:	2214      	movs	r2, #20
 80006d2:	4905      	ldr	r1, [pc, #20]	; (80006e8 <APP_init+0x2c>)
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <APP_init+0x30>)
 80006d6:	f00a fe4a 	bl	800b36e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	240002e4 	.word	0x240002e4
 80006e4:	24000330 	.word	0x24000330
 80006e8:	24000260 	.word	0x24000260
 80006ec:	2400037c 	.word	0x2400037c

080006f0 <APP_main>:


void APP_main() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  if (frame_pending) {
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <APP_main+0x98>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d043      	beq.n	8000784 <APP_main+0x94>
    TL_transmit(&tl);
 80006fc:	4823      	ldr	r0, [pc, #140]	; (800078c <APP_main+0x9c>)
 80006fe:	f001 f853 	bl	80017a8 <TL_transmit>
    while (!tl.rx_finished) {}
 8000702:	bf00      	nop
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <APP_main+0x9c>)
 8000706:	f8b3 3230 	ldrh.w	r3, [r3, #560]	; 0x230
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0fa      	beq.n	8000704 <APP_main+0x14>
    TL_deserialize(&tl.rx_frame);
 800070e:	4820      	ldr	r0, [pc, #128]	; (8000790 <APP_main+0xa0>)
 8000710:	f000 ff12 	bl	8001538 <TL_deserialize>
    frame_pending = 0;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <APP_main+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

    *(serial_tx_buffer) = tl.rx_frame.chanid;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <APP_main+0x9c>)
 800071c:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <APP_main+0xa4>)
 8000722:	701a      	strb	r2, [r3, #0]
    *(serial_tx_buffer + 1) = (tl.rx_frame.corrupt << 7) | (tl.rx_frame.param << 4) | tl.rx_frame.opcode;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <APP_main+0x9c>)
 8000726:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800072a:	01db      	lsls	r3, r3, #7
 800072c:	b25a      	sxtb	r2, r3
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <APP_main+0x9c>)
 8000730:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	b25b      	sxtb	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b25a      	sxtb	r2, r3
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <APP_main+0x9c>)
 800073e:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8000742:	b25b      	sxtb	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b25b      	sxtb	r3, r3
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <APP_main+0xa4>)
 800074c:	705a      	strb	r2, [r3, #1]
    *(serial_tx_buffer + 2) = tl.rx_frame.size;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <APP_main+0x9c>)
 8000750:	f893 2117 	ldrb.w	r2, [r3, #279]	; 0x117
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <APP_main+0xa4>)
 8000756:	709a      	strb	r2, [r3, #2]
    *(serial_tx_buffer + 3) = tl.rx_frame.mask;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <APP_main+0x9c>)
 800075a:	f893 2125 	ldrb.w	r2, [r3, #293]	; 0x125
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <APP_main+0xa4>)
 8000760:	70da      	strb	r2, [r3, #3]
    *(uint32_t *)(serial_tx_buffer + 4) = tl.rx_frame.address;
 8000762:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <APP_main+0xa8>)
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <APP_main+0x9c>)
 8000766:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800076a:	6013      	str	r3, [r2, #0]
    *(uint32_t *)(serial_tx_buffer + 8) = tl.rx_frame.data;
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <APP_main+0xac>)
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <APP_main+0x9c>)
 8000770:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000774:	6013      	str	r3, [r2, #0]

    HAL_UART_Transmit(&huart3, serial_tx_buffer, 12, 1000);
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	220c      	movs	r2, #12
 800077c:	4905      	ldr	r1, [pc, #20]	; (8000794 <APP_main+0xa4>)
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <APP_main+0xb0>)
 8000780:	f008 fe10 	bl	80093a4 <HAL_UART_Transmit>
  }
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	240002e0 	.word	0x240002e0
 800078c:	2400002c 	.word	0x2400002c
 8000790:	24000140 	.word	0x24000140
 8000794:	240002a0 	.word	0x240002a0
 8000798:	240002a4 	.word	0x240002a4
 800079c:	240002a8 	.word	0x240002a8
 80007a0:	2400037c 	.word	0x2400037c

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f001 f84c 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f810 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 f9f2 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b4:	f000 f9c8 	bl	8000b48 <MX_DMA_Init>
  MX_TIM4_Init();
 80007b8:	f000 f924 	bl	8000a04 <MX_TIM4_Init>
  MX_TIM1_Init();
 80007bc:	f000 f876 	bl	80008ac <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80007c0:	f000 f974 	bl	8000aac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 80007c4:	f7ff ff7a 	bl	80006bc <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	APP_main();
 80007c8:	f7ff ff92 	bl	80006f0 <APP_main>
 80007cc:	e7fc      	b.n	80007c8 <main+0x24>
	...

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09c      	sub	sp, #112	; 0x70
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	224c      	movs	r2, #76	; 0x4c
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f00a fe68 	bl	800b4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2220      	movs	r2, #32
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f00a fe62 	bl	800b4b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007f0:	2002      	movs	r0, #2
 80007f2:	f004 f9db 	bl	8004bac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <SystemClock_Config+0xd8>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <SystemClock_Config+0xd8>)
 8000800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <SystemClock_Config+0xd8>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000812:	bf00      	nop
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <SystemClock_Config+0xd8>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000820:	d1f8      	bne.n	8000814 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000822:	2302      	movs	r3, #2
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000826:	2301      	movs	r3, #1
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800082a:	2340      	movs	r3, #64	; 0x40
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000832:	2300      	movs	r3, #0
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000836:	2304      	movs	r3, #4
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 800083a:	2314      	movs	r3, #20
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084a:	230c      	movs	r3, #12
 800084c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800084e:	2300      	movs	r3, #0
 8000850:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4618      	mov	r0, r3
 800085c:	f004 f9e0 	bl	8004c20 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000866:	f000 fa71 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	233f      	movs	r3, #63	; 0x3f
 800086c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000876:	2308      	movs	r3, #8
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2102      	movs	r1, #2
 8000890:	4618      	mov	r0, r3
 8000892:	f004 fd9f 	bl	80053d4 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800089c:	f000 fa56 	bl	8000d4c <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3770      	adds	r7, #112	; 0x70
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	58024800 	.word	0x58024800

080008ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	; 0x70
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
 80008dc:	615a      	str	r2, [r3, #20]
 80008de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2234      	movs	r2, #52	; 0x34
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00a fde4 	bl	800b4b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ec:	4b43      	ldr	r3, [pc, #268]	; (80009fc <MX_TIM1_Init+0x150>)
 80008ee:	4a44      	ldr	r2, [pc, #272]	; (8000a00 <MX_TIM1_Init+0x154>)
 80008f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008f2:	4b42      	ldr	r3, [pc, #264]	; (80009fc <MX_TIM1_Init+0x150>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b40      	ldr	r3, [pc, #256]	; (80009fc <MX_TIM1_Init+0x150>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008fe:	4b3f      	ldr	r3, [pc, #252]	; (80009fc <MX_TIM1_Init+0x150>)
 8000900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000904:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000906:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <MX_TIM1_Init+0x150>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800090c:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <MX_TIM1_Init+0x150>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <MX_TIM1_Init+0x150>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000918:	4838      	ldr	r0, [pc, #224]	; (80009fc <MX_TIM1_Init+0x150>)
 800091a:	f006 fea9 	bl	8007670 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 fa12 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800092e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000932:	4619      	mov	r1, r3
 8000934:	4831      	ldr	r0, [pc, #196]	; (80009fc <MX_TIM1_Init+0x150>)
 8000936:	f007 fcf5 	bl	8008324 <HAL_TIM_ConfigClockSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000940:	f000 fa04 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000944:	482d      	ldr	r0, [pc, #180]	; (80009fc <MX_TIM1_Init+0x150>)
 8000946:	f006 feea 	bl	800771e <HAL_TIM_PWM_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000950:	f000 f9fc 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000960:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000964:	4619      	mov	r1, r3
 8000966:	4825      	ldr	r0, [pc, #148]	; (80009fc <MX_TIM1_Init+0x150>)
 8000968:	f008 fb72 	bl	8009050 <HAL_TIMEx_MasterConfigSynchronization>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000972:	f000 f9eb 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000976:	2360      	movs	r3, #96	; 0x60
 8000978:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800097e:	2300      	movs	r3, #0
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000982:	2300      	movs	r3, #0
 8000984:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000996:	2200      	movs	r2, #0
 8000998:	4619      	mov	r1, r3
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <MX_TIM1_Init+0x150>)
 800099c:	f007 fbae 	bl	80080fc <HAL_TIM_PWM_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009a6:	f000 f9d1 	bl	8000d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <MX_TIM1_Init+0x150>)
 80009e0:	f008 fbd2 	bl	8009188 <HAL_TIMEx_ConfigBreakDeadTime>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80009ea:	f000 f9af 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ee:	4803      	ldr	r0, [pc, #12]	; (80009fc <MX_TIM1_Init+0x150>)
 80009f0:	f000 fa40 	bl	8000e74 <HAL_TIM_MspPostInit>

}
 80009f4:	bf00      	nop
 80009f6:	3770      	adds	r7, #112	; 0x70
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	240002e4 	.word	0x240002e4
 8000a00:	40010000 	.word	0x40010000

08000a04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_TIM4_Init+0xa0>)
 8000a24:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <MX_TIM4_Init+0xa4>)
 8000a26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_TIM4_Init+0xa0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_TIM4_Init+0xa0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_TIM4_Init+0xa0>)
 8000a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_TIM4_Init+0xa0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM4_Init+0xa0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000a48:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <MX_TIM4_Init+0xa0>)
 8000a4a:	f006 ffe5 	bl	8007a18 <HAL_TIM_IC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000a54:	f000 f97a 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <MX_TIM4_Init+0xa0>)
 8000a68:	f008 faf2 	bl	8009050 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000a72:	f000 f96b 	bl	8000d4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_TIM4_Init+0xa0>)
 8000a8e:	f007 fa98 	bl	8007fc2 <HAL_TIM_IC_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000a98:	f000 f958 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000330 	.word	0x24000330
 8000aa8:	40000800 	.word	0x40000800

08000aac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_USART3_UART_Init+0x94>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ab8:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <MX_USART3_UART_Init+0x98>)
 8000aba:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ad0:	220c      	movs	r2, #12
 8000ad2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000af4:	f008 fc06 	bl	8009304 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000afe:	f000 f925 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000b06:	f00a fbb6 	bl	800b276 <HAL_UARTEx_SetTxFifoThreshold>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000b10:	f000 f91c 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000b18:	f00a fbeb 	bl	800b2f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000b22:	f000 f913 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USART3_UART_Init+0x90>)
 8000b28:	f00a fb6c 	bl	800b204 <HAL_UARTEx_DisableFifoMode>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000b32:	f000 f90b 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2400037c 	.word	0x2400037c
 8000b40:	40004800 	.word	0x40004800
 8000b44:	001e8480 	.word	0x001e8480

08000b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_DMA_Init+0x4c>)
 8000b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b54:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <MX_DMA_Init+0x4c>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <MX_DMA_Init+0x4c>)
 8000b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2010      	movs	r0, #16
 8000b72:	f000 ffd4 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b76:	2010      	movs	r0, #16
 8000b78:	f000 ffeb 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2011      	movs	r0, #17
 8000b82:	f000 ffcc 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b86:	2011      	movs	r0, #17
 8000b88:	f000 ffe3 	bl	8001b52 <HAL_NVIC_EnableIRQ>

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	58024400 	.word	0x58024400

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b62      	ldr	r3, [pc, #392]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a60      	ldr	r2, [pc, #384]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bcc:	4b5a      	ldr	r3, [pc, #360]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a59      	ldr	r2, [pc, #356]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b56      	ldr	r3, [pc, #344]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0320 	and.w	r3, r3, #32
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b53      	ldr	r3, [pc, #332]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a51      	ldr	r2, [pc, #324]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b4f      	ldr	r3, [pc, #316]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b4b      	ldr	r3, [pc, #300]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	4a4a      	ldr	r2, [pc, #296]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c18:	4b47      	ldr	r3, [pc, #284]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c26:	4b44      	ldr	r3, [pc, #272]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a42      	ldr	r2, [pc, #264]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b40      	ldr	r3, [pc, #256]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c44:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	4a3b      	ldr	r2, [pc, #236]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c54:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <MX_GPIO_Init+0x1a0>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c68:	4834      	ldr	r0, [pc, #208]	; (8000d3c <MX_GPIO_Init+0x1a4>)
 8000c6a:	f003 ff85 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2104      	movs	r1, #4
 8000c72:	4833      	ldr	r0, [pc, #204]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000c74:	f003 ff80 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	4831      	ldr	r0, [pc, #196]	; (8000d44 <MX_GPIO_Init+0x1ac>)
 8000c7e:	f003 ff7b 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	4830      	ldr	r0, [pc, #192]	; (8000d48 <MX_GPIO_Init+0x1b0>)
 8000c88:	f003 ff76 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TL_OUT_VALID_Pin TL_OUT_DATA_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TL_OUT_VALID_Pin|TL_OUT_DATA_Pin;
 8000c8c:	f242 0309 	movw	r3, #8201	; 0x2009
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4827      	ldr	r0, [pc, #156]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000ca2:	f003 fda9 	bl	80047f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_DATA_Pin */
  GPIO_InitStruct.Pin = TL_IN_DATA_Pin;
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_DATA_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <MX_GPIO_Init+0x1a4>)
 8000cc0:	f003 fd9a 	bl	80047f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_VALID_Pin */
  GPIO_InitStruct.Pin = TL_IN_VALID_Pin;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_VALID_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4819      	ldr	r0, [pc, #100]	; (8000d40 <MX_GPIO_Init+0x1a8>)
 8000cdc:	f003 fd8c 	bl	80047f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_OUT_READY_Pin */
  GPIO_InitStruct.Pin = TL_OUT_READY_Pin;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_OUT_READY_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4813      	ldr	r0, [pc, #76]	; (8000d44 <MX_GPIO_Init+0x1ac>)
 8000cf8:	f003 fd7e 	bl	80047f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_GPIO_Init+0x1b0>)
 8000d14:	f003 fd70 	bl	80047f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_READY_Pin */
  GPIO_InitStruct.Pin = TL_IN_READY_Pin;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_IN_READY_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <MX_GPIO_Init+0x1b0>)
 8000d2c:	f003 fd64 	bl	80047f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d30:	bf00      	nop
 8000d32:	3730      	adds	r7, #48	; 0x30
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58021400 	.word	0x58021400
 8000d40:	58020800 	.word	0x58020800
 8000d44:	58020000 	.word	0x58020000
 8000d48:	58020400 	.word	0x58020400

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_MspInit+0x30>)
 8000d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d64:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x30>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x30>)
 8000d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d10e      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_TIM_Base_MspInit+0x40>)
 8000da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_TIM_Base_MspInit+0x40>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_TIM_Base_MspInit+0x40>)
 8000db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	58024400 	.word	0x58024400

08000dd0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <HAL_TIM_IC_MspInit+0x98>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d136      	bne.n	8000e60 <HAL_TIM_IC_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_TIM_IC_MspInit+0x9c>)
 8000df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df8:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <HAL_TIM_IC_MspInit+0x9c>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <HAL_TIM_IC_MspInit+0x9c>)
 8000e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_TIM_IC_MspInit+0x9c>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <HAL_TIM_IC_MspInit+0x9c>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_TIM_IC_MspInit+0x9c>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e40:	2302      	movs	r3, #2
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <HAL_TIM_IC_MspInit+0xa0>)
 8000e4c:	f003 fcd4 	bl	80047f8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	201e      	movs	r0, #30
 8000e56:	f000 fe62 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e5a:	201e      	movs	r0, #30
 8000e5c:	f000 fe79 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40000800 	.word	0x40000800
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58020c00 	.word	0x58020c00

08000e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_TIM_MspPostInit+0x6c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d11f      	bne.n	8000ed6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <HAL_TIM_MspPostInit+0x70>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <HAL_TIM_MspPostInit+0x70>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_TIM_MspPostInit+0x70>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <HAL_TIM_MspPostInit+0x74>)
 8000ed2:	f003 fc91 	bl	80047f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	58021000 	.word	0x58021000

08000eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0b8      	sub	sp, #224	; 0xe0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	22b8      	movs	r2, #184	; 0xb8
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f00a fad1 	bl	800b4b4 <memset>
  if(huart->Instance==USART3)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a59      	ldr	r2, [pc, #356]	; (800107c <HAL_UART_MspInit+0x190>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	f040 80aa 	bne.w	8001072 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f1e:	f04f 0202 	mov.w	r2, #2
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 fdd9 	bl	8005aec <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000f40:	f7ff ff04 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f44:	4b4e      	ldr	r3, [pc, #312]	; (8001080 <HAL_UART_MspInit+0x194>)
 8000f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f4a:	4a4d      	ldr	r2, [pc, #308]	; (8001080 <HAL_UART_MspInit+0x194>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f54:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <HAL_UART_MspInit+0x194>)
 8000f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	4b47      	ldr	r3, [pc, #284]	; (8001080 <HAL_UART_MspInit+0x194>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a45      	ldr	r2, [pc, #276]	; (8001080 <HAL_UART_MspInit+0x194>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b43      	ldr	r3, [pc, #268]	; (8001080 <HAL_UART_MspInit+0x194>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4837      	ldr	r0, [pc, #220]	; (8001084 <HAL_UART_MspInit+0x198>)
 8000fa8:	f003 fc26 	bl	80047f8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fae:	4a37      	ldr	r2, [pc, #220]	; (800108c <HAL_UART_MspInit+0x1a0>)
 8000fb0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fb4:	222d      	movs	r2, #45	; 0x2d
 8000fb6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000fea:	4827      	ldr	r0, [pc, #156]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000fec:	f000 fdcc 	bl	8001b88 <HAL_DMA_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000ff6:	f7ff fea9 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a22      	ldr	r2, [pc, #136]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8000ffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001002:	4a21      	ldr	r2, [pc, #132]	; (8001088 <HAL_UART_MspInit+0x19c>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream6;
 8001008:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 800100a:	4a22      	ldr	r2, [pc, #136]	; (8001094 <HAL_UART_MspInit+0x1a8>)
 800100c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 8001010:	222e      	movs	r2, #46	; 0x2e
 8001012:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 8001016:	2240      	movs	r2, #64	; 0x40
 8001018:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 8001022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001026:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 8001048:	f000 fd9e 	bl	8001b88 <HAL_DMA_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001052:	f7ff fe7b 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 800105a:	67da      	str	r2, [r3, #124]	; 0x7c
 800105c:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <HAL_UART_MspInit+0x1a4>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2027      	movs	r0, #39	; 0x27
 8001068:	f000 fd59 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800106c:	2027      	movs	r0, #39	; 0x27
 800106e:	f000 fd70 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001072:	bf00      	nop
 8001074:	37e0      	adds	r7, #224	; 0xe0
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40004800 	.word	0x40004800
 8001080:	58024400 	.word	0x58024400
 8001084:	58020c00 	.word	0x58020c00
 8001088:	24000410 	.word	0x24000410
 800108c:	40020088 	.word	0x40020088
 8001090:	24000488 	.word	0x24000488
 8001094:	400200a0 	.word	0x400200a0

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f000 fc20 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <DMA1_Stream5_IRQHandler+0x10>)
 80010f2:	f002 f86f 	bl	80031d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	24000410 	.word	0x24000410

08001100 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <DMA1_Stream6_IRQHandler+0x10>)
 8001106:	f002 f865 	bl	80031d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	24000488 	.word	0x24000488

08001114 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM4_IRQHandler+0x10>)
 800111a:	f006 fe33 	bl	8007d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	24000330 	.word	0x24000330

08001128 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <USART3_IRQHandler+0x10>)
 800112e:	f008 f9c7 	bl	80094c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2400037c 	.word	0x2400037c

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <SystemInit+0xd0>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a31      	ldr	r2, [pc, #196]	; (800120c <SystemInit+0xd0>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <SystemInit+0xd4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	2b06      	cmp	r3, #6
 800115a:	d807      	bhi.n	800116c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <SystemInit+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 030f 	bic.w	r3, r3, #15
 8001164:	4a2a      	ldr	r2, [pc, #168]	; (8001210 <SystemInit+0xd4>)
 8001166:	f043 0307 	orr.w	r3, r3, #7
 800116a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <SystemInit+0xd8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a28      	ldr	r2, [pc, #160]	; (8001214 <SystemInit+0xd8>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <SystemInit+0xd8>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <SystemInit+0xd8>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4924      	ldr	r1, [pc, #144]	; (8001214 <SystemInit+0xd8>)
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <SystemInit+0xdc>)
 8001186:	4013      	ands	r3, r2
 8001188:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <SystemInit+0xd4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <SystemInit+0xd4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 030f 	bic.w	r3, r3, #15
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <SystemInit+0xd4>)
 80011a0:	f043 0307 	orr.w	r3, r3, #7
 80011a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <SystemInit+0xd8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <SystemInit+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <SystemInit+0xd8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <SystemInit+0xd8>)
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <SystemInit+0xe0>)
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <SystemInit+0xd8>)
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <SystemInit+0xe4>)
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <SystemInit+0xd8>)
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <SystemInit+0xe8>)
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <SystemInit+0xd8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <SystemInit+0xd8>)
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <SystemInit+0xe8>)
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <SystemInit+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <SystemInit+0xd8>)
 80011de:	4a11      	ldr	r2, [pc, #68]	; (8001224 <SystemInit+0xe8>)
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <SystemInit+0xd8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <SystemInit+0xd8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <SystemInit+0xd8>)
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <SystemInit+0xd8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <SystemInit+0xec>)
 80011fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001200:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	52002000 	.word	0x52002000
 8001214:	58024400 	.word	0x58024400
 8001218:	eaf6ed7f 	.word	0xeaf6ed7f
 800121c:	02020200 	.word	0x02020200
 8001220:	01ff0000 	.word	0x01ff0000
 8001224:	01010280 	.word	0x01010280
 8001228:	52004000 	.word	0x52004000

0800122c <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f8b3 322c 	ldrh.w	r3, [r3, #556]	; 0x22c
 800123a:	2b00      	cmp	r3, #0
 800123c:	d036      	beq.n	80012ac <TL_update+0x80>
    HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8b3 3228 	ldrh.w	r3, [r3, #552]	; 0x228
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	7cdb      	ldrb	r3, [r3, #19]
 800124c:	461a      	mov	r2, r3
 800124e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001252:	4835      	ldr	r0, [pc, #212]	; (8001328 <TL_update+0xfc>)
 8001254:	f003 fc90 	bl	8004b78 <HAL_GPIO_WritePin>

    if (tl->tx_bit_offset == 0) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f8b3 3228 	ldrh.w	r3, [r3, #552]	; 0x228
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <TL_update+0x4a>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 1);
 8001262:	2201      	movs	r2, #1
 8001264:	2108      	movs	r1, #8
 8001266:	4831      	ldr	r0, [pc, #196]	; (800132c <TL_update+0x100>)
 8001268:	f003 fc86 	bl	8004b78 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	2104      	movs	r1, #4
 8001270:	482f      	ldr	r0, [pc, #188]	; (8001330 <TL_update+0x104>)
 8001272:	f003 fc81 	bl	8004b78 <HAL_GPIO_WritePin>
    }


    if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f8b3 3228 	ldrh.w	r3, [r3, #552]	; 0x228
 800127c:	2b5b      	cmp	r3, #91	; 0x5b
 800127e:	d10c      	bne.n	800129a <TL_update+0x6e>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2104      	movs	r1, #4
 8001284:	482a      	ldr	r0, [pc, #168]	; (8001330 <TL_update+0x104>)
 8001286:	f003 fc77 	bl	8004b78 <HAL_GPIO_WritePin>
      tl->tx_pending = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
      tl->tx_finished = 1;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
    }

    tl->tx_bit_offset += 1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8b3 3228 	ldrh.w	r3, [r3, #552]	; 0x228
 80012a0:	3301      	adds	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
        tl->rx_finished = 1;
      }
    }
  }
}
 80012aa:	e038      	b.n	800131e <TL_update+0xf2>
  else if (tl->rx_pending) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8b3 3232 	ldrh.w	r3, [r3, #562]	; 0x232
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d033      	beq.n	800131e <TL_update+0xf2>
    if (tl->rx_finished) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8b3 3230 	ldrh.w	r3, [r3, #560]	; 0x230
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <TL_update+0xa6>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2108      	movs	r1, #8
 80012c4:	4819      	ldr	r0, [pc, #100]	; (800132c <TL_update+0x100>)
 80012c6:	f003 fc57 	bl	8004b78 <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
    if (HAL_GPIO_ReadPin(TL_OUT_VALID_GPIO_Port, TL_OUT_VALID_Pin) == GPIO_PIN_SET) {
 80012d2:	2101      	movs	r1, #1
 80012d4:	4816      	ldr	r0, [pc, #88]	; (8001330 <TL_update+0x104>)
 80012d6:	f003 fc37 	bl	8004b48 <HAL_GPIO_ReadPin>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d11e      	bne.n	800131e <TL_update+0xf2>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_OUT_DATA_GPIO_Port, TL_OUT_DATA_Pin);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8b3 322e 	ldrh.w	r3, [r3, #558]	; 0x22e
 80012e6:	461c      	mov	r4, r3
 80012e8:	2108      	movs	r1, #8
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <TL_update+0x104>)
 80012ec:	f003 fc2c 	bl	8004b48 <HAL_GPIO_ReadPin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4423      	add	r3, r4
 80012f8:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
      tl->rx_bit_offset += 1;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8b3 322e 	ldrh.w	r3, [r3, #558]	; 0x22e
 8001302:	3301      	adds	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f8b3 322e 	ldrh.w	r3, [r3, #558]	; 0x22e
 8001312:	2b5b      	cmp	r3, #91	; 0x5b
 8001314:	d103      	bne.n	800131e <TL_update+0xf2>
        tl->rx_finished = 1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	bf00      	nop
 8001328:	58021400 	.word	0x58021400
 800132c:	58020000 	.word	0x58020000
 8001330:	58020800 	.word	0x58020800

08001334 <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 800133c:	2300      	movs	r3, #0
 800133e:	83fb      	strh	r3, [r7, #30]
 8001340:	e011      	b.n	8001366 <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7c9b      	ldrb	r3, [r3, #18]
 8001346:	461a      	mov	r2, r3
 8001348:	8bfb      	ldrh	r3, [r7, #30]
 800134a:	fa42 f303 	asr.w	r3, r2, r3
 800134e:	b2da      	uxtb	r2, r3
 8001350:	8bfb      	ldrh	r3, [r7, #30]
 8001352:	f002 0201 	and.w	r2, r2, #1
 8001356:	b2d1      	uxtb	r1, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	460a      	mov	r2, r1
 800135e:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001360:	8bfb      	ldrh	r3, [r7, #30]
 8001362:	3301      	adds	r3, #1
 8001364:	83fb      	strh	r3, [r7, #30]
 8001366:	8bfb      	ldrh	r3, [r7, #30]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0ea      	beq.n	8001342 <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800136c:	2300      	movs	r3, #0
 800136e:	83bb      	strh	r3, [r7, #28]
 8001370:	e012      	b.n	8001398 <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->mask >> i) & 0b1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7c5b      	ldrb	r3, [r3, #17]
 8001376:	461a      	mov	r2, r3
 8001378:	8bbb      	ldrh	r3, [r7, #28]
 800137a:	fa42 f303 	asr.w	r3, r2, r3
 800137e:	b2da      	uxtb	r2, r3
 8001380:	8bbb      	ldrh	r3, [r7, #28]
 8001382:	3301      	adds	r3, #1
 8001384:	f002 0201 	and.w	r2, r2, #1
 8001388:	b2d1      	uxtb	r1, r2
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	460a      	mov	r2, r1
 8001390:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001392:	8bbb      	ldrh	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	83bb      	strh	r3, [r7, #28]
 8001398:	8bbb      	ldrh	r3, [r7, #28]
 800139a:	2b07      	cmp	r3, #7
 800139c:	d9e9      	bls.n	8001372 <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800139e:	2300      	movs	r3, #0
 80013a0:	837b      	strh	r3, [r7, #26]
 80013a2:	e012      	b.n	80013ca <TL_serialize+0x96>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->corrupt >> i) & 0b1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7c1b      	ldrb	r3, [r3, #16]
 80013a8:	461a      	mov	r2, r3
 80013aa:	8b7b      	ldrh	r3, [r7, #26]
 80013ac:	fa42 f303 	asr.w	r3, r2, r3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	8b7b      	ldrh	r3, [r7, #26]
 80013b4:	3309      	adds	r3, #9
 80013b6:	f002 0201 	and.w	r2, r2, #1
 80013ba:	b2d1      	uxtb	r1, r2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	460a      	mov	r2, r1
 80013c2:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80013c4:	8b7b      	ldrh	r3, [r7, #26]
 80013c6:	3301      	adds	r3, #1
 80013c8:	837b      	strh	r3, [r7, #26]
 80013ca:	8b7b      	ldrh	r3, [r7, #26]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0e9      	beq.n	80013a4 <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	833b      	strh	r3, [r7, #24]
 80013d4:	e011      	b.n	80013fa <TL_serialize+0xc6>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	8b3b      	ldrh	r3, [r7, #24]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	8b3b      	ldrh	r3, [r7, #24]
 80013e4:	330a      	adds	r3, #10
 80013e6:	f002 0201 	and.w	r2, r2, #1
 80013ea:	b2d1      	uxtb	r1, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	460a      	mov	r2, r1
 80013f2:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80013f4:	8b3b      	ldrh	r3, [r7, #24]
 80013f6:	3301      	adds	r3, #1
 80013f8:	833b      	strh	r3, [r7, #24]
 80013fa:	8b3b      	ldrh	r3, [r7, #24]
 80013fc:	2b1f      	cmp	r3, #31
 80013fe:	d9ea      	bls.n	80013d6 <TL_serialize+0xa2>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001400:	2300      	movs	r3, #0
 8001402:	82fb      	strh	r3, [r7, #22]
 8001404:	e011      	b.n	800142a <TL_serialize+0xf6>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->address >> i) & 0b1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	8afb      	ldrh	r3, [r7, #22]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	b2da      	uxtb	r2, r3
 8001412:	8afb      	ldrh	r3, [r7, #22]
 8001414:	332a      	adds	r3, #42	; 0x2a
 8001416:	f002 0201 	and.w	r2, r2, #1
 800141a:	b2d1      	uxtb	r1, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	460a      	mov	r2, r1
 8001422:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001424:	8afb      	ldrh	r3, [r7, #22]
 8001426:	3301      	adds	r3, #1
 8001428:	82fb      	strh	r3, [r7, #22]
 800142a:	8afb      	ldrh	r3, [r7, #22]
 800142c:	2b1f      	cmp	r3, #31
 800142e:	d9ea      	bls.n	8001406 <TL_serialize+0xd2>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001430:	2300      	movs	r3, #0
 8001432:	82bb      	strh	r3, [r7, #20]
 8001434:	e012      	b.n	800145c <TL_serialize+0x128>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	461a      	mov	r2, r3
 800143c:	8abb      	ldrh	r3, [r7, #20]
 800143e:	fa42 f303 	asr.w	r3, r2, r3
 8001442:	b2da      	uxtb	r2, r3
 8001444:	8abb      	ldrh	r3, [r7, #20]
 8001446:	334a      	adds	r3, #74	; 0x4a
 8001448:	f002 0201 	and.w	r2, r2, #1
 800144c:	b2d1      	uxtb	r1, r2
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	460a      	mov	r2, r1
 8001454:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001456:	8abb      	ldrh	r3, [r7, #20]
 8001458:	3301      	adds	r3, #1
 800145a:	82bb      	strh	r3, [r7, #20]
 800145c:	8abb      	ldrh	r3, [r7, #20]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d9e9      	bls.n	8001436 <TL_serialize+0x102>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001462:	2300      	movs	r3, #0
 8001464:	827b      	strh	r3, [r7, #18]
 8001466:	e012      	b.n	800148e <TL_serialize+0x15a>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	78db      	ldrb	r3, [r3, #3]
 800146c:	461a      	mov	r2, r3
 800146e:	8a7b      	ldrh	r3, [r7, #18]
 8001470:	fa42 f303 	asr.w	r3, r2, r3
 8001474:	b2da      	uxtb	r2, r3
 8001476:	8a7b      	ldrh	r3, [r7, #18]
 8001478:	334e      	adds	r3, #78	; 0x4e
 800147a:	f002 0201 	and.w	r2, r2, #1
 800147e:	b2d1      	uxtb	r1, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	460a      	mov	r2, r1
 8001486:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001488:	8a7b      	ldrh	r3, [r7, #18]
 800148a:	3301      	adds	r3, #1
 800148c:	827b      	strh	r3, [r7, #18]
 800148e:	8a7b      	ldrh	r3, [r7, #18]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d9e9      	bls.n	8001468 <TL_serialize+0x134>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001494:	2300      	movs	r3, #0
 8001496:	823b      	strh	r3, [r7, #16]
 8001498:	e012      	b.n	80014c0 <TL_serialize+0x18c>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	789b      	ldrb	r3, [r3, #2]
 800149e:	461a      	mov	r2, r3
 80014a0:	8a3b      	ldrh	r3, [r7, #16]
 80014a2:	fa42 f303 	asr.w	r3, r2, r3
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	8a3b      	ldrh	r3, [r7, #16]
 80014aa:	3352      	adds	r3, #82	; 0x52
 80014ac:	f002 0201 	and.w	r2, r2, #1
 80014b0:	b2d1      	uxtb	r1, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	460a      	mov	r2, r1
 80014b8:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80014ba:	8a3b      	ldrh	r3, [r7, #16]
 80014bc:	3301      	adds	r3, #1
 80014be:	823b      	strh	r3, [r7, #16]
 80014c0:	8a3b      	ldrh	r3, [r7, #16]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d9e9      	bls.n	800149a <TL_serialize+0x166>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	81fb      	strh	r3, [r7, #14]
 80014ca:	e012      	b.n	80014f2 <TL_serialize+0x1be>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	461a      	mov	r2, r3
 80014d2:	89fb      	ldrh	r3, [r7, #14]
 80014d4:	fa42 f303 	asr.w	r3, r2, r3
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	3355      	adds	r3, #85	; 0x55
 80014de:	f002 0201 	and.w	r2, r2, #1
 80014e2:	b2d1      	uxtb	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	460a      	mov	r2, r1
 80014ea:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80014ec:	89fb      	ldrh	r3, [r7, #14]
 80014ee:	3301      	adds	r3, #1
 80014f0:	81fb      	strh	r3, [r7, #14]
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d9e9      	bls.n	80014cc <TL_serialize+0x198>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	81bb      	strh	r3, [r7, #12]
 80014fc:	e012      	b.n	8001524 <TL_serialize+0x1f0>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	89bb      	ldrh	r3, [r7, #12]
 8001506:	fa42 f303 	asr.w	r3, r2, r3
 800150a:	b2da      	uxtb	r2, r3
 800150c:	89bb      	ldrh	r3, [r7, #12]
 800150e:	3358      	adds	r3, #88	; 0x58
 8001510:	f002 0201 	and.w	r2, r2, #1
 8001514:	b2d1      	uxtb	r1, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	460a      	mov	r2, r1
 800151c:	74da      	strb	r2, [r3, #19]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800151e:	89bb      	ldrh	r3, [r7, #12]
 8001520:	3301      	adds	r3, #1
 8001522:	81bb      	strh	r3, [r7, #12]
 8001524:	89bb      	ldrh	r3, [r7, #12]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d9e9      	bls.n	80014fe <TL_serialize+0x1ca>
  }
}
 800152a:	bf00      	nop
 800152c:	bf00      	nop
 800152e:	3724      	adds	r7, #36	; 0x24
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  frame->chanid = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
  frame->opcode = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	705a      	strb	r2, [r3, #1]
  frame->param = 0;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	709a      	strb	r2, [r3, #2]
  frame->size = 0;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	70da      	strb	r2, [r3, #3]
  frame->source = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	711a      	strb	r2, [r3, #4]
  frame->address = 0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  frame->data = 0;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  frame->corrupt = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	741a      	strb	r2, [r3, #16]
  frame->mask = 0;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	745a      	strb	r2, [r3, #17]
  frame->last = 0;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	749a      	strb	r2, [r3, #18]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 800157c:	2300      	movs	r3, #0
 800157e:	83fb      	strh	r3, [r7, #30]
 8001580:	e014      	b.n	80015ac <TL_deserialize+0x74>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7c9b      	ldrb	r3, [r3, #18]
 8001586:	b25a      	sxtb	r2, r3
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	440b      	add	r3, r1
 800158e:	7cdb      	ldrb	r3, [r3, #19]
 8001590:	f003 0101 	and.w	r1, r3, #1
 8001594:	8bfb      	ldrh	r3, [r7, #30]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	b25b      	sxtb	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	749a      	strb	r2, [r3, #18]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80015a6:	8bfb      	ldrh	r3, [r7, #30]
 80015a8:	3301      	adds	r3, #1
 80015aa:	83fb      	strh	r3, [r7, #30]
 80015ac:	8bfb      	ldrh	r3, [r7, #30]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0e7      	beq.n	8001582 <TL_deserialize+0x4a>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	83bb      	strh	r3, [r7, #28]
 80015b6:	e015      	b.n	80015e4 <TL_deserialize+0xac>
    frame->mask |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7c5b      	ldrb	r3, [r3, #17]
 80015bc:	b25a      	sxtb	r2, r3
 80015be:	8bbb      	ldrh	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	440b      	add	r3, r1
 80015c6:	7cdb      	ldrb	r3, [r3, #19]
 80015c8:	f003 0101 	and.w	r1, r3, #1
 80015cc:	8bbb      	ldrh	r3, [r7, #28]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	745a      	strb	r2, [r3, #17]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80015de:	8bbb      	ldrh	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	83bb      	strh	r3, [r7, #28]
 80015e4:	8bbb      	ldrh	r3, [r7, #28]
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	d9e6      	bls.n	80015b8 <TL_deserialize+0x80>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	837b      	strh	r3, [r7, #26]
 80015ee:	e015      	b.n	800161c <TL_deserialize+0xe4>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7c1b      	ldrb	r3, [r3, #16]
 80015f4:	b25a      	sxtb	r2, r3
 80015f6:	8b7b      	ldrh	r3, [r7, #26]
 80015f8:	3309      	adds	r3, #9
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	440b      	add	r3, r1
 80015fe:	7cdb      	ldrb	r3, [r3, #19]
 8001600:	f003 0101 	and.w	r1, r3, #1
 8001604:	8b7b      	ldrh	r3, [r7, #26]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	b25b      	sxtb	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b25b      	sxtb	r3, r3
 8001610:	b2da      	uxtb	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	741a      	strb	r2, [r3, #16]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001616:	8b7b      	ldrh	r3, [r7, #26]
 8001618:	3301      	adds	r3, #1
 800161a:	837b      	strh	r3, [r7, #26]
 800161c:	8b7b      	ldrh	r3, [r7, #26]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0e6      	beq.n	80015f0 <TL_deserialize+0xb8>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001622:	2300      	movs	r3, #0
 8001624:	833b      	strh	r3, [r7, #24]
 8001626:	e011      	b.n	800164c <TL_deserialize+0x114>
    frame->data |= ((uint32_t)(frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	8b3b      	ldrh	r3, [r7, #24]
 800162e:	330a      	adds	r3, #10
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	440b      	add	r3, r1
 8001634:	7cdb      	ldrb	r3, [r3, #19]
 8001636:	f003 0101 	and.w	r1, r3, #1
 800163a:	8b3b      	ldrh	r3, [r7, #24]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60da      	str	r2, [r3, #12]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001646:	8b3b      	ldrh	r3, [r7, #24]
 8001648:	3301      	adds	r3, #1
 800164a:	833b      	strh	r3, [r7, #24]
 800164c:	8b3b      	ldrh	r3, [r7, #24]
 800164e:	2b1f      	cmp	r3, #31
 8001650:	d9ea      	bls.n	8001628 <TL_deserialize+0xf0>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001652:	2300      	movs	r3, #0
 8001654:	82fb      	strh	r3, [r7, #22]
 8001656:	e011      	b.n	800167c <TL_deserialize+0x144>
    frame->address |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	8afa      	ldrh	r2, [r7, #22]
 800165e:	322a      	adds	r2, #42	; 0x2a
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	440a      	add	r2, r1
 8001664:	7cd2      	ldrb	r2, [r2, #19]
 8001666:	f002 0101 	and.w	r1, r2, #1
 800166a:	8afa      	ldrh	r2, [r7, #22]
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001676:	8afb      	ldrh	r3, [r7, #22]
 8001678:	3301      	adds	r3, #1
 800167a:	82fb      	strh	r3, [r7, #22]
 800167c:	8afb      	ldrh	r3, [r7, #22]
 800167e:	2b1f      	cmp	r3, #31
 8001680:	d9ea      	bls.n	8001658 <TL_deserialize+0x120>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001682:	2300      	movs	r3, #0
 8001684:	82bb      	strh	r3, [r7, #20]
 8001686:	e015      	b.n	80016b4 <TL_deserialize+0x17c>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	791b      	ldrb	r3, [r3, #4]
 800168c:	b25a      	sxtb	r2, r3
 800168e:	8abb      	ldrh	r3, [r7, #20]
 8001690:	334a      	adds	r3, #74	; 0x4a
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	440b      	add	r3, r1
 8001696:	7cdb      	ldrb	r3, [r3, #19]
 8001698:	f003 0101 	and.w	r1, r3, #1
 800169c:	8abb      	ldrh	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80016ae:	8abb      	ldrh	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	82bb      	strh	r3, [r7, #20]
 80016b4:	8abb      	ldrh	r3, [r7, #20]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d9e6      	bls.n	8001688 <TL_deserialize+0x150>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	827b      	strh	r3, [r7, #18]
 80016be:	e015      	b.n	80016ec <TL_deserialize+0x1b4>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	78db      	ldrb	r3, [r3, #3]
 80016c4:	b25a      	sxtb	r2, r3
 80016c6:	8a7b      	ldrh	r3, [r7, #18]
 80016c8:	334e      	adds	r3, #78	; 0x4e
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	440b      	add	r3, r1
 80016ce:	7cdb      	ldrb	r3, [r3, #19]
 80016d0:	f003 0101 	and.w	r1, r3, #1
 80016d4:	8a7b      	ldrh	r3, [r7, #18]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80016e6:	8a7b      	ldrh	r3, [r7, #18]
 80016e8:	3301      	adds	r3, #1
 80016ea:	827b      	strh	r3, [r7, #18]
 80016ec:	8a7b      	ldrh	r3, [r7, #18]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d9e6      	bls.n	80016c0 <TL_deserialize+0x188>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80016f2:	2300      	movs	r3, #0
 80016f4:	823b      	strh	r3, [r7, #16]
 80016f6:	e015      	b.n	8001724 <TL_deserialize+0x1ec>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	789b      	ldrb	r3, [r3, #2]
 80016fc:	b25a      	sxtb	r2, r3
 80016fe:	8a3b      	ldrh	r3, [r7, #16]
 8001700:	3352      	adds	r3, #82	; 0x52
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	440b      	add	r3, r1
 8001706:	7cdb      	ldrb	r3, [r3, #19]
 8001708:	f003 0101 	and.w	r1, r3, #1
 800170c:	8a3b      	ldrh	r3, [r7, #16]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	b25b      	sxtb	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2da      	uxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800171e:	8a3b      	ldrh	r3, [r7, #16]
 8001720:	3301      	adds	r3, #1
 8001722:	823b      	strh	r3, [r7, #16]
 8001724:	8a3b      	ldrh	r3, [r7, #16]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d9e6      	bls.n	80016f8 <TL_deserialize+0x1c0>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800172a:	2300      	movs	r3, #0
 800172c:	81fb      	strh	r3, [r7, #14]
 800172e:	e015      	b.n	800175c <TL_deserialize+0x224>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	785b      	ldrb	r3, [r3, #1]
 8001734:	b25a      	sxtb	r2, r3
 8001736:	89fb      	ldrh	r3, [r7, #14]
 8001738:	3355      	adds	r3, #85	; 0x55
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	440b      	add	r3, r1
 800173e:	7cdb      	ldrb	r3, [r3, #19]
 8001740:	f003 0101 	and.w	r1, r3, #1
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	b25b      	sxtb	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b25b      	sxtb	r3, r3
 8001750:	b2da      	uxtb	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001756:	89fb      	ldrh	r3, [r7, #14]
 8001758:	3301      	adds	r3, #1
 800175a:	81fb      	strh	r3, [r7, #14]
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d9e6      	bls.n	8001730 <TL_deserialize+0x1f8>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001762:	2300      	movs	r3, #0
 8001764:	81bb      	strh	r3, [r7, #12]
 8001766:	e015      	b.n	8001794 <TL_deserialize+0x25c>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b25a      	sxtb	r2, r3
 800176e:	89bb      	ldrh	r3, [r7, #12]
 8001770:	3358      	adds	r3, #88	; 0x58
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	440b      	add	r3, r1
 8001776:	7cdb      	ldrb	r3, [r3, #19]
 8001778:	f003 0101 	and.w	r1, r3, #1
 800177c:	89bb      	ldrh	r3, [r7, #12]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	b25b      	sxtb	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b25b      	sxtb	r3, r3
 8001788:	b2da      	uxtb	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800178e:	89bb      	ldrh	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	81bb      	strh	r3, [r7, #12]
 8001794:	89bb      	ldrh	r3, [r7, #12]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d9e6      	bls.n	8001768 <TL_deserialize+0x230>
  }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	3724      	adds	r7, #36	; 0x24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fdbe 	bl	8001334 <TL_serialize>

  // reset state
  tl->tx_bit_offset = 0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
  tl->rx_bit_offset = 0;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e
  tl->tx_finished = 0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
  tl->rx_finished = 0;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230

  // enable TX RX
  tl->rx_pending = 1;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
  tl->tx_pending = 1;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f4:	f7ff fca2 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fa:	490d      	ldr	r1, [pc, #52]	; (8001830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001810:	4c0a      	ldr	r4, [pc, #40]	; (800183c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181e:	f009 fe51 	bl	800b4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7fe ffbf 	bl	80007a4 <main>
  bx  lr
 8001826:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001828:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800182c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001830:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001834:	0800b574 	.word	0x0800b574
  ldr r2, =_sbss
 8001838:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800183c:	24000504 	.word	0x24000504

08001840 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC3_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184a:	2003      	movs	r0, #3
 800184c:	f000 f95c 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001850:	f003 ff76 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8001854:	4602      	mov	r2, r0
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_Init+0x68>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	0a1b      	lsrs	r3, r3, #8
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	4913      	ldr	r1, [pc, #76]	; (80018b0 <HAL_Init+0x6c>)
 8001862:	5ccb      	ldrb	r3, [r1, r3]
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
 800186c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_Init+0x68>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_Init+0x6c>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_Init+0x70>)
 8001886:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_Init+0x74>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800188e:	200f      	movs	r0, #15
 8001890:	f000 f814 	bl	80018bc <HAL_InitTick>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e002      	b.n	80018a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800189e:	f7ff fa5b 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	58024400 	.word	0x58024400
 80018b0:	0800b524 	.word	0x0800b524
 80018b4:	24000004 	.word	0x24000004
 80018b8:	24000000 	.word	0x24000000

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_InitTick+0x60>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e021      	b.n	8001914 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_InitTick+0x64>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_InitTick+0x60>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f941 	bl	8001b6e <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001904:	f000 f90b 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_InitTick+0x68>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	2400000c 	.word	0x2400000c
 8001920:	24000000 	.word	0x24000000
 8001924:	24000008 	.word	0x24000008

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	2400000c 	.word	0x2400000c
 800194c:	24000500 	.word	0x24000500

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	24000500 	.word	0x24000500

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <__NVIC_SetPriorityGrouping+0x40>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 8001992:	4313      	orrs	r3, r2
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00
 80019ac:	05fa0000 	.word	0x05fa0000

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff29 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff40 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff90 	bl	8001a5c <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5f 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff33 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa4 	bl	8001ac4 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fede 	bl	8001950 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e312      	b.n	80021c6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a66      	ldr	r2, [pc, #408]	; (8001d40 <HAL_DMA_Init+0x1b8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d04a      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a65      	ldr	r2, [pc, #404]	; (8001d44 <HAL_DMA_Init+0x1bc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d045      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a63      	ldr	r2, [pc, #396]	; (8001d48 <HAL_DMA_Init+0x1c0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d040      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a62      	ldr	r2, [pc, #392]	; (8001d4c <HAL_DMA_Init+0x1c4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d03b      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a60      	ldr	r2, [pc, #384]	; (8001d50 <HAL_DMA_Init+0x1c8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d036      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a5f      	ldr	r2, [pc, #380]	; (8001d54 <HAL_DMA_Init+0x1cc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d031      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a5d      	ldr	r2, [pc, #372]	; (8001d58 <HAL_DMA_Init+0x1d0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d02c      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a5c      	ldr	r2, [pc, #368]	; (8001d5c <HAL_DMA_Init+0x1d4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d027      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a5a      	ldr	r2, [pc, #360]	; (8001d60 <HAL_DMA_Init+0x1d8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d022      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a59      	ldr	r2, [pc, #356]	; (8001d64 <HAL_DMA_Init+0x1dc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01d      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a57      	ldr	r2, [pc, #348]	; (8001d68 <HAL_DMA_Init+0x1e0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d018      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a56      	ldr	r2, [pc, #344]	; (8001d6c <HAL_DMA_Init+0x1e4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d013      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a54      	ldr	r2, [pc, #336]	; (8001d70 <HAL_DMA_Init+0x1e8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00e      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a53      	ldr	r2, [pc, #332]	; (8001d74 <HAL_DMA_Init+0x1ec>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a51      	ldr	r2, [pc, #324]	; (8001d78 <HAL_DMA_Init+0x1f0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_DMA_Init+0xb8>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a50      	ldr	r2, [pc, #320]	; (8001d7c <HAL_DMA_Init+0x1f4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_DMA_Init+0xbc>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_Init+0xbe>
 8001c44:	2300      	movs	r3, #0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 813c 	beq.w	8001ec4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a37      	ldr	r2, [pc, #220]	; (8001d40 <HAL_DMA_Init+0x1b8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d04a      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a36      	ldr	r2, [pc, #216]	; (8001d44 <HAL_DMA_Init+0x1bc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d045      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a34      	ldr	r2, [pc, #208]	; (8001d48 <HAL_DMA_Init+0x1c0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d040      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a33      	ldr	r2, [pc, #204]	; (8001d4c <HAL_DMA_Init+0x1c4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d03b      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a31      	ldr	r2, [pc, #196]	; (8001d50 <HAL_DMA_Init+0x1c8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d036      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <HAL_DMA_Init+0x1cc>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d031      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a2e      	ldr	r2, [pc, #184]	; (8001d58 <HAL_DMA_Init+0x1d0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d02c      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <HAL_DMA_Init+0x1d4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d027      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a2b      	ldr	r2, [pc, #172]	; (8001d60 <HAL_DMA_Init+0x1d8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d022      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2a      	ldr	r2, [pc, #168]	; (8001d64 <HAL_DMA_Init+0x1dc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01d      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <HAL_DMA_Init+0x1e0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d018      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <HAL_DMA_Init+0x1e4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a25      	ldr	r2, [pc, #148]	; (8001d70 <HAL_DMA_Init+0x1e8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00e      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a24      	ldr	r2, [pc, #144]	; (8001d74 <HAL_DMA_Init+0x1ec>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <HAL_DMA_Init+0x1f0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_DMA_Init+0x174>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a21      	ldr	r2, [pc, #132]	; (8001d7c <HAL_DMA_Init+0x1f4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d108      	bne.n	8001d0e <HAL_DMA_Init+0x186>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e007      	b.n	8001d1e <HAL_DMA_Init+0x196>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d1e:	e02f      	b.n	8001d80 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d20:	f7ff fe16 	bl	8001950 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d928      	bls.n	8001d80 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2220      	movs	r2, #32
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2203      	movs	r2, #3
 8001d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e242      	b.n	80021c6 <HAL_DMA_Init+0x63e>
 8001d40:	40020010 	.word	0x40020010
 8001d44:	40020028 	.word	0x40020028
 8001d48:	40020040 	.word	0x40020040
 8001d4c:	40020058 	.word	0x40020058
 8001d50:	40020070 	.word	0x40020070
 8001d54:	40020088 	.word	0x40020088
 8001d58:	400200a0 	.word	0x400200a0
 8001d5c:	400200b8 	.word	0x400200b8
 8001d60:	40020410 	.word	0x40020410
 8001d64:	40020428 	.word	0x40020428
 8001d68:	40020440 	.word	0x40020440
 8001d6c:	40020458 	.word	0x40020458
 8001d70:	40020470 	.word	0x40020470
 8001d74:	40020488 	.word	0x40020488
 8001d78:	400204a0 	.word	0x400204a0
 8001d7c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1c8      	bne.n	8001d20 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4b83      	ldr	r3, [pc, #524]	; (8001fa8 <HAL_DMA_Init+0x420>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001da6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d107      	bne.n	8001de4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b28      	cmp	r3, #40	; 0x28
 8001dea:	d903      	bls.n	8001df4 <HAL_DMA_Init+0x26c>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b2e      	cmp	r3, #46	; 0x2e
 8001df2:	d91f      	bls.n	8001e34 <HAL_DMA_Init+0x2ac>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b3e      	cmp	r3, #62	; 0x3e
 8001dfa:	d903      	bls.n	8001e04 <HAL_DMA_Init+0x27c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b42      	cmp	r3, #66	; 0x42
 8001e02:	d917      	bls.n	8001e34 <HAL_DMA_Init+0x2ac>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b46      	cmp	r3, #70	; 0x46
 8001e0a:	d903      	bls.n	8001e14 <HAL_DMA_Init+0x28c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b48      	cmp	r3, #72	; 0x48
 8001e12:	d90f      	bls.n	8001e34 <HAL_DMA_Init+0x2ac>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b4e      	cmp	r3, #78	; 0x4e
 8001e1a:	d903      	bls.n	8001e24 <HAL_DMA_Init+0x29c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b52      	cmp	r3, #82	; 0x52
 8001e22:	d907      	bls.n	8001e34 <HAL_DMA_Init+0x2ac>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b73      	cmp	r3, #115	; 0x73
 8001e2a:	d905      	bls.n	8001e38 <HAL_DMA_Init+0x2b0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b77      	cmp	r3, #119	; 0x77
 8001e32:	d801      	bhi.n	8001e38 <HAL_DMA_Init+0x2b0>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_DMA_Init+0x2b2>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e44:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f023 0307 	bic.w	r3, r3, #7
 8001e5c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d117      	bne.n	8001ea0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00e      	beq.n	8001ea0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f002 fb2e 	bl	80044e4 <DMA_CheckFifoParam>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e192      	b.n	80021c6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f002 fa69 	bl	8004380 <DMA_CalcBaseAndBitshift>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	223f      	movs	r2, #63	; 0x3f
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	e0c8      	b.n	8002056 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a38      	ldr	r2, [pc, #224]	; (8001fac <HAL_DMA_Init+0x424>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d022      	beq.n	8001f14 <HAL_DMA_Init+0x38c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a37      	ldr	r2, [pc, #220]	; (8001fb0 <HAL_DMA_Init+0x428>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d01d      	beq.n	8001f14 <HAL_DMA_Init+0x38c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a35      	ldr	r2, [pc, #212]	; (8001fb4 <HAL_DMA_Init+0x42c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d018      	beq.n	8001f14 <HAL_DMA_Init+0x38c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a34      	ldr	r2, [pc, #208]	; (8001fb8 <HAL_DMA_Init+0x430>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_DMA_Init+0x38c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <HAL_DMA_Init+0x434>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00e      	beq.n	8001f14 <HAL_DMA_Init+0x38c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a31      	ldr	r2, [pc, #196]	; (8001fc0 <HAL_DMA_Init+0x438>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_DMA_Init+0x38c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <HAL_DMA_Init+0x43c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_DMA_Init+0x38c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a2e      	ldr	r2, [pc, #184]	; (8001fc8 <HAL_DMA_Init+0x440>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_DMA_Init+0x390>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_DMA_Init+0x392>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8092 	beq.w	8002044 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a21      	ldr	r2, [pc, #132]	; (8001fac <HAL_DMA_Init+0x424>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d021      	beq.n	8001f6e <HAL_DMA_Init+0x3e6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a20      	ldr	r2, [pc, #128]	; (8001fb0 <HAL_DMA_Init+0x428>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d01c      	beq.n	8001f6e <HAL_DMA_Init+0x3e6>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <HAL_DMA_Init+0x42c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d017      	beq.n	8001f6e <HAL_DMA_Init+0x3e6>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <HAL_DMA_Init+0x430>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d012      	beq.n	8001f6e <HAL_DMA_Init+0x3e6>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1b      	ldr	r2, [pc, #108]	; (8001fbc <HAL_DMA_Init+0x434>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_DMA_Init+0x3e6>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <HAL_DMA_Init+0x438>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d008      	beq.n	8001f6e <HAL_DMA_Init+0x3e6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a18      	ldr	r2, [pc, #96]	; (8001fc4 <HAL_DMA_Init+0x43c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <HAL_DMA_Init+0x3e6>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_DMA_Init+0x440>)
 8001f6c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_DMA_Init+0x444>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b40      	cmp	r3, #64	; 0x40
 8001f94:	d01c      	beq.n	8001fd0 <HAL_DMA_Init+0x448>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b80      	cmp	r3, #128	; 0x80
 8001f9c:	d102      	bne.n	8001fa4 <HAL_DMA_Init+0x41c>
 8001f9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa2:	e016      	b.n	8001fd2 <HAL_DMA_Init+0x44a>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e014      	b.n	8001fd2 <HAL_DMA_Init+0x44a>
 8001fa8:	fe10803f 	.word	0xfe10803f
 8001fac:	58025408 	.word	0x58025408
 8001fb0:	5802541c 	.word	0x5802541c
 8001fb4:	58025430 	.word	0x58025430
 8001fb8:	58025444 	.word	0x58025444
 8001fbc:	58025458 	.word	0x58025458
 8001fc0:	5802546c 	.word	0x5802546c
 8001fc4:	58025480 	.word	0x58025480
 8001fc8:	58025494 	.word	0x58025494
 8001fcc:	fffe000f 	.word	0xfffe000f
 8001fd0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68d2      	ldr	r2, [r2, #12]
 8001fd6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fe0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fe8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ff0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002000:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b6e      	ldr	r3, [pc, #440]	; (80021d0 <HAL_DMA_Init+0x648>)
 8002018:	4413      	add	r3, r2
 800201a:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <HAL_DMA_Init+0x64c>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	009a      	lsls	r2, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f002 f9a9 	bl	8004380 <DMA_CalcBaseAndBitshift>
 800202e:	4603      	mov	r3, r0
 8002030:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	e008      	b.n	8002056 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2203      	movs	r2, #3
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0b7      	b.n	80021c6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a5f      	ldr	r2, [pc, #380]	; (80021d8 <HAL_DMA_Init+0x650>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d072      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <HAL_DMA_Init+0x654>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d06d      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a5c      	ldr	r2, [pc, #368]	; (80021e0 <HAL_DMA_Init+0x658>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d068      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a5a      	ldr	r2, [pc, #360]	; (80021e4 <HAL_DMA_Init+0x65c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d063      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a59      	ldr	r2, [pc, #356]	; (80021e8 <HAL_DMA_Init+0x660>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d05e      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a57      	ldr	r2, [pc, #348]	; (80021ec <HAL_DMA_Init+0x664>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d059      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a56      	ldr	r2, [pc, #344]	; (80021f0 <HAL_DMA_Init+0x668>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d054      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a54      	ldr	r2, [pc, #336]	; (80021f4 <HAL_DMA_Init+0x66c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d04f      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a53      	ldr	r2, [pc, #332]	; (80021f8 <HAL_DMA_Init+0x670>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d04a      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HAL_DMA_Init+0x674>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d045      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a50      	ldr	r2, [pc, #320]	; (8002200 <HAL_DMA_Init+0x678>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d040      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4e      	ldr	r2, [pc, #312]	; (8002204 <HAL_DMA_Init+0x67c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d03b      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a4d      	ldr	r2, [pc, #308]	; (8002208 <HAL_DMA_Init+0x680>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d036      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a4b      	ldr	r2, [pc, #300]	; (800220c <HAL_DMA_Init+0x684>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d031      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <HAL_DMA_Init+0x688>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d02c      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a48      	ldr	r2, [pc, #288]	; (8002214 <HAL_DMA_Init+0x68c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d027      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a47      	ldr	r2, [pc, #284]	; (8002218 <HAL_DMA_Init+0x690>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d022      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a45      	ldr	r2, [pc, #276]	; (800221c <HAL_DMA_Init+0x694>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01d      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a44      	ldr	r2, [pc, #272]	; (8002220 <HAL_DMA_Init+0x698>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d018      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a42      	ldr	r2, [pc, #264]	; (8002224 <HAL_DMA_Init+0x69c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a41      	ldr	r2, [pc, #260]	; (8002228 <HAL_DMA_Init+0x6a0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00e      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3f      	ldr	r2, [pc, #252]	; (800222c <HAL_DMA_Init+0x6a4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d009      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <HAL_DMA_Init+0x6a8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d004      	beq.n	8002146 <HAL_DMA_Init+0x5be>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3c      	ldr	r2, [pc, #240]	; (8002234 <HAL_DMA_Init+0x6ac>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_DMA_Init+0x5c2>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_DMA_Init+0x5c4>
 800214a:	2300      	movs	r3, #0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d032      	beq.n	80021b6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f002 fa43 	bl	80045dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b80      	cmp	r3, #128	; 0x80
 800215c:	d102      	bne.n	8002164 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002178:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <HAL_DMA_Init+0x61c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b08      	cmp	r3, #8
 8002188:	d80c      	bhi.n	80021a4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f002 fac0 	bl	8004710 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	e008      	b.n	80021b6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	a7fdabf8 	.word	0xa7fdabf8
 80021d4:	cccccccd 	.word	0xcccccccd
 80021d8:	40020010 	.word	0x40020010
 80021dc:	40020028 	.word	0x40020028
 80021e0:	40020040 	.word	0x40020040
 80021e4:	40020058 	.word	0x40020058
 80021e8:	40020070 	.word	0x40020070
 80021ec:	40020088 	.word	0x40020088
 80021f0:	400200a0 	.word	0x400200a0
 80021f4:	400200b8 	.word	0x400200b8
 80021f8:	40020410 	.word	0x40020410
 80021fc:	40020428 	.word	0x40020428
 8002200:	40020440 	.word	0x40020440
 8002204:	40020458 	.word	0x40020458
 8002208:	40020470 	.word	0x40020470
 800220c:	40020488 	.word	0x40020488
 8002210:	400204a0 	.word	0x400204a0
 8002214:	400204b8 	.word	0x400204b8
 8002218:	58025408 	.word	0x58025408
 800221c:	5802541c 	.word	0x5802541c
 8002220:	58025430 	.word	0x58025430
 8002224:	58025444 	.word	0x58025444
 8002228:	58025458 	.word	0x58025458
 800222c:	5802546c 	.word	0x5802546c
 8002230:	58025480 	.word	0x58025480
 8002234:	58025494 	.word	0x58025494

08002238 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e226      	b.n	80026a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_DMA_Start_IT+0x2a>
 800225e:	2302      	movs	r3, #2
 8002260:	e21f      	b.n	80026a2 <HAL_DMA_Start_IT+0x46a>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	f040 820a 	bne.w	800268c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a68      	ldr	r2, [pc, #416]	; (800242c <HAL_DMA_Start_IT+0x1f4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d04a      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a66      	ldr	r2, [pc, #408]	; (8002430 <HAL_DMA_Start_IT+0x1f8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d045      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a65      	ldr	r2, [pc, #404]	; (8002434 <HAL_DMA_Start_IT+0x1fc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d040      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a63      	ldr	r2, [pc, #396]	; (8002438 <HAL_DMA_Start_IT+0x200>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d03b      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a62      	ldr	r2, [pc, #392]	; (800243c <HAL_DMA_Start_IT+0x204>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d036      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a60      	ldr	r2, [pc, #384]	; (8002440 <HAL_DMA_Start_IT+0x208>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d031      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5f      	ldr	r2, [pc, #380]	; (8002444 <HAL_DMA_Start_IT+0x20c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d02c      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5d      	ldr	r2, [pc, #372]	; (8002448 <HAL_DMA_Start_IT+0x210>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d027      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5c      	ldr	r2, [pc, #368]	; (800244c <HAL_DMA_Start_IT+0x214>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a5a      	ldr	r2, [pc, #360]	; (8002450 <HAL_DMA_Start_IT+0x218>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01d      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a59      	ldr	r2, [pc, #356]	; (8002454 <HAL_DMA_Start_IT+0x21c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d018      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a57      	ldr	r2, [pc, #348]	; (8002458 <HAL_DMA_Start_IT+0x220>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a56      	ldr	r2, [pc, #344]	; (800245c <HAL_DMA_Start_IT+0x224>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00e      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a54      	ldr	r2, [pc, #336]	; (8002460 <HAL_DMA_Start_IT+0x228>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a53      	ldr	r2, [pc, #332]	; (8002464 <HAL_DMA_Start_IT+0x22c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Start_IT+0xee>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a51      	ldr	r2, [pc, #324]	; (8002468 <HAL_DMA_Start_IT+0x230>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d108      	bne.n	8002338 <HAL_DMA_Start_IT+0x100>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e007      	b.n	8002348 <HAL_DMA_Start_IT+0x110>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f001 fe6a 	bl	8004028 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a34      	ldr	r2, [pc, #208]	; (800242c <HAL_DMA_Start_IT+0x1f4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d04a      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a33      	ldr	r2, [pc, #204]	; (8002430 <HAL_DMA_Start_IT+0x1f8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d045      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a31      	ldr	r2, [pc, #196]	; (8002434 <HAL_DMA_Start_IT+0x1fc>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d040      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a30      	ldr	r2, [pc, #192]	; (8002438 <HAL_DMA_Start_IT+0x200>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d03b      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2e      	ldr	r2, [pc, #184]	; (800243c <HAL_DMA_Start_IT+0x204>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d036      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <HAL_DMA_Start_IT+0x208>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d031      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <HAL_DMA_Start_IT+0x20c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d02c      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2a      	ldr	r2, [pc, #168]	; (8002448 <HAL_DMA_Start_IT+0x210>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d027      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a28      	ldr	r2, [pc, #160]	; (800244c <HAL_DMA_Start_IT+0x214>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d022      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a27      	ldr	r2, [pc, #156]	; (8002450 <HAL_DMA_Start_IT+0x218>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d01d      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a25      	ldr	r2, [pc, #148]	; (8002454 <HAL_DMA_Start_IT+0x21c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d018      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <HAL_DMA_Start_IT+0x220>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a22      	ldr	r2, [pc, #136]	; (800245c <HAL_DMA_Start_IT+0x224>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00e      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a21      	ldr	r2, [pc, #132]	; (8002460 <HAL_DMA_Start_IT+0x228>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <HAL_DMA_Start_IT+0x22c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Start_IT+0x1bc>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <HAL_DMA_Start_IT+0x230>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_DMA_Start_IT+0x1c0>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_DMA_Start_IT+0x1c2>
 80023f8:	2300      	movs	r3, #0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d036      	beq.n	800246c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 021e 	bic.w	r2, r3, #30
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0216 	orr.w	r2, r2, #22
 8002410:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d03e      	beq.n	8002498 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0208 	orr.w	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e035      	b.n	8002498 <HAL_DMA_Start_IT+0x260>
 800242c:	40020010 	.word	0x40020010
 8002430:	40020028 	.word	0x40020028
 8002434:	40020040 	.word	0x40020040
 8002438:	40020058 	.word	0x40020058
 800243c:	40020070 	.word	0x40020070
 8002440:	40020088 	.word	0x40020088
 8002444:	400200a0 	.word	0x400200a0
 8002448:	400200b8 	.word	0x400200b8
 800244c:	40020410 	.word	0x40020410
 8002450:	40020428 	.word	0x40020428
 8002454:	40020440 	.word	0x40020440
 8002458:	40020458 	.word	0x40020458
 800245c:	40020470 	.word	0x40020470
 8002460:	40020488 	.word	0x40020488
 8002464:	400204a0 	.word	0x400204a0
 8002468:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 020e 	bic.w	r2, r3, #14
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 020a 	orr.w	r2, r2, #10
 800247e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0204 	orr.w	r2, r2, #4
 8002496:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a83      	ldr	r2, [pc, #524]	; (80026ac <HAL_DMA_Start_IT+0x474>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d072      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a82      	ldr	r2, [pc, #520]	; (80026b0 <HAL_DMA_Start_IT+0x478>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d06d      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a80      	ldr	r2, [pc, #512]	; (80026b4 <HAL_DMA_Start_IT+0x47c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d068      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a7f      	ldr	r2, [pc, #508]	; (80026b8 <HAL_DMA_Start_IT+0x480>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d063      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a7d      	ldr	r2, [pc, #500]	; (80026bc <HAL_DMA_Start_IT+0x484>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d05e      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7c      	ldr	r2, [pc, #496]	; (80026c0 <HAL_DMA_Start_IT+0x488>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d059      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a7a      	ldr	r2, [pc, #488]	; (80026c4 <HAL_DMA_Start_IT+0x48c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d054      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a79      	ldr	r2, [pc, #484]	; (80026c8 <HAL_DMA_Start_IT+0x490>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d04f      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a77      	ldr	r2, [pc, #476]	; (80026cc <HAL_DMA_Start_IT+0x494>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d04a      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a76      	ldr	r2, [pc, #472]	; (80026d0 <HAL_DMA_Start_IT+0x498>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d045      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a74      	ldr	r2, [pc, #464]	; (80026d4 <HAL_DMA_Start_IT+0x49c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d040      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a73      	ldr	r2, [pc, #460]	; (80026d8 <HAL_DMA_Start_IT+0x4a0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d03b      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a71      	ldr	r2, [pc, #452]	; (80026dc <HAL_DMA_Start_IT+0x4a4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d036      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a70      	ldr	r2, [pc, #448]	; (80026e0 <HAL_DMA_Start_IT+0x4a8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d031      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a6e      	ldr	r2, [pc, #440]	; (80026e4 <HAL_DMA_Start_IT+0x4ac>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d02c      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6d      	ldr	r2, [pc, #436]	; (80026e8 <HAL_DMA_Start_IT+0x4b0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d027      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6b      	ldr	r2, [pc, #428]	; (80026ec <HAL_DMA_Start_IT+0x4b4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d022      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a6a      	ldr	r2, [pc, #424]	; (80026f0 <HAL_DMA_Start_IT+0x4b8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d01d      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a68      	ldr	r2, [pc, #416]	; (80026f4 <HAL_DMA_Start_IT+0x4bc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d018      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a67      	ldr	r2, [pc, #412]	; (80026f8 <HAL_DMA_Start_IT+0x4c0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a65      	ldr	r2, [pc, #404]	; (80026fc <HAL_DMA_Start_IT+0x4c4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00e      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a64      	ldr	r2, [pc, #400]	; (8002700 <HAL_DMA_Start_IT+0x4c8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a62      	ldr	r2, [pc, #392]	; (8002704 <HAL_DMA_Start_IT+0x4cc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d004      	beq.n	8002588 <HAL_DMA_Start_IT+0x350>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a61      	ldr	r2, [pc, #388]	; (8002708 <HAL_DMA_Start_IT+0x4d0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_DMA_Start_IT+0x354>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_DMA_Start_IT+0x356>
 800258c:	2300      	movs	r3, #0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01a      	beq.n	80025c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a37      	ldr	r2, [pc, #220]	; (80026ac <HAL_DMA_Start_IT+0x474>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d04a      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a36      	ldr	r2, [pc, #216]	; (80026b0 <HAL_DMA_Start_IT+0x478>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d045      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a34      	ldr	r2, [pc, #208]	; (80026b4 <HAL_DMA_Start_IT+0x47c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d040      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a33      	ldr	r2, [pc, #204]	; (80026b8 <HAL_DMA_Start_IT+0x480>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d03b      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a31      	ldr	r2, [pc, #196]	; (80026bc <HAL_DMA_Start_IT+0x484>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d036      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a30      	ldr	r2, [pc, #192]	; (80026c0 <HAL_DMA_Start_IT+0x488>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d031      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2e      	ldr	r2, [pc, #184]	; (80026c4 <HAL_DMA_Start_IT+0x48c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d02c      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2d      	ldr	r2, [pc, #180]	; (80026c8 <HAL_DMA_Start_IT+0x490>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d027      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <HAL_DMA_Start_IT+0x494>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d022      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <HAL_DMA_Start_IT+0x498>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d01d      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <HAL_DMA_Start_IT+0x49c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d018      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <HAL_DMA_Start_IT+0x4a0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a25      	ldr	r2, [pc, #148]	; (80026dc <HAL_DMA_Start_IT+0x4a4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00e      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <HAL_DMA_Start_IT+0x4a8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <HAL_DMA_Start_IT+0x4ac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_DMA_Start_IT+0x430>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <HAL_DMA_Start_IT+0x4b0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d108      	bne.n	800267a <HAL_DMA_Start_IT+0x442>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e012      	b.n	80026a0 <HAL_DMA_Start_IT+0x468>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e009      	b.n	80026a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002692:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40020010 	.word	0x40020010
 80026b0:	40020028 	.word	0x40020028
 80026b4:	40020040 	.word	0x40020040
 80026b8:	40020058 	.word	0x40020058
 80026bc:	40020070 	.word	0x40020070
 80026c0:	40020088 	.word	0x40020088
 80026c4:	400200a0 	.word	0x400200a0
 80026c8:	400200b8 	.word	0x400200b8
 80026cc:	40020410 	.word	0x40020410
 80026d0:	40020428 	.word	0x40020428
 80026d4:	40020440 	.word	0x40020440
 80026d8:	40020458 	.word	0x40020458
 80026dc:	40020470 	.word	0x40020470
 80026e0:	40020488 	.word	0x40020488
 80026e4:	400204a0 	.word	0x400204a0
 80026e8:	400204b8 	.word	0x400204b8
 80026ec:	58025408 	.word	0x58025408
 80026f0:	5802541c 	.word	0x5802541c
 80026f4:	58025430 	.word	0x58025430
 80026f8:	58025444 	.word	0x58025444
 80026fc:	58025458 	.word	0x58025458
 8002700:	5802546c 	.word	0x5802546c
 8002704:	58025480 	.word	0x58025480
 8002708:	58025494 	.word	0x58025494

0800270c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002714:	f7ff f91c 	bl	8001950 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e2dc      	b.n	8002cde <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d008      	beq.n	8002742 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e2cd      	b.n	8002cde <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a76      	ldr	r2, [pc, #472]	; (8002920 <HAL_DMA_Abort+0x214>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d04a      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a74      	ldr	r2, [pc, #464]	; (8002924 <HAL_DMA_Abort+0x218>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d045      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a73      	ldr	r2, [pc, #460]	; (8002928 <HAL_DMA_Abort+0x21c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d040      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a71      	ldr	r2, [pc, #452]	; (800292c <HAL_DMA_Abort+0x220>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d03b      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a70      	ldr	r2, [pc, #448]	; (8002930 <HAL_DMA_Abort+0x224>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d036      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6e      	ldr	r2, [pc, #440]	; (8002934 <HAL_DMA_Abort+0x228>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d031      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6d      	ldr	r2, [pc, #436]	; (8002938 <HAL_DMA_Abort+0x22c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d02c      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6b      	ldr	r2, [pc, #428]	; (800293c <HAL_DMA_Abort+0x230>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d027      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <HAL_DMA_Abort+0x234>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d022      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a68      	ldr	r2, [pc, #416]	; (8002944 <HAL_DMA_Abort+0x238>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01d      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a67      	ldr	r2, [pc, #412]	; (8002948 <HAL_DMA_Abort+0x23c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d018      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a65      	ldr	r2, [pc, #404]	; (800294c <HAL_DMA_Abort+0x240>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a64      	ldr	r2, [pc, #400]	; (8002950 <HAL_DMA_Abort+0x244>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00e      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a62      	ldr	r2, [pc, #392]	; (8002954 <HAL_DMA_Abort+0x248>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d009      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a61      	ldr	r2, [pc, #388]	; (8002958 <HAL_DMA_Abort+0x24c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_DMA_Abort+0xd6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5f      	ldr	r2, [pc, #380]	; (800295c <HAL_DMA_Abort+0x250>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_DMA_Abort+0xda>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_DMA_Abort+0xdc>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d013      	beq.n	8002814 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 021e 	bic.w	r2, r2, #30
 80027fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800280a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e00a      	b.n	800282a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 020e 	bic.w	r2, r2, #14
 8002822:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a3c      	ldr	r2, [pc, #240]	; (8002920 <HAL_DMA_Abort+0x214>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d072      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_DMA_Abort+0x218>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d06d      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a39      	ldr	r2, [pc, #228]	; (8002928 <HAL_DMA_Abort+0x21c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d068      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a37      	ldr	r2, [pc, #220]	; (800292c <HAL_DMA_Abort+0x220>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d063      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a36      	ldr	r2, [pc, #216]	; (8002930 <HAL_DMA_Abort+0x224>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d05e      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a34      	ldr	r2, [pc, #208]	; (8002934 <HAL_DMA_Abort+0x228>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d059      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a33      	ldr	r2, [pc, #204]	; (8002938 <HAL_DMA_Abort+0x22c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d054      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a31      	ldr	r2, [pc, #196]	; (800293c <HAL_DMA_Abort+0x230>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d04f      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a30      	ldr	r2, [pc, #192]	; (8002940 <HAL_DMA_Abort+0x234>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d04a      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <HAL_DMA_Abort+0x238>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d045      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2d      	ldr	r2, [pc, #180]	; (8002948 <HAL_DMA_Abort+0x23c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d040      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2b      	ldr	r2, [pc, #172]	; (800294c <HAL_DMA_Abort+0x240>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d03b      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2a      	ldr	r2, [pc, #168]	; (8002950 <HAL_DMA_Abort+0x244>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d036      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a28      	ldr	r2, [pc, #160]	; (8002954 <HAL_DMA_Abort+0x248>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d031      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a27      	ldr	r2, [pc, #156]	; (8002958 <HAL_DMA_Abort+0x24c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d02c      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a25      	ldr	r2, [pc, #148]	; (800295c <HAL_DMA_Abort+0x250>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d027      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a24      	ldr	r2, [pc, #144]	; (8002960 <HAL_DMA_Abort+0x254>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d022      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a22      	ldr	r2, [pc, #136]	; (8002964 <HAL_DMA_Abort+0x258>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01d      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a21      	ldr	r2, [pc, #132]	; (8002968 <HAL_DMA_Abort+0x25c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d018      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_DMA_Abort+0x260>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_DMA_Abort+0x264>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00e      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_DMA_Abort+0x268>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <HAL_DMA_Abort+0x26c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_DMA_Abort+0x20e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <HAL_DMA_Abort+0x270>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d132      	bne.n	8002980 <HAL_DMA_Abort+0x274>
 800291a:	2301      	movs	r3, #1
 800291c:	e031      	b.n	8002982 <HAL_DMA_Abort+0x276>
 800291e:	bf00      	nop
 8002920:	40020010 	.word	0x40020010
 8002924:	40020028 	.word	0x40020028
 8002928:	40020040 	.word	0x40020040
 800292c:	40020058 	.word	0x40020058
 8002930:	40020070 	.word	0x40020070
 8002934:	40020088 	.word	0x40020088
 8002938:	400200a0 	.word	0x400200a0
 800293c:	400200b8 	.word	0x400200b8
 8002940:	40020410 	.word	0x40020410
 8002944:	40020428 	.word	0x40020428
 8002948:	40020440 	.word	0x40020440
 800294c:	40020458 	.word	0x40020458
 8002950:	40020470 	.word	0x40020470
 8002954:	40020488 	.word	0x40020488
 8002958:	400204a0 	.word	0x400204a0
 800295c:	400204b8 	.word	0x400204b8
 8002960:	58025408 	.word	0x58025408
 8002964:	5802541c 	.word	0x5802541c
 8002968:	58025430 	.word	0x58025430
 800296c:	58025444 	.word	0x58025444
 8002970:	58025458 	.word	0x58025458
 8002974:	5802546c 	.word	0x5802546c
 8002978:	58025480 	.word	0x58025480
 800297c:	58025494 	.word	0x58025494
 8002980:	2300      	movs	r3, #0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002994:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6d      	ldr	r2, [pc, #436]	; (8002b50 <HAL_DMA_Abort+0x444>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04a      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <HAL_DMA_Abort+0x448>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d045      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a6a      	ldr	r2, [pc, #424]	; (8002b58 <HAL_DMA_Abort+0x44c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d040      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a68      	ldr	r2, [pc, #416]	; (8002b5c <HAL_DMA_Abort+0x450>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d03b      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a67      	ldr	r2, [pc, #412]	; (8002b60 <HAL_DMA_Abort+0x454>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d036      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_DMA_Abort+0x458>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d031      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a64      	ldr	r2, [pc, #400]	; (8002b68 <HAL_DMA_Abort+0x45c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d02c      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a62      	ldr	r2, [pc, #392]	; (8002b6c <HAL_DMA_Abort+0x460>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d027      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a61      	ldr	r2, [pc, #388]	; (8002b70 <HAL_DMA_Abort+0x464>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a5f      	ldr	r2, [pc, #380]	; (8002b74 <HAL_DMA_Abort+0x468>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01d      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a5e      	ldr	r2, [pc, #376]	; (8002b78 <HAL_DMA_Abort+0x46c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d018      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_DMA_Abort+0x470>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5b      	ldr	r2, [pc, #364]	; (8002b80 <HAL_DMA_Abort+0x474>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a59      	ldr	r2, [pc, #356]	; (8002b84 <HAL_DMA_Abort+0x478>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_DMA_Abort+0x47c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_Abort+0x32a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a56      	ldr	r2, [pc, #344]	; (8002b8c <HAL_DMA_Abort+0x480>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d108      	bne.n	8002a48 <HAL_DMA_Abort+0x33c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e007      	b.n	8002a58 <HAL_DMA_Abort+0x34c>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a58:	e013      	b.n	8002a82 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5a:	f7fe ff79 	bl	8001950 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d90c      	bls.n	8002a82 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2203      	movs	r2, #3
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e12d      	b.n	8002cde <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e5      	bne.n	8002a5a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2f      	ldr	r2, [pc, #188]	; (8002b50 <HAL_DMA_Abort+0x444>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d04a      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <HAL_DMA_Abort+0x448>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d045      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <HAL_DMA_Abort+0x44c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d040      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <HAL_DMA_Abort+0x450>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d03b      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <HAL_DMA_Abort+0x454>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d036      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a27      	ldr	r2, [pc, #156]	; (8002b64 <HAL_DMA_Abort+0x458>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d031      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <HAL_DMA_Abort+0x45c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d02c      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <HAL_DMA_Abort+0x460>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d027      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a23      	ldr	r2, [pc, #140]	; (8002b70 <HAL_DMA_Abort+0x464>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d022      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <HAL_DMA_Abort+0x468>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01d      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <HAL_DMA_Abort+0x46c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d018      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <HAL_DMA_Abort+0x470>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <HAL_DMA_Abort+0x474>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <HAL_DMA_Abort+0x478>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_DMA_Abort+0x47c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_DMA_Abort+0x422>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a18      	ldr	r2, [pc, #96]	; (8002b8c <HAL_DMA_Abort+0x480>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_DMA_Abort+0x426>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_DMA_Abort+0x428>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d02b      	beq.n	8002b90 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	223f      	movs	r2, #63	; 0x3f
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	e02a      	b.n	8002ba6 <HAL_DMA_Abort+0x49a>
 8002b50:	40020010 	.word	0x40020010
 8002b54:	40020028 	.word	0x40020028
 8002b58:	40020040 	.word	0x40020040
 8002b5c:	40020058 	.word	0x40020058
 8002b60:	40020070 	.word	0x40020070
 8002b64:	40020088 	.word	0x40020088
 8002b68:	400200a0 	.word	0x400200a0
 8002b6c:	400200b8 	.word	0x400200b8
 8002b70:	40020410 	.word	0x40020410
 8002b74:	40020428 	.word	0x40020428
 8002b78:	40020440 	.word	0x40020440
 8002b7c:	40020458 	.word	0x40020458
 8002b80:	40020470 	.word	0x40020470
 8002b84:	40020488 	.word	0x40020488
 8002b88:	400204a0 	.word	0x400204a0
 8002b8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a4f      	ldr	r2, [pc, #316]	; (8002ce8 <HAL_DMA_Abort+0x5dc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d072      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	; (8002cec <HAL_DMA_Abort+0x5e0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d06d      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4c      	ldr	r2, [pc, #304]	; (8002cf0 <HAL_DMA_Abort+0x5e4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d068      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a4a      	ldr	r2, [pc, #296]	; (8002cf4 <HAL_DMA_Abort+0x5e8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d063      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a49      	ldr	r2, [pc, #292]	; (8002cf8 <HAL_DMA_Abort+0x5ec>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d05e      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a47      	ldr	r2, [pc, #284]	; (8002cfc <HAL_DMA_Abort+0x5f0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d059      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a46      	ldr	r2, [pc, #280]	; (8002d00 <HAL_DMA_Abort+0x5f4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d054      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a44      	ldr	r2, [pc, #272]	; (8002d04 <HAL_DMA_Abort+0x5f8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d04f      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a43      	ldr	r2, [pc, #268]	; (8002d08 <HAL_DMA_Abort+0x5fc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d04a      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a41      	ldr	r2, [pc, #260]	; (8002d0c <HAL_DMA_Abort+0x600>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d045      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a40      	ldr	r2, [pc, #256]	; (8002d10 <HAL_DMA_Abort+0x604>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d040      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3e      	ldr	r2, [pc, #248]	; (8002d14 <HAL_DMA_Abort+0x608>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d03b      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <HAL_DMA_Abort+0x60c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d036      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a3b      	ldr	r2, [pc, #236]	; (8002d1c <HAL_DMA_Abort+0x610>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d031      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a3a      	ldr	r2, [pc, #232]	; (8002d20 <HAL_DMA_Abort+0x614>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d02c      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a38      	ldr	r2, [pc, #224]	; (8002d24 <HAL_DMA_Abort+0x618>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d027      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a37      	ldr	r2, [pc, #220]	; (8002d28 <HAL_DMA_Abort+0x61c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d022      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a35      	ldr	r2, [pc, #212]	; (8002d2c <HAL_DMA_Abort+0x620>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01d      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a34      	ldr	r2, [pc, #208]	; (8002d30 <HAL_DMA_Abort+0x624>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d018      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a32      	ldr	r2, [pc, #200]	; (8002d34 <HAL_DMA_Abort+0x628>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a31      	ldr	r2, [pc, #196]	; (8002d38 <HAL_DMA_Abort+0x62c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00e      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <HAL_DMA_Abort+0x630>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2e      	ldr	r2, [pc, #184]	; (8002d40 <HAL_DMA_Abort+0x634>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_DMA_Abort+0x58a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <HAL_DMA_Abort+0x638>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <HAL_DMA_Abort+0x58e>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_DMA_Abort+0x590>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ca8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40020010 	.word	0x40020010
 8002cec:	40020028 	.word	0x40020028
 8002cf0:	40020040 	.word	0x40020040
 8002cf4:	40020058 	.word	0x40020058
 8002cf8:	40020070 	.word	0x40020070
 8002cfc:	40020088 	.word	0x40020088
 8002d00:	400200a0 	.word	0x400200a0
 8002d04:	400200b8 	.word	0x400200b8
 8002d08:	40020410 	.word	0x40020410
 8002d0c:	40020428 	.word	0x40020428
 8002d10:	40020440 	.word	0x40020440
 8002d14:	40020458 	.word	0x40020458
 8002d18:	40020470 	.word	0x40020470
 8002d1c:	40020488 	.word	0x40020488
 8002d20:	400204a0 	.word	0x400204a0
 8002d24:	400204b8 	.word	0x400204b8
 8002d28:	58025408 	.word	0x58025408
 8002d2c:	5802541c 	.word	0x5802541c
 8002d30:	58025430 	.word	0x58025430
 8002d34:	58025444 	.word	0x58025444
 8002d38:	58025458 	.word	0x58025458
 8002d3c:	5802546c 	.word	0x5802546c
 8002d40:	58025480 	.word	0x58025480
 8002d44:	58025494 	.word	0x58025494

08002d48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e237      	b.n	80031ca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d004      	beq.n	8002d70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e22c      	b.n	80031ca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a5c      	ldr	r2, [pc, #368]	; (8002ee8 <HAL_DMA_Abort_IT+0x1a0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d04a      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a5b      	ldr	r2, [pc, #364]	; (8002eec <HAL_DMA_Abort_IT+0x1a4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d045      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a59      	ldr	r2, [pc, #356]	; (8002ef0 <HAL_DMA_Abort_IT+0x1a8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d040      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_DMA_Abort_IT+0x1ac>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d03b      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a56      	ldr	r2, [pc, #344]	; (8002ef8 <HAL_DMA_Abort_IT+0x1b0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d036      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a55      	ldr	r2, [pc, #340]	; (8002efc <HAL_DMA_Abort_IT+0x1b4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d031      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a53      	ldr	r2, [pc, #332]	; (8002f00 <HAL_DMA_Abort_IT+0x1b8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02c      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a52      	ldr	r2, [pc, #328]	; (8002f04 <HAL_DMA_Abort_IT+0x1bc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d027      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a50      	ldr	r2, [pc, #320]	; (8002f08 <HAL_DMA_Abort_IT+0x1c0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d022      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a4f      	ldr	r2, [pc, #316]	; (8002f0c <HAL_DMA_Abort_IT+0x1c4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d01d      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a4d      	ldr	r2, [pc, #308]	; (8002f10 <HAL_DMA_Abort_IT+0x1c8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d018      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4c      	ldr	r2, [pc, #304]	; (8002f14 <HAL_DMA_Abort_IT+0x1cc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a4a      	ldr	r2, [pc, #296]	; (8002f18 <HAL_DMA_Abort_IT+0x1d0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00e      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a49      	ldr	r2, [pc, #292]	; (8002f1c <HAL_DMA_Abort_IT+0x1d4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d009      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <HAL_DMA_Abort_IT+0x1d8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_DMA_Abort_IT+0xc8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a46      	ldr	r2, [pc, #280]	; (8002f24 <HAL_DMA_Abort_IT+0x1dc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_DMA_Abort_IT+0xcc>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_DMA_Abort_IT+0xce>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8086 	beq.w	8002f28 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <HAL_DMA_Abort_IT+0x1a0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d04a      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2e      	ldr	r2, [pc, #184]	; (8002eec <HAL_DMA_Abort_IT+0x1a4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d045      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ef0 <HAL_DMA_Abort_IT+0x1a8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d040      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2b      	ldr	r2, [pc, #172]	; (8002ef4 <HAL_DMA_Abort_IT+0x1ac>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d03b      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <HAL_DMA_Abort_IT+0x1b0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d036      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a28      	ldr	r2, [pc, #160]	; (8002efc <HAL_DMA_Abort_IT+0x1b4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d031      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <HAL_DMA_Abort_IT+0x1b8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d02c      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <HAL_DMA_Abort_IT+0x1bc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d027      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a23      	ldr	r2, [pc, #140]	; (8002f08 <HAL_DMA_Abort_IT+0x1c0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d022      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <HAL_DMA_Abort_IT+0x1c4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d01d      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a20      	ldr	r2, [pc, #128]	; (8002f10 <HAL_DMA_Abort_IT+0x1c8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d018      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <HAL_DMA_Abort_IT+0x1cc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_DMA_Abort_IT+0x1d0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_DMA_Abort_IT+0x1d4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d009      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <HAL_DMA_Abort_IT+0x1d8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x17c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_DMA_Abort_IT+0x1dc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d108      	bne.n	8002ed6 <HAL_DMA_Abort_IT+0x18e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e178      	b.n	80031c8 <HAL_DMA_Abort_IT+0x480>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e16f      	b.n	80031c8 <HAL_DMA_Abort_IT+0x480>
 8002ee8:	40020010 	.word	0x40020010
 8002eec:	40020028 	.word	0x40020028
 8002ef0:	40020040 	.word	0x40020040
 8002ef4:	40020058 	.word	0x40020058
 8002ef8:	40020070 	.word	0x40020070
 8002efc:	40020088 	.word	0x40020088
 8002f00:	400200a0 	.word	0x400200a0
 8002f04:	400200b8 	.word	0x400200b8
 8002f08:	40020410 	.word	0x40020410
 8002f0c:	40020428 	.word	0x40020428
 8002f10:	40020440 	.word	0x40020440
 8002f14:	40020458 	.word	0x40020458
 8002f18:	40020470 	.word	0x40020470
 8002f1c:	40020488 	.word	0x40020488
 8002f20:	400204a0 	.word	0x400204a0
 8002f24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 020e 	bic.w	r2, r2, #14
 8002f36:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6c      	ldr	r2, [pc, #432]	; (80030f0 <HAL_DMA_Abort_IT+0x3a8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d04a      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6b      	ldr	r2, [pc, #428]	; (80030f4 <HAL_DMA_Abort_IT+0x3ac>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d045      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a69      	ldr	r2, [pc, #420]	; (80030f8 <HAL_DMA_Abort_IT+0x3b0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d040      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a68      	ldr	r2, [pc, #416]	; (80030fc <HAL_DMA_Abort_IT+0x3b4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d03b      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a66      	ldr	r2, [pc, #408]	; (8003100 <HAL_DMA_Abort_IT+0x3b8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d036      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a65      	ldr	r2, [pc, #404]	; (8003104 <HAL_DMA_Abort_IT+0x3bc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d031      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_DMA_Abort_IT+0x3c0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02c      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a62      	ldr	r2, [pc, #392]	; (800310c <HAL_DMA_Abort_IT+0x3c4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d027      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a60      	ldr	r2, [pc, #384]	; (8003110 <HAL_DMA_Abort_IT+0x3c8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a5f      	ldr	r2, [pc, #380]	; (8003114 <HAL_DMA_Abort_IT+0x3cc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d01d      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_DMA_Abort_IT+0x3d0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5c      	ldr	r2, [pc, #368]	; (800311c <HAL_DMA_Abort_IT+0x3d4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d013      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5a      	ldr	r2, [pc, #360]	; (8003120 <HAL_DMA_Abort_IT+0x3d8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a59      	ldr	r2, [pc, #356]	; (8003124 <HAL_DMA_Abort_IT+0x3dc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_DMA_Abort_IT+0x3e0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0x290>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_DMA_Abort_IT+0x3e4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d108      	bne.n	8002fea <HAL_DMA_Abort_IT+0x2a2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e007      	b.n	8002ffa <HAL_DMA_Abort_IT+0x2b2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a3c      	ldr	r2, [pc, #240]	; (80030f0 <HAL_DMA_Abort_IT+0x3a8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d072      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a3a      	ldr	r2, [pc, #232]	; (80030f4 <HAL_DMA_Abort_IT+0x3ac>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d06d      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <HAL_DMA_Abort_IT+0x3b0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d068      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a37      	ldr	r2, [pc, #220]	; (80030fc <HAL_DMA_Abort_IT+0x3b4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d063      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a36      	ldr	r2, [pc, #216]	; (8003100 <HAL_DMA_Abort_IT+0x3b8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d05e      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a34      	ldr	r2, [pc, #208]	; (8003104 <HAL_DMA_Abort_IT+0x3bc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d059      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a33      	ldr	r2, [pc, #204]	; (8003108 <HAL_DMA_Abort_IT+0x3c0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d054      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a31      	ldr	r2, [pc, #196]	; (800310c <HAL_DMA_Abort_IT+0x3c4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d04f      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a30      	ldr	r2, [pc, #192]	; (8003110 <HAL_DMA_Abort_IT+0x3c8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d04a      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2e      	ldr	r2, [pc, #184]	; (8003114 <HAL_DMA_Abort_IT+0x3cc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d045      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <HAL_DMA_Abort_IT+0x3d0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d040      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2b      	ldr	r2, [pc, #172]	; (800311c <HAL_DMA_Abort_IT+0x3d4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d03b      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_DMA_Abort_IT+0x3d8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d036      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <HAL_DMA_Abort_IT+0x3dc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d031      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_DMA_Abort_IT+0x3e0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d02c      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a25      	ldr	r2, [pc, #148]	; (800312c <HAL_DMA_Abort_IT+0x3e4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d027      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a24      	ldr	r2, [pc, #144]	; (8003130 <HAL_DMA_Abort_IT+0x3e8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <HAL_DMA_Abort_IT+0x3ec>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a21      	ldr	r2, [pc, #132]	; (8003138 <HAL_DMA_Abort_IT+0x3f0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d018      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1f      	ldr	r2, [pc, #124]	; (800313c <HAL_DMA_Abort_IT+0x3f4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_DMA_Abort_IT+0x3f8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <HAL_DMA_Abort_IT+0x3fc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_DMA_Abort_IT+0x400>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_DMA_Abort_IT+0x3a2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_DMA_Abort_IT+0x404>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d132      	bne.n	8003150 <HAL_DMA_Abort_IT+0x408>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e031      	b.n	8003152 <HAL_DMA_Abort_IT+0x40a>
 80030ee:	bf00      	nop
 80030f0:	40020010 	.word	0x40020010
 80030f4:	40020028 	.word	0x40020028
 80030f8:	40020040 	.word	0x40020040
 80030fc:	40020058 	.word	0x40020058
 8003100:	40020070 	.word	0x40020070
 8003104:	40020088 	.word	0x40020088
 8003108:	400200a0 	.word	0x400200a0
 800310c:	400200b8 	.word	0x400200b8
 8003110:	40020410 	.word	0x40020410
 8003114:	40020428 	.word	0x40020428
 8003118:	40020440 	.word	0x40020440
 800311c:	40020458 	.word	0x40020458
 8003120:	40020470 	.word	0x40020470
 8003124:	40020488 	.word	0x40020488
 8003128:	400204a0 	.word	0x400204a0
 800312c:	400204b8 	.word	0x400204b8
 8003130:	58025408 	.word	0x58025408
 8003134:	5802541c 	.word	0x5802541c
 8003138:	58025430 	.word	0x58025430
 800313c:	58025444 	.word	0x58025444
 8003140:	58025458 	.word	0x58025458
 8003144:	5802546c 	.word	0x5802546c
 8003148:	58025480 	.word	0x58025480
 800314c:	58025494 	.word	0x58025494
 8003150:	2300      	movs	r3, #0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d028      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003164:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	2201      	movs	r2, #1
 8003176:	409a      	lsls	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003184:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800319c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop

080031d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031e0:	4b67      	ldr	r3, [pc, #412]	; (8003380 <HAL_DMA_IRQHandler+0x1ac>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a67      	ldr	r2, [pc, #412]	; (8003384 <HAL_DMA_IRQHandler+0x1b0>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	0a9b      	lsrs	r3, r3, #10
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a5f      	ldr	r2, [pc, #380]	; (8003388 <HAL_DMA_IRQHandler+0x1b4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d04a      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5d      	ldr	r2, [pc, #372]	; (800338c <HAL_DMA_IRQHandler+0x1b8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d045      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a5c      	ldr	r2, [pc, #368]	; (8003390 <HAL_DMA_IRQHandler+0x1bc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d040      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <HAL_DMA_IRQHandler+0x1c0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d03b      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a59      	ldr	r2, [pc, #356]	; (8003398 <HAL_DMA_IRQHandler+0x1c4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d036      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a57      	ldr	r2, [pc, #348]	; (800339c <HAL_DMA_IRQHandler+0x1c8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d031      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a56      	ldr	r2, [pc, #344]	; (80033a0 <HAL_DMA_IRQHandler+0x1cc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d02c      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a54      	ldr	r2, [pc, #336]	; (80033a4 <HAL_DMA_IRQHandler+0x1d0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d027      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a53      	ldr	r2, [pc, #332]	; (80033a8 <HAL_DMA_IRQHandler+0x1d4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d022      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a51      	ldr	r2, [pc, #324]	; (80033ac <HAL_DMA_IRQHandler+0x1d8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01d      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a50      	ldr	r2, [pc, #320]	; (80033b0 <HAL_DMA_IRQHandler+0x1dc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d018      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a4e      	ldr	r2, [pc, #312]	; (80033b4 <HAL_DMA_IRQHandler+0x1e0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a4d      	ldr	r2, [pc, #308]	; (80033b8 <HAL_DMA_IRQHandler+0x1e4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00e      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4b      	ldr	r2, [pc, #300]	; (80033bc <HAL_DMA_IRQHandler+0x1e8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4a      	ldr	r2, [pc, #296]	; (80033c0 <HAL_DMA_IRQHandler+0x1ec>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_DMA_IRQHandler+0xd2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a48      	ldr	r2, [pc, #288]	; (80033c4 <HAL_DMA_IRQHandler+0x1f0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d101      	bne.n	80032aa <HAL_DMA_IRQHandler+0xd6>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_DMA_IRQHandler+0xd8>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 842b 	beq.w	8003b08 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	2208      	movs	r2, #8
 80032bc:	409a      	lsls	r2, r3
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80a2 	beq.w	800340c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2e      	ldr	r2, [pc, #184]	; (8003388 <HAL_DMA_IRQHandler+0x1b4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d04a      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2d      	ldr	r2, [pc, #180]	; (800338c <HAL_DMA_IRQHandler+0x1b8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d045      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <HAL_DMA_IRQHandler+0x1bc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d040      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2a      	ldr	r2, [pc, #168]	; (8003394 <HAL_DMA_IRQHandler+0x1c0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d03b      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a28      	ldr	r2, [pc, #160]	; (8003398 <HAL_DMA_IRQHandler+0x1c4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d036      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a27      	ldr	r2, [pc, #156]	; (800339c <HAL_DMA_IRQHandler+0x1c8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d031      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <HAL_DMA_IRQHandler+0x1cc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02c      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_DMA_IRQHandler+0x1d0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d027      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_DMA_IRQHandler+0x1d4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d022      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a21      	ldr	r2, [pc, #132]	; (80033ac <HAL_DMA_IRQHandler+0x1d8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01d      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <HAL_DMA_IRQHandler+0x1dc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d018      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_DMA_IRQHandler+0x1e0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <HAL_DMA_IRQHandler+0x1e4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00e      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <HAL_DMA_IRQHandler+0x1e8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <HAL_DMA_IRQHandler+0x1ec>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_DMA_IRQHandler+0x194>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_DMA_IRQHandler+0x1f0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d12f      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x1f4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	e02e      	b.n	80033dc <HAL_DMA_IRQHandler+0x208>
 800337e:	bf00      	nop
 8003380:	24000000 	.word	0x24000000
 8003384:	1b4e81b5 	.word	0x1b4e81b5
 8003388:	40020010 	.word	0x40020010
 800338c:	40020028 	.word	0x40020028
 8003390:	40020040 	.word	0x40020040
 8003394:	40020058 	.word	0x40020058
 8003398:	40020070 	.word	0x40020070
 800339c:	40020088 	.word	0x40020088
 80033a0:	400200a0 	.word	0x400200a0
 80033a4:	400200b8 	.word	0x400200b8
 80033a8:	40020410 	.word	0x40020410
 80033ac:	40020428 	.word	0x40020428
 80033b0:	40020440 	.word	0x40020440
 80033b4:	40020458 	.word	0x40020458
 80033b8:	40020470 	.word	0x40020470
 80033bc:	40020488 	.word	0x40020488
 80033c0:	400204a0 	.word	0x400204a0
 80033c4:	400204b8 	.word	0x400204b8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0204 	bic.w	r2, r2, #4
 80033ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2208      	movs	r2, #8
 80033fa:	409a      	lsls	r2, r3
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	fa22 f303 	lsr.w	r3, r2, r3
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d06e      	beq.n	8003500 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a69      	ldr	r2, [pc, #420]	; (80035cc <HAL_DMA_IRQHandler+0x3f8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d04a      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a67      	ldr	r2, [pc, #412]	; (80035d0 <HAL_DMA_IRQHandler+0x3fc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d045      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a66      	ldr	r2, [pc, #408]	; (80035d4 <HAL_DMA_IRQHandler+0x400>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d040      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a64      	ldr	r2, [pc, #400]	; (80035d8 <HAL_DMA_IRQHandler+0x404>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d03b      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a63      	ldr	r2, [pc, #396]	; (80035dc <HAL_DMA_IRQHandler+0x408>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d036      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_DMA_IRQHandler+0x40c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d031      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a60      	ldr	r2, [pc, #384]	; (80035e4 <HAL_DMA_IRQHandler+0x410>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d02c      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a5e      	ldr	r2, [pc, #376]	; (80035e8 <HAL_DMA_IRQHandler+0x414>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5d      	ldr	r2, [pc, #372]	; (80035ec <HAL_DMA_IRQHandler+0x418>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d022      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5b      	ldr	r2, [pc, #364]	; (80035f0 <HAL_DMA_IRQHandler+0x41c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01d      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a5a      	ldr	r2, [pc, #360]	; (80035f4 <HAL_DMA_IRQHandler+0x420>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_DMA_IRQHandler+0x424>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a57      	ldr	r2, [pc, #348]	; (80035fc <HAL_DMA_IRQHandler+0x428>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a55      	ldr	r2, [pc, #340]	; (8003600 <HAL_DMA_IRQHandler+0x42c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d009      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a54      	ldr	r2, [pc, #336]	; (8003604 <HAL_DMA_IRQHandler+0x430>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d004      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x2ee>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a52      	ldr	r2, [pc, #328]	; (8003608 <HAL_DMA_IRQHandler+0x434>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10a      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x304>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e003      	b.n	80034e0 <HAL_DMA_IRQHandler+0x30c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	f043 0202 	orr.w	r2, r3, #2
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2204      	movs	r2, #4
 800350a:	409a      	lsls	r2, r3
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 808f 	beq.w	8003634 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <HAL_DMA_IRQHandler+0x3f8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d04a      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <HAL_DMA_IRQHandler+0x3fc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d045      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <HAL_DMA_IRQHandler+0x400>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d040      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_DMA_IRQHandler+0x404>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d03b      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a26      	ldr	r2, [pc, #152]	; (80035dc <HAL_DMA_IRQHandler+0x408>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d036      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <HAL_DMA_IRQHandler+0x40c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d031      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <HAL_DMA_IRQHandler+0x410>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d02c      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <HAL_DMA_IRQHandler+0x414>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d027      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a20      	ldr	r2, [pc, #128]	; (80035ec <HAL_DMA_IRQHandler+0x418>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d022      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <HAL_DMA_IRQHandler+0x41c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01d      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1d      	ldr	r2, [pc, #116]	; (80035f4 <HAL_DMA_IRQHandler+0x420>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d018      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <HAL_DMA_IRQHandler+0x424>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <HAL_DMA_IRQHandler+0x428>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00e      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a18      	ldr	r2, [pc, #96]	; (8003600 <HAL_DMA_IRQHandler+0x42c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a17      	ldr	r2, [pc, #92]	; (8003604 <HAL_DMA_IRQHandler+0x430>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x3e2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a15      	ldr	r2, [pc, #84]	; (8003608 <HAL_DMA_IRQHandler+0x434>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d12a      	bne.n	800360c <HAL_DMA_IRQHandler+0x438>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e023      	b.n	8003614 <HAL_DMA_IRQHandler+0x440>
 80035cc:	40020010 	.word	0x40020010
 80035d0:	40020028 	.word	0x40020028
 80035d4:	40020040 	.word	0x40020040
 80035d8:	40020058 	.word	0x40020058
 80035dc:	40020070 	.word	0x40020070
 80035e0:	40020088 	.word	0x40020088
 80035e4:	400200a0 	.word	0x400200a0
 80035e8:	400200b8 	.word	0x400200b8
 80035ec:	40020410 	.word	0x40020410
 80035f0:	40020428 	.word	0x40020428
 80035f4:	40020440 	.word	0x40020440
 80035f8:	40020458 	.word	0x40020458
 80035fc:	40020470 	.word	0x40020470
 8003600:	40020488 	.word	0x40020488
 8003604:	400204a0 	.word	0x400204a0
 8003608:	400204b8 	.word	0x400204b8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2204      	movs	r2, #4
 8003622:	409a      	lsls	r2, r3
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	f043 0204 	orr.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2210      	movs	r2, #16
 800363e:	409a      	lsls	r2, r3
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a6 	beq.w	8003796 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a85      	ldr	r2, [pc, #532]	; (8003864 <HAL_DMA_IRQHandler+0x690>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d04a      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a83      	ldr	r2, [pc, #524]	; (8003868 <HAL_DMA_IRQHandler+0x694>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d045      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a82      	ldr	r2, [pc, #520]	; (800386c <HAL_DMA_IRQHandler+0x698>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d040      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a80      	ldr	r2, [pc, #512]	; (8003870 <HAL_DMA_IRQHandler+0x69c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d03b      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7f      	ldr	r2, [pc, #508]	; (8003874 <HAL_DMA_IRQHandler+0x6a0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d036      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a7d      	ldr	r2, [pc, #500]	; (8003878 <HAL_DMA_IRQHandler+0x6a4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d031      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7c      	ldr	r2, [pc, #496]	; (800387c <HAL_DMA_IRQHandler+0x6a8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d02c      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a7a      	ldr	r2, [pc, #488]	; (8003880 <HAL_DMA_IRQHandler+0x6ac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d027      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a79      	ldr	r2, [pc, #484]	; (8003884 <HAL_DMA_IRQHandler+0x6b0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a77      	ldr	r2, [pc, #476]	; (8003888 <HAL_DMA_IRQHandler+0x6b4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01d      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a76      	ldr	r2, [pc, #472]	; (800388c <HAL_DMA_IRQHandler+0x6b8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a74      	ldr	r2, [pc, #464]	; (8003890 <HAL_DMA_IRQHandler+0x6bc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a73      	ldr	r2, [pc, #460]	; (8003894 <HAL_DMA_IRQHandler+0x6c0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a71      	ldr	r2, [pc, #452]	; (8003898 <HAL_DMA_IRQHandler+0x6c4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a70      	ldr	r2, [pc, #448]	; (800389c <HAL_DMA_IRQHandler+0x6c8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_DMA_IRQHandler+0x516>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6e      	ldr	r2, [pc, #440]	; (80038a0 <HAL_DMA_IRQHandler+0x6cc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10a      	bne.n	8003700 <HAL_DMA_IRQHandler+0x52c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e009      	b.n	8003714 <HAL_DMA_IRQHandler+0x540>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	bf14      	ite	ne
 800370e:	2301      	movne	r3, #1
 8003710:	2300      	moveq	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d03e      	beq.n	8003796 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2210      	movs	r2, #16
 8003722:	409a      	lsls	r2, r3
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d018      	beq.n	8003768 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d108      	bne.n	8003756 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d024      	beq.n	8003796 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
 8003754:	e01f      	b.n	8003796 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01b      	beq.n	8003796 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
 8003766:	e016      	b.n	8003796 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d107      	bne.n	8003786 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0208 	bic.w	r2, r2, #8
 8003784:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2220      	movs	r2, #32
 80037a0:	409a      	lsls	r2, r3
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8110 	beq.w	80039cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2c      	ldr	r2, [pc, #176]	; (8003864 <HAL_DMA_IRQHandler+0x690>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <HAL_DMA_IRQHandler+0x694>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a29      	ldr	r2, [pc, #164]	; (800386c <HAL_DMA_IRQHandler+0x698>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a28      	ldr	r2, [pc, #160]	; (8003870 <HAL_DMA_IRQHandler+0x69c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a26      	ldr	r2, [pc, #152]	; (8003874 <HAL_DMA_IRQHandler+0x6a0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a25      	ldr	r2, [pc, #148]	; (8003878 <HAL_DMA_IRQHandler+0x6a4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a23      	ldr	r2, [pc, #140]	; (800387c <HAL_DMA_IRQHandler+0x6a8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a22      	ldr	r2, [pc, #136]	; (8003880 <HAL_DMA_IRQHandler+0x6ac>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a20      	ldr	r2, [pc, #128]	; (8003884 <HAL_DMA_IRQHandler+0x6b0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1f      	ldr	r2, [pc, #124]	; (8003888 <HAL_DMA_IRQHandler+0x6b4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <HAL_DMA_IRQHandler+0x6b8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_DMA_IRQHandler+0x6bc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1a      	ldr	r2, [pc, #104]	; (8003894 <HAL_DMA_IRQHandler+0x6c0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a19      	ldr	r2, [pc, #100]	; (8003898 <HAL_DMA_IRQHandler+0x6c4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a17      	ldr	r2, [pc, #92]	; (800389c <HAL_DMA_IRQHandler+0x6c8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_IRQHandler+0x678>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <HAL_DMA_IRQHandler+0x6cc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d12b      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x6d0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e02a      	b.n	80038b8 <HAL_DMA_IRQHandler+0x6e4>
 8003862:	bf00      	nop
 8003864:	40020010 	.word	0x40020010
 8003868:	40020028 	.word	0x40020028
 800386c:	40020040 	.word	0x40020040
 8003870:	40020058 	.word	0x40020058
 8003874:	40020070 	.word	0x40020070
 8003878:	40020088 	.word	0x40020088
 800387c:	400200a0 	.word	0x400200a0
 8003880:	400200b8 	.word	0x400200b8
 8003884:	40020410 	.word	0x40020410
 8003888:	40020428 	.word	0x40020428
 800388c:	40020440 	.word	0x40020440
 8003890:	40020458 	.word	0x40020458
 8003894:	40020470 	.word	0x40020470
 8003898:	40020488 	.word	0x40020488
 800389c:	400204a0 	.word	0x400204a0
 80038a0:	400204b8 	.word	0x400204b8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf14      	ite	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	2300      	moveq	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8087 	beq.w	80039cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2220      	movs	r2, #32
 80038c8:	409a      	lsls	r2, r3
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d139      	bne.n	800394e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0216 	bic.w	r2, r2, #22
 80038e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d103      	bne.n	800390a <HAL_DMA_IRQHandler+0x736>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0208 	bic.w	r2, r2, #8
 8003918:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	223f      	movs	r2, #63	; 0x3f
 8003924:	409a      	lsls	r2, r3
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 834a 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
          }
          return;
 800394c:	e344      	b.n	8003fd8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d018      	beq.n	800398e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d108      	bne.n	800397c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	2b00      	cmp	r3, #0
 8003970:	d02c      	beq.n	80039cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
 800397a:	e027      	b.n	80039cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d023      	beq.n	80039cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
 800398c:	e01e      	b.n	80039cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10f      	bne.n	80039bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0210 	bic.w	r2, r2, #16
 80039aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8306 	beq.w	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8088 	beq.w	8003af4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2204      	movs	r2, #4
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a7a      	ldr	r2, [pc, #488]	; (8003bdc <HAL_DMA_IRQHandler+0xa08>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d04a      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a79      	ldr	r2, [pc, #484]	; (8003be0 <HAL_DMA_IRQHandler+0xa0c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d045      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_DMA_IRQHandler+0xa10>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d040      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a76      	ldr	r2, [pc, #472]	; (8003be8 <HAL_DMA_IRQHandler+0xa14>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d03b      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a74      	ldr	r2, [pc, #464]	; (8003bec <HAL_DMA_IRQHandler+0xa18>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d036      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a73      	ldr	r2, [pc, #460]	; (8003bf0 <HAL_DMA_IRQHandler+0xa1c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d031      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a71      	ldr	r2, [pc, #452]	; (8003bf4 <HAL_DMA_IRQHandler+0xa20>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d02c      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a70      	ldr	r2, [pc, #448]	; (8003bf8 <HAL_DMA_IRQHandler+0xa24>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d027      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6e      	ldr	r2, [pc, #440]	; (8003bfc <HAL_DMA_IRQHandler+0xa28>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d022      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6d      	ldr	r2, [pc, #436]	; (8003c00 <HAL_DMA_IRQHandler+0xa2c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d01d      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a6b      	ldr	r2, [pc, #428]	; (8003c04 <HAL_DMA_IRQHandler+0xa30>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d018      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6a      	ldr	r2, [pc, #424]	; (8003c08 <HAL_DMA_IRQHandler+0xa34>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a68      	ldr	r2, [pc, #416]	; (8003c0c <HAL_DMA_IRQHandler+0xa38>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00e      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a67      	ldr	r2, [pc, #412]	; (8003c10 <HAL_DMA_IRQHandler+0xa3c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d009      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a65      	ldr	r2, [pc, #404]	; (8003c14 <HAL_DMA_IRQHandler+0xa40>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_DMA_IRQHandler+0x8b8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a64      	ldr	r2, [pc, #400]	; (8003c18 <HAL_DMA_IRQHandler+0xa44>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <HAL_DMA_IRQHandler+0x8ca>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e007      	b.n	8003aae <HAL_DMA_IRQHandler+0x8da>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d307      	bcc.n	8003aca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f2      	bne.n	8003aae <HAL_DMA_IRQHandler+0x8da>
 8003ac8:	e000      	b.n	8003acc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003aca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2203      	movs	r2, #3
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003ae2:	e003      	b.n	8003aec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8272 	beq.w	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
 8003b06:	e26c      	b.n	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a43      	ldr	r2, [pc, #268]	; (8003c1c <HAL_DMA_IRQHandler+0xa48>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d022      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x984>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a42      	ldr	r2, [pc, #264]	; (8003c20 <HAL_DMA_IRQHandler+0xa4c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01d      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x984>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a40      	ldr	r2, [pc, #256]	; (8003c24 <HAL_DMA_IRQHandler+0xa50>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x984>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3f      	ldr	r2, [pc, #252]	; (8003c28 <HAL_DMA_IRQHandler+0xa54>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x984>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3d      	ldr	r2, [pc, #244]	; (8003c2c <HAL_DMA_IRQHandler+0xa58>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x984>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a3c      	ldr	r2, [pc, #240]	; (8003c30 <HAL_DMA_IRQHandler+0xa5c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d009      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x984>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a3a      	ldr	r2, [pc, #232]	; (8003c34 <HAL_DMA_IRQHandler+0xa60>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x984>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a39      	ldr	r2, [pc, #228]	; (8003c38 <HAL_DMA_IRQHandler+0xa64>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_DMA_IRQHandler+0x988>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_DMA_IRQHandler+0x98a>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 823f 	beq.w	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2204      	movs	r2, #4
 8003b76:	409a      	lsls	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80cd 	beq.w	8003d1c <HAL_DMA_IRQHandler+0xb48>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80c7 	beq.w	8003d1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	2204      	movs	r2, #4
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d049      	beq.n	8003c3c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8210 	beq.w	8003fdc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc4:	e20a      	b.n	8003fdc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8206 	beq.w	8003fdc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd8:	e200      	b.n	8003fdc <HAL_DMA_IRQHandler+0xe08>
 8003bda:	bf00      	nop
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
 8003c1c:	58025408 	.word	0x58025408
 8003c20:	5802541c 	.word	0x5802541c
 8003c24:	58025430 	.word	0x58025430
 8003c28:	58025444 	.word	0x58025444
 8003c2c:	58025458 	.word	0x58025458
 8003c30:	5802546c 	.word	0x5802546c
 8003c34:	58025480 	.word	0x58025480
 8003c38:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f003 0320 	and.w	r3, r3, #32
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d160      	bne.n	8003d08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a7f      	ldr	r2, [pc, #508]	; (8003e48 <HAL_DMA_IRQHandler+0xc74>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d04a      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7d      	ldr	r2, [pc, #500]	; (8003e4c <HAL_DMA_IRQHandler+0xc78>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d045      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7c      	ldr	r2, [pc, #496]	; (8003e50 <HAL_DMA_IRQHandler+0xc7c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d040      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a7a      	ldr	r2, [pc, #488]	; (8003e54 <HAL_DMA_IRQHandler+0xc80>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a79      	ldr	r2, [pc, #484]	; (8003e58 <HAL_DMA_IRQHandler+0xc84>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d036      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a77      	ldr	r2, [pc, #476]	; (8003e5c <HAL_DMA_IRQHandler+0xc88>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d031      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a76      	ldr	r2, [pc, #472]	; (8003e60 <HAL_DMA_IRQHandler+0xc8c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d02c      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a74      	ldr	r2, [pc, #464]	; (8003e64 <HAL_DMA_IRQHandler+0xc90>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d027      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a73      	ldr	r2, [pc, #460]	; (8003e68 <HAL_DMA_IRQHandler+0xc94>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d022      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a71      	ldr	r2, [pc, #452]	; (8003e6c <HAL_DMA_IRQHandler+0xc98>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a70      	ldr	r2, [pc, #448]	; (8003e70 <HAL_DMA_IRQHandler+0xc9c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d018      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6e      	ldr	r2, [pc, #440]	; (8003e74 <HAL_DMA_IRQHandler+0xca0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6d      	ldr	r2, [pc, #436]	; (8003e78 <HAL_DMA_IRQHandler+0xca4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6b      	ldr	r2, [pc, #428]	; (8003e7c <HAL_DMA_IRQHandler+0xca8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6a      	ldr	r2, [pc, #424]	; (8003e80 <HAL_DMA_IRQHandler+0xcac>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xb12>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a68      	ldr	r2, [pc, #416]	; (8003e84 <HAL_DMA_IRQHandler+0xcb0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d108      	bne.n	8003cf8 <HAL_DMA_IRQHandler+0xb24>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0208 	bic.w	r2, r2, #8
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e007      	b.n	8003d08 <HAL_DMA_IRQHandler+0xb34>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0204 	bic.w	r2, r2, #4
 8003d06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8165 	beq.w	8003fdc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d1a:	e15f      	b.n	8003fdc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2202      	movs	r2, #2
 8003d26:	409a      	lsls	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80c5 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xce8>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80bf 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	2202      	movs	r2, #2
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 813a 	beq.w	8003fe0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d74:	e134      	b.n	8003fe0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8130 	beq.w	8003fe0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d88:	e12a      	b.n	8003fe0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f040 8089 	bne.w	8003ea8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <HAL_DMA_IRQHandler+0xc74>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d04a      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <HAL_DMA_IRQHandler+0xc78>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d045      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a28      	ldr	r2, [pc, #160]	; (8003e50 <HAL_DMA_IRQHandler+0xc7c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d040      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <HAL_DMA_IRQHandler+0xc80>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d03b      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a25      	ldr	r2, [pc, #148]	; (8003e58 <HAL_DMA_IRQHandler+0xc84>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d036      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <HAL_DMA_IRQHandler+0xc88>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d031      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <HAL_DMA_IRQHandler+0xc8c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d02c      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a20      	ldr	r2, [pc, #128]	; (8003e64 <HAL_DMA_IRQHandler+0xc90>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d027      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <HAL_DMA_IRQHandler+0xc94>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d022      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <HAL_DMA_IRQHandler+0xc98>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01d      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1c      	ldr	r2, [pc, #112]	; (8003e70 <HAL_DMA_IRQHandler+0xc9c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d018      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <HAL_DMA_IRQHandler+0xca0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <HAL_DMA_IRQHandler+0xca4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00e      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <HAL_DMA_IRQHandler+0xca8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <HAL_DMA_IRQHandler+0xcac>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_DMA_IRQHandler+0xc62>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <HAL_DMA_IRQHandler+0xcb0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d128      	bne.n	8003e88 <HAL_DMA_IRQHandler+0xcb4>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0214 	bic.w	r2, r2, #20
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e027      	b.n	8003e98 <HAL_DMA_IRQHandler+0xcc4>
 8003e48:	40020010 	.word	0x40020010
 8003e4c:	40020028 	.word	0x40020028
 8003e50:	40020040 	.word	0x40020040
 8003e54:	40020058 	.word	0x40020058
 8003e58:	40020070 	.word	0x40020070
 8003e5c:	40020088 	.word	0x40020088
 8003e60:	400200a0 	.word	0x400200a0
 8003e64:	400200b8 	.word	0x400200b8
 8003e68:	40020410 	.word	0x40020410
 8003e6c:	40020428 	.word	0x40020428
 8003e70:	40020440 	.word	0x40020440
 8003e74:	40020458 	.word	0x40020458
 8003e78:	40020470 	.word	0x40020470
 8003e7c:	40020488 	.word	0x40020488
 8003e80:	400204a0 	.word	0x400204a0
 8003e84:	400204b8 	.word	0x400204b8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 020a 	bic.w	r2, r2, #10
 8003e96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8097 	beq.w	8003fe0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eba:	e091      	b.n	8003fe0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8088 	beq.w	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8082 	beq.w	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a41      	ldr	r2, [pc, #260]	; (8003fe8 <HAL_DMA_IRQHandler+0xe14>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d04a      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a3f      	ldr	r2, [pc, #252]	; (8003fec <HAL_DMA_IRQHandler+0xe18>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d045      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a3e      	ldr	r2, [pc, #248]	; (8003ff0 <HAL_DMA_IRQHandler+0xe1c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d040      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a3c      	ldr	r2, [pc, #240]	; (8003ff4 <HAL_DMA_IRQHandler+0xe20>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d03b      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a3b      	ldr	r2, [pc, #236]	; (8003ff8 <HAL_DMA_IRQHandler+0xe24>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d036      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a39      	ldr	r2, [pc, #228]	; (8003ffc <HAL_DMA_IRQHandler+0xe28>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d031      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a38      	ldr	r2, [pc, #224]	; (8004000 <HAL_DMA_IRQHandler+0xe2c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d02c      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a36      	ldr	r2, [pc, #216]	; (8004004 <HAL_DMA_IRQHandler+0xe30>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d027      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a35      	ldr	r2, [pc, #212]	; (8004008 <HAL_DMA_IRQHandler+0xe34>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a33      	ldr	r2, [pc, #204]	; (800400c <HAL_DMA_IRQHandler+0xe38>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a32      	ldr	r2, [pc, #200]	; (8004010 <HAL_DMA_IRQHandler+0xe3c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a30      	ldr	r2, [pc, #192]	; (8004014 <HAL_DMA_IRQHandler+0xe40>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <HAL_DMA_IRQHandler+0xe44>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2d      	ldr	r2, [pc, #180]	; (800401c <HAL_DMA_IRQHandler+0xe48>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <HAL_DMA_IRQHandler+0xe4c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_DMA_IRQHandler+0xdaa>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <HAL_DMA_IRQHandler+0xe50>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d108      	bne.n	8003f90 <HAL_DMA_IRQHandler+0xdbc>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 021c 	bic.w	r2, r2, #28
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e007      	b.n	8003fa0 <HAL_DMA_IRQHandler+0xdcc>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 020e 	bic.w	r2, r2, #14
 8003f9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	2201      	movs	r2, #1
 8003faa:	409a      	lsls	r2, r3
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
 8003fd6:	e004      	b.n	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003fd8:	bf00      	nop
 8003fda:	e002      	b.n	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fdc:	bf00      	nop
 8003fde:	e000      	b.n	8003fe2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fe0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fe2:	3728      	adds	r7, #40	; 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40020010 	.word	0x40020010
 8003fec:	40020028 	.word	0x40020028
 8003ff0:	40020040 	.word	0x40020040
 8003ff4:	40020058 	.word	0x40020058
 8003ff8:	40020070 	.word	0x40020070
 8003ffc:	40020088 	.word	0x40020088
 8004000:	400200a0 	.word	0x400200a0
 8004004:	400200b8 	.word	0x400200b8
 8004008:	40020410 	.word	0x40020410
 800400c:	40020428 	.word	0x40020428
 8004010:	40020440 	.word	0x40020440
 8004014:	40020458 	.word	0x40020458
 8004018:	40020470 	.word	0x40020470
 800401c:	40020488 	.word	0x40020488
 8004020:	400204a0 	.word	0x400204a0
 8004024:	400204b8 	.word	0x400204b8

08004028 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7f      	ldr	r2, [pc, #508]	; (8004244 <DMA_SetConfig+0x21c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d072      	beq.n	8004132 <DMA_SetConfig+0x10a>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a7d      	ldr	r2, [pc, #500]	; (8004248 <DMA_SetConfig+0x220>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d06d      	beq.n	8004132 <DMA_SetConfig+0x10a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7c      	ldr	r2, [pc, #496]	; (800424c <DMA_SetConfig+0x224>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d068      	beq.n	8004132 <DMA_SetConfig+0x10a>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a7a      	ldr	r2, [pc, #488]	; (8004250 <DMA_SetConfig+0x228>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d063      	beq.n	8004132 <DMA_SetConfig+0x10a>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a79      	ldr	r2, [pc, #484]	; (8004254 <DMA_SetConfig+0x22c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d05e      	beq.n	8004132 <DMA_SetConfig+0x10a>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a77      	ldr	r2, [pc, #476]	; (8004258 <DMA_SetConfig+0x230>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d059      	beq.n	8004132 <DMA_SetConfig+0x10a>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a76      	ldr	r2, [pc, #472]	; (800425c <DMA_SetConfig+0x234>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d054      	beq.n	8004132 <DMA_SetConfig+0x10a>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a74      	ldr	r2, [pc, #464]	; (8004260 <DMA_SetConfig+0x238>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d04f      	beq.n	8004132 <DMA_SetConfig+0x10a>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a73      	ldr	r2, [pc, #460]	; (8004264 <DMA_SetConfig+0x23c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d04a      	beq.n	8004132 <DMA_SetConfig+0x10a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a71      	ldr	r2, [pc, #452]	; (8004268 <DMA_SetConfig+0x240>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d045      	beq.n	8004132 <DMA_SetConfig+0x10a>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a70      	ldr	r2, [pc, #448]	; (800426c <DMA_SetConfig+0x244>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d040      	beq.n	8004132 <DMA_SetConfig+0x10a>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6e      	ldr	r2, [pc, #440]	; (8004270 <DMA_SetConfig+0x248>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d03b      	beq.n	8004132 <DMA_SetConfig+0x10a>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6d      	ldr	r2, [pc, #436]	; (8004274 <DMA_SetConfig+0x24c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d036      	beq.n	8004132 <DMA_SetConfig+0x10a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6b      	ldr	r2, [pc, #428]	; (8004278 <DMA_SetConfig+0x250>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d031      	beq.n	8004132 <DMA_SetConfig+0x10a>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6a      	ldr	r2, [pc, #424]	; (800427c <DMA_SetConfig+0x254>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d02c      	beq.n	8004132 <DMA_SetConfig+0x10a>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a68      	ldr	r2, [pc, #416]	; (8004280 <DMA_SetConfig+0x258>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d027      	beq.n	8004132 <DMA_SetConfig+0x10a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a67      	ldr	r2, [pc, #412]	; (8004284 <DMA_SetConfig+0x25c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d022      	beq.n	8004132 <DMA_SetConfig+0x10a>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a65      	ldr	r2, [pc, #404]	; (8004288 <DMA_SetConfig+0x260>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01d      	beq.n	8004132 <DMA_SetConfig+0x10a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a64      	ldr	r2, [pc, #400]	; (800428c <DMA_SetConfig+0x264>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d018      	beq.n	8004132 <DMA_SetConfig+0x10a>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a62      	ldr	r2, [pc, #392]	; (8004290 <DMA_SetConfig+0x268>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <DMA_SetConfig+0x10a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a61      	ldr	r2, [pc, #388]	; (8004294 <DMA_SetConfig+0x26c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00e      	beq.n	8004132 <DMA_SetConfig+0x10a>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5f      	ldr	r2, [pc, #380]	; (8004298 <DMA_SetConfig+0x270>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d009      	beq.n	8004132 <DMA_SetConfig+0x10a>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5e      	ldr	r2, [pc, #376]	; (800429c <DMA_SetConfig+0x274>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <DMA_SetConfig+0x10a>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5c      	ldr	r2, [pc, #368]	; (80042a0 <DMA_SetConfig+0x278>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <DMA_SetConfig+0x10e>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <DMA_SetConfig+0x110>
 8004136:	2300      	movs	r3, #0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00d      	beq.n	8004158 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004144:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004156:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a39      	ldr	r2, [pc, #228]	; (8004244 <DMA_SetConfig+0x21c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d04a      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a38      	ldr	r2, [pc, #224]	; (8004248 <DMA_SetConfig+0x220>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d045      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a36      	ldr	r2, [pc, #216]	; (800424c <DMA_SetConfig+0x224>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d040      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a35      	ldr	r2, [pc, #212]	; (8004250 <DMA_SetConfig+0x228>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d03b      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a33      	ldr	r2, [pc, #204]	; (8004254 <DMA_SetConfig+0x22c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d036      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a32      	ldr	r2, [pc, #200]	; (8004258 <DMA_SetConfig+0x230>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d031      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a30      	ldr	r2, [pc, #192]	; (800425c <DMA_SetConfig+0x234>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02c      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a2f      	ldr	r2, [pc, #188]	; (8004260 <DMA_SetConfig+0x238>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d027      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <DMA_SetConfig+0x23c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d022      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2c      	ldr	r2, [pc, #176]	; (8004268 <DMA_SetConfig+0x240>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d01d      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2a      	ldr	r2, [pc, #168]	; (800426c <DMA_SetConfig+0x244>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d018      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a29      	ldr	r2, [pc, #164]	; (8004270 <DMA_SetConfig+0x248>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d013      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a27      	ldr	r2, [pc, #156]	; (8004274 <DMA_SetConfig+0x24c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00e      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a26      	ldr	r2, [pc, #152]	; (8004278 <DMA_SetConfig+0x250>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d009      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <DMA_SetConfig+0x254>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <DMA_SetConfig+0x1d0>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a23      	ldr	r2, [pc, #140]	; (8004280 <DMA_SetConfig+0x258>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <DMA_SetConfig+0x1d4>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <DMA_SetConfig+0x1d6>
 80041fc:	2300      	movs	r3, #0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d059      	beq.n	80042b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	223f      	movs	r2, #63	; 0x3f
 800420c:	409a      	lsls	r2, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004220:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d138      	bne.n	80042a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004242:	e086      	b.n	8004352 <DMA_SetConfig+0x32a>
 8004244:	40020010 	.word	0x40020010
 8004248:	40020028 	.word	0x40020028
 800424c:	40020040 	.word	0x40020040
 8004250:	40020058 	.word	0x40020058
 8004254:	40020070 	.word	0x40020070
 8004258:	40020088 	.word	0x40020088
 800425c:	400200a0 	.word	0x400200a0
 8004260:	400200b8 	.word	0x400200b8
 8004264:	40020410 	.word	0x40020410
 8004268:	40020428 	.word	0x40020428
 800426c:	40020440 	.word	0x40020440
 8004270:	40020458 	.word	0x40020458
 8004274:	40020470 	.word	0x40020470
 8004278:	40020488 	.word	0x40020488
 800427c:	400204a0 	.word	0x400204a0
 8004280:	400204b8 	.word	0x400204b8
 8004284:	58025408 	.word	0x58025408
 8004288:	5802541c 	.word	0x5802541c
 800428c:	58025430 	.word	0x58025430
 8004290:	58025444 	.word	0x58025444
 8004294:	58025458 	.word	0x58025458
 8004298:	5802546c 	.word	0x5802546c
 800429c:	58025480 	.word	0x58025480
 80042a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]
}
 80042b4:	e04d      	b.n	8004352 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a29      	ldr	r2, [pc, #164]	; (8004360 <DMA_SetConfig+0x338>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d022      	beq.n	8004306 <DMA_SetConfig+0x2de>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <DMA_SetConfig+0x33c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01d      	beq.n	8004306 <DMA_SetConfig+0x2de>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a26      	ldr	r2, [pc, #152]	; (8004368 <DMA_SetConfig+0x340>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d018      	beq.n	8004306 <DMA_SetConfig+0x2de>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a24      	ldr	r2, [pc, #144]	; (800436c <DMA_SetConfig+0x344>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <DMA_SetConfig+0x2de>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a23      	ldr	r2, [pc, #140]	; (8004370 <DMA_SetConfig+0x348>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <DMA_SetConfig+0x2de>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a21      	ldr	r2, [pc, #132]	; (8004374 <DMA_SetConfig+0x34c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <DMA_SetConfig+0x2de>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a20      	ldr	r2, [pc, #128]	; (8004378 <DMA_SetConfig+0x350>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <DMA_SetConfig+0x2de>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1e      	ldr	r2, [pc, #120]	; (800437c <DMA_SetConfig+0x354>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <DMA_SetConfig+0x2e2>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <DMA_SetConfig+0x2e4>
 800430a:	2300      	movs	r3, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2201      	movs	r2, #1
 800431a:	409a      	lsls	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b40      	cmp	r3, #64	; 0x40
 800432e:	d108      	bne.n	8004342 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	60da      	str	r2, [r3, #12]
}
 8004340:	e007      	b.n	8004352 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	60da      	str	r2, [r3, #12]
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	58025408 	.word	0x58025408
 8004364:	5802541c 	.word	0x5802541c
 8004368:	58025430 	.word	0x58025430
 800436c:	58025444 	.word	0x58025444
 8004370:	58025458 	.word	0x58025458
 8004374:	5802546c 	.word	0x5802546c
 8004378:	58025480 	.word	0x58025480
 800437c:	58025494 	.word	0x58025494

08004380 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a42      	ldr	r2, [pc, #264]	; (8004498 <DMA_CalcBaseAndBitshift+0x118>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d04a      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a41      	ldr	r2, [pc, #260]	; (800449c <DMA_CalcBaseAndBitshift+0x11c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d045      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3f      	ldr	r2, [pc, #252]	; (80044a0 <DMA_CalcBaseAndBitshift+0x120>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d040      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a3e      	ldr	r2, [pc, #248]	; (80044a4 <DMA_CalcBaseAndBitshift+0x124>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d03b      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a3c      	ldr	r2, [pc, #240]	; (80044a8 <DMA_CalcBaseAndBitshift+0x128>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d036      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a3b      	ldr	r2, [pc, #236]	; (80044ac <DMA_CalcBaseAndBitshift+0x12c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d031      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a39      	ldr	r2, [pc, #228]	; (80044b0 <DMA_CalcBaseAndBitshift+0x130>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d02c      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a38      	ldr	r2, [pc, #224]	; (80044b4 <DMA_CalcBaseAndBitshift+0x134>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d027      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a36      	ldr	r2, [pc, #216]	; (80044b8 <DMA_CalcBaseAndBitshift+0x138>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d022      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a35      	ldr	r2, [pc, #212]	; (80044bc <DMA_CalcBaseAndBitshift+0x13c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d01d      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a33      	ldr	r2, [pc, #204]	; (80044c0 <DMA_CalcBaseAndBitshift+0x140>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d018      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <DMA_CalcBaseAndBitshift+0x144>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a30      	ldr	r2, [pc, #192]	; (80044c8 <DMA_CalcBaseAndBitshift+0x148>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00e      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <DMA_CalcBaseAndBitshift+0x14c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d009      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <DMA_CalcBaseAndBitshift+0x150>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <DMA_CalcBaseAndBitshift+0xa8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2c      	ldr	r2, [pc, #176]	; (80044d4 <DMA_CalcBaseAndBitshift+0x154>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d101      	bne.n	800442c <DMA_CalcBaseAndBitshift+0xac>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <DMA_CalcBaseAndBitshift+0xae>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d024      	beq.n	800447c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	3b10      	subs	r3, #16
 800443a:	4a27      	ldr	r2, [pc, #156]	; (80044d8 <DMA_CalcBaseAndBitshift+0x158>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	4a24      	ldr	r2, [pc, #144]	; (80044dc <DMA_CalcBaseAndBitshift+0x15c>)
 800444c:	5cd3      	ldrb	r3, [r2, r3]
 800444e:	461a      	mov	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b03      	cmp	r3, #3
 8004458:	d908      	bls.n	800446c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004462:	4013      	ands	r3, r2
 8004464:	1d1a      	adds	r2, r3, #4
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	659a      	str	r2, [r3, #88]	; 0x58
 800446a:	e00d      	b.n	8004488 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <DMA_CalcBaseAndBitshift+0x160>)
 8004474:	4013      	ands	r3, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6593      	str	r3, [r2, #88]	; 0x58
 800447a:	e005      	b.n	8004488 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40020010 	.word	0x40020010
 800449c:	40020028 	.word	0x40020028
 80044a0:	40020040 	.word	0x40020040
 80044a4:	40020058 	.word	0x40020058
 80044a8:	40020070 	.word	0x40020070
 80044ac:	40020088 	.word	0x40020088
 80044b0:	400200a0 	.word	0x400200a0
 80044b4:	400200b8 	.word	0x400200b8
 80044b8:	40020410 	.word	0x40020410
 80044bc:	40020428 	.word	0x40020428
 80044c0:	40020440 	.word	0x40020440
 80044c4:	40020458 	.word	0x40020458
 80044c8:	40020470 	.word	0x40020470
 80044cc:	40020488 	.word	0x40020488
 80044d0:	400204a0 	.word	0x400204a0
 80044d4:	400204b8 	.word	0x400204b8
 80044d8:	aaaaaaab 	.word	0xaaaaaaab
 80044dc:	0800b534 	.word	0x0800b534
 80044e0:	fffffc00 	.word	0xfffffc00

080044e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d120      	bne.n	800453a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d858      	bhi.n	80045b2 <DMA_CheckFifoParam+0xce>
 8004500:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <DMA_CheckFifoParam+0x24>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	08004519 	.word	0x08004519
 800450c:	0800452b 	.word	0x0800452b
 8004510:	08004519 	.word	0x08004519
 8004514:	080045b3 	.word	0x080045b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d048      	beq.n	80045b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004528:	e045      	b.n	80045b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004532:	d142      	bne.n	80045ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004538:	e03f      	b.n	80045ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004542:	d123      	bne.n	800458c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	2b03      	cmp	r3, #3
 800454a:	d838      	bhi.n	80045be <DMA_CheckFifoParam+0xda>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <DMA_CheckFifoParam+0x70>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004565 	.word	0x08004565
 8004558:	0800456b 	.word	0x0800456b
 800455c:	08004565 	.word	0x08004565
 8004560:	0800457d 	.word	0x0800457d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
        break;
 8004568:	e030      	b.n	80045cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d025      	beq.n	80045c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800457a:	e022      	b.n	80045c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004584:	d11f      	bne.n	80045c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800458a:	e01c      	b.n	80045c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	2b02      	cmp	r3, #2
 8004592:	d902      	bls.n	800459a <DMA_CheckFifoParam+0xb6>
 8004594:	2b03      	cmp	r3, #3
 8004596:	d003      	beq.n	80045a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004598:	e018      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
        break;
 800459e:	e015      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
    break;
 80045b0:	e00b      	b.n	80045ca <DMA_CheckFifoParam+0xe6>
        break;
 80045b2:	bf00      	nop
 80045b4:	e00a      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
        break;
 80045b6:	bf00      	nop
 80045b8:	e008      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
        break;
 80045ba:	bf00      	nop
 80045bc:	e006      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
        break;
 80045be:	bf00      	nop
 80045c0:	e004      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
        break;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
        break;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <DMA_CheckFifoParam+0xe8>
    break;
 80045ca:	bf00      	nop
    }
  }

  return status;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop

080045dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d022      	beq.n	800463a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a36      	ldr	r2, [pc, #216]	; (80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01d      	beq.n	800463a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a35      	ldr	r2, [pc, #212]	; (80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d018      	beq.n	800463a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a33      	ldr	r2, [pc, #204]	; (80046dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a32      	ldr	r2, [pc, #200]	; (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00e      	beq.n	800463a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a30      	ldr	r2, [pc, #192]	; (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d009      	beq.n	800463a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d101      	bne.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01a      	beq.n	800467a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	3b08      	subs	r3, #8
 800464c:	4a28      	ldr	r2, [pc, #160]	; (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	091b      	lsrs	r3, r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4b26      	ldr	r3, [pc, #152]	; (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	461a      	mov	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a24      	ldr	r2, [pc, #144]	; (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004668:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2201      	movs	r2, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004678:	e024      	b.n	80046c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3b10      	subs	r3, #16
 8004682:	4a1e      	ldr	r2, [pc, #120]	; (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d806      	bhi.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d902      	bls.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3308      	adds	r3, #8
 80046a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4b18      	ldr	r3, [pc, #96]	; (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a16      	ldr	r2, [pc, #88]	; (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2201      	movs	r2, #1
 80046be:	409a      	lsls	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	58025408 	.word	0x58025408
 80046d4:	5802541c 	.word	0x5802541c
 80046d8:	58025430 	.word	0x58025430
 80046dc:	58025444 	.word	0x58025444
 80046e0:	58025458 	.word	0x58025458
 80046e4:	5802546c 	.word	0x5802546c
 80046e8:	58025480 	.word	0x58025480
 80046ec:	58025494 	.word	0x58025494
 80046f0:	cccccccd 	.word	0xcccccccd
 80046f4:	16009600 	.word	0x16009600
 80046f8:	58025880 	.word	0x58025880
 80046fc:	aaaaaaab 	.word	0xaaaaaaab
 8004700:	400204b8 	.word	0x400204b8
 8004704:	4002040f 	.word	0x4002040f
 8004708:	10008200 	.word	0x10008200
 800470c:	40020880 	.word	0x40020880

08004710 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04a      	beq.n	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d847      	bhi.n	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a25      	ldr	r2, [pc, #148]	; (80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a24      	ldr	r2, [pc, #144]	; (80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01d      	beq.n	800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a21      	ldr	r2, [pc, #132]	; (80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1f      	ldr	r2, [pc, #124]	; (80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1b      	ldr	r2, [pc, #108]	; (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	461a      	mov	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a15      	ldr	r2, [pc, #84]	; (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004798:	671a      	str	r2, [r3, #112]	; 0x70
 800479a:	e009      	b.n	80047b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	461a      	mov	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a11      	ldr	r2, [pc, #68]	; (80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047ae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	2201      	movs	r2, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	58025408 	.word	0x58025408
 80047cc:	5802541c 	.word	0x5802541c
 80047d0:	58025430 	.word	0x58025430
 80047d4:	58025444 	.word	0x58025444
 80047d8:	58025458 	.word	0x58025458
 80047dc:	5802546c 	.word	0x5802546c
 80047e0:	58025480 	.word	0x58025480
 80047e4:	58025494 	.word	0x58025494
 80047e8:	1600963f 	.word	0x1600963f
 80047ec:	58025940 	.word	0x58025940
 80047f0:	1000823f 	.word	0x1000823f
 80047f4:	40020940 	.word	0x40020940

080047f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	; 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004806:	4b86      	ldr	r3, [pc, #536]	; (8004a20 <HAL_GPIO_Init+0x228>)
 8004808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800480a:	e18c      	b.n	8004b26 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	2101      	movs	r1, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	4013      	ands	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 817e 	beq.w	8004b20 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d005      	beq.n	800483c <HAL_GPIO_Init+0x44>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d130      	bne.n	800489e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2203      	movs	r2, #3
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004872:	2201      	movs	r2, #1
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	f003 0201 	and.w	r2, r3, #1
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d017      	beq.n	80048da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	2203      	movs	r2, #3
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d123      	bne.n	800492e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	08da      	lsrs	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3208      	adds	r2, #8
 80048ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	220f      	movs	r2, #15
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4313      	orrs	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	08da      	lsrs	r2, r3, #3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3208      	adds	r2, #8
 8004928:	69b9      	ldr	r1, [r7, #24]
 800492a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	2203      	movs	r2, #3
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4013      	ands	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 0203 	and.w	r2, r3, #3
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80d8 	beq.w	8004b20 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004970:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <HAL_GPIO_Init+0x22c>)
 8004972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004976:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <HAL_GPIO_Init+0x22c>)
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004980:	4b28      	ldr	r3, [pc, #160]	; (8004a24 <HAL_GPIO_Init+0x22c>)
 8004982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800498e:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <HAL_GPIO_Init+0x230>)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	3302      	adds	r3, #2
 8004996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	220f      	movs	r2, #15
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <HAL_GPIO_Init+0x234>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d04a      	beq.n	8004a50 <HAL_GPIO_Init+0x258>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <HAL_GPIO_Init+0x238>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d02b      	beq.n	8004a1a <HAL_GPIO_Init+0x222>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_GPIO_Init+0x23c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d025      	beq.n	8004a16 <HAL_GPIO_Init+0x21e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <HAL_GPIO_Init+0x240>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01f      	beq.n	8004a12 <HAL_GPIO_Init+0x21a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <HAL_GPIO_Init+0x244>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d019      	beq.n	8004a0e <HAL_GPIO_Init+0x216>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <HAL_GPIO_Init+0x248>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_GPIO_Init+0x212>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <HAL_GPIO_Init+0x24c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00d      	beq.n	8004a06 <HAL_GPIO_Init+0x20e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a16      	ldr	r2, [pc, #88]	; (8004a48 <HAL_GPIO_Init+0x250>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <HAL_GPIO_Init+0x20a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <HAL_GPIO_Init+0x254>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d101      	bne.n	80049fe <HAL_GPIO_Init+0x206>
 80049fa:	2309      	movs	r3, #9
 80049fc:	e029      	b.n	8004a52 <HAL_GPIO_Init+0x25a>
 80049fe:	230a      	movs	r3, #10
 8004a00:	e027      	b.n	8004a52 <HAL_GPIO_Init+0x25a>
 8004a02:	2307      	movs	r3, #7
 8004a04:	e025      	b.n	8004a52 <HAL_GPIO_Init+0x25a>
 8004a06:	2306      	movs	r3, #6
 8004a08:	e023      	b.n	8004a52 <HAL_GPIO_Init+0x25a>
 8004a0a:	2305      	movs	r3, #5
 8004a0c:	e021      	b.n	8004a52 <HAL_GPIO_Init+0x25a>
 8004a0e:	2304      	movs	r3, #4
 8004a10:	e01f      	b.n	8004a52 <HAL_GPIO_Init+0x25a>
 8004a12:	2303      	movs	r3, #3
 8004a14:	e01d      	b.n	8004a52 <HAL_GPIO_Init+0x25a>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e01b      	b.n	8004a52 <HAL_GPIO_Init+0x25a>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e019      	b.n	8004a52 <HAL_GPIO_Init+0x25a>
 8004a1e:	bf00      	nop
 8004a20:	58000080 	.word	0x58000080
 8004a24:	58024400 	.word	0x58024400
 8004a28:	58000400 	.word	0x58000400
 8004a2c:	58020000 	.word	0x58020000
 8004a30:	58020400 	.word	0x58020400
 8004a34:	58020800 	.word	0x58020800
 8004a38:	58020c00 	.word	0x58020c00
 8004a3c:	58021000 	.word	0x58021000
 8004a40:	58021400 	.word	0x58021400
 8004a44:	58021800 	.word	0x58021800
 8004a48:	58021c00 	.word	0x58021c00
 8004a4c:	58022400 	.word	0x58022400
 8004a50:	2300      	movs	r3, #0
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	f002 0203 	and.w	r2, r2, #3
 8004a58:	0092      	lsls	r2, r2, #2
 8004a5a:	4093      	lsls	r3, r2
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a62:	4938      	ldr	r1, [pc, #224]	; (8004b44 <HAL_GPIO_Init+0x34c>)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	089b      	lsrs	r3, r3, #2
 8004a68:	3302      	adds	r3, #2
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ac4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4013      	ands	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	3301      	adds	r3, #1
 8004b24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f ae6b 	bne.w	800480c <HAL_GPIO_Init+0x14>
  }
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	3724      	adds	r7, #36	; 0x24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	58000400 	.word	0x58000400

08004b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	e001      	b.n	8004b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
 8004b84:	4613      	mov	r3, r2
 8004b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b88:	787b      	ldrb	r3, [r7, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b8e:	887a      	ldrh	r2, [r7, #2]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b94:	e003      	b.n	8004b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	041a      	lsls	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	619a      	str	r2, [r3, #24]
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bb4:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bc0:	4b16      	ldr	r3, [pc, #88]	; (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d001      	beq.n	8004bd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e01f      	b.n	8004c12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e01d      	b.n	8004c12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bd6:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 0207 	bic.w	r2, r3, #7
 8004bde:	490f      	ldr	r1, [pc, #60]	; (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004be6:	f7fc feb3 	bl	8001950 <HAL_GetTick>
 8004bea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bec:	e009      	b.n	8004c02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004bee:	f7fc feaf 	bl	8001950 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bfc:	d901      	bls.n	8004c02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e007      	b.n	8004c12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_PWREx_ConfigSupply+0x70>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0e:	d1ee      	bne.n	8004bee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	58024800 	.word	0x58024800

08004c20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	; 0x30
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e3c8      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8087 	beq.w	8004d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c40:	4b88      	ldr	r3, [pc, #544]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c4a:	4b86      	ldr	r3, [pc, #536]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d007      	beq.n	8004c66 <HAL_RCC_OscConfig+0x46>
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	2b18      	cmp	r3, #24
 8004c5a:	d110      	bne.n	8004c7e <HAL_RCC_OscConfig+0x5e>
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d10b      	bne.n	8004c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c66:	4b7f      	ldr	r3, [pc, #508]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d06c      	beq.n	8004d4c <HAL_RCC_OscConfig+0x12c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d168      	bne.n	8004d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e3a2      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x76>
 8004c88:	4b76      	ldr	r3, [pc, #472]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a75      	ldr	r2, [pc, #468]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e02e      	b.n	8004cf4 <HAL_RCC_OscConfig+0xd4>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x98>
 8004c9e:	4b71      	ldr	r3, [pc, #452]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a70      	ldr	r2, [pc, #448]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4b6e      	ldr	r3, [pc, #440]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a6d      	ldr	r2, [pc, #436]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e01d      	b.n	8004cf4 <HAL_RCC_OscConfig+0xd4>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0xbc>
 8004cc2:	4b68      	ldr	r3, [pc, #416]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a67      	ldr	r2, [pc, #412]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b65      	ldr	r3, [pc, #404]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a64      	ldr	r2, [pc, #400]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0xd4>
 8004cdc:	4b61      	ldr	r3, [pc, #388]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a60      	ldr	r2, [pc, #384]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4b5e      	ldr	r3, [pc, #376]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a5d      	ldr	r2, [pc, #372]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fe28 	bl	8001950 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fc fe24 	bl	8001950 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e356      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d16:	4b53      	ldr	r3, [pc, #332]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0xe4>
 8004d22:	e014      	b.n	8004d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fc fe14 	bl	8001950 <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fc fe10 	bl	8001950 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e342      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d3e:	4b49      	ldr	r3, [pc, #292]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x10c>
 8004d4a:	e000      	b.n	8004d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 808c 	beq.w	8004e74 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d5c:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d66:	4b3f      	ldr	r3, [pc, #252]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_RCC_OscConfig+0x162>
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	2b18      	cmp	r3, #24
 8004d76:	d137      	bne.n	8004de8 <HAL_RCC_OscConfig+0x1c8>
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d132      	bne.n	8004de8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d82:	4b38      	ldr	r3, [pc, #224]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_RCC_OscConfig+0x17a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e314      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d9a:	4b32      	ldr	r3, [pc, #200]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 0219 	bic.w	r2, r3, #25
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	492f      	ldr	r1, [pc, #188]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fc fdd0 	bl	8001950 <HAL_GetTick>
 8004db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db4:	f7fc fdcc 	bl	8001950 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e2fe      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc6:	4b27      	ldr	r3, [pc, #156]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd2:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	061b      	lsls	r3, r3, #24
 8004de0:	4920      	ldr	r1, [pc, #128]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004de6:	e045      	b.n	8004e74 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d026      	beq.n	8004e3e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 0219 	bic.w	r2, r3, #25
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4919      	ldr	r1, [pc, #100]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fc fda5 	bl	8001950 <HAL_GetTick>
 8004e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fc fda1 	bl	8001950 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e2d3      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e1c:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	490b      	ldr	r1, [pc, #44]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
 8004e3c:	e01a      	b.n	8004e74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <HAL_RCC_OscConfig+0x244>)
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4a:	f7fc fd81 	bl	8001950 <HAL_GetTick>
 8004e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e52:	f7fc fd7d 	bl	8001950 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d903      	bls.n	8004e68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e2af      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
 8004e64:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e68:	4b96      	ldr	r3, [pc, #600]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ee      	bne.n	8004e52 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d06a      	beq.n	8004f56 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e80:	4b90      	ldr	r3, [pc, #576]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e8a:	4b8e      	ldr	r3, [pc, #568]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d007      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x286>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b18      	cmp	r3, #24
 8004e9a:	d11b      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x2b4>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d116      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ea6:	4b87      	ldr	r3, [pc, #540]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_RCC_OscConfig+0x29e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	2b80      	cmp	r3, #128	; 0x80
 8004eb8:	d001      	beq.n	8004ebe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e282      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ebe:	4b81      	ldr	r3, [pc, #516]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	497d      	ldr	r1, [pc, #500]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ed2:	e040      	b.n	8004f56 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d023      	beq.n	8004f24 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004edc:	4b79      	ldr	r3, [pc, #484]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a78      	ldr	r2, [pc, #480]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fc fd32 	bl	8001950 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ef0:	f7fc fd2e 	bl	8001950 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e260      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f02:	4b70      	ldr	r3, [pc, #448]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	4969      	ldr	r1, [pc, #420]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60cb      	str	r3, [r1, #12]
 8004f22:	e018      	b.n	8004f56 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f24:	4b67      	ldr	r3, [pc, #412]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a66      	ldr	r2, [pc, #408]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fc fd0e 	bl	8001950 <HAL_GetTick>
 8004f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f38:	f7fc fd0a 	bl	8001950 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e23c      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f4a:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d036      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d019      	beq.n	8004f9e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f6a:	4b56      	ldr	r3, [pc, #344]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6e:	4a55      	ldr	r2, [pc, #340]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f76:	f7fc fceb 	bl	8001950 <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7e:	f7fc fce7 	bl	8001950 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e219      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f90:	4b4c      	ldr	r3, [pc, #304]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x35e>
 8004f9c:	e018      	b.n	8004fd0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f9e:	4b49      	ldr	r3, [pc, #292]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa2:	4a48      	ldr	r2, [pc, #288]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fc fcd1 	bl	8001950 <HAL_GetTick>
 8004fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb2:	f7fc fccd 	bl	8001950 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e1ff      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fc4:	4b3f      	ldr	r3, [pc, #252]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d036      	beq.n	800504a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d019      	beq.n	8005018 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fe4:	4b37      	ldr	r3, [pc, #220]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a36      	ldr	r2, [pc, #216]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8004fea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ff0:	f7fc fcae 	bl	8001950 <HAL_GetTick>
 8004ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff8:	f7fc fcaa 	bl	8001950 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e1dc      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800500a:	4b2e      	ldr	r3, [pc, #184]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x3d8>
 8005016:	e018      	b.n	800504a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005018:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 800501e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005022:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005024:	f7fc fc94 	bl	8001950 <HAL_GetTick>
 8005028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800502c:	f7fc fc90 	bl	8001950 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e1c2      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8086 	beq.w	8005164 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005058:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <HAL_RCC_OscConfig+0x4a8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <HAL_RCC_OscConfig+0x4a8>)
 800505e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005062:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005064:	f7fc fc74 	bl	8001950 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506c:	f7fc fc70 	bl	8001950 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	; 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e1a2      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800507e:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <HAL_RCC_OscConfig+0x4a8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d106      	bne.n	80050a0 <HAL_RCC_OscConfig+0x480>
 8005092:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8005094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005096:	4a0b      	ldr	r2, [pc, #44]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6713      	str	r3, [r2, #112]	; 0x70
 800509e:	e032      	b.n	8005106 <HAL_RCC_OscConfig+0x4e6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d111      	bne.n	80050cc <HAL_RCC_OscConfig+0x4ac>
 80050a8:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	4a02      	ldr	r2, [pc, #8]	; (80050c4 <HAL_RCC_OscConfig+0x4a4>)
 80050ba:	f023 0304 	bic.w	r3, r3, #4
 80050be:	6713      	str	r3, [r2, #112]	; 0x70
 80050c0:	e021      	b.n	8005106 <HAL_RCC_OscConfig+0x4e6>
 80050c2:	bf00      	nop
 80050c4:	58024400 	.word	0x58024400
 80050c8:	58024800 	.word	0x58024800
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d10c      	bne.n	80050ee <HAL_RCC_OscConfig+0x4ce>
 80050d4:	4b83      	ldr	r3, [pc, #524]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	4a82      	ldr	r2, [pc, #520]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050da:	f043 0304 	orr.w	r3, r3, #4
 80050de:	6713      	str	r3, [r2, #112]	; 0x70
 80050e0:	4b80      	ldr	r3, [pc, #512]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	4a7f      	ldr	r2, [pc, #508]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	6713      	str	r3, [r2, #112]	; 0x70
 80050ec:	e00b      	b.n	8005106 <HAL_RCC_OscConfig+0x4e6>
 80050ee:	4b7d      	ldr	r3, [pc, #500]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	4a7c      	ldr	r2, [pc, #496]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	6713      	str	r3, [r2, #112]	; 0x70
 80050fa:	4b7a      	ldr	r3, [pc, #488]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4a79      	ldr	r2, [pc, #484]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005100:	f023 0304 	bic.w	r3, r3, #4
 8005104:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d015      	beq.n	800513a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510e:	f7fc fc1f 	bl	8001950 <HAL_GetTick>
 8005112:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005114:	e00a      	b.n	800512c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005116:	f7fc fc1b 	bl	8001950 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	f241 3288 	movw	r2, #5000	; 0x1388
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e14b      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800512c:	4b6d      	ldr	r3, [pc, #436]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ee      	beq.n	8005116 <HAL_RCC_OscConfig+0x4f6>
 8005138:	e014      	b.n	8005164 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513a:	f7fc fc09 	bl	8001950 <HAL_GetTick>
 800513e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005140:	e00a      	b.n	8005158 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005142:	f7fc fc05 	bl	8001950 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005150:	4293      	cmp	r3, r2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e135      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005158:	4b62      	ldr	r3, [pc, #392]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ee      	bne.n	8005142 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 812a 	beq.w	80053c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800516e:	4b5d      	ldr	r3, [pc, #372]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005176:	2b18      	cmp	r3, #24
 8005178:	f000 80ba 	beq.w	80052f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b02      	cmp	r3, #2
 8005182:	f040 8095 	bne.w	80052b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005186:	4b57      	ldr	r3, [pc, #348]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a56      	ldr	r2, [pc, #344]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800518c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fc fbdd 	bl	8001950 <HAL_GetTick>
 8005196:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519a:	f7fc fbd9 	bl	8001950 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e10b      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051ac:	4b4d      	ldr	r3, [pc, #308]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b8:	4b4a      	ldr	r3, [pc, #296]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80051ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051bc:	4b4a      	ldr	r3, [pc, #296]	; (80052e8 <HAL_RCC_OscConfig+0x6c8>)
 80051be:	4013      	ands	r3, r2
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051c8:	0112      	lsls	r2, r2, #4
 80051ca:	430a      	orrs	r2, r1
 80051cc:	4945      	ldr	r1, [pc, #276]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	628b      	str	r3, [r1, #40]	; 0x28
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	3b01      	subs	r3, #1
 80051d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e0:	3b01      	subs	r3, #1
 80051e2:	025b      	lsls	r3, r3, #9
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	3b01      	subs	r3, #1
 80051ee:	041b      	lsls	r3, r3, #16
 80051f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	3b01      	subs	r3, #1
 80051fc:	061b      	lsls	r3, r3, #24
 80051fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005202:	4938      	ldr	r1, [pc, #224]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005208:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4a35      	ldr	r2, [pc, #212]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005214:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005218:	4b34      	ldr	r3, [pc, #208]	; (80052ec <HAL_RCC_OscConfig+0x6cc>)
 800521a:	4013      	ands	r3, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005220:	00d2      	lsls	r2, r2, #3
 8005222:	4930      	ldr	r1, [pc, #192]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005224:	4313      	orrs	r3, r2
 8005226:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005228:	4b2e      	ldr	r3, [pc, #184]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	f023 020c 	bic.w	r2, r3, #12
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	492b      	ldr	r1, [pc, #172]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005236:	4313      	orrs	r3, r2
 8005238:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800523a:	4b2a      	ldr	r3, [pc, #168]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	f023 0202 	bic.w	r2, r3, #2
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	4927      	ldr	r1, [pc, #156]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800524c:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	4a24      	ldr	r2, [pc, #144]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005258:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005264:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800526a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800526e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005270:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800527c:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 8005282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fc fb62 	bl	8001950 <HAL_GetTick>
 800528c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7fc fb5e 	bl	8001950 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e090      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052a2:	4b10      	ldr	r3, [pc, #64]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x670>
 80052ae:	e088      	b.n	80053c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b0:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80052b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fc fb48 	bl	8001950 <HAL_GetTick>
 80052c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fc fb44 	bl	8001950 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e076      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052d6:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <HAL_RCC_OscConfig+0x6c4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x6a4>
 80052e2:	e06e      	b.n	80053c2 <HAL_RCC_OscConfig+0x7a2>
 80052e4:	58024400 	.word	0x58024400
 80052e8:	fffffc0c 	.word	0xfffffc0c
 80052ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052f0:	4b36      	ldr	r3, [pc, #216]	; (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052f6:	4b35      	ldr	r3, [pc, #212]	; (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	2b01      	cmp	r3, #1
 8005302:	d031      	beq.n	8005368 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f003 0203 	and.w	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d12a      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d122      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d11a      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	0a5b      	lsrs	r3, r3, #9
 8005336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d111      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d108      	bne.n	8005368 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	0e1b      	lsrs	r3, r3, #24
 800535a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e02b      	b.n	80053c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800536c:	4b17      	ldr	r3, [pc, #92]	; (80053cc <HAL_RCC_OscConfig+0x7ac>)
 800536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005370:	08db      	lsrs	r3, r3, #3
 8005372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005376:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	429a      	cmp	r2, r3
 8005380:	d01f      	beq.n	80053c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_RCC_OscConfig+0x7ac>)
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	4a11      	ldr	r2, [pc, #68]	; (80053cc <HAL_RCC_OscConfig+0x7ac>)
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800538e:	f7fc fadf 	bl	8001950 <HAL_GetTick>
 8005392:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005394:	bf00      	nop
 8005396:	f7fc fadb 	bl	8001950 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	4293      	cmp	r3, r2
 80053a0:	d0f9      	beq.n	8005396 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80053a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <HAL_RCC_OscConfig+0x7b0>)
 80053a8:	4013      	ands	r3, r2
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053ae:	00d2      	lsls	r2, r2, #3
 80053b0:	4906      	ldr	r1, [pc, #24]	; (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	4a04      	ldr	r2, [pc, #16]	; (80053cc <HAL_RCC_OscConfig+0x7ac>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3730      	adds	r7, #48	; 0x30
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	58024400 	.word	0x58024400
 80053d0:	ffff0007 	.word	0xffff0007

080053d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e19c      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053e8:	4b8a      	ldr	r3, [pc, #552]	; (8005614 <HAL_RCC_ClockConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d910      	bls.n	8005418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f6:	4b87      	ldr	r3, [pc, #540]	; (8005614 <HAL_RCC_ClockConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 020f 	bic.w	r2, r3, #15
 80053fe:	4985      	ldr	r1, [pc, #532]	; (8005614 <HAL_RCC_ClockConfig+0x240>)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005406:	4b83      	ldr	r3, [pc, #524]	; (8005614 <HAL_RCC_ClockConfig+0x240>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e184      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d010      	beq.n	8005446 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	4b7b      	ldr	r3, [pc, #492]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005430:	429a      	cmp	r2, r3
 8005432:	d908      	bls.n	8005446 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005434:	4b78      	ldr	r3, [pc, #480]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	4975      	ldr	r1, [pc, #468]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005442:	4313      	orrs	r3, r2
 8005444:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d010      	beq.n	8005474 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	4b70      	ldr	r3, [pc, #448]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800545e:	429a      	cmp	r2, r3
 8005460:	d908      	bls.n	8005474 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005462:	4b6d      	ldr	r3, [pc, #436]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	496a      	ldr	r1, [pc, #424]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005470:	4313      	orrs	r3, r2
 8005472:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d010      	beq.n	80054a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699a      	ldr	r2, [r3, #24]
 8005484:	4b64      	ldr	r3, [pc, #400]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800548c:	429a      	cmp	r2, r3
 800548e:	d908      	bls.n	80054a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005490:	4b61      	ldr	r3, [pc, #388]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	495e      	ldr	r1, [pc, #376]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69da      	ldr	r2, [r3, #28]
 80054b2:	4b59      	ldr	r3, [pc, #356]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d908      	bls.n	80054d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054be:	4b56      	ldr	r3, [pc, #344]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	4953      	ldr	r1, [pc, #332]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	4b4d      	ldr	r3, [pc, #308]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d908      	bls.n	80054fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ec:	4b4a      	ldr	r3, [pc, #296]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f023 020f 	bic.w	r2, r3, #15
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4947      	ldr	r1, [pc, #284]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d055      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800550a:	4b43      	ldr	r3, [pc, #268]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	4940      	ldr	r1, [pc, #256]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005518:	4313      	orrs	r3, r2
 800551a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d107      	bne.n	8005534 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005524:	4b3c      	ldr	r3, [pc, #240]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d121      	bne.n	8005574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e0f6      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d107      	bne.n	800554c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800553c:	4b36      	ldr	r3, [pc, #216]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d115      	bne.n	8005574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e0ea      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d107      	bne.n	8005564 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005554:	4b30      	ldr	r3, [pc, #192]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0de      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005564:	4b2c      	ldr	r3, [pc, #176]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0d6      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005574:	4b28      	ldr	r3, [pc, #160]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f023 0207 	bic.w	r2, r3, #7
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4925      	ldr	r1, [pc, #148]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 8005582:	4313      	orrs	r3, r2
 8005584:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005586:	f7fc f9e3 	bl	8001950 <HAL_GetTick>
 800558a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558e:	f7fc f9df 	bl	8001950 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	; 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e0be      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a4:	4b1c      	ldr	r3, [pc, #112]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d1eb      	bne.n	800558e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d010      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d208      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d2:	4b11      	ldr	r3, [pc, #68]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f023 020f 	bic.w	r2, r3, #15
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	490e      	ldr	r1, [pc, #56]	; (8005618 <HAL_RCC_ClockConfig+0x244>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCC_ClockConfig+0x240>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d214      	bcs.n	800561c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <HAL_RCC_ClockConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 020f 	bic.w	r2, r3, #15
 80055fa:	4906      	ldr	r1, [pc, #24]	; (8005614 <HAL_RCC_ClockConfig+0x240>)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005602:	4b04      	ldr	r3, [pc, #16]	; (8005614 <HAL_RCC_ClockConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d005      	beq.n	800561c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e086      	b.n	8005722 <HAL_RCC_ClockConfig+0x34e>
 8005614:	52002000 	.word	0x52002000
 8005618:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d010      	beq.n	800564a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	4b3f      	ldr	r3, [pc, #252]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005634:	429a      	cmp	r2, r3
 8005636:	d208      	bcs.n	800564a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005638:	4b3c      	ldr	r3, [pc, #240]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	4939      	ldr	r1, [pc, #228]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 8005646:	4313      	orrs	r3, r2
 8005648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d010      	beq.n	8005678 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005662:	429a      	cmp	r2, r3
 8005664:	d208      	bcs.n	8005678 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005666:	4b31      	ldr	r3, [pc, #196]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	492e      	ldr	r1, [pc, #184]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 8005674:	4313      	orrs	r3, r2
 8005676:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d010      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	4b28      	ldr	r3, [pc, #160]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005690:	429a      	cmp	r2, r3
 8005692:	d208      	bcs.n	80056a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005694:	4b25      	ldr	r3, [pc, #148]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	4922      	ldr	r1, [pc, #136]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	4b1d      	ldr	r3, [pc, #116]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056be:	429a      	cmp	r2, r3
 80056c0:	d208      	bcs.n	80056d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056c2:	4b1a      	ldr	r3, [pc, #104]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	4917      	ldr	r1, [pc, #92]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056d4:	f000 f834 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b14      	ldr	r3, [pc, #80]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	4912      	ldr	r1, [pc, #72]	; (8005730 <HAL_RCC_ClockConfig+0x35c>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	f003 031f 	and.w	r3, r3, #31
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
 80056f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <HAL_RCC_ClockConfig+0x358>)
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	4a0d      	ldr	r2, [pc, #52]	; (8005730 <HAL_RCC_ClockConfig+0x35c>)
 80056fc:	5cd3      	ldrb	r3, [r2, r3]
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
 8005708:	4a0a      	ldr	r2, [pc, #40]	; (8005734 <HAL_RCC_ClockConfig+0x360>)
 800570a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800570c:	4a0a      	ldr	r2, [pc, #40]	; (8005738 <HAL_RCC_ClockConfig+0x364>)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <HAL_RCC_ClockConfig+0x368>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f7fc f8d0 	bl	80018bc <HAL_InitTick>
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	58024400 	.word	0x58024400
 8005730:	0800b524 	.word	0x0800b524
 8005734:	24000004 	.word	0x24000004
 8005738:	24000000 	.word	0x24000000
 800573c:	24000008 	.word	0x24000008

08005740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	; 0x24
 8005744:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005746:	4bb3      	ldr	r3, [pc, #716]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800574e:	2b18      	cmp	r3, #24
 8005750:	f200 8155 	bhi.w	80059fe <HAL_RCC_GetSysClockFreq+0x2be>
 8005754:	a201      	add	r2, pc, #4	; (adr r2, 800575c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	080057c1 	.word	0x080057c1
 8005760:	080059ff 	.word	0x080059ff
 8005764:	080059ff 	.word	0x080059ff
 8005768:	080059ff 	.word	0x080059ff
 800576c:	080059ff 	.word	0x080059ff
 8005770:	080059ff 	.word	0x080059ff
 8005774:	080059ff 	.word	0x080059ff
 8005778:	080059ff 	.word	0x080059ff
 800577c:	080057e7 	.word	0x080057e7
 8005780:	080059ff 	.word	0x080059ff
 8005784:	080059ff 	.word	0x080059ff
 8005788:	080059ff 	.word	0x080059ff
 800578c:	080059ff 	.word	0x080059ff
 8005790:	080059ff 	.word	0x080059ff
 8005794:	080059ff 	.word	0x080059ff
 8005798:	080059ff 	.word	0x080059ff
 800579c:	080057ed 	.word	0x080057ed
 80057a0:	080059ff 	.word	0x080059ff
 80057a4:	080059ff 	.word	0x080059ff
 80057a8:	080059ff 	.word	0x080059ff
 80057ac:	080059ff 	.word	0x080059ff
 80057b0:	080059ff 	.word	0x080059ff
 80057b4:	080059ff 	.word	0x080059ff
 80057b8:	080059ff 	.word	0x080059ff
 80057bc:	080057f3 	.word	0x080057f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057c0:	4b94      	ldr	r3, [pc, #592]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057cc:	4b91      	ldr	r3, [pc, #580]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	08db      	lsrs	r3, r3, #3
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	4a90      	ldr	r2, [pc, #576]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
 80057dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80057de:	e111      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057e0:	4b8d      	ldr	r3, [pc, #564]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057e2:	61bb      	str	r3, [r7, #24]
      break;
 80057e4:	e10e      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057e6:	4b8d      	ldr	r3, [pc, #564]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057e8:	61bb      	str	r3, [r7, #24]
      break;
 80057ea:	e10b      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057ec:	4b8c      	ldr	r3, [pc, #560]	; (8005a20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057ee:	61bb      	str	r3, [r7, #24]
      break;
 80057f0:	e108      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057f2:	4b88      	ldr	r3, [pc, #544]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057fc:	4b85      	ldr	r3, [pc, #532]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005806:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005808:	4b82      	ldr	r3, [pc, #520]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005812:	4b80      	ldr	r3, [pc, #512]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	08db      	lsrs	r3, r3, #3
 8005818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80e1 	beq.w	80059f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b02      	cmp	r3, #2
 800583a:	f000 8083 	beq.w	8005944 <HAL_RCC_GetSysClockFreq+0x204>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b02      	cmp	r3, #2
 8005842:	f200 80a1 	bhi.w	8005988 <HAL_RCC_GetSysClockFreq+0x248>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x114>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d056      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005852:	e099      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005854:	4b6f      	ldr	r3, [pc, #444]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02d      	beq.n	80058bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005860:	4b6c      	ldr	r3, [pc, #432]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	08db      	lsrs	r3, r3, #3
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	4a6b      	ldr	r2, [pc, #428]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
 8005870:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b62      	ldr	r3, [pc, #392]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a02 	vldr	s12, [r7, #8]
 800589e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80058ba:	e087      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a28 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b51      	ldr	r3, [pc, #324]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058fe:	e065      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b40      	ldr	r3, [pc, #256]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a02 	vldr	s12, [r7, #8]
 8005926:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005942:	e043      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a02 	vldr	s12, [r7, #8]
 800596a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005986:	e021      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	ee07 3a90 	vmov	s15, r3
 800598e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005992:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a24 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059cc:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d0:	0a5b      	lsrs	r3, r3, #9
 80059d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d6:	3301      	adds	r3, #1
 80059d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059f0:	ee17 3a90 	vmov	r3, s15
 80059f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059f6:	e005      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
      break;
 80059fc:	e002      	b.n	8005a04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a00:	61bb      	str	r3, [r7, #24]
      break;
 8005a02:	bf00      	nop
  }

  return sysclockfreq;
 8005a04:	69bb      	ldr	r3, [r7, #24]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3724      	adds	r7, #36	; 0x24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	58024400 	.word	0x58024400
 8005a18:	03d09000 	.word	0x03d09000
 8005a1c:	003d0900 	.word	0x003d0900
 8005a20:	017d7840 	.word	0x017d7840
 8005a24:	46000000 	.word	0x46000000
 8005a28:	4c742400 	.word	0x4c742400
 8005a2c:	4a742400 	.word	0x4a742400
 8005a30:	4bbebc20 	.word	0x4bbebc20

08005a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a3a:	f7ff fe81 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	0a1b      	lsrs	r3, r3, #8
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	490f      	ldr	r1, [pc, #60]	; (8005a88 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a4c:	5ccb      	ldrb	r3, [r1, r3]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	fa22 f303 	lsr.w	r3, r2, r3
 8005a56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a62:	5cd3      	ldrb	r3, [r2, r3]
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6e:	4a07      	ldr	r2, [pc, #28]	; (8005a8c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a72:	4a07      	ldr	r2, [pc, #28]	; (8005a90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	58024400 	.word	0x58024400
 8005a88:	0800b524 	.word	0x0800b524
 8005a8c:	24000004 	.word	0x24000004
 8005a90:	24000000 	.word	0x24000000

08005a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005a98:	f7ff ffcc 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	4904      	ldr	r1, [pc, #16]	; (8005abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	0800b524 	.word	0x0800b524

08005ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ac4:	f7ff ffb6 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	4904      	ldr	r1, [pc, #16]	; (8005ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ad6:	5ccb      	ldrb	r3, [r1, r3]
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	0800b524 	.word	0x0800b524

08005aec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b0c6      	sub	sp, #280	; 0x118
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005b10:	2500      	movs	r5, #0
 8005b12:	ea54 0305 	orrs.w	r3, r4, r5
 8005b16:	d049      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b22:	d02f      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b28:	d828      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b2e:	d01a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b34:	d822      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b3e:	d007      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b40:	e01c      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b42:	4bab      	ldr	r3, [pc, #684]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	4aaa      	ldr	r2, [pc, #680]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b4e:	e01a      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b54:	3308      	adds	r3, #8
 8005b56:	2102      	movs	r1, #2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 fc25 	bl	80073a8 <RCCEx_PLL2_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b64:	e00f      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b6a:	3328      	adds	r3, #40	; 0x28
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 fccc 	bl	800750c <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b7a:	e004      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b82:	e000      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b8e:	4b98      	ldr	r3, [pc, #608]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b9c:	4a94      	ldr	r2, [pc, #592]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	6513      	str	r3, [r2, #80]	; 0x50
 8005ba2:	e003      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ba8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005bb8:	f04f 0900 	mov.w	r9, #0
 8005bbc:	ea58 0309 	orrs.w	r3, r8, r9
 8005bc0:	d047      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d82a      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005bcc:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005be9 	.word	0x08005be9
 8005bd8:	08005bf7 	.word	0x08005bf7
 8005bdc:	08005c0d 	.word	0x08005c0d
 8005be0:	08005c2b 	.word	0x08005c2b
 8005be4:	08005c2b 	.word	0x08005c2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be8:	4b81      	ldr	r3, [pc, #516]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	4a80      	ldr	r2, [pc, #512]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e01a      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fbd2 	bl	80073a8 <RCCEx_PLL2_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c0a:	e00f      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c10:	3328      	adds	r3, #40	; 0x28
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fc79 	bl	800750c <RCCEx_PLL3_Config>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c20:	e004      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c34:	4b6e      	ldr	r3, [pc, #440]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	f023 0107 	bic.w	r1, r3, #7
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	4a6b      	ldr	r2, [pc, #428]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6513      	str	r3, [r2, #80]	; 0x50
 8005c48:	e003      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005c5e:	f04f 0b00 	mov.w	fp, #0
 8005c62:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c66:	d05b      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c70:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005c74:	d03b      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005c76:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005c7a:	d834      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c80:	d037      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005c82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c86:	d82e      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c8c:	d033      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005c92:	d828      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c98:	d01a      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c9e:	d822      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ca8:	d007      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005caa:	e01c      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cac:	4b50      	ldr	r3, [pc, #320]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	4a4f      	ldr	r2, [pc, #316]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cb8:	e01e      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 fb70 	bl	80073a8 <RCCEx_PLL2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cce:	e013      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd4:	3328      	adds	r3, #40	; 0x28
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 fc17 	bl	800750c <RCCEx_PLL3_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cec:	e004      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d00:	4b3b      	ldr	r3, [pc, #236]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d10:	4a37      	ldr	r2, [pc, #220]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	6593      	str	r3, [r2, #88]	; 0x58
 8005d16:	e003      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d30:	2300      	movs	r3, #0
 8005d32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	d05d      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d48:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005d4c:	d03b      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d4e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005d52:	d834      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d58:	d037      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d5e:	d82e      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d64:	d033      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d6a:	d828      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d70:	d01a      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d76:	d822      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d80:	d007      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d82:	e01c      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d84:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d90:	e01e      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d96:	3308      	adds	r3, #8
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fb04 	bl	80073a8 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005da6:	e013      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dac:	3328      	adds	r3, #40	; 0x28
 8005dae:	2100      	movs	r1, #0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fbab 	bl	800750c <RCCEx_PLL3_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e008      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005dc4:	e004      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10d      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ddc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005de8:	4a01      	ldr	r2, [pc, #4]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dea:	430b      	orrs	r3, r1
 8005dec:	6593      	str	r3, [r2, #88]	; 0x58
 8005dee:	e005      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005df0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005df8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005e08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e12:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d03a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	2b30      	cmp	r3, #48	; 0x30
 8005e24:	d01f      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e26:	2b30      	cmp	r3, #48	; 0x30
 8005e28:	d819      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d00c      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d815      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d019      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e36:	2b10      	cmp	r3, #16
 8005e38:	d111      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3a:	4baa      	ldr	r3, [pc, #680]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	4aa9      	ldr	r2, [pc, #676]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e46:	e011      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2102      	movs	r1, #2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 faa9 	bl	80073a8 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e5c:	e006      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e64:	e002      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e66:	bf00      	nop
 8005e68:	e000      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e74:	4b9b      	ldr	r3, [pc, #620]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e78:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	4a98      	ldr	r2, [pc, #608]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e84:	430b      	orrs	r3, r1
 8005e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e88:	e003      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ea8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005eac:	460b      	mov	r3, r1
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	d051      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ebc:	d035      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec2:	d82e      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ec4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ec8:	d031      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005eca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ece:	d828      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed4:	d01a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eda:	d822      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee4:	d007      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005ee6:	e01c      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee8:	4b7e      	ldr	r3, [pc, #504]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	4a7d      	ldr	r2, [pc, #500]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ef4:	e01c      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efa:	3308      	adds	r3, #8
 8005efc:	2100      	movs	r1, #0
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 fa52 	bl	80073a8 <RCCEx_PLL2_Config>
 8005f04:	4603      	mov	r3, r0
 8005f06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f0a:	e011      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f10:	3328      	adds	r3, #40	; 0x28
 8005f12:	2100      	movs	r1, #0
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 faf9 	bl	800750c <RCCEx_PLL3_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f20:	e006      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f28:	e002      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f2a:	bf00      	nop
 8005f2c:	e000      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f38:	4b6a      	ldr	r3, [pc, #424]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f3c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f46:	4a67      	ldr	r2, [pc, #412]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6513      	str	r3, [r2, #80]	; 0x50
 8005f4c:	e003      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005f62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f66:	2300      	movs	r3, #0
 8005f68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f6c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4313      	orrs	r3, r2
 8005f74:	d053      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f80:	d033      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f86:	d82c      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f8c:	d02f      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005f8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f92:	d826      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f98:	d02b      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005f9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f9e:	d820      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa4:	d012      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005faa:	d81a      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d022      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb4:	d115      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fba:	3308      	adds	r3, #8
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 f9f2 	bl	80073a8 <RCCEx_PLL2_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fca:	e015      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd0:	3328      	adds	r3, #40	; 0x28
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 fa99 	bl	800750c <RCCEx_PLL3_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fe0:	e00a      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fea:	bf00      	nop
 8005fec:	e004      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006000:	4b38      	ldr	r3, [pc, #224]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006004:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600e:	4a35      	ldr	r2, [pc, #212]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006010:	430b      	orrs	r3, r1
 8006012:	6513      	str	r3, [r2, #80]	; 0x50
 8006014:	e003      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006016:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800601a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800602a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800602e:	2300      	movs	r3, #0
 8006030:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006034:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006038:	460b      	mov	r3, r1
 800603a:	4313      	orrs	r3, r2
 800603c:	d058      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800603e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006042:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800604a:	d033      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800604c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006050:	d82c      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d02f      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d826      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800605e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006062:	d02b      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006068:	d820      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800606a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800606e:	d012      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006074:	d81a      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d022      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800607a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607e:	d115      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006084:	3308      	adds	r3, #8
 8006086:	2101      	movs	r1, #1
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f98d 	bl	80073a8 <RCCEx_PLL2_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006094:	e015      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609a:	3328      	adds	r3, #40	; 0x28
 800609c:	2101      	movs	r1, #1
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fa34 	bl	800750c <RCCEx_PLL3_Config>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060aa:	e00a      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060b2:	e006      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060b4:	bf00      	nop
 80060b6:	e004      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060b8:	bf00      	nop
 80060ba:	e002      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10e      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060da:	4a02      	ldr	r2, [pc, #8]	; (80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060dc:	430b      	orrs	r3, r1
 80060de:	6593      	str	r3, [r2, #88]	; 0x58
 80060e0:	e006      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80060e2:	bf00      	nop
 80060e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80060fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006106:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d037      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800611a:	d00e      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800611c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006120:	d816      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d018      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800612a:	d111      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612c:	4bc4      	ldr	r3, [pc, #784]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	4ac3      	ldr	r2, [pc, #780]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006138:	e00f      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613e:	3308      	adds	r3, #8
 8006140:	2101      	movs	r1, #1
 8006142:	4618      	mov	r0, r3
 8006144:	f001 f930 	bl	80073a8 <RCCEx_PLL2_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800614e:	e004      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006156:	e000      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800615a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006162:	4bb7      	ldr	r3, [pc, #732]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006166:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006170:	4ab3      	ldr	r2, [pc, #716]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006172:	430b      	orrs	r3, r1
 8006174:	6513      	str	r3, [r2, #80]	; 0x50
 8006176:	e003      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800617c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800618c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006190:	2300      	movs	r3, #0
 8006192:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006196:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800619a:	460b      	mov	r3, r1
 800619c:	4313      	orrs	r3, r2
 800619e:	d039      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d81c      	bhi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061ed 	.word	0x080061ed
 80061b4:	080061c1 	.word	0x080061c1
 80061b8:	080061cf 	.word	0x080061cf
 80061bc:	080061ed 	.word	0x080061ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061c0:	4b9f      	ldr	r3, [pc, #636]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	4a9e      	ldr	r2, [pc, #632]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061cc:	e00f      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d2:	3308      	adds	r3, #8
 80061d4:	2102      	movs	r1, #2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f8e6 	bl	80073a8 <RCCEx_PLL2_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061e2:	e004      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061ea:	e000      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80061ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10a      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061f6:	4b92      	ldr	r3, [pc, #584]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fa:	f023 0103 	bic.w	r1, r3, #3
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006204:	4a8e      	ldr	r2, [pc, #568]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006206:	430b      	orrs	r3, r1
 8006208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800620a:	e003      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006210:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006224:	2300      	movs	r3, #0
 8006226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800622a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	f000 8099 	beq.w	8006368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006236:	4b83      	ldr	r3, [pc, #524]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a82      	ldr	r2, [pc, #520]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006242:	f7fb fb85 	bl	8001950 <HAL_GetTick>
 8006246:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800624a:	e00b      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624c:	f7fb fb80 	bl	8001950 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b64      	cmp	r3, #100	; 0x64
 800625a:	d903      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006262:	e005      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006264:	4b77      	ldr	r3, [pc, #476]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0ed      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006274:	2b00      	cmp	r3, #0
 8006276:	d173      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006278:	4b71      	ldr	r3, [pc, #452]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800627a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800627c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006280:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006284:	4053      	eors	r3, r2
 8006286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628a:	2b00      	cmp	r3, #0
 800628c:	d015      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800628e:	4b6c      	ldr	r3, [pc, #432]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006296:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800629a:	4b69      	ldr	r3, [pc, #420]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a68      	ldr	r2, [pc, #416]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062a6:	4b66      	ldr	r3, [pc, #408]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	4a65      	ldr	r2, [pc, #404]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062b2:	4a63      	ldr	r2, [pc, #396]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c6:	d118      	bne.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7fb fb42 	bl	8001950 <HAL_GetTick>
 80062cc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062d0:	e00d      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d2:	f7fb fb3d 	bl	8001950 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062dc:	1ad2      	subs	r2, r2, r3
 80062de:	f241 3388 	movw	r3, #5000	; 0x1388
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d903      	bls.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80062ec:	e005      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ee:	4b54      	ldr	r3, [pc, #336]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0eb      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80062fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d129      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800630a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800630e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006312:	d10e      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006314:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006324:	091a      	lsrs	r2, r3, #4
 8006326:	4b48      	ldr	r3, [pc, #288]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006328:	4013      	ands	r3, r2
 800632a:	4a45      	ldr	r2, [pc, #276]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800632c:	430b      	orrs	r3, r1
 800632e:	6113      	str	r3, [r2, #16]
 8006330:	e005      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006332:	4b43      	ldr	r3, [pc, #268]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	4a42      	ldr	r2, [pc, #264]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006338:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800633c:	6113      	str	r3, [r2, #16]
 800633e:	4b40      	ldr	r3, [pc, #256]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006340:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800634a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800634e:	4a3c      	ldr	r2, [pc, #240]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006350:	430b      	orrs	r3, r1
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
 8006354:	e008      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006356:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800635a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800635e:	e003      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006364:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f002 0301 	and.w	r3, r2, #1
 8006374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006378:	2300      	movs	r3, #0
 800637a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800637e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	f000 808f 	beq.w	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006390:	2b28      	cmp	r3, #40	; 0x28
 8006392:	d871      	bhi.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	08006481 	.word	0x08006481
 80063a0:	08006479 	.word	0x08006479
 80063a4:	08006479 	.word	0x08006479
 80063a8:	08006479 	.word	0x08006479
 80063ac:	08006479 	.word	0x08006479
 80063b0:	08006479 	.word	0x08006479
 80063b4:	08006479 	.word	0x08006479
 80063b8:	08006479 	.word	0x08006479
 80063bc:	0800644d 	.word	0x0800644d
 80063c0:	08006479 	.word	0x08006479
 80063c4:	08006479 	.word	0x08006479
 80063c8:	08006479 	.word	0x08006479
 80063cc:	08006479 	.word	0x08006479
 80063d0:	08006479 	.word	0x08006479
 80063d4:	08006479 	.word	0x08006479
 80063d8:	08006479 	.word	0x08006479
 80063dc:	08006463 	.word	0x08006463
 80063e0:	08006479 	.word	0x08006479
 80063e4:	08006479 	.word	0x08006479
 80063e8:	08006479 	.word	0x08006479
 80063ec:	08006479 	.word	0x08006479
 80063f0:	08006479 	.word	0x08006479
 80063f4:	08006479 	.word	0x08006479
 80063f8:	08006479 	.word	0x08006479
 80063fc:	08006481 	.word	0x08006481
 8006400:	08006479 	.word	0x08006479
 8006404:	08006479 	.word	0x08006479
 8006408:	08006479 	.word	0x08006479
 800640c:	08006479 	.word	0x08006479
 8006410:	08006479 	.word	0x08006479
 8006414:	08006479 	.word	0x08006479
 8006418:	08006479 	.word	0x08006479
 800641c:	08006481 	.word	0x08006481
 8006420:	08006479 	.word	0x08006479
 8006424:	08006479 	.word	0x08006479
 8006428:	08006479 	.word	0x08006479
 800642c:	08006479 	.word	0x08006479
 8006430:	08006479 	.word	0x08006479
 8006434:	08006479 	.word	0x08006479
 8006438:	08006479 	.word	0x08006479
 800643c:	08006481 	.word	0x08006481
 8006440:	58024400 	.word	0x58024400
 8006444:	58024800 	.word	0x58024800
 8006448:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800644c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006450:	3308      	adds	r3, #8
 8006452:	2101      	movs	r1, #1
 8006454:	4618      	mov	r0, r3
 8006456:	f000 ffa7 	bl	80073a8 <RCCEx_PLL2_Config>
 800645a:	4603      	mov	r3, r0
 800645c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006460:	e00f      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006466:	3328      	adds	r3, #40	; 0x28
 8006468:	2101      	movs	r1, #1
 800646a:	4618      	mov	r0, r3
 800646c:	f001 f84e 	bl	800750c <RCCEx_PLL3_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006476:	e004      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800647e:	e000      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006482:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800648a:	4bbf      	ldr	r3, [pc, #764]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006498:	4abb      	ldr	r2, [pc, #748]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800649a:	430b      	orrs	r3, r1
 800649c:	6553      	str	r3, [r2, #84]	; 0x54
 800649e:	e003      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b0:	f002 0302 	and.w	r3, r2, #2
 80064b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064b8:	2300      	movs	r3, #0
 80064ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4313      	orrs	r3, r2
 80064c6:	d041      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	d824      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	08006525 	.word	0x08006525
 80064dc:	080064f1 	.word	0x080064f1
 80064e0:	08006507 	.word	0x08006507
 80064e4:	08006525 	.word	0x08006525
 80064e8:	08006525 	.word	0x08006525
 80064ec:	08006525 	.word	0x08006525
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f4:	3308      	adds	r3, #8
 80064f6:	2101      	movs	r1, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	f000 ff55 	bl	80073a8 <RCCEx_PLL2_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006504:	e00f      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650a:	3328      	adds	r3, #40	; 0x28
 800650c:	2101      	movs	r1, #1
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fffc 	bl	800750c <RCCEx_PLL3_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800651a:	e004      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006522:	e000      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006526:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800652e:	4b96      	ldr	r3, [pc, #600]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	f023 0107 	bic.w	r1, r3, #7
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653c:	4a92      	ldr	r2, [pc, #584]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800653e:	430b      	orrs	r3, r1
 8006540:	6553      	str	r3, [r2, #84]	; 0x54
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006548:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f002 0304 	and.w	r3, r2, #4
 8006558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800655c:	2300      	movs	r3, #0
 800655e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006562:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006566:	460b      	mov	r3, r1
 8006568:	4313      	orrs	r3, r2
 800656a:	d044      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006574:	2b05      	cmp	r3, #5
 8006576:	d825      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006578:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	080065cd 	.word	0x080065cd
 8006584:	08006599 	.word	0x08006599
 8006588:	080065af 	.word	0x080065af
 800658c:	080065cd 	.word	0x080065cd
 8006590:	080065cd 	.word	0x080065cd
 8006594:	080065cd 	.word	0x080065cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659c:	3308      	adds	r3, #8
 800659e:	2101      	movs	r1, #1
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 ff01 	bl	80073a8 <RCCEx_PLL2_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065ac:	e00f      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b2:	3328      	adds	r3, #40	; 0x28
 80065b4:	2101      	movs	r1, #1
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 ffa8 	bl	800750c <RCCEx_PLL3_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065c2:	e004      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065ca:	e000      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80065cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065d6:	4b6c      	ldr	r3, [pc, #432]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	f023 0107 	bic.w	r1, r3, #7
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	4a68      	ldr	r2, [pc, #416]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6593      	str	r3, [r2, #88]	; 0x58
 80065ec:	e003      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	f002 0320 	and.w	r3, r2, #32
 8006602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006606:	2300      	movs	r3, #0
 8006608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800660c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006610:	460b      	mov	r3, r1
 8006612:	4313      	orrs	r3, r2
 8006614:	d055      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800661e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006622:	d033      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006628:	d82c      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800662a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662e:	d02f      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006634:	d826      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800663a:	d02b      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800663c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006640:	d820      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006646:	d012      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800664c:	d81a      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d022      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006656:	d115      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665c:	3308      	adds	r3, #8
 800665e:	2100      	movs	r1, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fea1 	bl	80073a8 <RCCEx_PLL2_Config>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800666c:	e015      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006672:	3328      	adds	r3, #40	; 0x28
 8006674:	2102      	movs	r1, #2
 8006676:	4618      	mov	r0, r3
 8006678:	f000 ff48 	bl	800750c <RCCEx_PLL3_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006682:	e00a      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800668a:	e006      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800668c:	bf00      	nop
 800668e:	e004      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006690:	bf00      	nop
 8006692:	e002      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006694:	bf00      	nop
 8006696:	e000      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800669a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10b      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066a2:	4b39      	ldr	r3, [pc, #228]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b2:	4a35      	ldr	r2, [pc, #212]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066b4:	430b      	orrs	r3, r1
 80066b6:	6553      	str	r3, [r2, #84]	; 0x54
 80066b8:	e003      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80066ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066d2:	2300      	movs	r3, #0
 80066d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066d8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80066dc:	460b      	mov	r3, r1
 80066de:	4313      	orrs	r3, r2
 80066e0:	d058      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066ee:	d033      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80066f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80066f4:	d82c      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80066f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fa:	d02f      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80066fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006700:	d826      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006706:	d02b      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006708:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800670c:	d820      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800670e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006712:	d012      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006718:	d81a      	bhi.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d022      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800671e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006722:	d115      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006728:	3308      	adds	r3, #8
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fe3b 	bl	80073a8 <RCCEx_PLL2_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006738:	e015      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673e:	3328      	adds	r3, #40	; 0x28
 8006740:	2102      	movs	r1, #2
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fee2 	bl	800750c <RCCEx_PLL3_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800674e:	e00a      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006756:	e006      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006758:	bf00      	nop
 800675a:	e004      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800675c:	bf00      	nop
 800675e:	e002      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006760:	bf00      	nop
 8006762:	e000      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006766:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10e      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800676e:	4b06      	ldr	r3, [pc, #24]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800677e:	4a02      	ldr	r2, [pc, #8]	; (8006788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006780:	430b      	orrs	r3, r1
 8006782:	6593      	str	r3, [r2, #88]	; 0x58
 8006784:	e006      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006790:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80067a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067a4:	2300      	movs	r3, #0
 80067a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80067ae:	460b      	mov	r3, r1
 80067b0:	4313      	orrs	r3, r2
 80067b2:	d055      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067c0:	d033      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80067c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80067c6:	d82c      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067cc:	d02f      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80067ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d2:	d826      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067d8:	d02b      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80067da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80067de:	d820      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067e4:	d012      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80067e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ea:	d81a      	bhi.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d022      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80067f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f4:	d115      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fa:	3308      	adds	r3, #8
 80067fc:	2100      	movs	r1, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fdd2 	bl	80073a8 <RCCEx_PLL2_Config>
 8006804:	4603      	mov	r3, r0
 8006806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800680a:	e015      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006810:	3328      	adds	r3, #40	; 0x28
 8006812:	2102      	movs	r1, #2
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fe79 	bl	800750c <RCCEx_PLL3_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006820:	e00a      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006828:	e006      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800682a:	bf00      	nop
 800682c:	e004      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800682e:	bf00      	nop
 8006830:	e002      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10b      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006840:	4ba0      	ldr	r3, [pc, #640]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006844:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006850:	4a9c      	ldr	r2, [pc, #624]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006852:	430b      	orrs	r3, r1
 8006854:	6593      	str	r3, [r2, #88]	; 0x58
 8006856:	e003      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006858:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800685c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f002 0308 	and.w	r3, r2, #8
 800686c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006870:	2300      	movs	r3, #0
 8006872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006876:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800687a:	460b      	mov	r3, r1
 800687c:	4313      	orrs	r3, r2
 800687e:	d01e      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688c:	d10c      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006892:	3328      	adds	r3, #40	; 0x28
 8006894:	2102      	movs	r1, #2
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fe38 	bl	800750c <RCCEx_PLL3_Config>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80068a8:	4b86      	ldr	r3, [pc, #536]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b8:	4a82      	ldr	r2, [pc, #520]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068ba:	430b      	orrs	r3, r1
 80068bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	f002 0310 	and.w	r3, r2, #16
 80068ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068ce:	2300      	movs	r3, #0
 80068d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80068d8:	460b      	mov	r3, r1
 80068da:	4313      	orrs	r3, r2
 80068dc:	d01e      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ea:	d10c      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f0:	3328      	adds	r3, #40	; 0x28
 80068f2:	2102      	movs	r1, #2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fe09 	bl	800750c <RCCEx_PLL3_Config>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006906:	4b6f      	ldr	r3, [pc, #444]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006916:	4a6b      	ldr	r2, [pc, #428]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006918:	430b      	orrs	r3, r1
 800691a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006928:	67bb      	str	r3, [r7, #120]	; 0x78
 800692a:	2300      	movs	r3, #0
 800692c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800692e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006932:	460b      	mov	r3, r1
 8006934:	4313      	orrs	r3, r2
 8006936:	d03e      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006944:	d022      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800694a:	d81b      	bhi.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006954:	d00b      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006956:	e015      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695c:	3308      	adds	r3, #8
 800695e:	2100      	movs	r1, #0
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fd21 	bl	80073a8 <RCCEx_PLL2_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800696c:	e00f      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800696e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006972:	3328      	adds	r3, #40	; 0x28
 8006974:	2102      	movs	r1, #2
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fdc8 	bl	800750c <RCCEx_PLL3_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006982:	e004      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800698a:	e000      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800698c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006996:	4b4b      	ldr	r3, [pc, #300]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069a6:	4a47      	ldr	r2, [pc, #284]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6593      	str	r3, [r2, #88]	; 0x58
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80069c2:	673b      	str	r3, [r7, #112]	; 0x70
 80069c4:	2300      	movs	r3, #0
 80069c6:	677b      	str	r3, [r7, #116]	; 0x74
 80069c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80069cc:	460b      	mov	r3, r1
 80069ce:	4313      	orrs	r3, r2
 80069d0:	d03b      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069de:	d01f      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80069e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069e4:	d818      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80069e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ea:	d003      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80069ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069f0:	d007      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80069f2:	e011      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f4:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	4a32      	ldr	r2, [pc, #200]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a00:	e00f      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a06:	3328      	adds	r3, #40	; 0x28
 8006a08:	2101      	movs	r1, #1
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fd7e 	bl	800750c <RCCEx_PLL3_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a16:	e004      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a1e:	e000      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a2a:	4b26      	ldr	r3, [pc, #152]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3a:	4a22      	ldr	r2, [pc, #136]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6553      	str	r3, [r2, #84]	; 0x54
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a58:	2300      	movs	r3, #0
 8006a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a5c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006a60:	460b      	mov	r3, r1
 8006a62:	4313      	orrs	r3, r2
 8006a64:	d034      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a74:	d007      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006a76:	e011      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a78:	4b12      	ldr	r3, [pc, #72]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	4a11      	ldr	r2, [pc, #68]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a84:	e00e      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	2102      	movs	r1, #2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fc8a 	bl	80073a8 <RCCEx_PLL2_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a9a:	e003      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10d      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006aac:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aba:	4a02      	ldr	r2, [pc, #8]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006abc:	430b      	orrs	r3, r1
 8006abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ac0:	e006      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006ac2:	bf00      	nop
 8006ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006acc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006adc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ade:	2300      	movs	r3, #0
 8006ae0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ae2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	d00c      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af0:	3328      	adds	r3, #40	; 0x28
 8006af2:	2102      	movs	r1, #2
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fd09 	bl	800750c <RCCEx_PLL3_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006b12:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b14:	2300      	movs	r3, #0
 8006b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b18:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	d036      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b2c:	d018      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b32:	d811      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b38:	d014      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b3e:	d80b      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d011      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b48:	d106      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b4a:	4bb7      	ldr	r3, [pc, #732]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4e:	4ab6      	ldr	r2, [pc, #728]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b56:	e008      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b5e:	e004      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b60:	bf00      	nop
 8006b62:	e002      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b64:	bf00      	nop
 8006b66:	e000      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b72:	4bad      	ldr	r3, [pc, #692]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b80:	4aa9      	ldr	r2, [pc, #676]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b82:	430b      	orrs	r3, r1
 8006b84:	6553      	str	r3, [r2, #84]	; 0x54
 8006b86:	e003      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ba2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	d009      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bac:	4b9e      	ldr	r3, [pc, #632]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	4a9b      	ldr	r2, [pc, #620]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bce:	2300      	movs	r3, #0
 8006bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	d009      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bdc:	4b92      	ldr	r3, [pc, #584]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bea:	4a8f      	ldr	r2, [pc, #572]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8006bfe:	2300      	movs	r3, #0
 8006c00:	647b      	str	r3, [r7, #68]	; 0x44
 8006c02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006c06:	460b      	mov	r3, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	d00e      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c0c:	4b86      	ldr	r3, [pc, #536]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	4a85      	ldr	r2, [pc, #532]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c16:	6113      	str	r3, [r2, #16]
 8006c18:	4b83      	ldr	r3, [pc, #524]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c1a:	6919      	ldr	r1, [r3, #16]
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c24:	4a80      	ldr	r2, [pc, #512]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c40:	460b      	mov	r3, r1
 8006c42:	4313      	orrs	r3, r2
 8006c44:	d009      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c46:	4b78      	ldr	r3, [pc, #480]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c54:	4a74      	ldr	r2, [pc, #464]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006c66:	633b      	str	r3, [r7, #48]	; 0x30
 8006c68:	2300      	movs	r3, #0
 8006c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d00a      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c76:	4b6c      	ldr	r3, [pc, #432]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c86:	4a68      	ldr	r2, [pc, #416]	; (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c88:	430b      	orrs	r3, r1
 8006c8a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c94:	2100      	movs	r1, #0
 8006c96:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	d011      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cac:	3308      	adds	r3, #8
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fb79 	bl	80073a8 <RCCEx_PLL2_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6239      	str	r1, [r7, #32]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cde:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d011      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cec:	3308      	adds	r3, #8
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fb59 	bl	80073a8 <RCCEx_PLL2_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	2100      	movs	r1, #0
 8006d16:	61b9      	str	r1, [r7, #24]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d22:	460b      	mov	r3, r1
 8006d24:	4313      	orrs	r3, r2
 8006d26:	d011      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	2102      	movs	r1, #2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb39 	bl	80073a8 <RCCEx_PLL2_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	2100      	movs	r1, #0
 8006d56:	6139      	str	r1, [r7, #16]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d62:	460b      	mov	r3, r1
 8006d64:	4313      	orrs	r3, r2
 8006d66:	d011      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6c:	3328      	adds	r3, #40	; 0x28
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fbcb 	bl	800750c <RCCEx_PLL3_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	2100      	movs	r1, #0
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006da2:	460b      	mov	r3, r1
 8006da4:	4313      	orrs	r3, r2
 8006da6:	d011      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dac:	3328      	adds	r3, #40	; 0x28
 8006dae:	2101      	movs	r1, #1
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fbab 	bl	800750c <RCCEx_PLL3_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6039      	str	r1, [r7, #0]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006de2:	460b      	mov	r3, r1
 8006de4:	4313      	orrs	r3, r2
 8006de6:	d011      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dec:	3328      	adds	r3, #40	; 0x28
 8006dee:	2102      	movs	r1, #2
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fb8b 	bl	800750c <RCCEx_PLL3_Config>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006e0c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e000      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006e20:	46bd      	mov	sp, r7
 8006e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e26:	bf00      	nop
 8006e28:	58024400 	.word	0x58024400

08006e2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e30:	f7fe fe00 	bl	8005a34 <HAL_RCC_GetHCLKFreq>
 8006e34:	4602      	mov	r2, r0
 8006e36:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	091b      	lsrs	r3, r3, #4
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	4904      	ldr	r1, [pc, #16]	; (8006e54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e42:	5ccb      	ldrb	r3, [r1, r3]
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	58024400 	.word	0x58024400
 8006e54:	0800b524 	.word	0x0800b524

08006e58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	; 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e60:	4ba1      	ldr	r3, [pc, #644]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e6a:	4b9f      	ldr	r3, [pc, #636]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	0b1b      	lsrs	r3, r3, #12
 8006e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006e76:	4b9c      	ldr	r3, [pc, #624]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	091b      	lsrs	r3, r3, #4
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006e82:	4b99      	ldr	r3, [pc, #612]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e86:	08db      	lsrs	r3, r3, #3
 8006e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8111 	beq.w	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	f000 8083 	beq.w	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	f200 80a1 	bhi.w	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d056      	beq.n	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ec2:	e099      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec4:	4b88      	ldr	r3, [pc, #544]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d02d      	beq.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ed0:	4b85      	ldr	r3, [pc, #532]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	4a84      	ldr	r2, [pc, #528]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b7b      	ldr	r3, [pc, #492]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f2a:	e087      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b6a      	ldr	r3, [pc, #424]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f52:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f6e:	e065      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b59      	ldr	r3, [pc, #356]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fb2:	e043      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b48      	ldr	r3, [pc, #288]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff6:	e021      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800703a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800703c:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	0a5b      	lsrs	r3, r3, #9
 8007042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007056:	edd7 6a07 	vldr	s13, [r7, #28]
 800705a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007062:	ee17 2a90 	vmov	r2, s15
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800706a:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	0c1b      	lsrs	r3, r3, #16
 8007070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007080:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007084:	edd7 6a07 	vldr	s13, [r7, #28]
 8007088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007090:	ee17 2a90 	vmov	r2, s15
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	0e1b      	lsrs	r3, r3, #24
 800709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070be:	ee17 2a90 	vmov	r2, s15
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070c6:	e008      	b.n	80070da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
}
 80070da:	bf00      	nop
 80070dc:	3724      	adds	r7, #36	; 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	58024400 	.word	0x58024400
 80070ec:	03d09000 	.word	0x03d09000
 80070f0:	46000000 	.word	0x46000000
 80070f4:	4c742400 	.word	0x4c742400
 80070f8:	4a742400 	.word	0x4a742400
 80070fc:	4bbebc20 	.word	0x4bbebc20

08007100 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	; 0x24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007108:	4ba1      	ldr	r3, [pc, #644]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007112:	4b9f      	ldr	r3, [pc, #636]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	0d1b      	lsrs	r3, r3, #20
 8007118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800711c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800711e:	4b9c      	ldr	r3, [pc, #624]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800712a:	4b99      	ldr	r3, [pc, #612]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 8111 	beq.w	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b02      	cmp	r3, #2
 8007152:	f000 8083 	beq.w	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b02      	cmp	r3, #2
 800715a:	f200 80a1 	bhi.w	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d056      	beq.n	8007218 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800716a:	e099      	b.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800716c:	4b88      	ldr	r3, [pc, #544]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d02d      	beq.n	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007178:	4b85      	ldr	r3, [pc, #532]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	4a84      	ldr	r2, [pc, #528]	; (8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
 8007188:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a2:	4b7b      	ldr	r3, [pc, #492]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071d2:	e087      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800739c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b6a      	ldr	r3, [pc, #424]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007216:	e065      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b59      	ldr	r3, [pc, #356]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a03 	vldr	s12, [r7, #12]
 800723e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725a:	e043      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b48      	ldr	r3, [pc, #288]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007282:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729e:	e021      	b.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b37      	ldr	r3, [pc, #220]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80072e4:	4b2a      	ldr	r3, [pc, #168]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	0a5b      	lsrs	r3, r3, #9
 80072ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730a:	ee17 2a90 	vmov	r2, s15
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007312:	4b1f      	ldr	r3, [pc, #124]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	0c1b      	lsrs	r3, r3, #16
 8007318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731c:	ee07 3a90 	vmov	s15, r3
 8007320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007328:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007338:	ee17 2a90 	vmov	r2, s15
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007340:	4b13      	ldr	r3, [pc, #76]	; (8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	0e1b      	lsrs	r3, r3, #24
 8007346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007356:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735a:	edd7 6a07 	vldr	s13, [r7, #28]
 800735e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007366:	ee17 2a90 	vmov	r2, s15
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800736e:	e008      	b.n	8007382 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
}
 8007382:	bf00      	nop
 8007384:	3724      	adds	r7, #36	; 0x24
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	58024400 	.word	0x58024400
 8007394:	03d09000 	.word	0x03d09000
 8007398:	46000000 	.word	0x46000000
 800739c:	4c742400 	.word	0x4c742400
 80073a0:	4a742400 	.word	0x4a742400
 80073a4:	4bbebc20 	.word	0x4bbebc20

080073a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073b6:	4b53      	ldr	r3, [pc, #332]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d101      	bne.n	80073c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e099      	b.n	80074fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073c6:	4b4f      	ldr	r3, [pc, #316]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a4e      	ldr	r2, [pc, #312]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073d2:	f7fa fabd 	bl	8001950 <HAL_GetTick>
 80073d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073d8:	e008      	b.n	80073ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073da:	f7fa fab9 	bl	8001950 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e086      	b.n	80074fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073ec:	4b45      	ldr	r3, [pc, #276]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f0      	bne.n	80073da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073f8:	4b42      	ldr	r3, [pc, #264]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	031b      	lsls	r3, r3, #12
 8007406:	493f      	ldr	r1, [pc, #252]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007408:	4313      	orrs	r3, r2
 800740a:	628b      	str	r3, [r1, #40]	; 0x28
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	3b01      	subs	r3, #1
 8007412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	3b01      	subs	r3, #1
 800741c:	025b      	lsls	r3, r3, #9
 800741e:	b29b      	uxth	r3, r3
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	3b01      	subs	r3, #1
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	3b01      	subs	r3, #1
 8007436:	061b      	lsls	r3, r3, #24
 8007438:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800743c:	4931      	ldr	r1, [pc, #196]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007442:	4b30      	ldr	r3, [pc, #192]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	492d      	ldr	r1, [pc, #180]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007450:	4313      	orrs	r3, r2
 8007452:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007454:	4b2b      	ldr	r3, [pc, #172]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	f023 0220 	bic.w	r2, r3, #32
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	4928      	ldr	r1, [pc, #160]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007462:	4313      	orrs	r3, r2
 8007464:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007466:	4b27      	ldr	r3, [pc, #156]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	4a26      	ldr	r2, [pc, #152]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 800746c:	f023 0310 	bic.w	r3, r3, #16
 8007470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007472:	4b24      	ldr	r3, [pc, #144]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007476:	4b24      	ldr	r3, [pc, #144]	; (8007508 <RCCEx_PLL2_Config+0x160>)
 8007478:	4013      	ands	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	69d2      	ldr	r2, [r2, #28]
 800747e:	00d2      	lsls	r2, r2, #3
 8007480:	4920      	ldr	r1, [pc, #128]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007486:	4b1f      	ldr	r3, [pc, #124]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 800748c:	f043 0310 	orr.w	r3, r3, #16
 8007490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d106      	bne.n	80074a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007498:	4b1a      	ldr	r3, [pc, #104]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	4a19      	ldr	r2, [pc, #100]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 800749e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074a4:	e00f      	b.n	80074c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d106      	bne.n	80074ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074ac:	4b15      	ldr	r3, [pc, #84]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	4a14      	ldr	r2, [pc, #80]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074b8:	e005      	b.n	80074c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	4a11      	ldr	r2, [pc, #68]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a0e      	ldr	r2, [pc, #56]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d2:	f7fa fa3d 	bl	8001950 <HAL_GetTick>
 80074d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074d8:	e008      	b.n	80074ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074da:	f7fa fa39 	bl	8001950 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d901      	bls.n	80074ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e006      	b.n	80074fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <RCCEx_PLL2_Config+0x15c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	58024400 	.word	0x58024400
 8007508:	ffff0007 	.word	0xffff0007

0800750c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800751a:	4b53      	ldr	r3, [pc, #332]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	2b03      	cmp	r3, #3
 8007524:	d101      	bne.n	800752a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e099      	b.n	800765e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800752a:	4b4f      	ldr	r3, [pc, #316]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a4e      	ldr	r2, [pc, #312]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007536:	f7fa fa0b 	bl	8001950 <HAL_GetTick>
 800753a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800753c:	e008      	b.n	8007550 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800753e:	f7fa fa07 	bl	8001950 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e086      	b.n	800765e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007550:	4b45      	ldr	r3, [pc, #276]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f0      	bne.n	800753e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800755c:	4b42      	ldr	r3, [pc, #264]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 800755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007560:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	051b      	lsls	r3, r3, #20
 800756a:	493f      	ldr	r1, [pc, #252]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 800756c:	4313      	orrs	r3, r2
 800756e:	628b      	str	r3, [r1, #40]	; 0x28
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	3b01      	subs	r3, #1
 8007576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	3b01      	subs	r3, #1
 8007580:	025b      	lsls	r3, r3, #9
 8007582:	b29b      	uxth	r3, r3
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	3b01      	subs	r3, #1
 800758c:	041b      	lsls	r3, r3, #16
 800758e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	3b01      	subs	r3, #1
 800759a:	061b      	lsls	r3, r3, #24
 800759c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075a0:	4931      	ldr	r1, [pc, #196]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075a6:	4b30      	ldr	r3, [pc, #192]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	492d      	ldr	r1, [pc, #180]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075b8:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	4928      	ldr	r1, [pc, #160]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075ca:	4b27      	ldr	r3, [pc, #156]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	4a26      	ldr	r2, [pc, #152]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075d6:	4b24      	ldr	r3, [pc, #144]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075da:	4b24      	ldr	r3, [pc, #144]	; (800766c <RCCEx_PLL3_Config+0x160>)
 80075dc:	4013      	ands	r3, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	69d2      	ldr	r2, [r2, #28]
 80075e2:	00d2      	lsls	r2, r2, #3
 80075e4:	4920      	ldr	r1, [pc, #128]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075ea:	4b1f      	ldr	r3, [pc, #124]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075fc:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	4a19      	ldr	r2, [pc, #100]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007608:	e00f      	b.n	800762a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d106      	bne.n	800761e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007610:	4b15      	ldr	r3, [pc, #84]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	4a14      	ldr	r2, [pc, #80]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007616:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800761a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800761c:	e005      	b.n	800762a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	4a11      	ldr	r2, [pc, #68]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007624:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007628:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800762a:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a0e      	ldr	r2, [pc, #56]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007636:	f7fa f98b 	bl	8001950 <HAL_GetTick>
 800763a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800763c:	e008      	b.n	8007650 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800763e:	f7fa f987 	bl	8001950 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e006      	b.n	800765e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <RCCEx_PLL3_Config+0x15c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0f0      	beq.n	800763e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	58024400 	.word	0x58024400
 800766c:	ffff0007 	.word	0xffff0007

08007670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e049      	b.n	8007716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7f9 fb78 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f000 ff58 	bl	8008564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e049      	b.n	80077c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f841 	bl	80077cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3304      	adds	r3, #4
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f000 ff01 	bl	8008564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d109      	bne.n	8007804 <HAL_TIM_PWM_Start+0x24>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	bf14      	ite	ne
 80077fc:	2301      	movne	r3, #1
 80077fe:	2300      	moveq	r3, #0
 8007800:	b2db      	uxtb	r3, r3
 8007802:	e03c      	b.n	800787e <HAL_TIM_PWM_Start+0x9e>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b04      	cmp	r3, #4
 8007808:	d109      	bne.n	800781e <HAL_TIM_PWM_Start+0x3e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b01      	cmp	r3, #1
 8007814:	bf14      	ite	ne
 8007816:	2301      	movne	r3, #1
 8007818:	2300      	moveq	r3, #0
 800781a:	b2db      	uxtb	r3, r3
 800781c:	e02f      	b.n	800787e <HAL_TIM_PWM_Start+0x9e>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b08      	cmp	r3, #8
 8007822:	d109      	bne.n	8007838 <HAL_TIM_PWM_Start+0x58>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b01      	cmp	r3, #1
 800782e:	bf14      	ite	ne
 8007830:	2301      	movne	r3, #1
 8007832:	2300      	moveq	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	e022      	b.n	800787e <HAL_TIM_PWM_Start+0x9e>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b0c      	cmp	r3, #12
 800783c:	d109      	bne.n	8007852 <HAL_TIM_PWM_Start+0x72>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b01      	cmp	r3, #1
 8007848:	bf14      	ite	ne
 800784a:	2301      	movne	r3, #1
 800784c:	2300      	moveq	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	e015      	b.n	800787e <HAL_TIM_PWM_Start+0x9e>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b10      	cmp	r3, #16
 8007856:	d109      	bne.n	800786c <HAL_TIM_PWM_Start+0x8c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b01      	cmp	r3, #1
 8007862:	bf14      	ite	ne
 8007864:	2301      	movne	r3, #1
 8007866:	2300      	moveq	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	e008      	b.n	800787e <HAL_TIM_PWM_Start+0x9e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b01      	cmp	r3, #1
 8007876:	bf14      	ite	ne
 8007878:	2301      	movne	r3, #1
 800787a:	2300      	moveq	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e0ab      	b.n	80079de <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d104      	bne.n	8007896 <HAL_TIM_PWM_Start+0xb6>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007894:	e023      	b.n	80078de <HAL_TIM_PWM_Start+0xfe>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b04      	cmp	r3, #4
 800789a:	d104      	bne.n	80078a6 <HAL_TIM_PWM_Start+0xc6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078a4:	e01b      	b.n	80078de <HAL_TIM_PWM_Start+0xfe>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d104      	bne.n	80078b6 <HAL_TIM_PWM_Start+0xd6>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078b4:	e013      	b.n	80078de <HAL_TIM_PWM_Start+0xfe>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b0c      	cmp	r3, #12
 80078ba:	d104      	bne.n	80078c6 <HAL_TIM_PWM_Start+0xe6>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078c4:	e00b      	b.n	80078de <HAL_TIM_PWM_Start+0xfe>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_PWM_Start+0xf6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078d4:	e003      	b.n	80078de <HAL_TIM_PWM_Start+0xfe>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2202      	movs	r2, #2
 80078da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2201      	movs	r2, #1
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 fb8c 	bl	8009004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a3d      	ldr	r2, [pc, #244]	; (80079e8 <HAL_TIM_PWM_Start+0x208>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <HAL_TIM_PWM_Start+0x13e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a3c      	ldr	r2, [pc, #240]	; (80079ec <HAL_TIM_PWM_Start+0x20c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00e      	beq.n	800791e <HAL_TIM_PWM_Start+0x13e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a3a      	ldr	r2, [pc, #232]	; (80079f0 <HAL_TIM_PWM_Start+0x210>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d009      	beq.n	800791e <HAL_TIM_PWM_Start+0x13e>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a39      	ldr	r2, [pc, #228]	; (80079f4 <HAL_TIM_PWM_Start+0x214>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d004      	beq.n	800791e <HAL_TIM_PWM_Start+0x13e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a37      	ldr	r2, [pc, #220]	; (80079f8 <HAL_TIM_PWM_Start+0x218>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d101      	bne.n	8007922 <HAL_TIM_PWM_Start+0x142>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <HAL_TIM_PWM_Start+0x144>
 8007922:	2300      	movs	r3, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007936:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a2a      	ldr	r2, [pc, #168]	; (80079e8 <HAL_TIM_PWM_Start+0x208>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d02c      	beq.n	800799c <HAL_TIM_PWM_Start+0x1bc>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794a:	d027      	beq.n	800799c <HAL_TIM_PWM_Start+0x1bc>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a2a      	ldr	r2, [pc, #168]	; (80079fc <HAL_TIM_PWM_Start+0x21c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d022      	beq.n	800799c <HAL_TIM_PWM_Start+0x1bc>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a29      	ldr	r2, [pc, #164]	; (8007a00 <HAL_TIM_PWM_Start+0x220>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d01d      	beq.n	800799c <HAL_TIM_PWM_Start+0x1bc>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a27      	ldr	r2, [pc, #156]	; (8007a04 <HAL_TIM_PWM_Start+0x224>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d018      	beq.n	800799c <HAL_TIM_PWM_Start+0x1bc>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <HAL_TIM_PWM_Start+0x20c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d013      	beq.n	800799c <HAL_TIM_PWM_Start+0x1bc>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a23      	ldr	r2, [pc, #140]	; (8007a08 <HAL_TIM_PWM_Start+0x228>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00e      	beq.n	800799c <HAL_TIM_PWM_Start+0x1bc>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <HAL_TIM_PWM_Start+0x210>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d009      	beq.n	800799c <HAL_TIM_PWM_Start+0x1bc>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1f      	ldr	r2, [pc, #124]	; (8007a0c <HAL_TIM_PWM_Start+0x22c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d004      	beq.n	800799c <HAL_TIM_PWM_Start+0x1bc>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1e      	ldr	r2, [pc, #120]	; (8007a10 <HAL_TIM_PWM_Start+0x230>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d115      	bne.n	80079c8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <HAL_TIM_PWM_Start+0x234>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b06      	cmp	r3, #6
 80079ac:	d015      	beq.n	80079da <HAL_TIM_PWM_Start+0x1fa>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b4:	d011      	beq.n	80079da <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c6:	e008      	b.n	80079da <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	e000      	b.n	80079dc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	40010000 	.word	0x40010000
 80079ec:	40010400 	.word	0x40010400
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400
 80079f8:	40014800 	.word	0x40014800
 80079fc:	40000400 	.word	0x40000400
 8007a00:	40000800 	.word	0x40000800
 8007a04:	40000c00 	.word	0x40000c00
 8007a08:	40001800 	.word	0x40001800
 8007a0c:	4000e000 	.word	0x4000e000
 8007a10:	4000e400 	.word	0x4000e400
 8007a14:	00010007 	.word	0x00010007

08007a18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e049      	b.n	8007abe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7f9 f9c6 	bl	8000dd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3304      	adds	r3, #4
 8007a54:	4619      	mov	r1, r3
 8007a56:	4610      	mov	r0, r2
 8007a58:	f000 fd84 	bl	8008564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d104      	bne.n	8007ae6 <HAL_TIM_IC_Start_IT+0x1e>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	e023      	b.n	8007b2e <HAL_TIM_IC_Start_IT+0x66>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d104      	bne.n	8007af6 <HAL_TIM_IC_Start_IT+0x2e>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	e01b      	b.n	8007b2e <HAL_TIM_IC_Start_IT+0x66>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d104      	bne.n	8007b06 <HAL_TIM_IC_Start_IT+0x3e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	e013      	b.n	8007b2e <HAL_TIM_IC_Start_IT+0x66>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b0c      	cmp	r3, #12
 8007b0a:	d104      	bne.n	8007b16 <HAL_TIM_IC_Start_IT+0x4e>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	e00b      	b.n	8007b2e <HAL_TIM_IC_Start_IT+0x66>
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b10      	cmp	r3, #16
 8007b1a:	d104      	bne.n	8007b26 <HAL_TIM_IC_Start_IT+0x5e>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	e003      	b.n	8007b2e <HAL_TIM_IC_Start_IT+0x66>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d104      	bne.n	8007b40 <HAL_TIM_IC_Start_IT+0x78>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	e013      	b.n	8007b68 <HAL_TIM_IC_Start_IT+0xa0>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d104      	bne.n	8007b50 <HAL_TIM_IC_Start_IT+0x88>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	e00b      	b.n	8007b68 <HAL_TIM_IC_Start_IT+0xa0>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d104      	bne.n	8007b60 <HAL_TIM_IC_Start_IT+0x98>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	e003      	b.n	8007b68 <HAL_TIM_IC_Start_IT+0xa0>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d102      	bne.n	8007b76 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b70:	7b7b      	ldrb	r3, [r7, #13]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d001      	beq.n	8007b7a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e0ec      	b.n	8007d54 <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d104      	bne.n	8007b8a <HAL_TIM_IC_Start_IT+0xc2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b88:	e023      	b.n	8007bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d104      	bne.n	8007b9a <HAL_TIM_IC_Start_IT+0xd2>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b98:	e01b      	b.n	8007bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b08      	cmp	r3, #8
 8007b9e:	d104      	bne.n	8007baa <HAL_TIM_IC_Start_IT+0xe2>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ba8:	e013      	b.n	8007bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b0c      	cmp	r3, #12
 8007bae:	d104      	bne.n	8007bba <HAL_TIM_IC_Start_IT+0xf2>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bb8:	e00b      	b.n	8007bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b10      	cmp	r3, #16
 8007bbe:	d104      	bne.n	8007bca <HAL_TIM_IC_Start_IT+0x102>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bc8:	e003      	b.n	8007bd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <HAL_TIM_IC_Start_IT+0x11a>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007be0:	e013      	b.n	8007c0a <HAL_TIM_IC_Start_IT+0x142>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d104      	bne.n	8007bf2 <HAL_TIM_IC_Start_IT+0x12a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bf0:	e00b      	b.n	8007c0a <HAL_TIM_IC_Start_IT+0x142>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d104      	bne.n	8007c02 <HAL_TIM_IC_Start_IT+0x13a>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c00:	e003      	b.n	8007c0a <HAL_TIM_IC_Start_IT+0x142>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b0c      	cmp	r3, #12
 8007c0e:	d841      	bhi.n	8007c94 <HAL_TIM_IC_Start_IT+0x1cc>
 8007c10:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <HAL_TIM_IC_Start_IT+0x150>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c4d 	.word	0x08007c4d
 8007c1c:	08007c95 	.word	0x08007c95
 8007c20:	08007c95 	.word	0x08007c95
 8007c24:	08007c95 	.word	0x08007c95
 8007c28:	08007c5f 	.word	0x08007c5f
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007c95 	.word	0x08007c95
 8007c34:	08007c95 	.word	0x08007c95
 8007c38:	08007c71 	.word	0x08007c71
 8007c3c:	08007c95 	.word	0x08007c95
 8007c40:	08007c95 	.word	0x08007c95
 8007c44:	08007c95 	.word	0x08007c95
 8007c48:	08007c83 	.word	0x08007c83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0202 	orr.w	r2, r2, #2
 8007c5a:	60da      	str	r2, [r3, #12]
      break;
 8007c5c:	e01d      	b.n	8007c9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0204 	orr.w	r2, r2, #4
 8007c6c:	60da      	str	r2, [r3, #12]
      break;
 8007c6e:	e014      	b.n	8007c9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0208 	orr.w	r2, r2, #8
 8007c7e:	60da      	str	r2, [r3, #12]
      break;
 8007c80:	e00b      	b.n	8007c9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f042 0210 	orr.w	r2, r2, #16
 8007c90:	60da      	str	r2, [r3, #12]
      break;
 8007c92:	e002      	b.n	8007c9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	73fb      	strb	r3, [r7, #15]
      break;
 8007c98:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d158      	bne.n	8007d52 <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	6839      	ldr	r1, [r7, #0]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 f9ab 	bl	8009004 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a2a      	ldr	r2, [pc, #168]	; (8007d5c <HAL_TIM_IC_Start_IT+0x294>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d02c      	beq.n	8007d12 <HAL_TIM_IC_Start_IT+0x24a>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc0:	d027      	beq.n	8007d12 <HAL_TIM_IC_Start_IT+0x24a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a26      	ldr	r2, [pc, #152]	; (8007d60 <HAL_TIM_IC_Start_IT+0x298>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d022      	beq.n	8007d12 <HAL_TIM_IC_Start_IT+0x24a>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a24      	ldr	r2, [pc, #144]	; (8007d64 <HAL_TIM_IC_Start_IT+0x29c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d01d      	beq.n	8007d12 <HAL_TIM_IC_Start_IT+0x24a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <HAL_TIM_IC_Start_IT+0x2a0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d018      	beq.n	8007d12 <HAL_TIM_IC_Start_IT+0x24a>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a21      	ldr	r2, [pc, #132]	; (8007d6c <HAL_TIM_IC_Start_IT+0x2a4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d013      	beq.n	8007d12 <HAL_TIM_IC_Start_IT+0x24a>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a20      	ldr	r2, [pc, #128]	; (8007d70 <HAL_TIM_IC_Start_IT+0x2a8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d00e      	beq.n	8007d12 <HAL_TIM_IC_Start_IT+0x24a>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a1e      	ldr	r2, [pc, #120]	; (8007d74 <HAL_TIM_IC_Start_IT+0x2ac>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d009      	beq.n	8007d12 <HAL_TIM_IC_Start_IT+0x24a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <HAL_TIM_IC_Start_IT+0x2b0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d004      	beq.n	8007d12 <HAL_TIM_IC_Start_IT+0x24a>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a1b      	ldr	r2, [pc, #108]	; (8007d7c <HAL_TIM_IC_Start_IT+0x2b4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d115      	bne.n	8007d3e <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	4b19      	ldr	r3, [pc, #100]	; (8007d80 <HAL_TIM_IC_Start_IT+0x2b8>)
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b06      	cmp	r3, #6
 8007d22:	d015      	beq.n	8007d50 <HAL_TIM_IC_Start_IT+0x288>
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d2a:	d011      	beq.n	8007d50 <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0201 	orr.w	r2, r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3c:	e008      	b.n	8007d50 <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0201 	orr.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e000      	b.n	8007d52 <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d50:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40010000 	.word	0x40010000
 8007d60:	40000400 	.word	0x40000400
 8007d64:	40000800 	.word	0x40000800
 8007d68:	40000c00 	.word	0x40000c00
 8007d6c:	40010400 	.word	0x40010400
 8007d70:	40001800 	.word	0x40001800
 8007d74:	40014000 	.word	0x40014000
 8007d78:	4000e000 	.word	0x4000e000
 8007d7c:	4000e400 	.word	0x4000e400
 8007d80:	00010007 	.word	0x00010007

08007d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d122      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d11b      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0202 	mvn.w	r2, #2
 8007db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7f8 fc1e 	bl	8000608 <HAL_TIM_IC_CaptureCallback>
 8007dcc:	e005      	b.n	8007dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fbaa 	bl	8008528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fbb1 	bl	800853c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d122      	bne.n	8007e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d11b      	bne.n	8007e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0204 	mvn.w	r2, #4
 8007e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7f8 fbf4 	bl	8000608 <HAL_TIM_IC_CaptureCallback>
 8007e20:	e005      	b.n	8007e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fb80 	bl	8008528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fb87 	bl	800853c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0308 	and.w	r3, r3, #8
 8007e3e:	2b08      	cmp	r3, #8
 8007e40:	d122      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d11b      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0208 	mvn.w	r2, #8
 8007e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2204      	movs	r2, #4
 8007e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7f8 fbca 	bl	8000608 <HAL_TIM_IC_CaptureCallback>
 8007e74:	e005      	b.n	8007e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fb56 	bl	8008528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fb5d 	bl	800853c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f003 0310 	and.w	r3, r3, #16
 8007e92:	2b10      	cmp	r3, #16
 8007e94:	d122      	bne.n	8007edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	2b10      	cmp	r3, #16
 8007ea2:	d11b      	bne.n	8007edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f06f 0210 	mvn.w	r2, #16
 8007eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7f8 fba0 	bl	8000608 <HAL_TIM_IC_CaptureCallback>
 8007ec8:	e005      	b.n	8007ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fb2c 	bl	8008528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fb33 	bl	800853c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d10e      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d107      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0201 	mvn.w	r2, #1
 8007f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fb06 	bl	8008514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b80      	cmp	r3, #128	; 0x80
 8007f14:	d10e      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f20:	2b80      	cmp	r3, #128	; 0x80
 8007f22:	d107      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f001 f9d4 	bl	80092dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f42:	d10e      	bne.n	8007f62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4e:	2b80      	cmp	r3, #128	; 0x80
 8007f50:	d107      	bne.n	8007f62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 f9c7 	bl	80092f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d10e      	bne.n	8007f8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d107      	bne.n	8007f8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fae1 	bl	8008550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d10e      	bne.n	8007fba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d107      	bne.n	8007fba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f06f 0220 	mvn.w	r2, #32
 8007fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f987 	bl	80092c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b086      	sub	sp, #24
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e088      	b.n	80080f2 <HAL_TIM_IC_ConfigChannel+0x130>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d11b      	bne.n	8008026 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007ffe:	f000 fe2d 	bl	8008c5c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	699a      	ldr	r2, [r3, #24]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 020c 	bic.w	r2, r2, #12
 8008010:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6999      	ldr	r1, [r3, #24]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	619a      	str	r2, [r3, #24]
 8008024:	e060      	b.n	80080e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b04      	cmp	r3, #4
 800802a:	d11c      	bne.n	8008066 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800803c:	f000 febd 	bl	8008dba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800804e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6999      	ldr	r1, [r3, #24]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	021a      	lsls	r2, r3, #8
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	619a      	str	r2, [r3, #24]
 8008064:	e040      	b.n	80080e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b08      	cmp	r3, #8
 800806a:	d11b      	bne.n	80080a4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800807c:	f000 ff0a 	bl	8008e94 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69da      	ldr	r2, [r3, #28]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 020c 	bic.w	r2, r2, #12
 800808e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	69d9      	ldr	r1, [r3, #28]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	61da      	str	r2, [r3, #28]
 80080a2:	e021      	b.n	80080e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b0c      	cmp	r3, #12
 80080a8:	d11c      	bne.n	80080e4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80080ba:	f000 ff27 	bl	8008f0c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69da      	ldr	r2, [r3, #28]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80080cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69d9      	ldr	r1, [r3, #28]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	021a      	lsls	r2, r3, #8
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	61da      	str	r2, [r3, #28]
 80080e2:	e001      	b.n	80080e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008116:	2302      	movs	r3, #2
 8008118:	e0ff      	b.n	800831a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b14      	cmp	r3, #20
 8008126:	f200 80f0 	bhi.w	800830a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008185 	.word	0x08008185
 8008134:	0800830b 	.word	0x0800830b
 8008138:	0800830b 	.word	0x0800830b
 800813c:	0800830b 	.word	0x0800830b
 8008140:	080081c5 	.word	0x080081c5
 8008144:	0800830b 	.word	0x0800830b
 8008148:	0800830b 	.word	0x0800830b
 800814c:	0800830b 	.word	0x0800830b
 8008150:	08008207 	.word	0x08008207
 8008154:	0800830b 	.word	0x0800830b
 8008158:	0800830b 	.word	0x0800830b
 800815c:	0800830b 	.word	0x0800830b
 8008160:	08008247 	.word	0x08008247
 8008164:	0800830b 	.word	0x0800830b
 8008168:	0800830b 	.word	0x0800830b
 800816c:	0800830b 	.word	0x0800830b
 8008170:	08008289 	.word	0x08008289
 8008174:	0800830b 	.word	0x0800830b
 8008178:	0800830b 	.word	0x0800830b
 800817c:	0800830b 	.word	0x0800830b
 8008180:	080082c9 	.word	0x080082c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fa90 	bl	80086b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0208 	orr.w	r2, r2, #8
 800819e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0204 	bic.w	r2, r2, #4
 80081ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6999      	ldr	r1, [r3, #24]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	691a      	ldr	r2, [r3, #16]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	619a      	str	r2, [r3, #24]
      break;
 80081c2:	e0a5      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68b9      	ldr	r1, [r7, #8]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fb00 	bl	80087d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699a      	ldr	r2, [r3, #24]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6999      	ldr	r1, [r3, #24]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	021a      	lsls	r2, r3, #8
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	619a      	str	r2, [r3, #24]
      break;
 8008204:	e084      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fb69 	bl	80088e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69da      	ldr	r2, [r3, #28]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0208 	orr.w	r2, r2, #8
 8008220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69da      	ldr	r2, [r3, #28]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0204 	bic.w	r2, r2, #4
 8008230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69d9      	ldr	r1, [r3, #28]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	691a      	ldr	r2, [r3, #16]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	430a      	orrs	r2, r1
 8008242:	61da      	str	r2, [r3, #28]
      break;
 8008244:	e064      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68b9      	ldr	r1, [r7, #8]
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fbd1 	bl	80089f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69da      	ldr	r2, [r3, #28]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69d9      	ldr	r1, [r3, #28]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	021a      	lsls	r2, r3, #8
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	430a      	orrs	r2, r1
 8008284:	61da      	str	r2, [r3, #28]
      break;
 8008286:	e043      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fc1a 	bl	8008ac8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0208 	orr.w	r2, r2, #8
 80082a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0204 	bic.w	r2, r2, #4
 80082b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082c6:	e023      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fc5e 	bl	8008b90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	021a      	lsls	r2, r3, #8
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008308:	e002      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
      break;
 800830e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop

08008324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_TIM_ConfigClockSource+0x1c>
 800833c:	2302      	movs	r3, #2
 800833e:	e0dc      	b.n	80084fa <HAL_TIM_ConfigClockSource+0x1d6>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2202      	movs	r2, #2
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	4b6a      	ldr	r3, [pc, #424]	; (8008504 <HAL_TIM_ConfigClockSource+0x1e0>)
 800835c:	4013      	ands	r3, r2
 800835e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a64      	ldr	r2, [pc, #400]	; (8008508 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	f000 80a9 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1aa>
 800837c:	4a62      	ldr	r2, [pc, #392]	; (8008508 <HAL_TIM_ConfigClockSource+0x1e4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	f200 80ae 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008384:	4a61      	ldr	r2, [pc, #388]	; (800850c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008386:	4293      	cmp	r3, r2
 8008388:	f000 80a1 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1aa>
 800838c:	4a5f      	ldr	r2, [pc, #380]	; (800850c <HAL_TIM_ConfigClockSource+0x1e8>)
 800838e:	4293      	cmp	r3, r2
 8008390:	f200 80a6 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008394:	4a5e      	ldr	r2, [pc, #376]	; (8008510 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008396:	4293      	cmp	r3, r2
 8008398:	f000 8099 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1aa>
 800839c:	4a5c      	ldr	r2, [pc, #368]	; (8008510 <HAL_TIM_ConfigClockSource+0x1ec>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	f200 809e 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80083a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083a8:	f000 8091 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1aa>
 80083ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083b0:	f200 8096 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80083b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083b8:	f000 8089 	beq.w	80084ce <HAL_TIM_ConfigClockSource+0x1aa>
 80083bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083c0:	f200 808e 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80083c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c8:	d03e      	beq.n	8008448 <HAL_TIM_ConfigClockSource+0x124>
 80083ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ce:	f200 8087 	bhi.w	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d6:	f000 8086 	beq.w	80084e6 <HAL_TIM_ConfigClockSource+0x1c2>
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083de:	d87f      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80083e0:	2b70      	cmp	r3, #112	; 0x70
 80083e2:	d01a      	beq.n	800841a <HAL_TIM_ConfigClockSource+0xf6>
 80083e4:	2b70      	cmp	r3, #112	; 0x70
 80083e6:	d87b      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80083e8:	2b60      	cmp	r3, #96	; 0x60
 80083ea:	d050      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x16a>
 80083ec:	2b60      	cmp	r3, #96	; 0x60
 80083ee:	d877      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80083f0:	2b50      	cmp	r3, #80	; 0x50
 80083f2:	d03c      	beq.n	800846e <HAL_TIM_ConfigClockSource+0x14a>
 80083f4:	2b50      	cmp	r3, #80	; 0x50
 80083f6:	d873      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80083f8:	2b40      	cmp	r3, #64	; 0x40
 80083fa:	d058      	beq.n	80084ae <HAL_TIM_ConfigClockSource+0x18a>
 80083fc:	2b40      	cmp	r3, #64	; 0x40
 80083fe:	d86f      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008400:	2b30      	cmp	r3, #48	; 0x30
 8008402:	d064      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x1aa>
 8008404:	2b30      	cmp	r3, #48	; 0x30
 8008406:	d86b      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008408:	2b20      	cmp	r3, #32
 800840a:	d060      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x1aa>
 800840c:	2b20      	cmp	r3, #32
 800840e:	d867      	bhi.n	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d05c      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x1aa>
 8008414:	2b10      	cmp	r3, #16
 8008416:	d05a      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x1aa>
 8008418:	e062      	b.n	80084e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800842a:	f000 fdcb 	bl	8008fc4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800843c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	609a      	str	r2, [r3, #8]
      break;
 8008446:	e04f      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008458:	f000 fdb4 	bl	8008fc4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800846a:	609a      	str	r2, [r3, #8]
      break;
 800846c:	e03c      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800847a:	461a      	mov	r2, r3
 800847c:	f000 fc6e 	bl	8008d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2150      	movs	r1, #80	; 0x50
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fd7e 	bl	8008f88 <TIM_ITRx_SetConfig>
      break;
 800848c:	e02c      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800849a:	461a      	mov	r2, r3
 800849c:	f000 fcca 	bl	8008e34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2160      	movs	r1, #96	; 0x60
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fd6e 	bl	8008f88 <TIM_ITRx_SetConfig>
      break;
 80084ac:	e01c      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ba:	461a      	mov	r2, r3
 80084bc:	f000 fc4e 	bl	8008d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2140      	movs	r1, #64	; 0x40
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fd5e 	bl	8008f88 <TIM_ITRx_SetConfig>
      break;
 80084cc:	e00c      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4619      	mov	r1, r3
 80084d8:	4610      	mov	r0, r2
 80084da:	f000 fd55 	bl	8008f88 <TIM_ITRx_SetConfig>
      break;
 80084de:	e003      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
      break;
 80084e4:	e000      	b.n	80084e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80084e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	ffceff88 	.word	0xffceff88
 8008508:	00100040 	.word	0x00100040
 800850c:	00100030 	.word	0x00100030
 8008510:	00100020 	.word	0x00100020

08008514 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a44      	ldr	r2, [pc, #272]	; (8008688 <TIM_Base_SetConfig+0x124>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d013      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008582:	d00f      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a41      	ldr	r2, [pc, #260]	; (800868c <TIM_Base_SetConfig+0x128>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00b      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a40      	ldr	r2, [pc, #256]	; (8008690 <TIM_Base_SetConfig+0x12c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d007      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a3f      	ldr	r2, [pc, #252]	; (8008694 <TIM_Base_SetConfig+0x130>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d003      	beq.n	80085a4 <TIM_Base_SetConfig+0x40>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a3e      	ldr	r2, [pc, #248]	; (8008698 <TIM_Base_SetConfig+0x134>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d108      	bne.n	80085b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a33      	ldr	r2, [pc, #204]	; (8008688 <TIM_Base_SetConfig+0x124>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d027      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c4:	d023      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a30      	ldr	r2, [pc, #192]	; (800868c <TIM_Base_SetConfig+0x128>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d01f      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a2f      	ldr	r2, [pc, #188]	; (8008690 <TIM_Base_SetConfig+0x12c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d01b      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a2e      	ldr	r2, [pc, #184]	; (8008694 <TIM_Base_SetConfig+0x130>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d017      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a2d      	ldr	r2, [pc, #180]	; (8008698 <TIM_Base_SetConfig+0x134>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d013      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a2c      	ldr	r2, [pc, #176]	; (800869c <TIM_Base_SetConfig+0x138>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00f      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a2b      	ldr	r2, [pc, #172]	; (80086a0 <TIM_Base_SetConfig+0x13c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00b      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a2a      	ldr	r2, [pc, #168]	; (80086a4 <TIM_Base_SetConfig+0x140>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d007      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a29      	ldr	r2, [pc, #164]	; (80086a8 <TIM_Base_SetConfig+0x144>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d003      	beq.n	800860e <TIM_Base_SetConfig+0xaa>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a28      	ldr	r2, [pc, #160]	; (80086ac <TIM_Base_SetConfig+0x148>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d108      	bne.n	8008620 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a10      	ldr	r2, [pc, #64]	; (8008688 <TIM_Base_SetConfig+0x124>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d00f      	beq.n	800866c <TIM_Base_SetConfig+0x108>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a12      	ldr	r2, [pc, #72]	; (8008698 <TIM_Base_SetConfig+0x134>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00b      	beq.n	800866c <TIM_Base_SetConfig+0x108>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a11      	ldr	r2, [pc, #68]	; (800869c <TIM_Base_SetConfig+0x138>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d007      	beq.n	800866c <TIM_Base_SetConfig+0x108>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a10      	ldr	r2, [pc, #64]	; (80086a0 <TIM_Base_SetConfig+0x13c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d003      	beq.n	800866c <TIM_Base_SetConfig+0x108>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a0f      	ldr	r2, [pc, #60]	; (80086a4 <TIM_Base_SetConfig+0x140>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d103      	bne.n	8008674 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	615a      	str	r2, [r3, #20]
}
 800867a:	bf00      	nop
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	40010000 	.word	0x40010000
 800868c:	40000400 	.word	0x40000400
 8008690:	40000800 	.word	0x40000800
 8008694:	40000c00 	.word	0x40000c00
 8008698:	40010400 	.word	0x40010400
 800869c:	40014000 	.word	0x40014000
 80086a0:	40014400 	.word	0x40014400
 80086a4:	40014800 	.word	0x40014800
 80086a8:	4000e000 	.word	0x4000e000
 80086ac:	4000e400 	.word	0x4000e400

080086b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	f023 0201 	bic.w	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4b37      	ldr	r3, [pc, #220]	; (80087b8 <TIM_OC1_SetConfig+0x108>)
 80086dc:	4013      	ands	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0303 	bic.w	r3, r3, #3
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f023 0302 	bic.w	r3, r3, #2
 80086f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	4313      	orrs	r3, r2
 8008702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a2d      	ldr	r2, [pc, #180]	; (80087bc <TIM_OC1_SetConfig+0x10c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d00f      	beq.n	800872c <TIM_OC1_SetConfig+0x7c>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a2c      	ldr	r2, [pc, #176]	; (80087c0 <TIM_OC1_SetConfig+0x110>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00b      	beq.n	800872c <TIM_OC1_SetConfig+0x7c>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a2b      	ldr	r2, [pc, #172]	; (80087c4 <TIM_OC1_SetConfig+0x114>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d007      	beq.n	800872c <TIM_OC1_SetConfig+0x7c>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a2a      	ldr	r2, [pc, #168]	; (80087c8 <TIM_OC1_SetConfig+0x118>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d003      	beq.n	800872c <TIM_OC1_SetConfig+0x7c>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a29      	ldr	r2, [pc, #164]	; (80087cc <TIM_OC1_SetConfig+0x11c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d10c      	bne.n	8008746 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f023 0308 	bic.w	r3, r3, #8
 8008732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	4313      	orrs	r3, r2
 800873c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f023 0304 	bic.w	r3, r3, #4
 8008744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a1c      	ldr	r2, [pc, #112]	; (80087bc <TIM_OC1_SetConfig+0x10c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d00f      	beq.n	800876e <TIM_OC1_SetConfig+0xbe>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a1b      	ldr	r2, [pc, #108]	; (80087c0 <TIM_OC1_SetConfig+0x110>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00b      	beq.n	800876e <TIM_OC1_SetConfig+0xbe>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a1a      	ldr	r2, [pc, #104]	; (80087c4 <TIM_OC1_SetConfig+0x114>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d007      	beq.n	800876e <TIM_OC1_SetConfig+0xbe>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a19      	ldr	r2, [pc, #100]	; (80087c8 <TIM_OC1_SetConfig+0x118>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d003      	beq.n	800876e <TIM_OC1_SetConfig+0xbe>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a18      	ldr	r2, [pc, #96]	; (80087cc <TIM_OC1_SetConfig+0x11c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d111      	bne.n	8008792 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800877c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	621a      	str	r2, [r3, #32]
}
 80087ac:	bf00      	nop
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	fffeff8f 	.word	0xfffeff8f
 80087bc:	40010000 	.word	0x40010000
 80087c0:	40010400 	.word	0x40010400
 80087c4:	40014000 	.word	0x40014000
 80087c8:	40014400 	.word	0x40014400
 80087cc:	40014800 	.word	0x40014800

080087d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	f023 0210 	bic.w	r2, r3, #16
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4b34      	ldr	r3, [pc, #208]	; (80088cc <TIM_OC2_SetConfig+0xfc>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	021b      	lsls	r3, r3, #8
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f023 0320 	bic.w	r3, r3, #32
 800881a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	4313      	orrs	r3, r2
 8008826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a29      	ldr	r2, [pc, #164]	; (80088d0 <TIM_OC2_SetConfig+0x100>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_OC2_SetConfig+0x68>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a28      	ldr	r2, [pc, #160]	; (80088d4 <TIM_OC2_SetConfig+0x104>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d10d      	bne.n	8008854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800883e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a1e      	ldr	r2, [pc, #120]	; (80088d0 <TIM_OC2_SetConfig+0x100>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00f      	beq.n	800887c <TIM_OC2_SetConfig+0xac>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a1d      	ldr	r2, [pc, #116]	; (80088d4 <TIM_OC2_SetConfig+0x104>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00b      	beq.n	800887c <TIM_OC2_SetConfig+0xac>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a1c      	ldr	r2, [pc, #112]	; (80088d8 <TIM_OC2_SetConfig+0x108>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d007      	beq.n	800887c <TIM_OC2_SetConfig+0xac>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a1b      	ldr	r2, [pc, #108]	; (80088dc <TIM_OC2_SetConfig+0x10c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_OC2_SetConfig+0xac>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a1a      	ldr	r2, [pc, #104]	; (80088e0 <TIM_OC2_SetConfig+0x110>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d113      	bne.n	80088a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800888a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	621a      	str	r2, [r3, #32]
}
 80088be:	bf00      	nop
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	feff8fff 	.word	0xfeff8fff
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40010400 	.word	0x40010400
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40014400 	.word	0x40014400
 80088e0:	40014800 	.word	0x40014800

080088e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4b33      	ldr	r3, [pc, #204]	; (80089dc <TIM_OC3_SetConfig+0xf8>)
 8008910:	4013      	ands	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800892c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a28      	ldr	r2, [pc, #160]	; (80089e0 <TIM_OC3_SetConfig+0xfc>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d003      	beq.n	800894a <TIM_OC3_SetConfig+0x66>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a27      	ldr	r2, [pc, #156]	; (80089e4 <TIM_OC3_SetConfig+0x100>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d10d      	bne.n	8008966 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	021b      	lsls	r3, r3, #8
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	4313      	orrs	r3, r2
 800895c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a1d      	ldr	r2, [pc, #116]	; (80089e0 <TIM_OC3_SetConfig+0xfc>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d00f      	beq.n	800898e <TIM_OC3_SetConfig+0xaa>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a1c      	ldr	r2, [pc, #112]	; (80089e4 <TIM_OC3_SetConfig+0x100>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d00b      	beq.n	800898e <TIM_OC3_SetConfig+0xaa>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a1b      	ldr	r2, [pc, #108]	; (80089e8 <TIM_OC3_SetConfig+0x104>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d007      	beq.n	800898e <TIM_OC3_SetConfig+0xaa>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a1a      	ldr	r2, [pc, #104]	; (80089ec <TIM_OC3_SetConfig+0x108>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d003      	beq.n	800898e <TIM_OC3_SetConfig+0xaa>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a19      	ldr	r2, [pc, #100]	; (80089f0 <TIM_OC3_SetConfig+0x10c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d113      	bne.n	80089b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800899c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	011b      	lsls	r3, r3, #4
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	621a      	str	r2, [r3, #32]
}
 80089d0:	bf00      	nop
 80089d2:	371c      	adds	r7, #28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	fffeff8f 	.word	0xfffeff8f
 80089e0:	40010000 	.word	0x40010000
 80089e4:	40010400 	.word	0x40010400
 80089e8:	40014000 	.word	0x40014000
 80089ec:	40014400 	.word	0x40014400
 80089f0:	40014800 	.word	0x40014800

080089f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	4b24      	ldr	r3, [pc, #144]	; (8008ab0 <TIM_OC4_SetConfig+0xbc>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	021b      	lsls	r3, r3, #8
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	031b      	lsls	r3, r3, #12
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a19      	ldr	r2, [pc, #100]	; (8008ab4 <TIM_OC4_SetConfig+0xc0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d00f      	beq.n	8008a74 <TIM_OC4_SetConfig+0x80>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a18      	ldr	r2, [pc, #96]	; (8008ab8 <TIM_OC4_SetConfig+0xc4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00b      	beq.n	8008a74 <TIM_OC4_SetConfig+0x80>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a17      	ldr	r2, [pc, #92]	; (8008abc <TIM_OC4_SetConfig+0xc8>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d007      	beq.n	8008a74 <TIM_OC4_SetConfig+0x80>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a16      	ldr	r2, [pc, #88]	; (8008ac0 <TIM_OC4_SetConfig+0xcc>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d003      	beq.n	8008a74 <TIM_OC4_SetConfig+0x80>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a15      	ldr	r2, [pc, #84]	; (8008ac4 <TIM_OC4_SetConfig+0xd0>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d109      	bne.n	8008a88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	019b      	lsls	r3, r3, #6
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	621a      	str	r2, [r3, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	feff8fff 	.word	0xfeff8fff
 8008ab4:	40010000 	.word	0x40010000
 8008ab8:	40010400 	.word	0x40010400
 8008abc:	40014000 	.word	0x40014000
 8008ac0:	40014400 	.word	0x40014400
 8008ac4:	40014800 	.word	0x40014800

08008ac8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4b21      	ldr	r3, [pc, #132]	; (8008b78 <TIM_OC5_SetConfig+0xb0>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	041b      	lsls	r3, r3, #16
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a18      	ldr	r2, [pc, #96]	; (8008b7c <TIM_OC5_SetConfig+0xb4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d00f      	beq.n	8008b3e <TIM_OC5_SetConfig+0x76>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a17      	ldr	r2, [pc, #92]	; (8008b80 <TIM_OC5_SetConfig+0xb8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00b      	beq.n	8008b3e <TIM_OC5_SetConfig+0x76>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a16      	ldr	r2, [pc, #88]	; (8008b84 <TIM_OC5_SetConfig+0xbc>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d007      	beq.n	8008b3e <TIM_OC5_SetConfig+0x76>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a15      	ldr	r2, [pc, #84]	; (8008b88 <TIM_OC5_SetConfig+0xc0>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d003      	beq.n	8008b3e <TIM_OC5_SetConfig+0x76>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a14      	ldr	r2, [pc, #80]	; (8008b8c <TIM_OC5_SetConfig+0xc4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d109      	bne.n	8008b52 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	021b      	lsls	r3, r3, #8
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	621a      	str	r2, [r3, #32]
}
 8008b6c:	bf00      	nop
 8008b6e:	371c      	adds	r7, #28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	fffeff8f 	.word	0xfffeff8f
 8008b7c:	40010000 	.word	0x40010000
 8008b80:	40010400 	.word	0x40010400
 8008b84:	40014000 	.word	0x40014000
 8008b88:	40014400 	.word	0x40014400
 8008b8c:	40014800 	.word	0x40014800

08008b90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4b22      	ldr	r3, [pc, #136]	; (8008c44 <TIM_OC6_SetConfig+0xb4>)
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	051b      	lsls	r3, r3, #20
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a19      	ldr	r2, [pc, #100]	; (8008c48 <TIM_OC6_SetConfig+0xb8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00f      	beq.n	8008c08 <TIM_OC6_SetConfig+0x78>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a18      	ldr	r2, [pc, #96]	; (8008c4c <TIM_OC6_SetConfig+0xbc>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00b      	beq.n	8008c08 <TIM_OC6_SetConfig+0x78>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a17      	ldr	r2, [pc, #92]	; (8008c50 <TIM_OC6_SetConfig+0xc0>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d007      	beq.n	8008c08 <TIM_OC6_SetConfig+0x78>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a16      	ldr	r2, [pc, #88]	; (8008c54 <TIM_OC6_SetConfig+0xc4>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d003      	beq.n	8008c08 <TIM_OC6_SetConfig+0x78>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a15      	ldr	r2, [pc, #84]	; (8008c58 <TIM_OC6_SetConfig+0xc8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d109      	bne.n	8008c1c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	029b      	lsls	r3, r3, #10
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	feff8fff 	.word	0xfeff8fff
 8008c48:	40010000 	.word	0x40010000
 8008c4c:	40010400 	.word	0x40010400
 8008c50:	40014000 	.word	0x40014000
 8008c54:	40014400 	.word	0x40014400
 8008c58:	40014800 	.word	0x40014800

08008c5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	f023 0201 	bic.w	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4a2c      	ldr	r2, [pc, #176]	; (8008d38 <TIM_TI1_SetConfig+0xdc>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d023      	beq.n	8008cd2 <TIM_TI1_SetConfig+0x76>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c90:	d01f      	beq.n	8008cd2 <TIM_TI1_SetConfig+0x76>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4a29      	ldr	r2, [pc, #164]	; (8008d3c <TIM_TI1_SetConfig+0xe0>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d01b      	beq.n	8008cd2 <TIM_TI1_SetConfig+0x76>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4a28      	ldr	r2, [pc, #160]	; (8008d40 <TIM_TI1_SetConfig+0xe4>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d017      	beq.n	8008cd2 <TIM_TI1_SetConfig+0x76>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4a27      	ldr	r2, [pc, #156]	; (8008d44 <TIM_TI1_SetConfig+0xe8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d013      	beq.n	8008cd2 <TIM_TI1_SetConfig+0x76>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4a26      	ldr	r2, [pc, #152]	; (8008d48 <TIM_TI1_SetConfig+0xec>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00f      	beq.n	8008cd2 <TIM_TI1_SetConfig+0x76>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	4a25      	ldr	r2, [pc, #148]	; (8008d4c <TIM_TI1_SetConfig+0xf0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00b      	beq.n	8008cd2 <TIM_TI1_SetConfig+0x76>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4a24      	ldr	r2, [pc, #144]	; (8008d50 <TIM_TI1_SetConfig+0xf4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d007      	beq.n	8008cd2 <TIM_TI1_SetConfig+0x76>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4a23      	ldr	r2, [pc, #140]	; (8008d54 <TIM_TI1_SetConfig+0xf8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d003      	beq.n	8008cd2 <TIM_TI1_SetConfig+0x76>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4a22      	ldr	r2, [pc, #136]	; (8008d58 <TIM_TI1_SetConfig+0xfc>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d101      	bne.n	8008cd6 <TIM_TI1_SetConfig+0x7a>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e000      	b.n	8008cd8 <TIM_TI1_SetConfig+0x7c>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f023 0303 	bic.w	r3, r3, #3
 8008ce2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008ce4:	697a      	ldr	r2, [r7, #20]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	e003      	b.n	8008cf6 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f043 0301 	orr.w	r3, r3, #1
 8008cf4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	011b      	lsls	r3, r3, #4
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	f023 030a 	bic.w	r3, r3, #10
 8008d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f003 030a 	and.w	r3, r3, #10
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	621a      	str	r2, [r3, #32]
}
 8008d2a:	bf00      	nop
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	40010000 	.word	0x40010000
 8008d3c:	40000400 	.word	0x40000400
 8008d40:	40000800 	.word	0x40000800
 8008d44:	40000c00 	.word	0x40000c00
 8008d48:	40010400 	.word	0x40010400
 8008d4c:	40001800 	.word	0x40001800
 8008d50:	40014000 	.word	0x40014000
 8008d54:	4000e000 	.word	0x4000e000
 8008d58:	4000e400 	.word	0x4000e400

08008d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	f023 0201 	bic.w	r2, r3, #1
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f023 030a 	bic.w	r3, r3, #10
 8008d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	621a      	str	r2, [r3, #32]
}
 8008dae:	bf00      	nop
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b087      	sub	sp, #28
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	60f8      	str	r0, [r7, #12]
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	607a      	str	r2, [r7, #4]
 8008dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	f023 0210 	bic.w	r2, r3, #16
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	021b      	lsls	r3, r3, #8
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	031b      	lsls	r3, r3, #12
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	011b      	lsls	r3, r3, #4
 8008e12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	621a      	str	r2, [r3, #32]
}
 8008e28:	bf00      	nop
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f023 0210 	bic.w	r2, r3, #16
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	031b      	lsls	r3, r3, #12
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f023 0303 	bic.w	r3, r3, #3
 8008ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	621a      	str	r2, [r3, #32]
}
 8008f00:	bf00      	nop
 8008f02:	371c      	adds	r7, #28
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	021b      	lsls	r3, r3, #8
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	031b      	lsls	r3, r3, #12
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	031b      	lsls	r3, r3, #12
 8008f64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	621a      	str	r2, [r3, #32]
}
 8008f7a:	bf00      	nop
 8008f7c:	371c      	adds	r7, #28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
	...

08008f88 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <TIM_ITRx_SetConfig+0x38>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	f043 0307 	orr.w	r3, r3, #7
 8008faa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	609a      	str	r2, [r3, #8]
}
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	ffcfff8f 	.word	0xffcfff8f

08008fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	021a      	lsls	r2, r3, #8
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	609a      	str	r2, [r3, #8]
}
 8008ff8:	bf00      	nop
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	f003 031f 	and.w	r3, r3, #31
 8009016:	2201      	movs	r2, #1
 8009018:	fa02 f303 	lsl.w	r3, r2, r3
 800901c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6a1a      	ldr	r2, [r3, #32]
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	43db      	mvns	r3, r3
 8009026:	401a      	ands	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6a1a      	ldr	r2, [r3, #32]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f003 031f 	and.w	r3, r3, #31
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	fa01 f303 	lsl.w	r3, r1, r3
 800903c:	431a      	orrs	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
	...

08009050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009060:	2b01      	cmp	r3, #1
 8009062:	d101      	bne.n	8009068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009064:	2302      	movs	r3, #2
 8009066:	e077      	b.n	8009158 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a35      	ldr	r2, [pc, #212]	; (8009164 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d004      	beq.n	800909c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a34      	ldr	r2, [pc, #208]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d108      	bne.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80090a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a25      	ldr	r2, [pc, #148]	; (8009164 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d02c      	beq.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090da:	d027      	beq.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a22      	ldr	r2, [pc, #136]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d022      	beq.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a21      	ldr	r2, [pc, #132]	; (8009170 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d01d      	beq.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a1f      	ldr	r2, [pc, #124]	; (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d018      	beq.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a1a      	ldr	r2, [pc, #104]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d013      	beq.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a1b      	ldr	r2, [pc, #108]	; (8009178 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00e      	beq.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1a      	ldr	r2, [pc, #104]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d009      	beq.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a18      	ldr	r2, [pc, #96]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d004      	beq.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a17      	ldr	r2, [pc, #92]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d10c      	bne.n	8009146 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009132:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	4313      	orrs	r3, r2
 800913c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	40010000 	.word	0x40010000
 8009168:	40010400 	.word	0x40010400
 800916c:	40000400 	.word	0x40000400
 8009170:	40000800 	.word	0x40000800
 8009174:	40000c00 	.word	0x40000c00
 8009178:	40001800 	.word	0x40001800
 800917c:	40014000 	.word	0x40014000
 8009180:	4000e000 	.word	0x4000e000
 8009184:	4000e400 	.word	0x4000e400

08009188 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e087      	b.n	80092b4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	4313      	orrs	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a27      	ldr	r2, [pc, #156]	; (80092c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d004      	beq.n	8009232 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a25      	ldr	r2, [pc, #148]	; (80092c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d106      	bne.n	8009240 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a1e      	ldr	r2, [pc, #120]	; (80092c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d004      	beq.n	8009254 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a1d      	ldr	r2, [pc, #116]	; (80092c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d126      	bne.n	80092a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925e:	051b      	lsls	r3, r3, #20
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a0e      	ldr	r2, [pc, #56]	; (80092c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d004      	beq.n	8009294 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a0d      	ldr	r2, [pc, #52]	; (80092c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d106      	bne.n	80092a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929e:	4313      	orrs	r3, r2
 80092a0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	40010000 	.word	0x40010000
 80092c4:	40010400 	.word	0x40010400

080092c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e042      	b.n	800939c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800931c:	2b00      	cmp	r3, #0
 800931e:	d106      	bne.n	800932e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7f7 fddf 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2224      	movs	r2, #36	; 0x24
 8009332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0201 	bic.w	r2, r2, #1
 8009344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fc9c 	bl	8009c84 <UART_SetConfig>
 800934c:	4603      	mov	r3, r0
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e022      	b.n	800939c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 fafc 	bl	800a95c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0201 	orr.w	r2, r2, #1
 8009392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f001 fb83 	bl	800aaa0 <UART_CheckIdleState>
 800939a:	4603      	mov	r3, r0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08a      	sub	sp, #40	; 0x28
 80093a8:	af02      	add	r7, sp, #8
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	603b      	str	r3, [r7, #0]
 80093b0:	4613      	mov	r3, r2
 80093b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ba:	2b20      	cmp	r3, #32
 80093bc:	d17b      	bne.n	80094b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <HAL_UART_Transmit+0x26>
 80093c4:	88fb      	ldrh	r3, [r7, #6]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e074      	b.n	80094b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2221      	movs	r2, #33	; 0x21
 80093da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093de:	f7f8 fab7 	bl	8001950 <HAL_GetTick>
 80093e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	88fa      	ldrh	r2, [r7, #6]
 80093e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	88fa      	ldrh	r2, [r7, #6]
 80093f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fc:	d108      	bne.n	8009410 <HAL_UART_Transmit+0x6c>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d104      	bne.n	8009410 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009406:	2300      	movs	r3, #0
 8009408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	61bb      	str	r3, [r7, #24]
 800940e:	e003      	b.n	8009418 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009414:	2300      	movs	r3, #0
 8009416:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009418:	e030      	b.n	800947c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2200      	movs	r2, #0
 8009422:	2180      	movs	r1, #128	; 0x80
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f001 fbe5 	bl	800abf4 <UART_WaitOnFlagUntilTimeout>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2220      	movs	r2, #32
 8009434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e03d      	b.n	80094b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10b      	bne.n	800945a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009450:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	3302      	adds	r3, #2
 8009456:	61bb      	str	r3, [r7, #24]
 8009458:	e007      	b.n	800946a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	781a      	ldrb	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	3301      	adds	r3, #1
 8009468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009482:	b29b      	uxth	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1c8      	bne.n	800941a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	2200      	movs	r2, #0
 8009490:	2140      	movs	r1, #64	; 0x40
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f001 fbae 	bl	800abf4 <UART_WaitOnFlagUntilTimeout>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d005      	beq.n	80094aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e006      	b.n	80094b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	e000      	b.n	80094b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80094b6:	2302      	movs	r3, #2
  }
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b0ba      	sub	sp, #232	; 0xe8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80094ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80094ee:	4013      	ands	r3, r2
 80094f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80094f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d11b      	bne.n	8009534 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	d015      	beq.n	8009534 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800950c:	f003 0320 	and.w	r3, r3, #32
 8009510:	2b00      	cmp	r3, #0
 8009512:	d105      	bne.n	8009520 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d009      	beq.n	8009534 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8377 	beq.w	8009c18 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
      }
      return;
 8009532:	e371      	b.n	8009c18 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 8123 	beq.w	8009784 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800953e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009542:	4b8d      	ldr	r3, [pc, #564]	; (8009778 <HAL_UART_IRQHandler+0x2b8>)
 8009544:	4013      	ands	r3, r2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d106      	bne.n	8009558 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800954a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800954e:	4b8b      	ldr	r3, [pc, #556]	; (800977c <HAL_UART_IRQHandler+0x2bc>)
 8009550:	4013      	ands	r3, r2
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 8116 	beq.w	8009784 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	d011      	beq.n	8009588 <HAL_UART_IRQHandler+0xc8>
 8009564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2201      	movs	r2, #1
 8009576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800957e:	f043 0201 	orr.w	r2, r3, #1
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d011      	beq.n	80095b8 <HAL_UART_IRQHandler+0xf8>
 8009594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00b      	beq.n	80095b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2202      	movs	r2, #2
 80095a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ae:	f043 0204 	orr.w	r2, r3, #4
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d011      	beq.n	80095e8 <HAL_UART_IRQHandler+0x128>
 80095c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00b      	beq.n	80095e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2204      	movs	r2, #4
 80095d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095de:	f043 0202 	orr.w	r2, r3, #2
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d017      	beq.n	8009624 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f8:	f003 0320 	and.w	r3, r3, #32
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d105      	bne.n	800960c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009600:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009604:	4b5c      	ldr	r3, [pc, #368]	; (8009778 <HAL_UART_IRQHandler+0x2b8>)
 8009606:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2208      	movs	r2, #8
 8009612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800961a:	f043 0208 	orr.w	r2, r3, #8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800962c:	2b00      	cmp	r3, #0
 800962e:	d012      	beq.n	8009656 <HAL_UART_IRQHandler+0x196>
 8009630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00c      	beq.n	8009656 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800964c:	f043 0220 	orr.w	r2, r3, #32
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 82dd 	beq.w	8009c1c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009666:	f003 0320 	and.w	r3, r3, #32
 800966a:	2b00      	cmp	r3, #0
 800966c:	d013      	beq.n	8009696 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800966e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b00      	cmp	r3, #0
 8009678:	d105      	bne.n	8009686 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800967a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800967e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d007      	beq.n	8009696 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800969c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096aa:	2b40      	cmp	r3, #64	; 0x40
 80096ac:	d005      	beq.n	80096ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d054      	beq.n	8009764 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 fbea 	bl	800ae94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ca:	2b40      	cmp	r3, #64	; 0x40
 80096cc:	d146      	bne.n	800975c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3308      	adds	r3, #8
 80096d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3308      	adds	r3, #8
 80096f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1d9      	bne.n	80096ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009720:	2b00      	cmp	r3, #0
 8009722:	d017      	beq.n	8009754 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800972a:	4a15      	ldr	r2, [pc, #84]	; (8009780 <HAL_UART_IRQHandler+0x2c0>)
 800972c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009734:	4618      	mov	r0, r3
 8009736:	f7f9 fb07 	bl	8002d48 <HAL_DMA_Abort_IT>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d019      	beq.n	8009774 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800974e:	4610      	mov	r0, r2
 8009750:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009752:	e00f      	b.n	8009774 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fa8b 	bl	8009c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800975a:	e00b      	b.n	8009774 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fa87 	bl	8009c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009762:	e007      	b.n	8009774 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fa83 	bl	8009c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009772:	e253      	b.n	8009c1c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009774:	bf00      	nop
    return;
 8009776:	e251      	b.n	8009c1c <HAL_UART_IRQHandler+0x75c>
 8009778:	10000001 	.word	0x10000001
 800977c:	04000120 	.word	0x04000120
 8009780:	0800b147 	.word	0x0800b147

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009788:	2b01      	cmp	r3, #1
 800978a:	f040 81e7 	bne.w	8009b5c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800978e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009792:	f003 0310 	and.w	r3, r3, #16
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 81e0 	beq.w	8009b5c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800979c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 81d9 	beq.w	8009b5c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2210      	movs	r2, #16
 80097b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097bc:	2b40      	cmp	r3, #64	; 0x40
 80097be:	f040 8151 	bne.w	8009a64 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a96      	ldr	r2, [pc, #600]	; (8009a24 <HAL_UART_IRQHandler+0x564>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d068      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a93      	ldr	r2, [pc, #588]	; (8009a28 <HAL_UART_IRQHandler+0x568>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d061      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a91      	ldr	r2, [pc, #580]	; (8009a2c <HAL_UART_IRQHandler+0x56c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d05a      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a8e      	ldr	r2, [pc, #568]	; (8009a30 <HAL_UART_IRQHandler+0x570>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d053      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a8c      	ldr	r2, [pc, #560]	; (8009a34 <HAL_UART_IRQHandler+0x574>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d04c      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a89      	ldr	r2, [pc, #548]	; (8009a38 <HAL_UART_IRQHandler+0x578>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d045      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a87      	ldr	r2, [pc, #540]	; (8009a3c <HAL_UART_IRQHandler+0x57c>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d03e      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a84      	ldr	r2, [pc, #528]	; (8009a40 <HAL_UART_IRQHandler+0x580>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d037      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a82      	ldr	r2, [pc, #520]	; (8009a44 <HAL_UART_IRQHandler+0x584>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d030      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a7f      	ldr	r2, [pc, #508]	; (8009a48 <HAL_UART_IRQHandler+0x588>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d029      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a7d      	ldr	r2, [pc, #500]	; (8009a4c <HAL_UART_IRQHandler+0x58c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d022      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a7a      	ldr	r2, [pc, #488]	; (8009a50 <HAL_UART_IRQHandler+0x590>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d01b      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a78      	ldr	r2, [pc, #480]	; (8009a54 <HAL_UART_IRQHandler+0x594>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d014      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a75      	ldr	r2, [pc, #468]	; (8009a58 <HAL_UART_IRQHandler+0x598>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00d      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a73      	ldr	r2, [pc, #460]	; (8009a5c <HAL_UART_IRQHandler+0x59c>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d006      	beq.n	80098a2 <HAL_UART_IRQHandler+0x3e2>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a70      	ldr	r2, [pc, #448]	; (8009a60 <HAL_UART_IRQHandler+0x5a0>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d106      	bne.n	80098b0 <HAL_UART_IRQHandler+0x3f0>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	e005      	b.n	80098bc <HAL_UART_IRQHandler+0x3fc>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 81ab 	beq.w	8009c20 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098d4:	429a      	cmp	r2, r3
 80098d6:	f080 81a3 	bcs.w	8009c20 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80098e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f0:	f000 8087 	beq.w	8009a02 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800990c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
 800991a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800991e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009922:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800992a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009936:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1da      	bne.n	80098f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3308      	adds	r3, #8
 8009944:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800994e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009950:	f023 0301 	bic.w	r3, r3, #1
 8009954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3308      	adds	r3, #8
 800995e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009962:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009966:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800996a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e1      	bne.n	800993e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3308      	adds	r3, #8
 8009980:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800998a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800998c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3308      	adds	r3, #8
 800999a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800999e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e3      	bne.n	800997a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2220      	movs	r2, #32
 80099b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c8:	e853 3f00 	ldrex	r3, [r3]
 80099cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d0:	f023 0310 	bic.w	r3, r3, #16
 80099d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	461a      	mov	r2, r3
 80099de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80099e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80099e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099ea:	e841 2300 	strex	r3, r2, [r1]
 80099ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1e4      	bne.n	80099c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7f8 fe85 	bl	800270c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2202      	movs	r2, #2
 8009a06:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7f6 fe01 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a22:	e0fd      	b.n	8009c20 <HAL_UART_IRQHandler+0x760>
 8009a24:	40020010 	.word	0x40020010
 8009a28:	40020028 	.word	0x40020028
 8009a2c:	40020040 	.word	0x40020040
 8009a30:	40020058 	.word	0x40020058
 8009a34:	40020070 	.word	0x40020070
 8009a38:	40020088 	.word	0x40020088
 8009a3c:	400200a0 	.word	0x400200a0
 8009a40:	400200b8 	.word	0x400200b8
 8009a44:	40020410 	.word	0x40020410
 8009a48:	40020428 	.word	0x40020428
 8009a4c:	40020440 	.word	0x40020440
 8009a50:	40020458 	.word	0x40020458
 8009a54:	40020470 	.word	0x40020470
 8009a58:	40020488 	.word	0x40020488
 8009a5c:	400204a0 	.word	0x400204a0
 8009a60:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 80cf 	beq.w	8009c24 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009a86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 80ca 	beq.w	8009c24 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a98:	e853 3f00 	ldrex	r3, [r3]
 8009a9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	461a      	mov	r2, r3
 8009aae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8009ab4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e4      	bne.n	8009a90 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3308      	adds	r3, #8
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ad6:	6a3a      	ldr	r2, [r7, #32]
 8009ad8:	4b55      	ldr	r3, [pc, #340]	; (8009c30 <HAL_UART_IRQHandler+0x770>)
 8009ada:	4013      	ands	r3, r2
 8009adc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009aea:	633a      	str	r2, [r7, #48]	; 0x30
 8009aec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af2:	e841 2300 	strex	r3, r2, [r1]
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1e3      	bne.n	8009ac6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	e853 3f00 	ldrex	r3, [r3]
 8009b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0310 	bic.w	r3, r3, #16
 8009b26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b34:	61fb      	str	r3, [r7, #28]
 8009b36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	69b9      	ldr	r1, [r7, #24]
 8009b3a:	69fa      	ldr	r2, [r7, #28]
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	617b      	str	r3, [r7, #20]
   return(result);
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e4      	bne.n	8009b12 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7f6 fd65 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b5a:	e063      	b.n	8009c24 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00e      	beq.n	8009b86 <HAL_UART_IRQHandler+0x6c6>
 8009b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d008      	beq.n	8009b86 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009b7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 fb22 	bl	800b1c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b84:	e051      	b.n	8009c2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d014      	beq.n	8009bbc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d105      	bne.n	8009baa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d008      	beq.n	8009bbc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d03a      	beq.n	8009c28 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
    }
    return;
 8009bba:	e035      	b.n	8009c28 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d009      	beq.n	8009bdc <HAL_UART_IRQHandler+0x71c>
 8009bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 facc 	bl	800b172 <UART_EndTransmit_IT>
    return;
 8009bda:	e026      	b.n	8009c2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d009      	beq.n	8009bfc <HAL_UART_IRQHandler+0x73c>
 8009be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f001 fafb 	bl	800b1f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bfa:	e016      	b.n	8009c2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d010      	beq.n	8009c2a <HAL_UART_IRQHandler+0x76a>
 8009c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	da0c      	bge.n	8009c2a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 fae3 	bl	800b1dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c16:	e008      	b.n	8009c2a <HAL_UART_IRQHandler+0x76a>
      return;
 8009c18:	bf00      	nop
 8009c1a:	e006      	b.n	8009c2a <HAL_UART_IRQHandler+0x76a>
    return;
 8009c1c:	bf00      	nop
 8009c1e:	e004      	b.n	8009c2a <HAL_UART_IRQHandler+0x76a>
      return;
 8009c20:	bf00      	nop
 8009c22:	e002      	b.n	8009c2a <HAL_UART_IRQHandler+0x76a>
      return;
 8009c24:	bf00      	nop
 8009c26:	e000      	b.n	8009c2a <HAL_UART_IRQHandler+0x76a>
    return;
 8009c28:	bf00      	nop
  }
}
 8009c2a:	37e8      	adds	r7, #232	; 0xe8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	effffffe 	.word	0xeffffffe

08009c34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c88:	b092      	sub	sp, #72	; 0x48
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	689a      	ldr	r2, [r3, #8]
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	4bbe      	ldr	r3, [pc, #760]	; (8009fac <UART_SetConfig+0x328>)
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	6812      	ldr	r2, [r2, #0]
 8009cba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009cbc:	430b      	orrs	r3, r1
 8009cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4ab3      	ldr	r2, [pc, #716]	; (8009fb0 <UART_SetConfig+0x32c>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d004      	beq.n	8009cf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cec:	4313      	orrs	r3, r2
 8009cee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689a      	ldr	r2, [r3, #8]
 8009cf6:	4baf      	ldr	r3, [pc, #700]	; (8009fb4 <UART_SetConfig+0x330>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	6812      	ldr	r2, [r2, #0]
 8009cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d00:	430b      	orrs	r3, r1
 8009d02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0a:	f023 010f 	bic.w	r1, r3, #15
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4aa6      	ldr	r2, [pc, #664]	; (8009fb8 <UART_SetConfig+0x334>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d177      	bne.n	8009e14 <UART_SetConfig+0x190>
 8009d24:	4ba5      	ldr	r3, [pc, #660]	; (8009fbc <UART_SetConfig+0x338>)
 8009d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d2c:	2b28      	cmp	r3, #40	; 0x28
 8009d2e:	d86d      	bhi.n	8009e0c <UART_SetConfig+0x188>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <UART_SetConfig+0xb4>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009ddd 	.word	0x08009ddd
 8009d3c:	08009e0d 	.word	0x08009e0d
 8009d40:	08009e0d 	.word	0x08009e0d
 8009d44:	08009e0d 	.word	0x08009e0d
 8009d48:	08009e0d 	.word	0x08009e0d
 8009d4c:	08009e0d 	.word	0x08009e0d
 8009d50:	08009e0d 	.word	0x08009e0d
 8009d54:	08009e0d 	.word	0x08009e0d
 8009d58:	08009de5 	.word	0x08009de5
 8009d5c:	08009e0d 	.word	0x08009e0d
 8009d60:	08009e0d 	.word	0x08009e0d
 8009d64:	08009e0d 	.word	0x08009e0d
 8009d68:	08009e0d 	.word	0x08009e0d
 8009d6c:	08009e0d 	.word	0x08009e0d
 8009d70:	08009e0d 	.word	0x08009e0d
 8009d74:	08009e0d 	.word	0x08009e0d
 8009d78:	08009ded 	.word	0x08009ded
 8009d7c:	08009e0d 	.word	0x08009e0d
 8009d80:	08009e0d 	.word	0x08009e0d
 8009d84:	08009e0d 	.word	0x08009e0d
 8009d88:	08009e0d 	.word	0x08009e0d
 8009d8c:	08009e0d 	.word	0x08009e0d
 8009d90:	08009e0d 	.word	0x08009e0d
 8009d94:	08009e0d 	.word	0x08009e0d
 8009d98:	08009df5 	.word	0x08009df5
 8009d9c:	08009e0d 	.word	0x08009e0d
 8009da0:	08009e0d 	.word	0x08009e0d
 8009da4:	08009e0d 	.word	0x08009e0d
 8009da8:	08009e0d 	.word	0x08009e0d
 8009dac:	08009e0d 	.word	0x08009e0d
 8009db0:	08009e0d 	.word	0x08009e0d
 8009db4:	08009e0d 	.word	0x08009e0d
 8009db8:	08009dfd 	.word	0x08009dfd
 8009dbc:	08009e0d 	.word	0x08009e0d
 8009dc0:	08009e0d 	.word	0x08009e0d
 8009dc4:	08009e0d 	.word	0x08009e0d
 8009dc8:	08009e0d 	.word	0x08009e0d
 8009dcc:	08009e0d 	.word	0x08009e0d
 8009dd0:	08009e0d 	.word	0x08009e0d
 8009dd4:	08009e0d 	.word	0x08009e0d
 8009dd8:	08009e05 	.word	0x08009e05
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de2:	e326      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009de4:	2304      	movs	r3, #4
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dea:	e322      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009dec:	2308      	movs	r3, #8
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df2:	e31e      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009df4:	2310      	movs	r3, #16
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfa:	e31a      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009dfc:	2320      	movs	r3, #32
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e02:	e316      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e04:	2340      	movs	r3, #64	; 0x40
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0a:	e312      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e0c:	2380      	movs	r3, #128	; 0x80
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e12:	e30e      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a69      	ldr	r2, [pc, #420]	; (8009fc0 <UART_SetConfig+0x33c>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d130      	bne.n	8009e80 <UART_SetConfig+0x1fc>
 8009e1e:	4b67      	ldr	r3, [pc, #412]	; (8009fbc <UART_SetConfig+0x338>)
 8009e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	2b05      	cmp	r3, #5
 8009e28:	d826      	bhi.n	8009e78 <UART_SetConfig+0x1f4>
 8009e2a:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <UART_SetConfig+0x1ac>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009e49 	.word	0x08009e49
 8009e34:	08009e51 	.word	0x08009e51
 8009e38:	08009e59 	.word	0x08009e59
 8009e3c:	08009e61 	.word	0x08009e61
 8009e40:	08009e69 	.word	0x08009e69
 8009e44:	08009e71 	.word	0x08009e71
 8009e48:	2300      	movs	r3, #0
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4e:	e2f0      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e50:	2304      	movs	r3, #4
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e2ec      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e58:	2308      	movs	r3, #8
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5e:	e2e8      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e60:	2310      	movs	r3, #16
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e66:	e2e4      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e68:	2320      	movs	r3, #32
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6e:	e2e0      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e70:	2340      	movs	r3, #64	; 0x40
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e76:	e2dc      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e78:	2380      	movs	r3, #128	; 0x80
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7e:	e2d8      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a4f      	ldr	r2, [pc, #316]	; (8009fc4 <UART_SetConfig+0x340>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d130      	bne.n	8009eec <UART_SetConfig+0x268>
 8009e8a:	4b4c      	ldr	r3, [pc, #304]	; (8009fbc <UART_SetConfig+0x338>)
 8009e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8e:	f003 0307 	and.w	r3, r3, #7
 8009e92:	2b05      	cmp	r3, #5
 8009e94:	d826      	bhi.n	8009ee4 <UART_SetConfig+0x260>
 8009e96:	a201      	add	r2, pc, #4	; (adr r2, 8009e9c <UART_SetConfig+0x218>)
 8009e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9c:	08009eb5 	.word	0x08009eb5
 8009ea0:	08009ebd 	.word	0x08009ebd
 8009ea4:	08009ec5 	.word	0x08009ec5
 8009ea8:	08009ecd 	.word	0x08009ecd
 8009eac:	08009ed5 	.word	0x08009ed5
 8009eb0:	08009edd 	.word	0x08009edd
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eba:	e2ba      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009ebc:	2304      	movs	r3, #4
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e2b6      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009ec4:	2308      	movs	r3, #8
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eca:	e2b2      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009ecc:	2310      	movs	r3, #16
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed2:	e2ae      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009ed4:	2320      	movs	r3, #32
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e2aa      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009edc:	2340      	movs	r3, #64	; 0x40
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e2a6      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009ee4:	2380      	movs	r3, #128	; 0x80
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eea:	e2a2      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a35      	ldr	r2, [pc, #212]	; (8009fc8 <UART_SetConfig+0x344>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d130      	bne.n	8009f58 <UART_SetConfig+0x2d4>
 8009ef6:	4b31      	ldr	r3, [pc, #196]	; (8009fbc <UART_SetConfig+0x338>)
 8009ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009efa:	f003 0307 	and.w	r3, r3, #7
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d826      	bhi.n	8009f50 <UART_SetConfig+0x2cc>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <UART_SetConfig+0x284>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f21 	.word	0x08009f21
 8009f0c:	08009f29 	.word	0x08009f29
 8009f10:	08009f31 	.word	0x08009f31
 8009f14:	08009f39 	.word	0x08009f39
 8009f18:	08009f41 	.word	0x08009f41
 8009f1c:	08009f49 	.word	0x08009f49
 8009f20:	2300      	movs	r3, #0
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f26:	e284      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009f28:	2304      	movs	r3, #4
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e280      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009f30:	2308      	movs	r3, #8
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f36:	e27c      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009f38:	2310      	movs	r3, #16
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3e:	e278      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009f40:	2320      	movs	r3, #32
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e274      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009f48:	2340      	movs	r3, #64	; 0x40
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e270      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009f50:	2380      	movs	r3, #128	; 0x80
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f56:	e26c      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a1b      	ldr	r2, [pc, #108]	; (8009fcc <UART_SetConfig+0x348>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d142      	bne.n	8009fe8 <UART_SetConfig+0x364>
 8009f62:	4b16      	ldr	r3, [pc, #88]	; (8009fbc <UART_SetConfig+0x338>)
 8009f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	2b05      	cmp	r3, #5
 8009f6c:	d838      	bhi.n	8009fe0 <UART_SetConfig+0x35c>
 8009f6e:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <UART_SetConfig+0x2f0>)
 8009f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f74:	08009f8d 	.word	0x08009f8d
 8009f78:	08009f95 	.word	0x08009f95
 8009f7c:	08009f9d 	.word	0x08009f9d
 8009f80:	08009fa5 	.word	0x08009fa5
 8009f84:	08009fd1 	.word	0x08009fd1
 8009f88:	08009fd9 	.word	0x08009fd9
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f92:	e24e      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009f94:	2304      	movs	r3, #4
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9a:	e24a      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009f9c:	2308      	movs	r3, #8
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa2:	e246      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009fa4:	2310      	movs	r3, #16
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009faa:	e242      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009fac:	cfff69f3 	.word	0xcfff69f3
 8009fb0:	58000c00 	.word	0x58000c00
 8009fb4:	11fff4ff 	.word	0x11fff4ff
 8009fb8:	40011000 	.word	0x40011000
 8009fbc:	58024400 	.word	0x58024400
 8009fc0:	40004400 	.word	0x40004400
 8009fc4:	40004800 	.word	0x40004800
 8009fc8:	40004c00 	.word	0x40004c00
 8009fcc:	40005000 	.word	0x40005000
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd6:	e22c      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fde:	e228      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009fe0:	2380      	movs	r3, #128	; 0x80
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe6:	e224      	b.n	800a432 <UART_SetConfig+0x7ae>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4ab1      	ldr	r2, [pc, #708]	; (800a2b4 <UART_SetConfig+0x630>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d176      	bne.n	800a0e0 <UART_SetConfig+0x45c>
 8009ff2:	4bb1      	ldr	r3, [pc, #708]	; (800a2b8 <UART_SetConfig+0x634>)
 8009ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ffa:	2b28      	cmp	r3, #40	; 0x28
 8009ffc:	d86c      	bhi.n	800a0d8 <UART_SetConfig+0x454>
 8009ffe:	a201      	add	r2, pc, #4	; (adr r2, 800a004 <UART_SetConfig+0x380>)
 800a000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a004:	0800a0a9 	.word	0x0800a0a9
 800a008:	0800a0d9 	.word	0x0800a0d9
 800a00c:	0800a0d9 	.word	0x0800a0d9
 800a010:	0800a0d9 	.word	0x0800a0d9
 800a014:	0800a0d9 	.word	0x0800a0d9
 800a018:	0800a0d9 	.word	0x0800a0d9
 800a01c:	0800a0d9 	.word	0x0800a0d9
 800a020:	0800a0d9 	.word	0x0800a0d9
 800a024:	0800a0b1 	.word	0x0800a0b1
 800a028:	0800a0d9 	.word	0x0800a0d9
 800a02c:	0800a0d9 	.word	0x0800a0d9
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a0d9 	.word	0x0800a0d9
 800a038:	0800a0d9 	.word	0x0800a0d9
 800a03c:	0800a0d9 	.word	0x0800a0d9
 800a040:	0800a0d9 	.word	0x0800a0d9
 800a044:	0800a0b9 	.word	0x0800a0b9
 800a048:	0800a0d9 	.word	0x0800a0d9
 800a04c:	0800a0d9 	.word	0x0800a0d9
 800a050:	0800a0d9 	.word	0x0800a0d9
 800a054:	0800a0d9 	.word	0x0800a0d9
 800a058:	0800a0d9 	.word	0x0800a0d9
 800a05c:	0800a0d9 	.word	0x0800a0d9
 800a060:	0800a0d9 	.word	0x0800a0d9
 800a064:	0800a0c1 	.word	0x0800a0c1
 800a068:	0800a0d9 	.word	0x0800a0d9
 800a06c:	0800a0d9 	.word	0x0800a0d9
 800a070:	0800a0d9 	.word	0x0800a0d9
 800a074:	0800a0d9 	.word	0x0800a0d9
 800a078:	0800a0d9 	.word	0x0800a0d9
 800a07c:	0800a0d9 	.word	0x0800a0d9
 800a080:	0800a0d9 	.word	0x0800a0d9
 800a084:	0800a0c9 	.word	0x0800a0c9
 800a088:	0800a0d9 	.word	0x0800a0d9
 800a08c:	0800a0d9 	.word	0x0800a0d9
 800a090:	0800a0d9 	.word	0x0800a0d9
 800a094:	0800a0d9 	.word	0x0800a0d9
 800a098:	0800a0d9 	.word	0x0800a0d9
 800a09c:	0800a0d9 	.word	0x0800a0d9
 800a0a0:	0800a0d9 	.word	0x0800a0d9
 800a0a4:	0800a0d1 	.word	0x0800a0d1
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ae:	e1c0      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a0b0:	2304      	movs	r3, #4
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0b6:	e1bc      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a0b8:	2308      	movs	r3, #8
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0be:	e1b8      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a0c0:	2310      	movs	r3, #16
 800a0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0c6:	e1b4      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ce:	e1b0      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a0d0:	2340      	movs	r3, #64	; 0x40
 800a0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0d6:	e1ac      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a0d8:	2380      	movs	r3, #128	; 0x80
 800a0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0de:	e1a8      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a75      	ldr	r2, [pc, #468]	; (800a2bc <UART_SetConfig+0x638>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d130      	bne.n	800a14c <UART_SetConfig+0x4c8>
 800a0ea:	4b73      	ldr	r3, [pc, #460]	; (800a2b8 <UART_SetConfig+0x634>)
 800a0ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ee:	f003 0307 	and.w	r3, r3, #7
 800a0f2:	2b05      	cmp	r3, #5
 800a0f4:	d826      	bhi.n	800a144 <UART_SetConfig+0x4c0>
 800a0f6:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <UART_SetConfig+0x478>)
 800a0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fc:	0800a115 	.word	0x0800a115
 800a100:	0800a11d 	.word	0x0800a11d
 800a104:	0800a125 	.word	0x0800a125
 800a108:	0800a12d 	.word	0x0800a12d
 800a10c:	0800a135 	.word	0x0800a135
 800a110:	0800a13d 	.word	0x0800a13d
 800a114:	2300      	movs	r3, #0
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a11a:	e18a      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a11c:	2304      	movs	r3, #4
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a122:	e186      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a124:	2308      	movs	r3, #8
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a12a:	e182      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a12c:	2310      	movs	r3, #16
 800a12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a132:	e17e      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a134:	2320      	movs	r3, #32
 800a136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a13a:	e17a      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a13c:	2340      	movs	r3, #64	; 0x40
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a142:	e176      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a144:	2380      	movs	r3, #128	; 0x80
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a14a:	e172      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a5b      	ldr	r2, [pc, #364]	; (800a2c0 <UART_SetConfig+0x63c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d130      	bne.n	800a1b8 <UART_SetConfig+0x534>
 800a156:	4b58      	ldr	r3, [pc, #352]	; (800a2b8 <UART_SetConfig+0x634>)
 800a158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15a:	f003 0307 	and.w	r3, r3, #7
 800a15e:	2b05      	cmp	r3, #5
 800a160:	d826      	bhi.n	800a1b0 <UART_SetConfig+0x52c>
 800a162:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <UART_SetConfig+0x4e4>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a181 	.word	0x0800a181
 800a16c:	0800a189 	.word	0x0800a189
 800a170:	0800a191 	.word	0x0800a191
 800a174:	0800a199 	.word	0x0800a199
 800a178:	0800a1a1 	.word	0x0800a1a1
 800a17c:	0800a1a9 	.word	0x0800a1a9
 800a180:	2300      	movs	r3, #0
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a186:	e154      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a188:	2304      	movs	r3, #4
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a18e:	e150      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a190:	2308      	movs	r3, #8
 800a192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a196:	e14c      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a198:	2310      	movs	r3, #16
 800a19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a19e:	e148      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a1a0:	2320      	movs	r3, #32
 800a1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1a6:	e144      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a1a8:	2340      	movs	r3, #64	; 0x40
 800a1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ae:	e140      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a1b0:	2380      	movs	r3, #128	; 0x80
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b6:	e13c      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a41      	ldr	r2, [pc, #260]	; (800a2c4 <UART_SetConfig+0x640>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	f040 8082 	bne.w	800a2c8 <UART_SetConfig+0x644>
 800a1c4:	4b3c      	ldr	r3, [pc, #240]	; (800a2b8 <UART_SetConfig+0x634>)
 800a1c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1cc:	2b28      	cmp	r3, #40	; 0x28
 800a1ce:	d86d      	bhi.n	800a2ac <UART_SetConfig+0x628>
 800a1d0:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <UART_SetConfig+0x554>)
 800a1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d6:	bf00      	nop
 800a1d8:	0800a27d 	.word	0x0800a27d
 800a1dc:	0800a2ad 	.word	0x0800a2ad
 800a1e0:	0800a2ad 	.word	0x0800a2ad
 800a1e4:	0800a2ad 	.word	0x0800a2ad
 800a1e8:	0800a2ad 	.word	0x0800a2ad
 800a1ec:	0800a2ad 	.word	0x0800a2ad
 800a1f0:	0800a2ad 	.word	0x0800a2ad
 800a1f4:	0800a2ad 	.word	0x0800a2ad
 800a1f8:	0800a285 	.word	0x0800a285
 800a1fc:	0800a2ad 	.word	0x0800a2ad
 800a200:	0800a2ad 	.word	0x0800a2ad
 800a204:	0800a2ad 	.word	0x0800a2ad
 800a208:	0800a2ad 	.word	0x0800a2ad
 800a20c:	0800a2ad 	.word	0x0800a2ad
 800a210:	0800a2ad 	.word	0x0800a2ad
 800a214:	0800a2ad 	.word	0x0800a2ad
 800a218:	0800a28d 	.word	0x0800a28d
 800a21c:	0800a2ad 	.word	0x0800a2ad
 800a220:	0800a2ad 	.word	0x0800a2ad
 800a224:	0800a2ad 	.word	0x0800a2ad
 800a228:	0800a2ad 	.word	0x0800a2ad
 800a22c:	0800a2ad 	.word	0x0800a2ad
 800a230:	0800a2ad 	.word	0x0800a2ad
 800a234:	0800a2ad 	.word	0x0800a2ad
 800a238:	0800a295 	.word	0x0800a295
 800a23c:	0800a2ad 	.word	0x0800a2ad
 800a240:	0800a2ad 	.word	0x0800a2ad
 800a244:	0800a2ad 	.word	0x0800a2ad
 800a248:	0800a2ad 	.word	0x0800a2ad
 800a24c:	0800a2ad 	.word	0x0800a2ad
 800a250:	0800a2ad 	.word	0x0800a2ad
 800a254:	0800a2ad 	.word	0x0800a2ad
 800a258:	0800a29d 	.word	0x0800a29d
 800a25c:	0800a2ad 	.word	0x0800a2ad
 800a260:	0800a2ad 	.word	0x0800a2ad
 800a264:	0800a2ad 	.word	0x0800a2ad
 800a268:	0800a2ad 	.word	0x0800a2ad
 800a26c:	0800a2ad 	.word	0x0800a2ad
 800a270:	0800a2ad 	.word	0x0800a2ad
 800a274:	0800a2ad 	.word	0x0800a2ad
 800a278:	0800a2a5 	.word	0x0800a2a5
 800a27c:	2301      	movs	r3, #1
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a282:	e0d6      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a284:	2304      	movs	r3, #4
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28a:	e0d2      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a28c:	2308      	movs	r3, #8
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a292:	e0ce      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a294:	2310      	movs	r3, #16
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29a:	e0ca      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a29c:	2320      	movs	r3, #32
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a2:	e0c6      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a2a4:	2340      	movs	r3, #64	; 0x40
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e0c2      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a2ac:	2380      	movs	r3, #128	; 0x80
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e0be      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a2b4:	40011400 	.word	0x40011400
 800a2b8:	58024400 	.word	0x58024400
 800a2bc:	40007800 	.word	0x40007800
 800a2c0:	40007c00 	.word	0x40007c00
 800a2c4:	40011800 	.word	0x40011800
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4aad      	ldr	r2, [pc, #692]	; (800a584 <UART_SetConfig+0x900>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d176      	bne.n	800a3c0 <UART_SetConfig+0x73c>
 800a2d2:	4bad      	ldr	r3, [pc, #692]	; (800a588 <UART_SetConfig+0x904>)
 800a2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2da:	2b28      	cmp	r3, #40	; 0x28
 800a2dc:	d86c      	bhi.n	800a3b8 <UART_SetConfig+0x734>
 800a2de:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <UART_SetConfig+0x660>)
 800a2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e4:	0800a389 	.word	0x0800a389
 800a2e8:	0800a3b9 	.word	0x0800a3b9
 800a2ec:	0800a3b9 	.word	0x0800a3b9
 800a2f0:	0800a3b9 	.word	0x0800a3b9
 800a2f4:	0800a3b9 	.word	0x0800a3b9
 800a2f8:	0800a3b9 	.word	0x0800a3b9
 800a2fc:	0800a3b9 	.word	0x0800a3b9
 800a300:	0800a3b9 	.word	0x0800a3b9
 800a304:	0800a391 	.word	0x0800a391
 800a308:	0800a3b9 	.word	0x0800a3b9
 800a30c:	0800a3b9 	.word	0x0800a3b9
 800a310:	0800a3b9 	.word	0x0800a3b9
 800a314:	0800a3b9 	.word	0x0800a3b9
 800a318:	0800a3b9 	.word	0x0800a3b9
 800a31c:	0800a3b9 	.word	0x0800a3b9
 800a320:	0800a3b9 	.word	0x0800a3b9
 800a324:	0800a399 	.word	0x0800a399
 800a328:	0800a3b9 	.word	0x0800a3b9
 800a32c:	0800a3b9 	.word	0x0800a3b9
 800a330:	0800a3b9 	.word	0x0800a3b9
 800a334:	0800a3b9 	.word	0x0800a3b9
 800a338:	0800a3b9 	.word	0x0800a3b9
 800a33c:	0800a3b9 	.word	0x0800a3b9
 800a340:	0800a3b9 	.word	0x0800a3b9
 800a344:	0800a3a1 	.word	0x0800a3a1
 800a348:	0800a3b9 	.word	0x0800a3b9
 800a34c:	0800a3b9 	.word	0x0800a3b9
 800a350:	0800a3b9 	.word	0x0800a3b9
 800a354:	0800a3b9 	.word	0x0800a3b9
 800a358:	0800a3b9 	.word	0x0800a3b9
 800a35c:	0800a3b9 	.word	0x0800a3b9
 800a360:	0800a3b9 	.word	0x0800a3b9
 800a364:	0800a3a9 	.word	0x0800a3a9
 800a368:	0800a3b9 	.word	0x0800a3b9
 800a36c:	0800a3b9 	.word	0x0800a3b9
 800a370:	0800a3b9 	.word	0x0800a3b9
 800a374:	0800a3b9 	.word	0x0800a3b9
 800a378:	0800a3b9 	.word	0x0800a3b9
 800a37c:	0800a3b9 	.word	0x0800a3b9
 800a380:	0800a3b9 	.word	0x0800a3b9
 800a384:	0800a3b1 	.word	0x0800a3b1
 800a388:	2301      	movs	r3, #1
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38e:	e050      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a390:	2304      	movs	r3, #4
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a396:	e04c      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a398:	2308      	movs	r3, #8
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a39e:	e048      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3a6:	e044      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a3a8:	2320      	movs	r3, #32
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ae:	e040      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a3b0:	2340      	movs	r3, #64	; 0x40
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3b6:	e03c      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a3b8:	2380      	movs	r3, #128	; 0x80
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3be:	e038      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a71      	ldr	r2, [pc, #452]	; (800a58c <UART_SetConfig+0x908>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d130      	bne.n	800a42c <UART_SetConfig+0x7a8>
 800a3ca:	4b6f      	ldr	r3, [pc, #444]	; (800a588 <UART_SetConfig+0x904>)
 800a3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	2b05      	cmp	r3, #5
 800a3d4:	d826      	bhi.n	800a424 <UART_SetConfig+0x7a0>
 800a3d6:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <UART_SetConfig+0x758>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a3f5 	.word	0x0800a3f5
 800a3e0:	0800a3fd 	.word	0x0800a3fd
 800a3e4:	0800a405 	.word	0x0800a405
 800a3e8:	0800a40d 	.word	0x0800a40d
 800a3ec:	0800a415 	.word	0x0800a415
 800a3f0:	0800a41d 	.word	0x0800a41d
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fa:	e01a      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a402:	e016      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a404:	2308      	movs	r3, #8
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a40a:	e012      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a40c:	2310      	movs	r3, #16
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a412:	e00e      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a414:	2320      	movs	r3, #32
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41a:	e00a      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a41c:	2340      	movs	r3, #64	; 0x40
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a422:	e006      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a424:	2380      	movs	r3, #128	; 0x80
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a42a:	e002      	b.n	800a432 <UART_SetConfig+0x7ae>
 800a42c:	2380      	movs	r3, #128	; 0x80
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a55      	ldr	r2, [pc, #340]	; (800a58c <UART_SetConfig+0x908>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	f040 80f8 	bne.w	800a62e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a43e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a442:	2b20      	cmp	r3, #32
 800a444:	dc46      	bgt.n	800a4d4 <UART_SetConfig+0x850>
 800a446:	2b02      	cmp	r3, #2
 800a448:	db75      	blt.n	800a536 <UART_SetConfig+0x8b2>
 800a44a:	3b02      	subs	r3, #2
 800a44c:	2b1e      	cmp	r3, #30
 800a44e:	d872      	bhi.n	800a536 <UART_SetConfig+0x8b2>
 800a450:	a201      	add	r2, pc, #4	; (adr r2, 800a458 <UART_SetConfig+0x7d4>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a4db 	.word	0x0800a4db
 800a45c:	0800a537 	.word	0x0800a537
 800a460:	0800a4e3 	.word	0x0800a4e3
 800a464:	0800a537 	.word	0x0800a537
 800a468:	0800a537 	.word	0x0800a537
 800a46c:	0800a537 	.word	0x0800a537
 800a470:	0800a4f3 	.word	0x0800a4f3
 800a474:	0800a537 	.word	0x0800a537
 800a478:	0800a537 	.word	0x0800a537
 800a47c:	0800a537 	.word	0x0800a537
 800a480:	0800a537 	.word	0x0800a537
 800a484:	0800a537 	.word	0x0800a537
 800a488:	0800a537 	.word	0x0800a537
 800a48c:	0800a537 	.word	0x0800a537
 800a490:	0800a503 	.word	0x0800a503
 800a494:	0800a537 	.word	0x0800a537
 800a498:	0800a537 	.word	0x0800a537
 800a49c:	0800a537 	.word	0x0800a537
 800a4a0:	0800a537 	.word	0x0800a537
 800a4a4:	0800a537 	.word	0x0800a537
 800a4a8:	0800a537 	.word	0x0800a537
 800a4ac:	0800a537 	.word	0x0800a537
 800a4b0:	0800a537 	.word	0x0800a537
 800a4b4:	0800a537 	.word	0x0800a537
 800a4b8:	0800a537 	.word	0x0800a537
 800a4bc:	0800a537 	.word	0x0800a537
 800a4c0:	0800a537 	.word	0x0800a537
 800a4c4:	0800a537 	.word	0x0800a537
 800a4c8:	0800a537 	.word	0x0800a537
 800a4cc:	0800a537 	.word	0x0800a537
 800a4d0:	0800a529 	.word	0x0800a529
 800a4d4:	2b40      	cmp	r3, #64	; 0x40
 800a4d6:	d02a      	beq.n	800a52e <UART_SetConfig+0x8aa>
 800a4d8:	e02d      	b.n	800a536 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4da:	f7fc fca7 	bl	8006e2c <HAL_RCCEx_GetD3PCLK1Freq>
 800a4de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4e0:	e02f      	b.n	800a542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fc fcb6 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4f0:	e027      	b.n	800a542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4f2:	f107 0318 	add.w	r3, r7, #24
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fc fe02 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a500:	e01f      	b.n	800a542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a502:	4b21      	ldr	r3, [pc, #132]	; (800a588 <UART_SetConfig+0x904>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d009      	beq.n	800a522 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a50e:	4b1e      	ldr	r3, [pc, #120]	; (800a588 <UART_SetConfig+0x904>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	08db      	lsrs	r3, r3, #3
 800a514:	f003 0303 	and.w	r3, r3, #3
 800a518:	4a1d      	ldr	r2, [pc, #116]	; (800a590 <UART_SetConfig+0x90c>)
 800a51a:	fa22 f303 	lsr.w	r3, r2, r3
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a520:	e00f      	b.n	800a542 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a522:	4b1b      	ldr	r3, [pc, #108]	; (800a590 <UART_SetConfig+0x90c>)
 800a524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a526:	e00c      	b.n	800a542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a528:	4b1a      	ldr	r3, [pc, #104]	; (800a594 <UART_SetConfig+0x910>)
 800a52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a52c:	e009      	b.n	800a542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a52e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a534:	e005      	b.n	800a542 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a540:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 81ee 	beq.w	800a926 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	4a12      	ldr	r2, [pc, #72]	; (800a598 <UART_SetConfig+0x914>)
 800a550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a554:	461a      	mov	r2, r3
 800a556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a558:	fbb3 f3f2 	udiv	r3, r3, r2
 800a55c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	4613      	mov	r3, r2
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	4413      	add	r3, r2
 800a568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d305      	bcc.n	800a57a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a576:	429a      	cmp	r2, r3
 800a578:	d910      	bls.n	800a59c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a580:	e1d1      	b.n	800a926 <UART_SetConfig+0xca2>
 800a582:	bf00      	nop
 800a584:	40011c00 	.word	0x40011c00
 800a588:	58024400 	.word	0x58024400
 800a58c:	58000c00 	.word	0x58000c00
 800a590:	03d09000 	.word	0x03d09000
 800a594:	003d0900 	.word	0x003d0900
 800a598:	0800b53c 	.word	0x0800b53c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a59e:	2200      	movs	r2, #0
 800a5a0:	60bb      	str	r3, [r7, #8]
 800a5a2:	60fa      	str	r2, [r7, #12]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	4ac0      	ldr	r2, [pc, #768]	; (800a8ac <UART_SetConfig+0xc28>)
 800a5aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	607a      	str	r2, [r7, #4]
 800a5b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5be:	f7f5 fea5 	bl	800030c <__aeabi_uldivmod>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4610      	mov	r0, r2
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	f04f 0200 	mov.w	r2, #0
 800a5ce:	f04f 0300 	mov.w	r3, #0
 800a5d2:	020b      	lsls	r3, r1, #8
 800a5d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5d8:	0202      	lsls	r2, r0, #8
 800a5da:	6979      	ldr	r1, [r7, #20]
 800a5dc:	6849      	ldr	r1, [r1, #4]
 800a5de:	0849      	lsrs	r1, r1, #1
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	eb12 0804 	adds.w	r8, r2, r4
 800a5ea:	eb43 0905 	adc.w	r9, r3, r5
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	469a      	mov	sl, r3
 800a5f6:	4693      	mov	fp, r2
 800a5f8:	4652      	mov	r2, sl
 800a5fa:	465b      	mov	r3, fp
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	4649      	mov	r1, r9
 800a600:	f7f5 fe84 	bl	800030c <__aeabi_uldivmod>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4613      	mov	r3, r2
 800a60a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a612:	d308      	bcc.n	800a626 <UART_SetConfig+0x9a2>
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a61a:	d204      	bcs.n	800a626 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a622:	60da      	str	r2, [r3, #12]
 800a624:	e17f      	b.n	800a926 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a62c:	e17b      	b.n	800a926 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a636:	f040 80bd 	bne.w	800a7b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a63a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a63e:	2b20      	cmp	r3, #32
 800a640:	dc48      	bgt.n	800a6d4 <UART_SetConfig+0xa50>
 800a642:	2b00      	cmp	r3, #0
 800a644:	db7b      	blt.n	800a73e <UART_SetConfig+0xaba>
 800a646:	2b20      	cmp	r3, #32
 800a648:	d879      	bhi.n	800a73e <UART_SetConfig+0xaba>
 800a64a:	a201      	add	r2, pc, #4	; (adr r2, 800a650 <UART_SetConfig+0x9cc>)
 800a64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a650:	0800a6db 	.word	0x0800a6db
 800a654:	0800a6e3 	.word	0x0800a6e3
 800a658:	0800a73f 	.word	0x0800a73f
 800a65c:	0800a73f 	.word	0x0800a73f
 800a660:	0800a6eb 	.word	0x0800a6eb
 800a664:	0800a73f 	.word	0x0800a73f
 800a668:	0800a73f 	.word	0x0800a73f
 800a66c:	0800a73f 	.word	0x0800a73f
 800a670:	0800a6fb 	.word	0x0800a6fb
 800a674:	0800a73f 	.word	0x0800a73f
 800a678:	0800a73f 	.word	0x0800a73f
 800a67c:	0800a73f 	.word	0x0800a73f
 800a680:	0800a73f 	.word	0x0800a73f
 800a684:	0800a73f 	.word	0x0800a73f
 800a688:	0800a73f 	.word	0x0800a73f
 800a68c:	0800a73f 	.word	0x0800a73f
 800a690:	0800a70b 	.word	0x0800a70b
 800a694:	0800a73f 	.word	0x0800a73f
 800a698:	0800a73f 	.word	0x0800a73f
 800a69c:	0800a73f 	.word	0x0800a73f
 800a6a0:	0800a73f 	.word	0x0800a73f
 800a6a4:	0800a73f 	.word	0x0800a73f
 800a6a8:	0800a73f 	.word	0x0800a73f
 800a6ac:	0800a73f 	.word	0x0800a73f
 800a6b0:	0800a73f 	.word	0x0800a73f
 800a6b4:	0800a73f 	.word	0x0800a73f
 800a6b8:	0800a73f 	.word	0x0800a73f
 800a6bc:	0800a73f 	.word	0x0800a73f
 800a6c0:	0800a73f 	.word	0x0800a73f
 800a6c4:	0800a73f 	.word	0x0800a73f
 800a6c8:	0800a73f 	.word	0x0800a73f
 800a6cc:	0800a73f 	.word	0x0800a73f
 800a6d0:	0800a731 	.word	0x0800a731
 800a6d4:	2b40      	cmp	r3, #64	; 0x40
 800a6d6:	d02e      	beq.n	800a736 <UART_SetConfig+0xab2>
 800a6d8:	e031      	b.n	800a73e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6da:	f7fb f9db 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 800a6de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6e0:	e033      	b.n	800a74a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6e2:	f7fb f9ed 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 800a6e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6e8:	e02f      	b.n	800a74a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fc fbb2 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6f8:	e027      	b.n	800a74a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6fa:	f107 0318 	add.w	r3, r7, #24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fc fcfe 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a708:	e01f      	b.n	800a74a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a70a:	4b69      	ldr	r3, [pc, #420]	; (800a8b0 <UART_SetConfig+0xc2c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a716:	4b66      	ldr	r3, [pc, #408]	; (800a8b0 <UART_SetConfig+0xc2c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	08db      	lsrs	r3, r3, #3
 800a71c:	f003 0303 	and.w	r3, r3, #3
 800a720:	4a64      	ldr	r2, [pc, #400]	; (800a8b4 <UART_SetConfig+0xc30>)
 800a722:	fa22 f303 	lsr.w	r3, r2, r3
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a728:	e00f      	b.n	800a74a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a72a:	4b62      	ldr	r3, [pc, #392]	; (800a8b4 <UART_SetConfig+0xc30>)
 800a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a72e:	e00c      	b.n	800a74a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a730:	4b61      	ldr	r3, [pc, #388]	; (800a8b8 <UART_SetConfig+0xc34>)
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a734:	e009      	b.n	800a74a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a73a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a73c:	e005      	b.n	800a74a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 80ea 	beq.w	800a926 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	4a55      	ldr	r2, [pc, #340]	; (800a8ac <UART_SetConfig+0xc28>)
 800a758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a760:	fbb3 f3f2 	udiv	r3, r3, r2
 800a764:	005a      	lsls	r2, r3, #1
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	085b      	lsrs	r3, r3, #1
 800a76c:	441a      	add	r2, r3
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	fbb2 f3f3 	udiv	r3, r2, r3
 800a776:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77a:	2b0f      	cmp	r3, #15
 800a77c:	d916      	bls.n	800a7ac <UART_SetConfig+0xb28>
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a784:	d212      	bcs.n	800a7ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	b29b      	uxth	r3, r3
 800a78a:	f023 030f 	bic.w	r3, r3, #15
 800a78e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	b29b      	uxth	r3, r3
 800a796:	f003 0307 	and.w	r3, r3, #7
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a7a8:	60da      	str	r2, [r3, #12]
 800a7aa:	e0bc      	b.n	800a926 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a7b2:	e0b8      	b.n	800a926 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	dc4b      	bgt.n	800a854 <UART_SetConfig+0xbd0>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f2c0 8087 	blt.w	800a8d0 <UART_SetConfig+0xc4c>
 800a7c2:	2b20      	cmp	r3, #32
 800a7c4:	f200 8084 	bhi.w	800a8d0 <UART_SetConfig+0xc4c>
 800a7c8:	a201      	add	r2, pc, #4	; (adr r2, 800a7d0 <UART_SetConfig+0xb4c>)
 800a7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ce:	bf00      	nop
 800a7d0:	0800a85b 	.word	0x0800a85b
 800a7d4:	0800a863 	.word	0x0800a863
 800a7d8:	0800a8d1 	.word	0x0800a8d1
 800a7dc:	0800a8d1 	.word	0x0800a8d1
 800a7e0:	0800a86b 	.word	0x0800a86b
 800a7e4:	0800a8d1 	.word	0x0800a8d1
 800a7e8:	0800a8d1 	.word	0x0800a8d1
 800a7ec:	0800a8d1 	.word	0x0800a8d1
 800a7f0:	0800a87b 	.word	0x0800a87b
 800a7f4:	0800a8d1 	.word	0x0800a8d1
 800a7f8:	0800a8d1 	.word	0x0800a8d1
 800a7fc:	0800a8d1 	.word	0x0800a8d1
 800a800:	0800a8d1 	.word	0x0800a8d1
 800a804:	0800a8d1 	.word	0x0800a8d1
 800a808:	0800a8d1 	.word	0x0800a8d1
 800a80c:	0800a8d1 	.word	0x0800a8d1
 800a810:	0800a88b 	.word	0x0800a88b
 800a814:	0800a8d1 	.word	0x0800a8d1
 800a818:	0800a8d1 	.word	0x0800a8d1
 800a81c:	0800a8d1 	.word	0x0800a8d1
 800a820:	0800a8d1 	.word	0x0800a8d1
 800a824:	0800a8d1 	.word	0x0800a8d1
 800a828:	0800a8d1 	.word	0x0800a8d1
 800a82c:	0800a8d1 	.word	0x0800a8d1
 800a830:	0800a8d1 	.word	0x0800a8d1
 800a834:	0800a8d1 	.word	0x0800a8d1
 800a838:	0800a8d1 	.word	0x0800a8d1
 800a83c:	0800a8d1 	.word	0x0800a8d1
 800a840:	0800a8d1 	.word	0x0800a8d1
 800a844:	0800a8d1 	.word	0x0800a8d1
 800a848:	0800a8d1 	.word	0x0800a8d1
 800a84c:	0800a8d1 	.word	0x0800a8d1
 800a850:	0800a8c3 	.word	0x0800a8c3
 800a854:	2b40      	cmp	r3, #64	; 0x40
 800a856:	d037      	beq.n	800a8c8 <UART_SetConfig+0xc44>
 800a858:	e03a      	b.n	800a8d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a85a:	f7fb f91b 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 800a85e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a860:	e03c      	b.n	800a8dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a862:	f7fb f92d 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 800a866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a868:	e038      	b.n	800a8dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a86a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fc faf2 	bl	8006e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a878:	e030      	b.n	800a8dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a87a:	f107 0318 	add.w	r3, r7, #24
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fc fc3e 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a888:	e028      	b.n	800a8dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a88a:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <UART_SetConfig+0xc2c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0320 	and.w	r3, r3, #32
 800a892:	2b00      	cmp	r3, #0
 800a894:	d012      	beq.n	800a8bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a896:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <UART_SetConfig+0xc2c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	08db      	lsrs	r3, r3, #3
 800a89c:	f003 0303 	and.w	r3, r3, #3
 800a8a0:	4a04      	ldr	r2, [pc, #16]	; (800a8b4 <UART_SetConfig+0xc30>)
 800a8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8a8:	e018      	b.n	800a8dc <UART_SetConfig+0xc58>
 800a8aa:	bf00      	nop
 800a8ac:	0800b53c 	.word	0x0800b53c
 800a8b0:	58024400 	.word	0x58024400
 800a8b4:	03d09000 	.word	0x03d09000
 800a8b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a8bc:	4b24      	ldr	r3, [pc, #144]	; (800a950 <UART_SetConfig+0xccc>)
 800a8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8c0:	e00c      	b.n	800a8dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8c2:	4b24      	ldr	r3, [pc, #144]	; (800a954 <UART_SetConfig+0xcd0>)
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8c6:	e009      	b.n	800a8dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ce:	e005      	b.n	800a8dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a8da:	bf00      	nop
    }

    if (pclk != 0U)
 800a8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d021      	beq.n	800a926 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	4a1c      	ldr	r2, [pc, #112]	; (800a958 <UART_SetConfig+0xcd4>)
 800a8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	085b      	lsrs	r3, r3, #1
 800a8fa:	441a      	add	r2, r3
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	fbb2 f3f3 	udiv	r3, r2, r3
 800a904:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	2b0f      	cmp	r3, #15
 800a90a:	d909      	bls.n	800a920 <UART_SetConfig+0xc9c>
 800a90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a912:	d205      	bcs.n	800a920 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	b29a      	uxth	r2, r3
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	60da      	str	r2, [r3, #12]
 800a91e:	e002      	b.n	800a926 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2201      	movs	r2, #1
 800a92a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2201      	movs	r2, #1
 800a932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2200      	movs	r2, #0
 800a93a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	2200      	movs	r2, #0
 800a940:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a942:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a946:	4618      	mov	r0, r3
 800a948:	3748      	adds	r7, #72	; 0x48
 800a94a:	46bd      	mov	sp, r7
 800a94c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a950:	03d09000 	.word	0x03d09000
 800a954:	003d0900 	.word	0x003d0900
 800a958:	0800b53c 	.word	0x0800b53c

0800a95c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98a:	f003 0302 	and.w	r3, r3, #2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ac:	f003 0304 	and.w	r3, r3, #4
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00a      	beq.n	800a9ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ce:	f003 0308 	and.w	r3, r3, #8
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00a      	beq.n	800a9ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	f003 0310 	and.w	r3, r3, #16
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01a      	beq.n	800aa72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa5a:	d10a      	bne.n	800aa72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	430a      	orrs	r2, r1
 800aa70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	430a      	orrs	r2, r1
 800aa92:	605a      	str	r2, [r3, #4]
  }
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b098      	sub	sp, #96	; 0x60
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aab0:	f7f6 ff4e 	bl	8001950 <HAL_GetTick>
 800aab4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0308 	and.w	r3, r3, #8
 800aac0:	2b08      	cmp	r3, #8
 800aac2:	d12f      	bne.n	800ab24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aacc:	2200      	movs	r2, #0
 800aace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f88e 	bl	800abf4 <UART_WaitOnFlagUntilTimeout>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d022      	beq.n	800ab24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aaec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaf2:	653b      	str	r3, [r7, #80]	; 0x50
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aafc:	647b      	str	r3, [r7, #68]	; 0x44
 800aafe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab04:	e841 2300 	strex	r3, r2, [r1]
 800ab08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e6      	bne.n	800aade <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2220      	movs	r2, #32
 800ab14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e063      	b.n	800abec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0304 	and.w	r3, r3, #4
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d149      	bne.n	800abc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f857 	bl	800abf4 <UART_WaitOnFlagUntilTimeout>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d03c      	beq.n	800abc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab54:	e853 3f00 	ldrex	r3, [r3]
 800ab58:	623b      	str	r3, [r7, #32]
   return(result);
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab6a:	633b      	str	r3, [r7, #48]	; 0x30
 800ab6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab72:	e841 2300 	strex	r3, r2, [r1]
 800ab76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1e6      	bne.n	800ab4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3308      	adds	r3, #8
 800ab84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	e853 3f00 	ldrex	r3, [r3]
 800ab8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab9e:	61fa      	str	r2, [r7, #28]
 800aba0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba2:	69b9      	ldr	r1, [r7, #24]
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	e841 2300 	strex	r3, r2, [r1]
 800abaa:	617b      	str	r3, [r7, #20]
   return(result);
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1e5      	bne.n	800ab7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2220      	movs	r2, #32
 800abb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e012      	b.n	800abec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2220      	movs	r2, #32
 800abca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2220      	movs	r2, #32
 800abd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3758      	adds	r7, #88	; 0x58
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	4613      	mov	r3, r2
 800ac02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac04:	e049      	b.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac0c:	d045      	beq.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac0e:	f7f6 fe9f 	bl	8001950 <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d302      	bcc.n	800ac24 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e048      	b.n	800acba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0304 	and.w	r3, r3, #4
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d031      	beq.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	69db      	ldr	r3, [r3, #28]
 800ac3c:	f003 0308 	and.w	r3, r3, #8
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	d110      	bne.n	800ac66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2208      	movs	r2, #8
 800ac4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f921 	bl	800ae94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2208      	movs	r2, #8
 800ac56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e029      	b.n	800acba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac74:	d111      	bne.n	800ac9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 f907 	bl	800ae94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2220      	movs	r2, #32
 800ac8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ac96:	2303      	movs	r3, #3
 800ac98:	e00f      	b.n	800acba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69da      	ldr	r2, [r3, #28]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	4013      	ands	r3, r2
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	bf0c      	ite	eq
 800acaa:	2301      	moveq	r3, #1
 800acac:	2300      	movne	r3, #0
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	461a      	mov	r2, r3
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d0a6      	beq.n	800ac06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b096      	sub	sp, #88	; 0x58
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	4613      	mov	r3, r2
 800acd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	88fa      	ldrh	r2, [r7, #6]
 800acdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2222      	movs	r2, #34	; 0x22
 800acec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d02d      	beq.n	800ad56 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad00:	4a40      	ldr	r2, [pc, #256]	; (800ae04 <UART_Start_Receive_DMA+0x140>)
 800ad02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad0a:	4a3f      	ldr	r2, [pc, #252]	; (800ae08 <UART_Start_Receive_DMA+0x144>)
 800ad0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad14:	4a3d      	ldr	r2, [pc, #244]	; (800ae0c <UART_Start_Receive_DMA+0x148>)
 800ad16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad1e:	2200      	movs	r2, #0
 800ad20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3324      	adds	r3, #36	; 0x24
 800ad2e:	4619      	mov	r1, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad34:	461a      	mov	r2, r3
 800ad36:	88fb      	ldrh	r3, [r7, #6]
 800ad38:	f7f7 fa7e 	bl	8002238 <HAL_DMA_Start_IT>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d009      	beq.n	800ad56 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2210      	movs	r2, #16
 800ad46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2220      	movs	r2, #32
 800ad4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	e051      	b.n	800adfa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d018      	beq.n	800ad90 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad66:	e853 3f00 	ldrex	r3, [r3]
 800ad6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad72:	657b      	str	r3, [r7, #84]	; 0x54
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad7e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e6      	bne.n	800ad5e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3308      	adds	r3, #8
 800ad96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	e853 3f00 	ldrex	r3, [r3]
 800ad9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	f043 0301 	orr.w	r3, r3, #1
 800ada6:	653b      	str	r3, [r7, #80]	; 0x50
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3308      	adds	r3, #8
 800adae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adb0:	637a      	str	r2, [r7, #52]	; 0x34
 800adb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800adb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adb8:	e841 2300 	strex	r3, r2, [r1]
 800adbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1e5      	bne.n	800ad90 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	3308      	adds	r3, #8
 800adca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	e853 3f00 	ldrex	r3, [r3]
 800add2:	613b      	str	r3, [r7, #16]
   return(result);
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	3308      	adds	r3, #8
 800ade2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ade4:	623a      	str	r2, [r7, #32]
 800ade6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade8:	69f9      	ldr	r1, [r7, #28]
 800adea:	6a3a      	ldr	r2, [r7, #32]
 800adec:	e841 2300 	strex	r3, r2, [r1]
 800adf0:	61bb      	str	r3, [r7, #24]
   return(result);
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1e5      	bne.n	800adc4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3758      	adds	r7, #88	; 0x58
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	0800af61 	.word	0x0800af61
 800ae08:	0800b089 	.word	0x0800b089
 800ae0c:	0800b0c7 	.word	0x0800b0c7

0800ae10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b08f      	sub	sp, #60	; 0x3c
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ae2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e6      	bne.n	800ae18 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3308      	adds	r3, #8
 800ae50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ae60:	633b      	str	r3, [r7, #48]	; 0x30
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3308      	adds	r3, #8
 800ae68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae6a:	61ba      	str	r2, [r7, #24]
 800ae6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	6979      	ldr	r1, [r7, #20]
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	613b      	str	r3, [r7, #16]
   return(result);
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e5      	bne.n	800ae4a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2220      	movs	r2, #32
 800ae82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800ae86:	bf00      	nop
 800ae88:	373c      	adds	r7, #60	; 0x3c
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
	...

0800ae94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b095      	sub	sp, #84	; 0x54
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aeb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeba:	643b      	str	r3, [r7, #64]	; 0x40
 800aebc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aec2:	e841 2300 	strex	r3, r2, [r1]
 800aec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e6      	bne.n	800ae9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3308      	adds	r3, #8
 800aed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	e853 3f00 	ldrex	r3, [r3]
 800aedc:	61fb      	str	r3, [r7, #28]
   return(result);
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	4b1e      	ldr	r3, [pc, #120]	; (800af5c <UART_EndRxTransfer+0xc8>)
 800aee2:	4013      	ands	r3, r2
 800aee4:	64bb      	str	r3, [r7, #72]	; 0x48
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3308      	adds	r3, #8
 800aeec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aeee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef6:	e841 2300 	strex	r3, r2, [r1]
 800aefa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1e5      	bne.n	800aece <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af06:	2b01      	cmp	r3, #1
 800af08:	d118      	bne.n	800af3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	e853 3f00 	ldrex	r3, [r3]
 800af16:	60bb      	str	r3, [r7, #8]
   return(result);
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	f023 0310 	bic.w	r3, r3, #16
 800af1e:	647b      	str	r3, [r7, #68]	; 0x44
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	461a      	mov	r2, r3
 800af26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af28:	61bb      	str	r3, [r7, #24]
 800af2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2c:	6979      	ldr	r1, [r7, #20]
 800af2e:	69ba      	ldr	r2, [r7, #24]
 800af30:	e841 2300 	strex	r3, r2, [r1]
 800af34:	613b      	str	r3, [r7, #16]
   return(result);
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1e6      	bne.n	800af0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2220      	movs	r2, #32
 800af40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800af50:	bf00      	nop
 800af52:	3754      	adds	r7, #84	; 0x54
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	effffffe 	.word	0xeffffffe

0800af60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b09c      	sub	sp, #112	; 0x70
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af76:	d071      	beq.n	800b05c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800af78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af88:	e853 3f00 	ldrex	r3, [r3]
 800af8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af94:	66bb      	str	r3, [r7, #104]	; 0x68
 800af96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	461a      	mov	r2, r3
 800af9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800afa0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afa6:	e841 2300 	strex	r3, r2, [r1]
 800afaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800afac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1e6      	bne.n	800af80 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	3308      	adds	r3, #8
 800afb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	e853 3f00 	ldrex	r3, [r3]
 800afc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc4:	f023 0301 	bic.w	r3, r3, #1
 800afc8:	667b      	str	r3, [r7, #100]	; 0x64
 800afca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3308      	adds	r3, #8
 800afd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800afd2:	647a      	str	r2, [r7, #68]	; 0x44
 800afd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afda:	e841 2300 	strex	r3, r2, [r1]
 800afde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1e5      	bne.n	800afb2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3308      	adds	r3, #8
 800afec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff0:	e853 3f00 	ldrex	r3, [r3]
 800aff4:	623b      	str	r3, [r7, #32]
   return(result);
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800affc:	663b      	str	r3, [r7, #96]	; 0x60
 800affe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3308      	adds	r3, #8
 800b004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b006:	633a      	str	r2, [r7, #48]	; 0x30
 800b008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b00c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b00e:	e841 2300 	strex	r3, r2, [r1]
 800b012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1e5      	bne.n	800afe6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b01a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b01c:	2220      	movs	r2, #32
 800b01e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b026:	2b01      	cmp	r3, #1
 800b028:	d118      	bne.n	800b05c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b02a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	e853 3f00 	ldrex	r3, [r3]
 800b036:	60fb      	str	r3, [r7, #12]
   return(result);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f023 0310 	bic.w	r3, r3, #16
 800b03e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	461a      	mov	r2, r3
 800b046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b048:	61fb      	str	r3, [r7, #28]
 800b04a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04c:	69b9      	ldr	r1, [r7, #24]
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	e841 2300 	strex	r3, r2, [r1]
 800b054:	617b      	str	r3, [r7, #20]
   return(result);
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e6      	bne.n	800b02a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b05c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b05e:	2200      	movs	r2, #0
 800b060:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b066:	2b01      	cmp	r3, #1
 800b068:	d107      	bne.n	800b07a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b06c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b070:	4619      	mov	r1, r3
 800b072:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b074:	f7f5 fad6 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b078:	e002      	b.n	800b080 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b07a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b07c:	f7fe fde4 	bl	8009c48 <HAL_UART_RxCpltCallback>
}
 800b080:	bf00      	nop
 800b082:	3770      	adds	r7, #112	; 0x70
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b094:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2201      	movs	r2, #1
 800b09a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d109      	bne.n	800b0b8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0aa:	085b      	lsrs	r3, r3, #1
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f7f5 fab7 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0b6:	e002      	b.n	800b0be <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f7fe fdcf 	bl	8009c5c <HAL_UART_RxHalfCpltCallback>
}
 800b0be:	bf00      	nop
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b086      	sub	sp, #24
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ee:	2b80      	cmp	r3, #128	; 0x80
 800b0f0:	d109      	bne.n	800b106 <UART_DMAError+0x40>
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	2b21      	cmp	r3, #33	; 0x21
 800b0f6:	d106      	bne.n	800b106 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b100:	6978      	ldr	r0, [r7, #20]
 800b102:	f7ff fe85 	bl	800ae10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b110:	2b40      	cmp	r3, #64	; 0x40
 800b112:	d109      	bne.n	800b128 <UART_DMAError+0x62>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2b22      	cmp	r3, #34	; 0x22
 800b118:	d106      	bne.n	800b128 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b122:	6978      	ldr	r0, [r7, #20]
 800b124:	f7ff feb6 	bl	800ae94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b12e:	f043 0210 	orr.w	r2, r3, #16
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b138:	6978      	ldr	r0, [r7, #20]
 800b13a:	f7fe fd99 	bl	8009c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b13e:	bf00      	nop
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b084      	sub	sp, #16
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b152:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f7fe fd83 	bl	8009c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b16a:	bf00      	nop
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b088      	sub	sp, #32
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	e853 3f00 	ldrex	r3, [r3]
 800b186:	60bb      	str	r3, [r7, #8]
   return(result);
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b18e:	61fb      	str	r3, [r7, #28]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	61bb      	str	r3, [r7, #24]
 800b19a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19c:	6979      	ldr	r1, [r7, #20]
 800b19e:	69ba      	ldr	r2, [r7, #24]
 800b1a0:	e841 2300 	strex	r3, r2, [r1]
 800b1a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1e6      	bne.n	800b17a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7fe fd3a 	bl	8009c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1c0:	bf00      	nop
 800b1c2:	3720      	adds	r7, #32
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b212:	2b01      	cmp	r3, #1
 800b214:	d101      	bne.n	800b21a <HAL_UARTEx_DisableFifoMode+0x16>
 800b216:	2302      	movs	r3, #2
 800b218:	e027      	b.n	800b26a <HAL_UARTEx_DisableFifoMode+0x66>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2224      	movs	r2, #36	; 0x24
 800b226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f022 0201 	bic.w	r2, r2, #1
 800b240:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b248:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2220      	movs	r2, #32
 800b25c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3714      	adds	r7, #20
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b084      	sub	sp, #16
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b286:	2b01      	cmp	r3, #1
 800b288:	d101      	bne.n	800b28e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b28a:	2302      	movs	r3, #2
 800b28c:	e02d      	b.n	800b2ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2224      	movs	r2, #36	; 0x24
 800b29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 0201 	bic.w	r2, r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f8a4 	bl	800b418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2220      	movs	r2, #32
 800b2dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b302:	2b01      	cmp	r3, #1
 800b304:	d101      	bne.n	800b30a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b306:	2302      	movs	r3, #2
 800b308:	e02d      	b.n	800b366 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2224      	movs	r2, #36	; 0x24
 800b316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f022 0201 	bic.w	r2, r2, #1
 800b330:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f866 	bl	800b418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2220      	movs	r2, #32
 800b358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b08c      	sub	sp, #48	; 0x30
 800b372:	af00      	add	r7, sp, #0
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	4613      	mov	r3, r2
 800b37a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b382:	2b20      	cmp	r3, #32
 800b384:	d142      	bne.n	800b40c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e03b      	b.n	800b40e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2201      	movs	r2, #1
 800b39a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b3a2:	88fb      	ldrh	r3, [r7, #6]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f7ff fc8b 	bl	800acc4 <UART_Start_Receive_DMA>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b3b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d124      	bne.n	800b406 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d11d      	bne.n	800b400 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2210      	movs	r2, #16
 800b3ca:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	617b      	str	r3, [r7, #20]
   return(result);
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f043 0310 	orr.w	r3, r3, #16
 800b3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ec:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	6a39      	ldr	r1, [r7, #32]
 800b3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e6      	bne.n	800b3cc <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b3fe:	e002      	b.n	800b406 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b40a:	e000      	b.n	800b40e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b40c:	2302      	movs	r3, #2
  }
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3730      	adds	r7, #48	; 0x30
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b424:	2b00      	cmp	r3, #0
 800b426:	d108      	bne.n	800b43a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b438:	e031      	b.n	800b49e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b43a:	2310      	movs	r3, #16
 800b43c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b43e:	2310      	movs	r3, #16
 800b440:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	0e5b      	lsrs	r3, r3, #25
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	f003 0307 	and.w	r3, r3, #7
 800b450:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	0f5b      	lsrs	r3, r3, #29
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	f003 0307 	and.w	r3, r3, #7
 800b460:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b462:	7bbb      	ldrb	r3, [r7, #14]
 800b464:	7b3a      	ldrb	r2, [r7, #12]
 800b466:	4911      	ldr	r1, [pc, #68]	; (800b4ac <UARTEx_SetNbDataToProcess+0x94>)
 800b468:	5c8a      	ldrb	r2, [r1, r2]
 800b46a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b46e:	7b3a      	ldrb	r2, [r7, #12]
 800b470:	490f      	ldr	r1, [pc, #60]	; (800b4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b472:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b474:	fb93 f3f2 	sdiv	r3, r3, r2
 800b478:	b29a      	uxth	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	7b7a      	ldrb	r2, [r7, #13]
 800b484:	4909      	ldr	r1, [pc, #36]	; (800b4ac <UARTEx_SetNbDataToProcess+0x94>)
 800b486:	5c8a      	ldrb	r2, [r1, r2]
 800b488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b48c:	7b7a      	ldrb	r2, [r7, #13]
 800b48e:	4908      	ldr	r1, [pc, #32]	; (800b4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b490:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b492:	fb93 f3f2 	sdiv	r3, r3, r2
 800b496:	b29a      	uxth	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b49e:	bf00      	nop
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	0800b554 	.word	0x0800b554
 800b4b0:	0800b55c 	.word	0x0800b55c

0800b4b4 <memset>:
 800b4b4:	4402      	add	r2, r0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d100      	bne.n	800b4be <memset+0xa>
 800b4bc:	4770      	bx	lr
 800b4be:	f803 1b01 	strb.w	r1, [r3], #1
 800b4c2:	e7f9      	b.n	800b4b8 <memset+0x4>

0800b4c4 <__libc_init_array>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	4d0d      	ldr	r5, [pc, #52]	; (800b4fc <__libc_init_array+0x38>)
 800b4c8:	4c0d      	ldr	r4, [pc, #52]	; (800b500 <__libc_init_array+0x3c>)
 800b4ca:	1b64      	subs	r4, r4, r5
 800b4cc:	10a4      	asrs	r4, r4, #2
 800b4ce:	2600      	movs	r6, #0
 800b4d0:	42a6      	cmp	r6, r4
 800b4d2:	d109      	bne.n	800b4e8 <__libc_init_array+0x24>
 800b4d4:	4d0b      	ldr	r5, [pc, #44]	; (800b504 <__libc_init_array+0x40>)
 800b4d6:	4c0c      	ldr	r4, [pc, #48]	; (800b508 <__libc_init_array+0x44>)
 800b4d8:	f000 f818 	bl	800b50c <_init>
 800b4dc:	1b64      	subs	r4, r4, r5
 800b4de:	10a4      	asrs	r4, r4, #2
 800b4e0:	2600      	movs	r6, #0
 800b4e2:	42a6      	cmp	r6, r4
 800b4e4:	d105      	bne.n	800b4f2 <__libc_init_array+0x2e>
 800b4e6:	bd70      	pop	{r4, r5, r6, pc}
 800b4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ec:	4798      	blx	r3
 800b4ee:	3601      	adds	r6, #1
 800b4f0:	e7ee      	b.n	800b4d0 <__libc_init_array+0xc>
 800b4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4f6:	4798      	blx	r3
 800b4f8:	3601      	adds	r6, #1
 800b4fa:	e7f2      	b.n	800b4e2 <__libc_init_array+0x1e>
 800b4fc:	0800b56c 	.word	0x0800b56c
 800b500:	0800b56c 	.word	0x0800b56c
 800b504:	0800b56c 	.word	0x0800b56c
 800b508:	0800b570 	.word	0x0800b570

0800b50c <_init>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr

0800b518 <_fini>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	bf00      	nop
 800b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51e:	bc08      	pop	{r3}
 800b520:	469e      	mov	lr, r3
 800b522:	4770      	bx	lr
