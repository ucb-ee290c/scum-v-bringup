
TileLinkTrafficAdapter-H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7cc  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800aa98  0800aa98  0001aa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aae0  0800aae0  0001aae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aae4  0800aae4  0001aae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800aae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004c8  24000018  0800aafc  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240004e0  0800aafc  000204e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016977  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002937  00000000  00000000  000369fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000010f8  00000000  00000000  00039338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d4b  00000000  00000000  0003a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033997  00000000  00000000  0003b17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017ec6  00000000  00000000  0006eb12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014d03a  00000000  00000000  000869d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000480c  00000000  00000000  001d3a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  001d8220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000018 	.word	0x24000018
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800aa80 	.word	0x0800aa80

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400001c 	.word	0x2400001c
 8000308:	0800aa80 	.word	0x0800aa80

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_UARTEx_RxEventCallback>:
  APP_STATE_WAITING_FOR_RX = 2,
} AppState;

AppState app_state = APP_STATE_INVALID;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
  if (app_state != APP_STATE_IDLE) {
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <HAL_UARTEx_RxEventCallback+0x98>)
 8000616:	f993 3000 	ldrsb.w	r3, [r3]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d13b      	bne.n	8000696 <HAL_UARTEx_RxEventCallback+0x8e>
    return;
  }

  if (huart == &huart3) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d131      	bne.n	800068a <HAL_UARTEx_RxEventCallback+0x82>
    tl.tx_frame.chanid  = *(serial_rx_buffer);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800062c:	701a      	strb	r2, [r3, #0]
    tl.tx_frame.opcode  = (*(serial_rx_buffer + 1)) & 0b111;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800063a:	705a      	strb	r2, [r3, #1]
    tl.tx_frame.param   = (*(serial_rx_buffer + 1)) >> 4;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800063e:	785b      	ldrb	r3, [r3, #1]
 8000640:	091b      	lsrs	r3, r3, #4
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000646:	709a      	strb	r2, [r3, #2]
    tl.tx_frame.size    = *(serial_rx_buffer + 2);
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800064a:	789a      	ldrb	r2, [r3, #2]
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800064e:	70da      	strb	r2, [r3, #3]
    tl.tx_frame.source  = 0;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000652:	2200      	movs	r2, #0
 8000654:	711a      	strb	r2, [r3, #4]
    tl.tx_frame.address = *(uint32_t *)(serial_rx_buffer + 4);
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800065c:	6093      	str	r3, [r2, #8]
    tl.tx_frame.data    = *(uint64_t *)(serial_rx_buffer + 8);
 800065e:	4912      	ldr	r1, [pc, #72]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000660:	688a      	ldr	r2, [r1, #8]
 8000662:	68cb      	ldr	r3, [r1, #12]
 8000664:	4911      	ldr	r1, [pc, #68]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000666:	e9c1 2304 	strd	r2, r3, [r1, #16]
    tl.tx_frame.corrupt = (*(serial_rx_buffer + 1) >> 7) & 0b1;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	09db      	lsrs	r3, r3, #7
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000674:	761a      	strb	r2, [r3, #24]
    tl.tx_frame.mask    = *(serial_rx_buffer + 3);
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000678:	78da      	ldrb	r2, [r3, #3]
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800067c:	765a      	strb	r2, [r3, #25]
    tl.tx_frame.last    = 1;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000680:	2201      	movs	r2, #1
 8000682:	769a      	strb	r2, [r3, #26]

    app_state = APP_STATE_FRAME_PENDING;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_UARTEx_RxEventCallback+0x98>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 800068a:	2220      	movs	r2, #32
 800068c:	4906      	ldr	r1, [pc, #24]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000690:	f00a f927 	bl	800a8e2 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000694:	e000      	b.n	8000698 <HAL_UARTEx_RxEventCallback+0x90>
    return;
 8000696:	bf00      	nop
}
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	24000000 	.word	0x24000000
 80006a4:	24000358 	.word	0x24000358
 80006a8:	24000288 	.word	0x24000288
 80006ac:	24000038 	.word	0x24000038

080006b0 <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006b4:	2100      	movs	r1, #0
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <APP_init+0x20>)
 80006b8:	f007 f83a 	bl	8007730 <HAL_TIM_PWM_Start>
  app_state = APP_STATE_IDLE;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <APP_init+0x24>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 80006c2:	2220      	movs	r2, #32
 80006c4:	4904      	ldr	r1, [pc, #16]	; (80006d8 <APP_init+0x28>)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <APP_init+0x2c>)
 80006c8:	f00a f90b 	bl	800a8e2 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2400030c 	.word	0x2400030c
 80006d4:	24000000 	.word	0x24000000
 80006d8:	24000288 	.word	0x24000288
 80006dc:	24000358 	.word	0x24000358

080006e0 <APP_main>:


void APP_main() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  // Poll the TL clock.
  GPIO_PinState tl_clk_state = HAL_GPIO_ReadPin(TL_CLK_GPIO_Port, TL_CLK_Pin);
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	4836      	ldr	r0, [pc, #216]	; (80007c4 <APP_main+0xe4>)
 80006ec:	f004 f9d4 	bl	8004a98 <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	71fb      	strb	r3, [r7, #7]

  // Process TL transactions on the positive clock edge.
  if (tl_clk_state == GPIO_PIN_SET && tl_clk_prev_state == GPIO_PIN_RESET) {
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d106      	bne.n	8000708 <APP_main+0x28>
 80006fa:	4b33      	ldr	r3, [pc, #204]	; (80007c8 <APP_main+0xe8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d102      	bne.n	8000708 <APP_main+0x28>
    TL_update(&tl);
 8000702:	4832      	ldr	r0, [pc, #200]	; (80007cc <APP_main+0xec>)
 8000704:	f000 fd12 	bl	800112c <TL_update>
  }

  if (tl_clk_state != tl_clk_prev_state) {
 8000708:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <APP_main+0xe8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	79fa      	ldrb	r2, [r7, #7]
 800070e:	429a      	cmp	r2, r3
 8000710:	d002      	beq.n	8000718 <APP_main+0x38>
    tl_clk_prev_state = tl_clk_state;
 8000712:	4a2d      	ldr	r2, [pc, #180]	; (80007c8 <APP_main+0xe8>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	7013      	strb	r3, [r2, #0]
  }

  // Process any pending TL frames.
  switch (app_state) {
 8000718:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <APP_main+0xf0>)
 800071a:	f993 3000 	ldrsb.w	r3, [r3]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d002      	beq.n	8000728 <APP_main+0x48>
 8000722:	2b02      	cmp	r3, #2
 8000724:	d007      	beq.n	8000736 <APP_main+0x56>
      }
      break;
    }
    case APP_STATE_IDLE:
    default: {
      break;
 8000726:	e048      	b.n	80007ba <APP_main+0xda>
      TL_transmit(&tl);
 8000728:	4828      	ldr	r0, [pc, #160]	; (80007cc <APP_main+0xec>)
 800072a:	f000 ffe5 	bl	80016f8 <TL_transmit>
      app_state = APP_STATE_WAITING_FOR_RX;
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <APP_main+0xf0>)
 8000730:	2202      	movs	r2, #2
 8000732:	701a      	strb	r2, [r3, #0]
      break;
 8000734:	e041      	b.n	80007ba <APP_main+0xda>
      if (tl.rx_finished) {
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <APP_main+0xec>)
 8000738:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800073c:	2b00      	cmp	r3, #0
 800073e:	d03b      	beq.n	80007b8 <APP_main+0xd8>
        TL_deserialize(&tl.rx_frame);
 8000740:	4824      	ldr	r0, [pc, #144]	; (80007d4 <APP_main+0xf4>)
 8000742:	f000 fe85 	bl	8001450 <TL_deserialize>
        *(serial_tx_buffer) = tl.rx_frame.chanid;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <APP_main+0xec>)
 8000748:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <APP_main+0xf8>)
 800074e:	701a      	strb	r2, [r3, #0]
        *(serial_tx_buffer + 1) = (tl.rx_frame.corrupt << 7) | (tl.rx_frame.param << 4) | tl.rx_frame.opcode;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <APP_main+0xec>)
 8000752:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8000756:	01db      	lsls	r3, r3, #7
 8000758:	b25a      	sxtb	r2, r3
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <APP_main+0xec>)
 800075c:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	b25b      	sxtb	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b25a      	sxtb	r2, r3
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <APP_main+0xec>)
 800076a:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800076e:	b25b      	sxtb	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b25b      	sxtb	r3, r3
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <APP_main+0xf8>)
 8000778:	705a      	strb	r2, [r3, #1]
        *(serial_tx_buffer + 2) = tl.rx_frame.size;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <APP_main+0xec>)
 800077c:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <APP_main+0xf8>)
 8000782:	709a      	strb	r2, [r3, #2]
        *(serial_tx_buffer + 3) = tl.rx_frame.mask;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <APP_main+0xec>)
 8000786:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <APP_main+0xf8>)
 800078c:	70da      	strb	r2, [r3, #3]
        *(uint32_t *)(serial_tx_buffer + 4) = tl.rx_frame.address;
 800078e:	4a13      	ldr	r2, [pc, #76]	; (80007dc <APP_main+0xfc>)
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <APP_main+0xec>)
 8000792:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000796:	6013      	str	r3, [r2, #0]
        *(uint64_t *)(serial_tx_buffer + 8) = tl.rx_frame.data;
 8000798:	4911      	ldr	r1, [pc, #68]	; (80007e0 <APP_main+0x100>)
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <APP_main+0xec>)
 800079c:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80007a0:	e9c1 2300 	strd	r2, r3, [r1]
        HAL_UART_Transmit(&huart3, serial_tx_buffer, 16, 1000);
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	2210      	movs	r2, #16
 80007aa:	490b      	ldr	r1, [pc, #44]	; (80007d8 <APP_main+0xf8>)
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <APP_main+0x104>)
 80007ae:	f008 f8b3 	bl	8008918 <HAL_UART_Transmit>
        app_state = APP_STATE_IDLE;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <APP_main+0xf0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
      break;
 80007b8:	bf00      	nop
    }
  }
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	58020c00 	.word	0x58020c00
 80007c8:	24000308 	.word	0x24000308
 80007cc:	24000038 	.word	0x24000038
 80007d0:	24000000 	.word	0x24000000
 80007d4:	24000158 	.word	0x24000158
 80007d8:	240002c8 	.word	0x240002c8
 80007dc:	240002cc 	.word	0x240002cc
 80007e0:	240002d0 	.word	0x240002d0
 80007e4:	24000358 	.word	0x24000358

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 ffd2 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f80e 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 f99c 	bl	8000b30 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f8:	f000 f972 	bl	8000ae0 <MX_DMA_Init>
  MX_TIM1_Init();
 80007fc:	f000 f876 	bl	80008ec <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000800:	f000 f920 	bl	8000a44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000804:	f7ff ff54 	bl	80006b0 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	APP_main();
 8000808:	f7ff ff6a 	bl	80006e0 <APP_main>
 800080c:	e7fc      	b.n	8000808 <main+0x20>
	...

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09c      	sub	sp, #112	; 0x70
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	224c      	movs	r2, #76	; 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f00a f902 	bl	800aa28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2220      	movs	r2, #32
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f00a f8fc 	bl	800aa28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000830:	2002      	movs	r0, #2
 8000832:	f004 f963 	bl	8004afc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <SystemClock_Config+0xd8>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <SystemClock_Config+0xd8>)
 8000840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <SystemClock_Config+0xd8>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000852:	bf00      	nop
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xd8>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	d1f8      	bne.n	8000854 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000862:	2302      	movs	r3, #2
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000866:	2301      	movs	r3, #1
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000872:	2300      	movs	r3, #0
 8000874:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000876:	2304      	movs	r3, #4
 8000878:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 800087a:	2314      	movs	r3, #20
 800087c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800088a:	230c      	movs	r3, #12
 800088c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800088e:	2300      	movs	r3, #0
 8000890:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4618      	mov	r0, r3
 800089c:	f004 f968 	bl	8004b70 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008a6:	f000 fa2d 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	233f      	movs	r3, #63	; 0x3f
 80008ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2303      	movs	r3, #3
 80008b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008b6:	2308      	movs	r3, #8
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2102      	movs	r1, #2
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 fd27 	bl	8005324 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008dc:	f000 fa12 	bl	8000d04 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3770      	adds	r7, #112	; 0x70
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	58024800 	.word	0x58024800

080008ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09c      	sub	sp, #112	; 0x70
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2234      	movs	r2, #52	; 0x34
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f00a f87e 	bl	800aa28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800092c:	4b43      	ldr	r3, [pc, #268]	; (8000a3c <MX_TIM1_Init+0x150>)
 800092e:	4a44      	ldr	r2, [pc, #272]	; (8000a40 <MX_TIM1_Init+0x154>)
 8000930:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000932:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <MX_TIM1_Init+0x150>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800093e:	4b3f      	ldr	r3, [pc, #252]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000944:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800094c:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <MX_TIM1_Init+0x150>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000958:	4838      	ldr	r0, [pc, #224]	; (8000a3c <MX_TIM1_Init+0x150>)
 800095a:	f006 fe31 	bl	80075c0 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000964:	f000 f9ce 	bl	8000d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000972:	4619      	mov	r1, r3
 8000974:	4831      	ldr	r0, [pc, #196]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000976:	f007 f90b 	bl	8007b90 <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000980:	f000 f9c0 	bl	8000d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000984:	482d      	ldr	r0, [pc, #180]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000986:	f006 fe72 	bl	800766e <HAL_TIM_PWM_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000990:	f000 f9b8 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009a4:	4619      	mov	r1, r3
 80009a6:	4825      	ldr	r0, [pc, #148]	; (8000a3c <MX_TIM1_Init+0x150>)
 80009a8:	f007 fe2a 	bl	8008600 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009b2:	f000 f9a7 	bl	8000d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b6:	2360      	movs	r3, #96	; 0x60
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009be:	2300      	movs	r3, #0
 80009c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	4818      	ldr	r0, [pc, #96]	; (8000a3c <MX_TIM1_Init+0x150>)
 80009dc:	f006 ffc4 	bl	8007968 <HAL_TIM_PWM_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009e6:	f000 f98d 	bl	8000d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000a20:	f007 fe8a 	bl	8008738 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a2a:	f000 f96b 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <MX_TIM1_Init+0x150>)
 8000a30:	f000 f9aa 	bl	8000d88 <HAL_TIM_MspPostInit>

}
 8000a34:	bf00      	nop
 8000a36:	3770      	adds	r7, #112	; 0x70
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2400030c 	.word	0x2400030c
 8000a40:	40010000 	.word	0x40010000

08000a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <MX_USART3_UART_Init+0x94>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a50:	4a22      	ldr	r2, [pc, #136]	; (8000adc <MX_USART3_UART_Init+0x98>)
 8000a52:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a68:	220c      	movs	r2, #12
 8000a6a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8a:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f007 fef4 	bl	8008878 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000a96:	f000 f935 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f009 fea4 	bl	800a7ea <HAL_UARTEx_SetTxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000aa8:	f000 f92c 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f009 fed9 	bl	800a866 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000aba:	f000 f923 	bl	8000d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART3_UART_Init+0x90>)
 8000ac0:	f009 fe5a 	bl	800a778 <HAL_UARTEx_DisableFifoMode>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000aca:	f000 f91b 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	24000358 	.word	0x24000358
 8000ad8:	40004800 	.word	0x40004800
 8000adc:	001e8480 	.word	0x001e8480

08000ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_DMA_Init+0x4c>)
 8000ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aec:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <MX_DMA_Init+0x4c>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_DMA_Init+0x4c>)
 8000af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2010      	movs	r0, #16
 8000b0a:	f000 ffb0 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b0e:	2010      	movs	r0, #16
 8000b10:	f000 ffc7 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2011      	movs	r0, #17
 8000b1a:	f000 ffa8 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b1e:	2011      	movs	r0, #17
 8000b20:	f000 ffbf 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	58024400 	.word	0x58024400

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b69      	ldr	r3, [pc, #420]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a67      	ldr	r2, [pc, #412]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b65      	ldr	r3, [pc, #404]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b64:	4b61      	ldr	r3, [pc, #388]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	4a60      	ldr	r2, [pc, #384]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000b6c:	f043 0320 	orr.w	r3, r3, #32
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b74:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	f003 0320 	and.w	r3, r3, #32
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	4a58      	ldr	r2, [pc, #352]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b52      	ldr	r3, [pc, #328]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	4a51      	ldr	r2, [pc, #324]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb0:	4b4e      	ldr	r3, [pc, #312]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4b4b      	ldr	r3, [pc, #300]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a49      	ldr	r2, [pc, #292]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b47      	ldr	r3, [pc, #284]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bdc:	4b43      	ldr	r3, [pc, #268]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a42      	ldr	r2, [pc, #264]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b3f      	ldr	r3, [pc, #252]	; (8000cec <MX_GPIO_Init+0x1bc>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c00:	483b      	ldr	r0, [pc, #236]	; (8000cf0 <MX_GPIO_Init+0x1c0>)
 8000c02:	f003 ff61 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2104      	movs	r1, #4
 8000c0a:	483a      	ldr	r0, [pc, #232]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000c0c:	f003 ff5c 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2108      	movs	r1, #8
 8000c14:	4838      	ldr	r0, [pc, #224]	; (8000cf8 <MX_GPIO_Init+0x1c8>)
 8000c16:	f003 ff57 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4837      	ldr	r0, [pc, #220]	; (8000cfc <MX_GPIO_Init+0x1cc>)
 8000c20:	f003 ff52 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TL_OUT_VALID_Pin TL_OUT_DATA_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TL_OUT_VALID_Pin|TL_OUT_DATA_Pin;
 8000c24:	f242 0309 	movw	r3, #8201	; 0x2009
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	482e      	ldr	r0, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000c3a:	f003 fd85 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_DATA_Pin */
  GPIO_InitStruct.Pin = TL_IN_DATA_Pin;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4826      	ldr	r0, [pc, #152]	; (8000cf0 <MX_GPIO_Init+0x1c0>)
 8000c58:	f003 fd76 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_VALID_Pin */
  GPIO_InitStruct.Pin = TL_IN_VALID_Pin;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_VALID_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	4619      	mov	r1, r3
 8000c72:	4820      	ldr	r0, [pc, #128]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000c74:	f003 fd68 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_OUT_READY_Pin */
  GPIO_InitStruct.Pin = TL_OUT_READY_Pin;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_OUT_READY_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481a      	ldr	r0, [pc, #104]	; (8000cf8 <MX_GPIO_Init+0x1c8>)
 8000c90:	f003 fd5a 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <MX_GPIO_Init+0x1cc>)
 8000cac:	f003 fd4c 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_READY_Pin */
  GPIO_InitStruct.Pin = TL_IN_READY_Pin;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_IN_READY_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <MX_GPIO_Init+0x1cc>)
 8000cc4:	f003 fd40 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_CLK_Pin */
  GPIO_InitStruct.Pin = TL_CLK_Pin;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_CLK_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <MX_GPIO_Init+0x1d0>)
 8000cde:	f003 fd33 	bl	8004748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3730      	adds	r7, #48	; 0x30
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021400 	.word	0x58021400
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	58020400 	.word	0x58020400
 8000d00:	58020c00 	.word	0x58020c00

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_MspInit+0x30>)
 8000d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d1c:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x30>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x30>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	58024400 	.word	0x58024400

08000d44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_TIM_Base_MspInit+0x3c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10e      	bne.n	8000d74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_TIM_Base_MspInit+0x40>)
 8000d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_TIM_Base_MspInit+0x40>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <HAL_TIM_Base_MspInit+0x40>)
 8000d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40010000 	.word	0x40010000
 8000d84:	58024400 	.word	0x58024400

08000d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_TIM_MspPostInit+0x6c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d11f      	bne.n	8000dea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_TIM_MspPostInit+0x70>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	4a11      	ldr	r2, [pc, #68]	; (8000df8 <HAL_TIM_MspPostInit+0x70>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_TIM_MspPostInit+0x70>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <HAL_TIM_MspPostInit+0x74>)
 8000de6:	f003 fcaf 	bl	8004748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010000 	.word	0x40010000
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58021000 	.word	0x58021000

08000e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0b8      	sub	sp, #224	; 0xe0
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	22b8      	movs	r2, #184	; 0xb8
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f009 fe01 	bl	800aa28 <memset>
  if(huart->Instance==USART3)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a59      	ldr	r2, [pc, #356]	; (8000f90 <HAL_UART_MspInit+0x190>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	f040 80aa 	bne.w	8000f86 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e32:	f04f 0202 	mov.w	r2, #2
 8000e36:	f04f 0300 	mov.w	r3, #0
 8000e3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fdf7 	bl	8005a3c <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000e54:	f7ff ff56 	bl	8000d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e58:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <HAL_UART_MspInit+0x194>)
 8000e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e5e:	4a4d      	ldr	r2, [pc, #308]	; (8000f94 <HAL_UART_MspInit+0x194>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e68:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <HAL_UART_MspInit+0x194>)
 8000e6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b47      	ldr	r3, [pc, #284]	; (8000f94 <HAL_UART_MspInit+0x194>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7c:	4a45      	ldr	r2, [pc, #276]	; (8000f94 <HAL_UART_MspInit+0x194>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e86:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <HAL_UART_MspInit+0x194>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4837      	ldr	r0, [pc, #220]	; (8000f98 <HAL_UART_MspInit+0x198>)
 8000ebc:	f003 fc44 	bl	8004748 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8000ec0:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000ec2:	4a37      	ldr	r2, [pc, #220]	; (8000fa0 <HAL_UART_MspInit+0x1a0>)
 8000ec4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000ec6:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000ec8:	222d      	movs	r2, #45	; 0x2d
 8000eca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed2:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed8:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ede:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee0:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000efe:	4827      	ldr	r0, [pc, #156]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000f00:	f000 fdea 	bl	8001ad8 <HAL_DMA_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f0a:	f7ff fefb 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f16:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <HAL_UART_MspInit+0x19c>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream6;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_UART_MspInit+0x1a8>)
 8000f20:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f24:	222e      	movs	r2, #46	; 0x2e
 8000f26:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f2a:	2240      	movs	r2, #64	; 0x40
 8000f2c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f3a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f5c:	f000 fdbc 	bl	8001ad8 <HAL_DMA_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000f66:	f7ff fecd 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f6e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <HAL_UART_MspInit+0x1a4>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2027      	movs	r0, #39	; 0x27
 8000f7c:	f000 fd77 	bl	8001a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f80:	2027      	movs	r0, #39	; 0x27
 8000f82:	f000 fd8e 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	37e0      	adds	r7, #224	; 0xe0
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004800 	.word	0x40004800
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020c00 	.word	0x58020c00
 8000f9c:	240003ec 	.word	0x240003ec
 8000fa0:	40020088 	.word	0x40020088
 8000fa4:	24000464 	.word	0x24000464
 8000fa8:	400200a0 	.word	0x400200a0

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 fc3e 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <DMA1_Stream5_IRQHandler+0x10>)
 8001006:	f002 f88d 	bl	8003124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	240003ec 	.word	0x240003ec

08001014 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <DMA1_Stream6_IRQHandler+0x10>)
 800101a:	f002 f883 	bl	8003124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	24000464 	.word	0x24000464

08001028 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <USART3_IRQHandler+0x10>)
 800102e:	f007 fd01 	bl	8008a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	24000358 	.word	0x24000358

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001040:	4b32      	ldr	r3, [pc, #200]	; (800110c <SystemInit+0xd0>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <SystemInit+0xd0>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <SystemInit+0xd4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	2b06      	cmp	r3, #6
 800105a:	d807      	bhi.n	800106c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800105c:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <SystemInit+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 030f 	bic.w	r3, r3, #15
 8001064:	4a2a      	ldr	r2, [pc, #168]	; (8001110 <SystemInit+0xd4>)
 8001066:	f043 0307 	orr.w	r3, r3, #7
 800106a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <SystemInit+0xd8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <SystemInit+0xd8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <SystemInit+0xd8>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <SystemInit+0xd8>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4924      	ldr	r1, [pc, #144]	; (8001114 <SystemInit+0xd8>)
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <SystemInit+0xdc>)
 8001086:	4013      	ands	r3, r2
 8001088:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <SystemInit+0xd4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <SystemInit+0xd4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 030f 	bic.w	r3, r3, #15
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <SystemInit+0xd4>)
 80010a0:	f043 0307 	orr.w	r3, r3, #7
 80010a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <SystemInit+0xd8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <SystemInit+0xd8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <SystemInit+0xd8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <SystemInit+0xd8>)
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <SystemInit+0xe0>)
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <SystemInit+0xd8>)
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <SystemInit+0xe4>)
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <SystemInit+0xd8>)
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <SystemInit+0xe8>)
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <SystemInit+0xd8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010d0:	4b10      	ldr	r3, [pc, #64]	; (8001114 <SystemInit+0xd8>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <SystemInit+0xe8>)
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <SystemInit+0xd8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <SystemInit+0xd8>)
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <SystemInit+0xe8>)
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <SystemInit+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <SystemInit+0xd8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a09      	ldr	r2, [pc, #36]	; (8001114 <SystemInit+0xd8>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <SystemInit+0xd8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <SystemInit+0xec>)
 80010fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001100:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	52002000 	.word	0x52002000
 8001114:	58024400 	.word	0x58024400
 8001118:	eaf6ed7f 	.word	0xeaf6ed7f
 800111c:	02020200 	.word	0x02020200
 8001120:	01ff0000 	.word	0x01ff0000
 8001124:	01010280 	.word	0x01010280
 8001128:	52004000 	.word	0x52004000

0800112c <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 800113a:	2b00      	cmp	r3, #0
 800113c:	d036      	beq.n	80011ac <TL_update+0x80>
    HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	7edb      	ldrb	r3, [r3, #27]
 800114c:	461a      	mov	r2, r3
 800114e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001152:	4835      	ldr	r0, [pc, #212]	; (8001228 <TL_update+0xfc>)
 8001154:	f003 fcb8 	bl	8004ac8 <HAL_GPIO_WritePin>

    if (tl->tx_bit_offset == 0) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <TL_update+0x4a>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 1);
 8001162:	2201      	movs	r2, #1
 8001164:	2108      	movs	r1, #8
 8001166:	4831      	ldr	r0, [pc, #196]	; (800122c <TL_update+0x100>)
 8001168:	f003 fcae 	bl	8004ac8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 1);
 800116c:	2201      	movs	r2, #1
 800116e:	2104      	movs	r1, #4
 8001170:	482f      	ldr	r0, [pc, #188]	; (8001230 <TL_update+0x104>)
 8001172:	f003 fca9 	bl	8004ac8 <HAL_GPIO_WritePin>
    }


    if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 800117c:	2b7b      	cmp	r3, #123	; 0x7b
 800117e:	d10c      	bne.n	800119a <TL_update+0x6e>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2104      	movs	r1, #4
 8001184:	482a      	ldr	r0, [pc, #168]	; (8001230 <TL_update+0x104>)
 8001186:	f003 fc9f 	bl	8004ac8 <HAL_GPIO_WritePin>
      tl->tx_pending = 0;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
      tl->tx_finished = 1;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
    }

    tl->tx_bit_offset += 1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
        tl->rx_finished = 1;
      }
    }
  }
}
 80011aa:	e038      	b.n	800121e <TL_update+0xf2>
  else if (tl->rx_pending) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d033      	beq.n	800121e <TL_update+0xf2>
    if (tl->rx_finished) {
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <TL_update+0xa6>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2108      	movs	r1, #8
 80011c4:	4819      	ldr	r0, [pc, #100]	; (800122c <TL_update+0x100>)
 80011c6:	f003 fc7f 	bl	8004ac8 <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
    if (HAL_GPIO_ReadPin(TL_OUT_VALID_GPIO_Port, TL_OUT_VALID_Pin) == GPIO_PIN_SET) {
 80011d2:	2101      	movs	r1, #1
 80011d4:	4816      	ldr	r0, [pc, #88]	; (8001230 <TL_update+0x104>)
 80011d6:	f003 fc5f 	bl	8004a98 <HAL_GPIO_ReadPin>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d11e      	bne.n	800121e <TL_update+0xf2>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_OUT_DATA_GPIO_Port, TL_OUT_DATA_Pin);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 80011e6:	461c      	mov	r4, r3
 80011e8:	2108      	movs	r1, #8
 80011ea:	4811      	ldr	r0, [pc, #68]	; (8001230 <TL_update+0x104>)
 80011ec:	f003 fc54 	bl	8004a98 <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4423      	add	r3, r4
 80011f8:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      tl->rx_bit_offset += 1;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001202:	3301      	adds	r3, #1
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001212:	2b7b      	cmp	r3, #123	; 0x7b
 8001214:	d103      	bne.n	800121e <TL_update+0xf2>
        tl->rx_finished = 1;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop
 8001228:	58021400 	.word	0x58021400
 800122c:	58020000 	.word	0x58020000
 8001230:	58020800 	.word	0x58020800

08001234 <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 8001234:	b4f0      	push	{r4, r5, r6, r7}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 800123c:	2100      	movs	r1, #0
 800123e:	83f9      	strh	r1, [r7, #30]
 8001240:	e011      	b.n	8001266 <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	7e89      	ldrb	r1, [r1, #26]
 8001246:	4608      	mov	r0, r1
 8001248:	8bf9      	ldrh	r1, [r7, #30]
 800124a:	fa40 f101 	asr.w	r1, r0, r1
 800124e:	b2c8      	uxtb	r0, r1
 8001250:	8bf9      	ldrh	r1, [r7, #30]
 8001252:	f000 0001 	and.w	r0, r0, #1
 8001256:	b2c4      	uxtb	r4, r0
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	4401      	add	r1, r0
 800125c:	4620      	mov	r0, r4
 800125e:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001260:	8bf9      	ldrh	r1, [r7, #30]
 8001262:	3101      	adds	r1, #1
 8001264:	83f9      	strh	r1, [r7, #30]
 8001266:	8bf9      	ldrh	r1, [r7, #30]
 8001268:	2900      	cmp	r1, #0
 800126a:	d0ea      	beq.n	8001242 <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800126c:	2100      	movs	r1, #0
 800126e:	83b9      	strh	r1, [r7, #28]
 8001270:	e012      	b.n	8001298 <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->mask >> i) & 0b1;
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	7e49      	ldrb	r1, [r1, #25]
 8001276:	4608      	mov	r0, r1
 8001278:	8bb9      	ldrh	r1, [r7, #28]
 800127a:	fa40 f101 	asr.w	r1, r0, r1
 800127e:	b2c8      	uxtb	r0, r1
 8001280:	8bb9      	ldrh	r1, [r7, #28]
 8001282:	3101      	adds	r1, #1
 8001284:	f000 0001 	and.w	r0, r0, #1
 8001288:	b2c4      	uxtb	r4, r0
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	4401      	add	r1, r0
 800128e:	4620      	mov	r0, r4
 8001290:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001292:	8bb9      	ldrh	r1, [r7, #28]
 8001294:	3101      	adds	r1, #1
 8001296:	83b9      	strh	r1, [r7, #28]
 8001298:	8bb9      	ldrh	r1, [r7, #28]
 800129a:	2907      	cmp	r1, #7
 800129c:	d9e9      	bls.n	8001272 <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800129e:	2100      	movs	r1, #0
 80012a0:	8379      	strh	r1, [r7, #26]
 80012a2:	e012      	b.n	80012ca <TL_serialize+0x96>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->corrupt >> i) & 0b1;
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	7e09      	ldrb	r1, [r1, #24]
 80012a8:	4608      	mov	r0, r1
 80012aa:	8b79      	ldrh	r1, [r7, #26]
 80012ac:	fa40 f101 	asr.w	r1, r0, r1
 80012b0:	b2c8      	uxtb	r0, r1
 80012b2:	8b79      	ldrh	r1, [r7, #26]
 80012b4:	3109      	adds	r1, #9
 80012b6:	f000 0001 	and.w	r0, r0, #1
 80012ba:	b2c4      	uxtb	r4, r0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	4401      	add	r1, r0
 80012c0:	4620      	mov	r0, r4
 80012c2:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80012c4:	8b79      	ldrh	r1, [r7, #26]
 80012c6:	3101      	adds	r1, #1
 80012c8:	8379      	strh	r1, [r7, #26]
 80012ca:	8b79      	ldrh	r1, [r7, #26]
 80012cc:	2900      	cmp	r1, #0
 80012ce:	d0e9      	beq.n	80012a4 <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80012d0:	2100      	movs	r1, #0
 80012d2:	8339      	strh	r1, [r7, #24]
 80012d4:	e01e      	b.n	8001314 <TL_serialize+0xe0>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80012dc:	8b3c      	ldrh	r4, [r7, #24]
 80012de:	f1c4 0620 	rsb	r6, r4, #32
 80012e2:	f1a4 0520 	sub.w	r5, r4, #32
 80012e6:	fa20 f204 	lsr.w	r2, r0, r4
 80012ea:	fa01 f606 	lsl.w	r6, r1, r6
 80012ee:	4332      	orrs	r2, r6
 80012f0:	fa21 f505 	lsr.w	r5, r1, r5
 80012f4:	432a      	orrs	r2, r5
 80012f6:	fa21 f304 	lsr.w	r3, r1, r4
 80012fa:	b2d0      	uxtb	r0, r2
 80012fc:	8b39      	ldrh	r1, [r7, #24]
 80012fe:	310a      	adds	r1, #10
 8001300:	f000 0001 	and.w	r0, r0, #1
 8001304:	b2c4      	uxtb	r4, r0
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	4401      	add	r1, r0
 800130a:	4620      	mov	r0, r4
 800130c:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800130e:	8b39      	ldrh	r1, [r7, #24]
 8001310:	3101      	adds	r1, #1
 8001312:	8339      	strh	r1, [r7, #24]
 8001314:	8b39      	ldrh	r1, [r7, #24]
 8001316:	293f      	cmp	r1, #63	; 0x3f
 8001318:	d9dd      	bls.n	80012d6 <TL_serialize+0xa2>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 800131a:	2300      	movs	r3, #0
 800131c:	82fb      	strh	r3, [r7, #22]
 800131e:	e011      	b.n	8001344 <TL_serialize+0x110>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->address >> i) & 0b1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	8afb      	ldrh	r3, [r7, #22]
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	b2da      	uxtb	r2, r3
 800132c:	8afb      	ldrh	r3, [r7, #22]
 800132e:	334a      	adds	r3, #74	; 0x4a
 8001330:	f002 0201 	and.w	r2, r2, #1
 8001334:	b2d1      	uxtb	r1, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	460a      	mov	r2, r1
 800133c:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	3301      	adds	r3, #1
 8001342:	82fb      	strh	r3, [r7, #22]
 8001344:	8afb      	ldrh	r3, [r7, #22]
 8001346:	2b1f      	cmp	r3, #31
 8001348:	d9ea      	bls.n	8001320 <TL_serialize+0xec>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 800134a:	2300      	movs	r3, #0
 800134c:	82bb      	strh	r3, [r7, #20]
 800134e:	e012      	b.n	8001376 <TL_serialize+0x142>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	461a      	mov	r2, r3
 8001356:	8abb      	ldrh	r3, [r7, #20]
 8001358:	fa42 f303 	asr.w	r3, r2, r3
 800135c:	b2da      	uxtb	r2, r3
 800135e:	8abb      	ldrh	r3, [r7, #20]
 8001360:	336a      	adds	r3, #106	; 0x6a
 8001362:	f002 0201 	and.w	r2, r2, #1
 8001366:	b2d1      	uxtb	r1, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	460a      	mov	r2, r1
 800136e:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001370:	8abb      	ldrh	r3, [r7, #20]
 8001372:	3301      	adds	r3, #1
 8001374:	82bb      	strh	r3, [r7, #20]
 8001376:	8abb      	ldrh	r3, [r7, #20]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d9e9      	bls.n	8001350 <TL_serialize+0x11c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800137c:	2300      	movs	r3, #0
 800137e:	827b      	strh	r3, [r7, #18]
 8001380:	e012      	b.n	80013a8 <TL_serialize+0x174>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	78db      	ldrb	r3, [r3, #3]
 8001386:	461a      	mov	r2, r3
 8001388:	8a7b      	ldrh	r3, [r7, #18]
 800138a:	fa42 f303 	asr.w	r3, r2, r3
 800138e:	b2da      	uxtb	r2, r3
 8001390:	8a7b      	ldrh	r3, [r7, #18]
 8001392:	336e      	adds	r3, #110	; 0x6e
 8001394:	f002 0201 	and.w	r2, r2, #1
 8001398:	b2d1      	uxtb	r1, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	460a      	mov	r2, r1
 80013a0:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80013a2:	8a7b      	ldrh	r3, [r7, #18]
 80013a4:	3301      	adds	r3, #1
 80013a6:	827b      	strh	r3, [r7, #18]
 80013a8:	8a7b      	ldrh	r3, [r7, #18]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d9e9      	bls.n	8001382 <TL_serialize+0x14e>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	823b      	strh	r3, [r7, #16]
 80013b2:	e012      	b.n	80013da <TL_serialize+0x1a6>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	789b      	ldrb	r3, [r3, #2]
 80013b8:	461a      	mov	r2, r3
 80013ba:	8a3b      	ldrh	r3, [r7, #16]
 80013bc:	fa42 f303 	asr.w	r3, r2, r3
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	8a3b      	ldrh	r3, [r7, #16]
 80013c4:	3372      	adds	r3, #114	; 0x72
 80013c6:	f002 0201 	and.w	r2, r2, #1
 80013ca:	b2d1      	uxtb	r1, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	4413      	add	r3, r2
 80013d0:	460a      	mov	r2, r1
 80013d2:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80013d4:	8a3b      	ldrh	r3, [r7, #16]
 80013d6:	3301      	adds	r3, #1
 80013d8:	823b      	strh	r3, [r7, #16]
 80013da:	8a3b      	ldrh	r3, [r7, #16]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d9e9      	bls.n	80013b4 <TL_serialize+0x180>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	81fb      	strh	r3, [r7, #14]
 80013e4:	e012      	b.n	800140c <TL_serialize+0x1d8>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	461a      	mov	r2, r3
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	fa42 f303 	asr.w	r3, r2, r3
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	89fb      	ldrh	r3, [r7, #14]
 80013f6:	3375      	adds	r3, #117	; 0x75
 80013f8:	f002 0201 	and.w	r2, r2, #1
 80013fc:	b2d1      	uxtb	r1, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	460a      	mov	r2, r1
 8001404:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001406:	89fb      	ldrh	r3, [r7, #14]
 8001408:	3301      	adds	r3, #1
 800140a:	81fb      	strh	r3, [r7, #14]
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d9e9      	bls.n	80013e6 <TL_serialize+0x1b2>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001412:	2300      	movs	r3, #0
 8001414:	81bb      	strh	r3, [r7, #12]
 8001416:	e012      	b.n	800143e <TL_serialize+0x20a>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	89bb      	ldrh	r3, [r7, #12]
 8001420:	fa42 f303 	asr.w	r3, r2, r3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	3378      	adds	r3, #120	; 0x78
 800142a:	f002 0201 	and.w	r2, r2, #1
 800142e:	b2d1      	uxtb	r1, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	460a      	mov	r2, r1
 8001436:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001438:	89bb      	ldrh	r3, [r7, #12]
 800143a:	3301      	adds	r3, #1
 800143c:	81bb      	strh	r3, [r7, #12]
 800143e:	89bb      	ldrh	r3, [r7, #12]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d9e9      	bls.n	8001418 <TL_serialize+0x1e4>
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bcf0      	pop	{r4, r5, r6, r7}
 800144e:	4770      	bx	lr

08001450 <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 8001450:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001454:	b08a      	sub	sp, #40	; 0x28
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
  frame->chanid = 0;
 800145a:	68f9      	ldr	r1, [r7, #12]
 800145c:	2000      	movs	r0, #0
 800145e:	7008      	strb	r0, [r1, #0]
  frame->opcode = 0;
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	2000      	movs	r0, #0
 8001464:	7048      	strb	r0, [r1, #1]
  frame->param = 0;
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	2000      	movs	r0, #0
 800146a:	7088      	strb	r0, [r1, #2]
  frame->size = 0;
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	2000      	movs	r0, #0
 8001470:	70c8      	strb	r0, [r1, #3]
  frame->source = 0;
 8001472:	68f9      	ldr	r1, [r7, #12]
 8001474:	2000      	movs	r0, #0
 8001476:	7108      	strb	r0, [r1, #4]
  frame->address = 0;
 8001478:	68f9      	ldr	r1, [r7, #12]
 800147a:	2000      	movs	r0, #0
 800147c:	6088      	str	r0, [r1, #8]
  frame->data = 0;
 800147e:	68fe      	ldr	r6, [r7, #12]
 8001480:	f04f 0000 	mov.w	r0, #0
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	e9c6 0104 	strd	r0, r1, [r6, #16]
  frame->corrupt = 0;
 800148c:	68f9      	ldr	r1, [r7, #12]
 800148e:	2000      	movs	r0, #0
 8001490:	7608      	strb	r0, [r1, #24]
  frame->mask = 0;
 8001492:	68f9      	ldr	r1, [r7, #12]
 8001494:	2000      	movs	r0, #0
 8001496:	7648      	strb	r0, [r1, #25]
  frame->last = 0;
 8001498:	68f9      	ldr	r1, [r7, #12]
 800149a:	2000      	movs	r0, #0
 800149c:	7688      	strb	r0, [r1, #26]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 800149e:	2100      	movs	r1, #0
 80014a0:	84f9      	strh	r1, [r7, #38]	; 0x26
 80014a2:	e014      	b.n	80014ce <TL_deserialize+0x7e>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 80014a4:	68f9      	ldr	r1, [r7, #12]
 80014a6:	7e89      	ldrb	r1, [r1, #26]
 80014a8:	b248      	sxtb	r0, r1
 80014aa:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80014ac:	68fe      	ldr	r6, [r7, #12]
 80014ae:	4431      	add	r1, r6
 80014b0:	7ec9      	ldrb	r1, [r1, #27]
 80014b2:	f001 0601 	and.w	r6, r1, #1
 80014b6:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80014b8:	fa06 f101 	lsl.w	r1, r6, r1
 80014bc:	b249      	sxtb	r1, r1
 80014be:	4301      	orrs	r1, r0
 80014c0:	b249      	sxtb	r1, r1
 80014c2:	b2c8      	uxtb	r0, r1
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	7688      	strb	r0, [r1, #26]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80014c8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80014ca:	3101      	adds	r1, #1
 80014cc:	84f9      	strh	r1, [r7, #38]	; 0x26
 80014ce:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80014d0:	2900      	cmp	r1, #0
 80014d2:	d0e7      	beq.n	80014a4 <TL_deserialize+0x54>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80014d4:	2100      	movs	r1, #0
 80014d6:	84b9      	strh	r1, [r7, #36]	; 0x24
 80014d8:	e015      	b.n	8001506 <TL_deserialize+0xb6>
    frame->mask |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 80014da:	68f9      	ldr	r1, [r7, #12]
 80014dc:	7e49      	ldrb	r1, [r1, #25]
 80014de:	b248      	sxtb	r0, r1
 80014e0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80014e2:	3101      	adds	r1, #1
 80014e4:	68fe      	ldr	r6, [r7, #12]
 80014e6:	4431      	add	r1, r6
 80014e8:	7ec9      	ldrb	r1, [r1, #27]
 80014ea:	f001 0601 	and.w	r6, r1, #1
 80014ee:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80014f0:	fa06 f101 	lsl.w	r1, r6, r1
 80014f4:	b249      	sxtb	r1, r1
 80014f6:	4301      	orrs	r1, r0
 80014f8:	b249      	sxtb	r1, r1
 80014fa:	b2c8      	uxtb	r0, r1
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	7648      	strb	r0, [r1, #25]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001500:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001502:	3101      	adds	r1, #1
 8001504:	84b9      	strh	r1, [r7, #36]	; 0x24
 8001506:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001508:	2907      	cmp	r1, #7
 800150a:	d9e6      	bls.n	80014da <TL_deserialize+0x8a>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800150c:	2100      	movs	r1, #0
 800150e:	8479      	strh	r1, [r7, #34]	; 0x22
 8001510:	e015      	b.n	800153e <TL_deserialize+0xee>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 8001512:	68f9      	ldr	r1, [r7, #12]
 8001514:	7e09      	ldrb	r1, [r1, #24]
 8001516:	b248      	sxtb	r0, r1
 8001518:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800151a:	3109      	adds	r1, #9
 800151c:	68fe      	ldr	r6, [r7, #12]
 800151e:	4431      	add	r1, r6
 8001520:	7ec9      	ldrb	r1, [r1, #27]
 8001522:	f001 0601 	and.w	r6, r1, #1
 8001526:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001528:	fa06 f101 	lsl.w	r1, r6, r1
 800152c:	b249      	sxtb	r1, r1
 800152e:	4301      	orrs	r1, r0
 8001530:	b249      	sxtb	r1, r1
 8001532:	b2c8      	uxtb	r0, r1
 8001534:	68f9      	ldr	r1, [r7, #12]
 8001536:	7608      	strb	r0, [r1, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001538:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800153a:	3101      	adds	r1, #1
 800153c:	8479      	strh	r1, [r7, #34]	; 0x22
 800153e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001540:	2900      	cmp	r1, #0
 8001542:	d0e6      	beq.n	8001512 <TL_deserialize+0xc2>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001544:	2100      	movs	r1, #0
 8001546:	8439      	strh	r1, [r7, #32]
 8001548:	e028      	b.n	800159c <TL_deserialize+0x14c>
    frame->data |= ((uint64_t)(frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 800154a:	68f9      	ldr	r1, [r7, #12]
 800154c:	e9d1 ab04 	ldrd	sl, fp, [r1, #16]
 8001550:	8c39      	ldrh	r1, [r7, #32]
 8001552:	310a      	adds	r1, #10
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	4401      	add	r1, r0
 8001558:	7ec9      	ldrb	r1, [r1, #27]
 800155a:	b2c9      	uxtb	r1, r1
 800155c:	2000      	movs	r0, #0
 800155e:	6039      	str	r1, [r7, #0]
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6839      	ldr	r1, [r7, #0]
 8001564:	f001 0401 	and.w	r4, r1, #1
 8001568:	2500      	movs	r5, #0
 800156a:	8c39      	ldrh	r1, [r7, #32]
 800156c:	f1a1 0620 	sub.w	r6, r1, #32
 8001570:	f1c1 0020 	rsb	r0, r1, #32
 8001574:	fa05 f301 	lsl.w	r3, r5, r1
 8001578:	fa04 f606 	lsl.w	r6, r4, r6
 800157c:	4333      	orrs	r3, r6
 800157e:	fa24 f000 	lsr.w	r0, r4, r0
 8001582:	4303      	orrs	r3, r0
 8001584:	fa04 f201 	lsl.w	r2, r4, r1
 8001588:	ea4a 0802 	orr.w	r8, sl, r2
 800158c:	ea4b 0903 	orr.w	r9, fp, r3
 8001590:	68f9      	ldr	r1, [r7, #12]
 8001592:	e9c1 8904 	strd	r8, r9, [r1, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001596:	8c39      	ldrh	r1, [r7, #32]
 8001598:	3101      	adds	r1, #1
 800159a:	8439      	strh	r1, [r7, #32]
 800159c:	8c39      	ldrh	r1, [r7, #32]
 800159e:	293f      	cmp	r1, #63	; 0x3f
 80015a0:	d9d3      	bls.n	800154a <TL_deserialize+0xfa>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	83fb      	strh	r3, [r7, #30]
 80015a6:	e011      	b.n	80015cc <TL_deserialize+0x17c>
    frame->address |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	8bfa      	ldrh	r2, [r7, #30]
 80015ae:	324a      	adds	r2, #74	; 0x4a
 80015b0:	68f9      	ldr	r1, [r7, #12]
 80015b2:	440a      	add	r2, r1
 80015b4:	7ed2      	ldrb	r2, [r2, #27]
 80015b6:	f002 0101 	and.w	r1, r2, #1
 80015ba:	8bfa      	ldrh	r2, [r7, #30]
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	431a      	orrs	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80015c6:	8bfb      	ldrh	r3, [r7, #30]
 80015c8:	3301      	adds	r3, #1
 80015ca:	83fb      	strh	r3, [r7, #30]
 80015cc:	8bfb      	ldrh	r3, [r7, #30]
 80015ce:	2b1f      	cmp	r3, #31
 80015d0:	d9ea      	bls.n	80015a8 <TL_deserialize+0x158>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	83bb      	strh	r3, [r7, #28]
 80015d6:	e015      	b.n	8001604 <TL_deserialize+0x1b4>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	791b      	ldrb	r3, [r3, #4]
 80015dc:	b25a      	sxtb	r2, r3
 80015de:	8bbb      	ldrh	r3, [r7, #28]
 80015e0:	336a      	adds	r3, #106	; 0x6a
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	440b      	add	r3, r1
 80015e6:	7edb      	ldrb	r3, [r3, #27]
 80015e8:	f003 0101 	and.w	r1, r3, #1
 80015ec:	8bbb      	ldrh	r3, [r7, #28]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80015fe:	8bbb      	ldrh	r3, [r7, #28]
 8001600:	3301      	adds	r3, #1
 8001602:	83bb      	strh	r3, [r7, #28]
 8001604:	8bbb      	ldrh	r3, [r7, #28]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d9e6      	bls.n	80015d8 <TL_deserialize+0x188>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800160a:	2300      	movs	r3, #0
 800160c:	837b      	strh	r3, [r7, #26]
 800160e:	e015      	b.n	800163c <TL_deserialize+0x1ec>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	78db      	ldrb	r3, [r3, #3]
 8001614:	b25a      	sxtb	r2, r3
 8001616:	8b7b      	ldrh	r3, [r7, #26]
 8001618:	336e      	adds	r3, #110	; 0x6e
 800161a:	68f9      	ldr	r1, [r7, #12]
 800161c:	440b      	add	r3, r1
 800161e:	7edb      	ldrb	r3, [r3, #27]
 8001620:	f003 0101 	and.w	r1, r3, #1
 8001624:	8b7b      	ldrh	r3, [r7, #26]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	b25b      	sxtb	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b25b      	sxtb	r3, r3
 8001630:	b2da      	uxtb	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001636:	8b7b      	ldrh	r3, [r7, #26]
 8001638:	3301      	adds	r3, #1
 800163a:	837b      	strh	r3, [r7, #26]
 800163c:	8b7b      	ldrh	r3, [r7, #26]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d9e6      	bls.n	8001610 <TL_deserialize+0x1c0>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001642:	2300      	movs	r3, #0
 8001644:	833b      	strh	r3, [r7, #24]
 8001646:	e015      	b.n	8001674 <TL_deserialize+0x224>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	789b      	ldrb	r3, [r3, #2]
 800164c:	b25a      	sxtb	r2, r3
 800164e:	8b3b      	ldrh	r3, [r7, #24]
 8001650:	3372      	adds	r3, #114	; 0x72
 8001652:	68f9      	ldr	r1, [r7, #12]
 8001654:	440b      	add	r3, r1
 8001656:	7edb      	ldrb	r3, [r3, #27]
 8001658:	f003 0101 	and.w	r1, r3, #1
 800165c:	8b3b      	ldrh	r3, [r7, #24]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	b25b      	sxtb	r3, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	b25b      	sxtb	r3, r3
 8001668:	b2da      	uxtb	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800166e:	8b3b      	ldrh	r3, [r7, #24]
 8001670:	3301      	adds	r3, #1
 8001672:	833b      	strh	r3, [r7, #24]
 8001674:	8b3b      	ldrh	r3, [r7, #24]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d9e6      	bls.n	8001648 <TL_deserialize+0x1f8>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800167a:	2300      	movs	r3, #0
 800167c:	82fb      	strh	r3, [r7, #22]
 800167e:	e015      	b.n	80016ac <TL_deserialize+0x25c>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	b25a      	sxtb	r2, r3
 8001686:	8afb      	ldrh	r3, [r7, #22]
 8001688:	3375      	adds	r3, #117	; 0x75
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	440b      	add	r3, r1
 800168e:	7edb      	ldrb	r3, [r3, #27]
 8001690:	f003 0101 	and.w	r1, r3, #1
 8001694:	8afb      	ldrh	r3, [r7, #22]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80016a6:	8afb      	ldrh	r3, [r7, #22]
 80016a8:	3301      	adds	r3, #1
 80016aa:	82fb      	strh	r3, [r7, #22]
 80016ac:	8afb      	ldrh	r3, [r7, #22]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d9e6      	bls.n	8001680 <TL_deserialize+0x230>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	82bb      	strh	r3, [r7, #20]
 80016b6:	e015      	b.n	80016e4 <TL_deserialize+0x294>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	8abb      	ldrh	r3, [r7, #20]
 80016c0:	3378      	adds	r3, #120	; 0x78
 80016c2:	68f9      	ldr	r1, [r7, #12]
 80016c4:	440b      	add	r3, r1
 80016c6:	7edb      	ldrb	r3, [r3, #27]
 80016c8:	f003 0101 	and.w	r1, r3, #1
 80016cc:	8abb      	ldrh	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80016de:	8abb      	ldrh	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	82bb      	strh	r3, [r7, #20]
 80016e4:	8abb      	ldrh	r3, [r7, #20]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d9e6      	bls.n	80016b8 <TL_deserialize+0x268>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016f6:	4770      	bx	lr

080016f8 <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fd96 	bl	8001234 <TL_serialize>

  // reset state
  tl->tx_bit_offset = 0;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->rx_bit_offset = 0;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
  tl->tx_finished = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_finished = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  // enable TX RX
  tl->rx_pending = 1;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
  tl->tx_pending = 1;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001744:	f7ff fc7a 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f009 f963 	bl	800aa38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff f839 	bl	80007e8 <main>
  bx  lr
 8001776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800177c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001780:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001784:	0800aae8 	.word	0x0800aae8
  ldr r2, =_sbss
 8001788:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 800178c:	240004e0 	.word	0x240004e0

08001790 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC3_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179a:	2003      	movs	r0, #3
 800179c:	f000 f95c 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017a0:	f003 ff76 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_Init+0x68>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	4913      	ldr	r1, [pc, #76]	; (8001800 <HAL_Init+0x6c>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_Init+0x68>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <HAL_Init+0x6c>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_Init+0x70>)
 80017d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_Init+0x74>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017de:	200f      	movs	r0, #15
 80017e0:	f000 f814 	bl	800180c <HAL_InitTick>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e002      	b.n	80017f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017ee:	f7ff fa8f 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	58024400 	.word	0x58024400
 8001800:	0800aa98 	.word	0x0800aa98
 8001804:	24000008 	.word	0x24000008
 8001808:	24000004 	.word	0x24000004

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_InitTick+0x60>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e021      	b.n	8001864 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_InitTick+0x64>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_InitTick+0x60>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f941 	bl	8001abe <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001854:	f000 f90b 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x68>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	24000010 	.word	0x24000010
 8001870:	24000004 	.word	0x24000004
 8001874:	2400000c 	.word	0x2400000c

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	24000010 	.word	0x24000010
 800189c:	240004dc 	.word	0x240004dc

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	240004dc 	.word	0x240004dc

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	05fa0000 	.word	0x05fa0000

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff29 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff40 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff90 	bl	80019ac <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5f 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff33 	bl	800191c <__NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa4 	bl	8001a14 <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff fede 	bl	80018a0 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e312      	b.n	8002116 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a66      	ldr	r2, [pc, #408]	; (8001c90 <HAL_DMA_Init+0x1b8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d04a      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a65      	ldr	r2, [pc, #404]	; (8001c94 <HAL_DMA_Init+0x1bc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d045      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a63      	ldr	r2, [pc, #396]	; (8001c98 <HAL_DMA_Init+0x1c0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d040      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a62      	ldr	r2, [pc, #392]	; (8001c9c <HAL_DMA_Init+0x1c4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d03b      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a60      	ldr	r2, [pc, #384]	; (8001ca0 <HAL_DMA_Init+0x1c8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d036      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a5f      	ldr	r2, [pc, #380]	; (8001ca4 <HAL_DMA_Init+0x1cc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d031      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a5d      	ldr	r2, [pc, #372]	; (8001ca8 <HAL_DMA_Init+0x1d0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d02c      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a5c      	ldr	r2, [pc, #368]	; (8001cac <HAL_DMA_Init+0x1d4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d027      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_DMA_Init+0x1d8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d022      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a59      	ldr	r2, [pc, #356]	; (8001cb4 <HAL_DMA_Init+0x1dc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d01d      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_DMA_Init+0x1e0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d018      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a56      	ldr	r2, [pc, #344]	; (8001cbc <HAL_DMA_Init+0x1e4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d013      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a54      	ldr	r2, [pc, #336]	; (8001cc0 <HAL_DMA_Init+0x1e8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00e      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a53      	ldr	r2, [pc, #332]	; (8001cc4 <HAL_DMA_Init+0x1ec>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d009      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_DMA_Init+0x1f0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d004      	beq.n	8001b90 <HAL_DMA_Init+0xb8>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_DMA_Init+0x1f4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_DMA_Init+0xbc>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_DMA_Init+0xbe>
 8001b94:	2300      	movs	r3, #0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 813c 	beq.w	8001e14 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a37      	ldr	r2, [pc, #220]	; (8001c90 <HAL_DMA_Init+0x1b8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d04a      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a36      	ldr	r2, [pc, #216]	; (8001c94 <HAL_DMA_Init+0x1bc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d045      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a34      	ldr	r2, [pc, #208]	; (8001c98 <HAL_DMA_Init+0x1c0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d040      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a33      	ldr	r2, [pc, #204]	; (8001c9c <HAL_DMA_Init+0x1c4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d03b      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a31      	ldr	r2, [pc, #196]	; (8001ca0 <HAL_DMA_Init+0x1c8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d036      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a30      	ldr	r2, [pc, #192]	; (8001ca4 <HAL_DMA_Init+0x1cc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d031      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2e      	ldr	r2, [pc, #184]	; (8001ca8 <HAL_DMA_Init+0x1d0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d02c      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2d      	ldr	r2, [pc, #180]	; (8001cac <HAL_DMA_Init+0x1d4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d027      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <HAL_DMA_Init+0x1d8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d022      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a2a      	ldr	r2, [pc, #168]	; (8001cb4 <HAL_DMA_Init+0x1dc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d01d      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <HAL_DMA_Init+0x1e0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d018      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a27      	ldr	r2, [pc, #156]	; (8001cbc <HAL_DMA_Init+0x1e4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d013      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <HAL_DMA_Init+0x1e8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00e      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <HAL_DMA_Init+0x1ec>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d009      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_DMA_Init+0x1f0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d004      	beq.n	8001c4c <HAL_DMA_Init+0x174>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <HAL_DMA_Init+0x1f4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d108      	bne.n	8001c5e <HAL_DMA_Init+0x186>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e007      	b.n	8001c6e <HAL_DMA_Init+0x196>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c6e:	e02f      	b.n	8001cd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c70:	f7ff fe16 	bl	80018a0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	d928      	bls.n	8001cd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2220      	movs	r2, #32
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2203      	movs	r2, #3
 8001c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e242      	b.n	8002116 <HAL_DMA_Init+0x63e>
 8001c90:	40020010 	.word	0x40020010
 8001c94:	40020028 	.word	0x40020028
 8001c98:	40020040 	.word	0x40020040
 8001c9c:	40020058 	.word	0x40020058
 8001ca0:	40020070 	.word	0x40020070
 8001ca4:	40020088 	.word	0x40020088
 8001ca8:	400200a0 	.word	0x400200a0
 8001cac:	400200b8 	.word	0x400200b8
 8001cb0:	40020410 	.word	0x40020410
 8001cb4:	40020428 	.word	0x40020428
 8001cb8:	40020440 	.word	0x40020440
 8001cbc:	40020458 	.word	0x40020458
 8001cc0:	40020470 	.word	0x40020470
 8001cc4:	40020488 	.word	0x40020488
 8001cc8:	400204a0 	.word	0x400204a0
 8001ccc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1c8      	bne.n	8001c70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4b83      	ldr	r3, [pc, #524]	; (8001ef8 <HAL_DMA_Init+0x420>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d107      	bne.n	8001d34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b28      	cmp	r3, #40	; 0x28
 8001d3a:	d903      	bls.n	8001d44 <HAL_DMA_Init+0x26c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b2e      	cmp	r3, #46	; 0x2e
 8001d42:	d91f      	bls.n	8001d84 <HAL_DMA_Init+0x2ac>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b3e      	cmp	r3, #62	; 0x3e
 8001d4a:	d903      	bls.n	8001d54 <HAL_DMA_Init+0x27c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b42      	cmp	r3, #66	; 0x42
 8001d52:	d917      	bls.n	8001d84 <HAL_DMA_Init+0x2ac>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b46      	cmp	r3, #70	; 0x46
 8001d5a:	d903      	bls.n	8001d64 <HAL_DMA_Init+0x28c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b48      	cmp	r3, #72	; 0x48
 8001d62:	d90f      	bls.n	8001d84 <HAL_DMA_Init+0x2ac>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b4e      	cmp	r3, #78	; 0x4e
 8001d6a:	d903      	bls.n	8001d74 <HAL_DMA_Init+0x29c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b52      	cmp	r3, #82	; 0x52
 8001d72:	d907      	bls.n	8001d84 <HAL_DMA_Init+0x2ac>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b73      	cmp	r3, #115	; 0x73
 8001d7a:	d905      	bls.n	8001d88 <HAL_DMA_Init+0x2b0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b77      	cmp	r3, #119	; 0x77
 8001d82:	d801      	bhi.n	8001d88 <HAL_DMA_Init+0x2b0>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_DMA_Init+0x2b2>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d94:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f023 0307 	bic.w	r3, r3, #7
 8001dac:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d117      	bne.n	8001df0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00e      	beq.n	8001df0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f002 fb2e 	bl	8004434 <DMA_CheckFifoParam>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2240      	movs	r2, #64	; 0x40
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e192      	b.n	8002116 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f002 fa69 	bl	80042d0 <DMA_CalcBaseAndBitshift>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	223f      	movs	r2, #63	; 0x3f
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	e0c8      	b.n	8001fa6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a38      	ldr	r2, [pc, #224]	; (8001efc <HAL_DMA_Init+0x424>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d022      	beq.n	8001e64 <HAL_DMA_Init+0x38c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a37      	ldr	r2, [pc, #220]	; (8001f00 <HAL_DMA_Init+0x428>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d01d      	beq.n	8001e64 <HAL_DMA_Init+0x38c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a35      	ldr	r2, [pc, #212]	; (8001f04 <HAL_DMA_Init+0x42c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d018      	beq.n	8001e64 <HAL_DMA_Init+0x38c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a34      	ldr	r2, [pc, #208]	; (8001f08 <HAL_DMA_Init+0x430>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d013      	beq.n	8001e64 <HAL_DMA_Init+0x38c>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a32      	ldr	r2, [pc, #200]	; (8001f0c <HAL_DMA_Init+0x434>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00e      	beq.n	8001e64 <HAL_DMA_Init+0x38c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <HAL_DMA_Init+0x438>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_DMA_Init+0x38c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2f      	ldr	r2, [pc, #188]	; (8001f14 <HAL_DMA_Init+0x43c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d004      	beq.n	8001e64 <HAL_DMA_Init+0x38c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2e      	ldr	r2, [pc, #184]	; (8001f18 <HAL_DMA_Init+0x440>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_DMA_Init+0x390>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_DMA_Init+0x392>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8092 	beq.w	8001f94 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a21      	ldr	r2, [pc, #132]	; (8001efc <HAL_DMA_Init+0x424>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d021      	beq.n	8001ebe <HAL_DMA_Init+0x3e6>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <HAL_DMA_Init+0x428>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d01c      	beq.n	8001ebe <HAL_DMA_Init+0x3e6>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_DMA_Init+0x42c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d017      	beq.n	8001ebe <HAL_DMA_Init+0x3e6>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1d      	ldr	r2, [pc, #116]	; (8001f08 <HAL_DMA_Init+0x430>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d012      	beq.n	8001ebe <HAL_DMA_Init+0x3e6>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_DMA_Init+0x434>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_DMA_Init+0x3e6>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <HAL_DMA_Init+0x438>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d008      	beq.n	8001ebe <HAL_DMA_Init+0x3e6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <HAL_DMA_Init+0x43c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <HAL_DMA_Init+0x3e6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_DMA_Init+0x440>)
 8001ebc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_DMA_Init+0x444>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b40      	cmp	r3, #64	; 0x40
 8001ee4:	d01c      	beq.n	8001f20 <HAL_DMA_Init+0x448>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b80      	cmp	r3, #128	; 0x80
 8001eec:	d102      	bne.n	8001ef4 <HAL_DMA_Init+0x41c>
 8001eee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ef2:	e016      	b.n	8001f22 <HAL_DMA_Init+0x44a>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e014      	b.n	8001f22 <HAL_DMA_Init+0x44a>
 8001ef8:	fe10803f 	.word	0xfe10803f
 8001efc:	58025408 	.word	0x58025408
 8001f00:	5802541c 	.word	0x5802541c
 8001f04:	58025430 	.word	0x58025430
 8001f08:	58025444 	.word	0x58025444
 8001f0c:	58025458 	.word	0x58025458
 8001f10:	5802546c 	.word	0x5802546c
 8001f14:	58025480 	.word	0x58025480
 8001f18:	58025494 	.word	0x58025494
 8001f1c:	fffe000f 	.word	0xfffe000f
 8001f20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68d2      	ldr	r2, [r2, #12]
 8001f26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b6e      	ldr	r3, [pc, #440]	; (8002120 <HAL_DMA_Init+0x648>)
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	; (8002124 <HAL_DMA_Init+0x64c>)
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	009a      	lsls	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f002 f9a9 	bl	80042d0 <DMA_CalcBaseAndBitshift>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	e008      	b.n	8001fa6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2240      	movs	r2, #64	; 0x40
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0b7      	b.n	8002116 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5f      	ldr	r2, [pc, #380]	; (8002128 <HAL_DMA_Init+0x650>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d072      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a5d      	ldr	r2, [pc, #372]	; (800212c <HAL_DMA_Init+0x654>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d06d      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5c      	ldr	r2, [pc, #368]	; (8002130 <HAL_DMA_Init+0x658>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d068      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a5a      	ldr	r2, [pc, #360]	; (8002134 <HAL_DMA_Init+0x65c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d063      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a59      	ldr	r2, [pc, #356]	; (8002138 <HAL_DMA_Init+0x660>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d05e      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a57      	ldr	r2, [pc, #348]	; (800213c <HAL_DMA_Init+0x664>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d059      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_DMA_Init+0x668>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d054      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a54      	ldr	r2, [pc, #336]	; (8002144 <HAL_DMA_Init+0x66c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d04f      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a53      	ldr	r2, [pc, #332]	; (8002148 <HAL_DMA_Init+0x670>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d04a      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a51      	ldr	r2, [pc, #324]	; (800214c <HAL_DMA_Init+0x674>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d045      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a50      	ldr	r2, [pc, #320]	; (8002150 <HAL_DMA_Init+0x678>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d040      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <HAL_DMA_Init+0x67c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d03b      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_DMA_Init+0x680>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d036      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a4b      	ldr	r2, [pc, #300]	; (800215c <HAL_DMA_Init+0x684>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d031      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_DMA_Init+0x688>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d02c      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a48      	ldr	r2, [pc, #288]	; (8002164 <HAL_DMA_Init+0x68c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d027      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_DMA_Init+0x690>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d022      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a45      	ldr	r2, [pc, #276]	; (800216c <HAL_DMA_Init+0x694>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01d      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a44      	ldr	r2, [pc, #272]	; (8002170 <HAL_DMA_Init+0x698>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d018      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a42      	ldr	r2, [pc, #264]	; (8002174 <HAL_DMA_Init+0x69c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a41      	ldr	r2, [pc, #260]	; (8002178 <HAL_DMA_Init+0x6a0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a3f      	ldr	r2, [pc, #252]	; (800217c <HAL_DMA_Init+0x6a4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d009      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a3e      	ldr	r2, [pc, #248]	; (8002180 <HAL_DMA_Init+0x6a8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d004      	beq.n	8002096 <HAL_DMA_Init+0x5be>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3c      	ldr	r2, [pc, #240]	; (8002184 <HAL_DMA_Init+0x6ac>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_DMA_Init+0x5c2>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_DMA_Init+0x5c4>
 800209a:	2300      	movs	r3, #0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d032      	beq.n	8002106 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f002 fa43 	bl	800452c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b80      	cmp	r3, #128	; 0x80
 80020ac:	d102      	bne.n	80020b4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_DMA_Init+0x61c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d80c      	bhi.n	80020f4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f002 fac0 	bl	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	e008      	b.n	8002106 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	a7fdabf8 	.word	0xa7fdabf8
 8002124:	cccccccd 	.word	0xcccccccd
 8002128:	40020010 	.word	0x40020010
 800212c:	40020028 	.word	0x40020028
 8002130:	40020040 	.word	0x40020040
 8002134:	40020058 	.word	0x40020058
 8002138:	40020070 	.word	0x40020070
 800213c:	40020088 	.word	0x40020088
 8002140:	400200a0 	.word	0x400200a0
 8002144:	400200b8 	.word	0x400200b8
 8002148:	40020410 	.word	0x40020410
 800214c:	40020428 	.word	0x40020428
 8002150:	40020440 	.word	0x40020440
 8002154:	40020458 	.word	0x40020458
 8002158:	40020470 	.word	0x40020470
 800215c:	40020488 	.word	0x40020488
 8002160:	400204a0 	.word	0x400204a0
 8002164:	400204b8 	.word	0x400204b8
 8002168:	58025408 	.word	0x58025408
 800216c:	5802541c 	.word	0x5802541c
 8002170:	58025430 	.word	0x58025430
 8002174:	58025444 	.word	0x58025444
 8002178:	58025458 	.word	0x58025458
 800217c:	5802546c 	.word	0x5802546c
 8002180:	58025480 	.word	0x58025480
 8002184:	58025494 	.word	0x58025494

08002188 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
 8002194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e226      	b.n	80025f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_DMA_Start_IT+0x2a>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e21f      	b.n	80025f2 <HAL_DMA_Start_IT+0x46a>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	f040 820a 	bne.w	80025dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a68      	ldr	r2, [pc, #416]	; (800237c <HAL_DMA_Start_IT+0x1f4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04a      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a66      	ldr	r2, [pc, #408]	; (8002380 <HAL_DMA_Start_IT+0x1f8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d045      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a65      	ldr	r2, [pc, #404]	; (8002384 <HAL_DMA_Start_IT+0x1fc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d040      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a63      	ldr	r2, [pc, #396]	; (8002388 <HAL_DMA_Start_IT+0x200>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d03b      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a62      	ldr	r2, [pc, #392]	; (800238c <HAL_DMA_Start_IT+0x204>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d036      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a60      	ldr	r2, [pc, #384]	; (8002390 <HAL_DMA_Start_IT+0x208>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d031      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a5f      	ldr	r2, [pc, #380]	; (8002394 <HAL_DMA_Start_IT+0x20c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d02c      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a5d      	ldr	r2, [pc, #372]	; (8002398 <HAL_DMA_Start_IT+0x210>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d027      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5c      	ldr	r2, [pc, #368]	; (800239c <HAL_DMA_Start_IT+0x214>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a5a      	ldr	r2, [pc, #360]	; (80023a0 <HAL_DMA_Start_IT+0x218>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01d      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a59      	ldr	r2, [pc, #356]	; (80023a4 <HAL_DMA_Start_IT+0x21c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d018      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a57      	ldr	r2, [pc, #348]	; (80023a8 <HAL_DMA_Start_IT+0x220>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a56      	ldr	r2, [pc, #344]	; (80023ac <HAL_DMA_Start_IT+0x224>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a54      	ldr	r2, [pc, #336]	; (80023b0 <HAL_DMA_Start_IT+0x228>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a53      	ldr	r2, [pc, #332]	; (80023b4 <HAL_DMA_Start_IT+0x22c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Start_IT+0xee>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_DMA_Start_IT+0x230>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d108      	bne.n	8002288 <HAL_DMA_Start_IT+0x100>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e007      	b.n	8002298 <HAL_DMA_Start_IT+0x110>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f001 fe6a 	bl	8003f78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a34      	ldr	r2, [pc, #208]	; (800237c <HAL_DMA_Start_IT+0x1f4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d04a      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a33      	ldr	r2, [pc, #204]	; (8002380 <HAL_DMA_Start_IT+0x1f8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d045      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_DMA_Start_IT+0x1fc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d040      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a30      	ldr	r2, [pc, #192]	; (8002388 <HAL_DMA_Start_IT+0x200>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d03b      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2e      	ldr	r2, [pc, #184]	; (800238c <HAL_DMA_Start_IT+0x204>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d036      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <HAL_DMA_Start_IT+0x208>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d031      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <HAL_DMA_Start_IT+0x20c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02c      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <HAL_DMA_Start_IT+0x210>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d027      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a28      	ldr	r2, [pc, #160]	; (800239c <HAL_DMA_Start_IT+0x214>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d022      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_DMA_Start_IT+0x218>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d01d      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <HAL_DMA_Start_IT+0x21c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d018      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_DMA_Start_IT+0x220>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d013      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a22      	ldr	r2, [pc, #136]	; (80023ac <HAL_DMA_Start_IT+0x224>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00e      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <HAL_DMA_Start_IT+0x228>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_DMA_Start_IT+0x22c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_DMA_Start_IT+0x1bc>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <HAL_DMA_Start_IT+0x230>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_DMA_Start_IT+0x1c0>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_DMA_Start_IT+0x1c2>
 8002348:	2300      	movs	r3, #0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d036      	beq.n	80023bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 021e 	bic.w	r2, r3, #30
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0216 	orr.w	r2, r2, #22
 8002360:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03e      	beq.n	80023e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0208 	orr.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e035      	b.n	80023e8 <HAL_DMA_Start_IT+0x260>
 800237c:	40020010 	.word	0x40020010
 8002380:	40020028 	.word	0x40020028
 8002384:	40020040 	.word	0x40020040
 8002388:	40020058 	.word	0x40020058
 800238c:	40020070 	.word	0x40020070
 8002390:	40020088 	.word	0x40020088
 8002394:	400200a0 	.word	0x400200a0
 8002398:	400200b8 	.word	0x400200b8
 800239c:	40020410 	.word	0x40020410
 80023a0:	40020428 	.word	0x40020428
 80023a4:	40020440 	.word	0x40020440
 80023a8:	40020458 	.word	0x40020458
 80023ac:	40020470 	.word	0x40020470
 80023b0:	40020488 	.word	0x40020488
 80023b4:	400204a0 	.word	0x400204a0
 80023b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 020e 	bic.w	r2, r3, #14
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 020a 	orr.w	r2, r2, #10
 80023ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0204 	orr.w	r2, r2, #4
 80023e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a83      	ldr	r2, [pc, #524]	; (80025fc <HAL_DMA_Start_IT+0x474>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d072      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a82      	ldr	r2, [pc, #520]	; (8002600 <HAL_DMA_Start_IT+0x478>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d06d      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a80      	ldr	r2, [pc, #512]	; (8002604 <HAL_DMA_Start_IT+0x47c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d068      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a7f      	ldr	r2, [pc, #508]	; (8002608 <HAL_DMA_Start_IT+0x480>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d063      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a7d      	ldr	r2, [pc, #500]	; (800260c <HAL_DMA_Start_IT+0x484>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d05e      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7c      	ldr	r2, [pc, #496]	; (8002610 <HAL_DMA_Start_IT+0x488>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d059      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a7a      	ldr	r2, [pc, #488]	; (8002614 <HAL_DMA_Start_IT+0x48c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d054      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a79      	ldr	r2, [pc, #484]	; (8002618 <HAL_DMA_Start_IT+0x490>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d04f      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a77      	ldr	r2, [pc, #476]	; (800261c <HAL_DMA_Start_IT+0x494>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d04a      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a76      	ldr	r2, [pc, #472]	; (8002620 <HAL_DMA_Start_IT+0x498>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d045      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a74      	ldr	r2, [pc, #464]	; (8002624 <HAL_DMA_Start_IT+0x49c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d040      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a73      	ldr	r2, [pc, #460]	; (8002628 <HAL_DMA_Start_IT+0x4a0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d03b      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a71      	ldr	r2, [pc, #452]	; (800262c <HAL_DMA_Start_IT+0x4a4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d036      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a70      	ldr	r2, [pc, #448]	; (8002630 <HAL_DMA_Start_IT+0x4a8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d031      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6e      	ldr	r2, [pc, #440]	; (8002634 <HAL_DMA_Start_IT+0x4ac>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02c      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6d      	ldr	r2, [pc, #436]	; (8002638 <HAL_DMA_Start_IT+0x4b0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d027      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a6b      	ldr	r2, [pc, #428]	; (800263c <HAL_DMA_Start_IT+0x4b4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d022      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_DMA_Start_IT+0x4b8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d01d      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a68      	ldr	r2, [pc, #416]	; (8002644 <HAL_DMA_Start_IT+0x4bc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d018      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a67      	ldr	r2, [pc, #412]	; (8002648 <HAL_DMA_Start_IT+0x4c0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_DMA_Start_IT+0x4c4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00e      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a64      	ldr	r2, [pc, #400]	; (8002650 <HAL_DMA_Start_IT+0x4c8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d009      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a62      	ldr	r2, [pc, #392]	; (8002654 <HAL_DMA_Start_IT+0x4cc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_DMA_Start_IT+0x350>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a61      	ldr	r2, [pc, #388]	; (8002658 <HAL_DMA_Start_IT+0x4d0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_DMA_Start_IT+0x354>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_DMA_Start_IT+0x356>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01a      	beq.n	8002518 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002516:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a37      	ldr	r2, [pc, #220]	; (80025fc <HAL_DMA_Start_IT+0x474>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d04a      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a36      	ldr	r2, [pc, #216]	; (8002600 <HAL_DMA_Start_IT+0x478>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d045      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a34      	ldr	r2, [pc, #208]	; (8002604 <HAL_DMA_Start_IT+0x47c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d040      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a33      	ldr	r2, [pc, #204]	; (8002608 <HAL_DMA_Start_IT+0x480>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d03b      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a31      	ldr	r2, [pc, #196]	; (800260c <HAL_DMA_Start_IT+0x484>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d036      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a30      	ldr	r2, [pc, #192]	; (8002610 <HAL_DMA_Start_IT+0x488>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d031      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a2e      	ldr	r2, [pc, #184]	; (8002614 <HAL_DMA_Start_IT+0x48c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d02c      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a2d      	ldr	r2, [pc, #180]	; (8002618 <HAL_DMA_Start_IT+0x490>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d027      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a2b      	ldr	r2, [pc, #172]	; (800261c <HAL_DMA_Start_IT+0x494>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d022      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2a      	ldr	r2, [pc, #168]	; (8002620 <HAL_DMA_Start_IT+0x498>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d01d      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a28      	ldr	r2, [pc, #160]	; (8002624 <HAL_DMA_Start_IT+0x49c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d018      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a27      	ldr	r2, [pc, #156]	; (8002628 <HAL_DMA_Start_IT+0x4a0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d013      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a25      	ldr	r2, [pc, #148]	; (800262c <HAL_DMA_Start_IT+0x4a4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00e      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a24      	ldr	r2, [pc, #144]	; (8002630 <HAL_DMA_Start_IT+0x4a8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a22      	ldr	r2, [pc, #136]	; (8002634 <HAL_DMA_Start_IT+0x4ac>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_DMA_Start_IT+0x430>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a21      	ldr	r2, [pc, #132]	; (8002638 <HAL_DMA_Start_IT+0x4b0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d108      	bne.n	80025ca <HAL_DMA_Start_IT+0x442>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e012      	b.n	80025f0 <HAL_DMA_Start_IT+0x468>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e009      	b.n	80025f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40020010 	.word	0x40020010
 8002600:	40020028 	.word	0x40020028
 8002604:	40020040 	.word	0x40020040
 8002608:	40020058 	.word	0x40020058
 800260c:	40020070 	.word	0x40020070
 8002610:	40020088 	.word	0x40020088
 8002614:	400200a0 	.word	0x400200a0
 8002618:	400200b8 	.word	0x400200b8
 800261c:	40020410 	.word	0x40020410
 8002620:	40020428 	.word	0x40020428
 8002624:	40020440 	.word	0x40020440
 8002628:	40020458 	.word	0x40020458
 800262c:	40020470 	.word	0x40020470
 8002630:	40020488 	.word	0x40020488
 8002634:	400204a0 	.word	0x400204a0
 8002638:	400204b8 	.word	0x400204b8
 800263c:	58025408 	.word	0x58025408
 8002640:	5802541c 	.word	0x5802541c
 8002644:	58025430 	.word	0x58025430
 8002648:	58025444 	.word	0x58025444
 800264c:	58025458 	.word	0x58025458
 8002650:	5802546c 	.word	0x5802546c
 8002654:	58025480 	.word	0x58025480
 8002658:	58025494 	.word	0x58025494

0800265c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff f91c 	bl	80018a0 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e2dc      	b.n	8002c2e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d008      	beq.n	8002692 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e2cd      	b.n	8002c2e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a76      	ldr	r2, [pc, #472]	; (8002870 <HAL_DMA_Abort+0x214>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d04a      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a74      	ldr	r2, [pc, #464]	; (8002874 <HAL_DMA_Abort+0x218>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d045      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a73      	ldr	r2, [pc, #460]	; (8002878 <HAL_DMA_Abort+0x21c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d040      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a71      	ldr	r2, [pc, #452]	; (800287c <HAL_DMA_Abort+0x220>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d03b      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a70      	ldr	r2, [pc, #448]	; (8002880 <HAL_DMA_Abort+0x224>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d036      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_DMA_Abort+0x228>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d031      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6d      	ldr	r2, [pc, #436]	; (8002888 <HAL_DMA_Abort+0x22c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d02c      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6b      	ldr	r2, [pc, #428]	; (800288c <HAL_DMA_Abort+0x230>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d027      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a6a      	ldr	r2, [pc, #424]	; (8002890 <HAL_DMA_Abort+0x234>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a68      	ldr	r2, [pc, #416]	; (8002894 <HAL_DMA_Abort+0x238>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01d      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a67      	ldr	r2, [pc, #412]	; (8002898 <HAL_DMA_Abort+0x23c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d018      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_DMA_Abort+0x240>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a64      	ldr	r2, [pc, #400]	; (80028a0 <HAL_DMA_Abort+0x244>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a62      	ldr	r2, [pc, #392]	; (80028a4 <HAL_DMA_Abort+0x248>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <HAL_DMA_Abort+0x24c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_DMA_Abort+0xd6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a5f      	ldr	r2, [pc, #380]	; (80028ac <HAL_DMA_Abort+0x250>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_DMA_Abort+0xda>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_DMA_Abort+0xdc>
 8002736:	2300      	movs	r3, #0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 021e 	bic.w	r2, r2, #30
 800274a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800275a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e00a      	b.n	800277a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 020e 	bic.w	r2, r2, #14
 8002772:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a3c      	ldr	r2, [pc, #240]	; (8002870 <HAL_DMA_Abort+0x214>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d072      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a3a      	ldr	r2, [pc, #232]	; (8002874 <HAL_DMA_Abort+0x218>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d06d      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a39      	ldr	r2, [pc, #228]	; (8002878 <HAL_DMA_Abort+0x21c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d068      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a37      	ldr	r2, [pc, #220]	; (800287c <HAL_DMA_Abort+0x220>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d063      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a36      	ldr	r2, [pc, #216]	; (8002880 <HAL_DMA_Abort+0x224>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d05e      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a34      	ldr	r2, [pc, #208]	; (8002884 <HAL_DMA_Abort+0x228>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d059      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a33      	ldr	r2, [pc, #204]	; (8002888 <HAL_DMA_Abort+0x22c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d054      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a31      	ldr	r2, [pc, #196]	; (800288c <HAL_DMA_Abort+0x230>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04f      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a30      	ldr	r2, [pc, #192]	; (8002890 <HAL_DMA_Abort+0x234>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d04a      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <HAL_DMA_Abort+0x238>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d045      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <HAL_DMA_Abort+0x23c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d040      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a2b      	ldr	r2, [pc, #172]	; (800289c <HAL_DMA_Abort+0x240>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d03b      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_DMA_Abort+0x244>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d036      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <HAL_DMA_Abort+0x248>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d031      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_DMA_Abort+0x24c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d02c      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <HAL_DMA_Abort+0x250>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d027      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a24      	ldr	r2, [pc, #144]	; (80028b0 <HAL_DMA_Abort+0x254>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d022      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <HAL_DMA_Abort+0x258>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01d      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_DMA_Abort+0x25c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d018      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_DMA_Abort+0x260>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_DMA_Abort+0x264>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_DMA_Abort+0x268>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d009      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_DMA_Abort+0x26c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_DMA_Abort+0x20e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a19      	ldr	r2, [pc, #100]	; (80028cc <HAL_DMA_Abort+0x270>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d132      	bne.n	80028d0 <HAL_DMA_Abort+0x274>
 800286a:	2301      	movs	r3, #1
 800286c:	e031      	b.n	80028d2 <HAL_DMA_Abort+0x276>
 800286e:	bf00      	nop
 8002870:	40020010 	.word	0x40020010
 8002874:	40020028 	.word	0x40020028
 8002878:	40020040 	.word	0x40020040
 800287c:	40020058 	.word	0x40020058
 8002880:	40020070 	.word	0x40020070
 8002884:	40020088 	.word	0x40020088
 8002888:	400200a0 	.word	0x400200a0
 800288c:	400200b8 	.word	0x400200b8
 8002890:	40020410 	.word	0x40020410
 8002894:	40020428 	.word	0x40020428
 8002898:	40020440 	.word	0x40020440
 800289c:	40020458 	.word	0x40020458
 80028a0:	40020470 	.word	0x40020470
 80028a4:	40020488 	.word	0x40020488
 80028a8:	400204a0 	.word	0x400204a0
 80028ac:	400204b8 	.word	0x400204b8
 80028b0:	58025408 	.word	0x58025408
 80028b4:	5802541c 	.word	0x5802541c
 80028b8:	58025430 	.word	0x58025430
 80028bc:	58025444 	.word	0x58025444
 80028c0:	58025458 	.word	0x58025458
 80028c4:	5802546c 	.word	0x5802546c
 80028c8:	58025480 	.word	0x58025480
 80028cc:	58025494 	.word	0x58025494
 80028d0:	2300      	movs	r3, #0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a6d      	ldr	r2, [pc, #436]	; (8002aa0 <HAL_DMA_Abort+0x444>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d04a      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6b      	ldr	r2, [pc, #428]	; (8002aa4 <HAL_DMA_Abort+0x448>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d045      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a6a      	ldr	r2, [pc, #424]	; (8002aa8 <HAL_DMA_Abort+0x44c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d040      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a68      	ldr	r2, [pc, #416]	; (8002aac <HAL_DMA_Abort+0x450>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d03b      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a67      	ldr	r2, [pc, #412]	; (8002ab0 <HAL_DMA_Abort+0x454>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d036      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a65      	ldr	r2, [pc, #404]	; (8002ab4 <HAL_DMA_Abort+0x458>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d031      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a64      	ldr	r2, [pc, #400]	; (8002ab8 <HAL_DMA_Abort+0x45c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d02c      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a62      	ldr	r2, [pc, #392]	; (8002abc <HAL_DMA_Abort+0x460>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d027      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a61      	ldr	r2, [pc, #388]	; (8002ac0 <HAL_DMA_Abort+0x464>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d022      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a5f      	ldr	r2, [pc, #380]	; (8002ac4 <HAL_DMA_Abort+0x468>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01d      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a5e      	ldr	r2, [pc, #376]	; (8002ac8 <HAL_DMA_Abort+0x46c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d018      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5c      	ldr	r2, [pc, #368]	; (8002acc <HAL_DMA_Abort+0x470>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a5b      	ldr	r2, [pc, #364]	; (8002ad0 <HAL_DMA_Abort+0x474>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00e      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a59      	ldr	r2, [pc, #356]	; (8002ad4 <HAL_DMA_Abort+0x478>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_DMA_Abort+0x47c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d004      	beq.n	8002986 <HAL_DMA_Abort+0x32a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a56      	ldr	r2, [pc, #344]	; (8002adc <HAL_DMA_Abort+0x480>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d108      	bne.n	8002998 <HAL_DMA_Abort+0x33c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <HAL_DMA_Abort+0x34c>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029a8:	e013      	b.n	80029d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029aa:	f7fe ff79 	bl	80018a0 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d90c      	bls.n	80029d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2203      	movs	r2, #3
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e12d      	b.n	8002c2e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e5      	bne.n	80029aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <HAL_DMA_Abort+0x444>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d04a      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <HAL_DMA_Abort+0x448>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d045      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <HAL_DMA_Abort+0x44c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d040      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <HAL_DMA_Abort+0x450>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d03b      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <HAL_DMA_Abort+0x454>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d036      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <HAL_DMA_Abort+0x458>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d031      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <HAL_DMA_Abort+0x45c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d02c      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_DMA_Abort+0x460>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d027      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <HAL_DMA_Abort+0x464>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <HAL_DMA_Abort+0x468>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01d      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <HAL_DMA_Abort+0x46c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_DMA_Abort+0x470>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_DMA_Abort+0x474>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_DMA_Abort+0x478>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ad8 <HAL_DMA_Abort+0x47c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_DMA_Abort+0x422>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a18      	ldr	r2, [pc, #96]	; (8002adc <HAL_DMA_Abort+0x480>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_DMA_Abort+0x426>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_DMA_Abort+0x428>
 8002a82:	2300      	movs	r3, #0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02b      	beq.n	8002ae0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	223f      	movs	r2, #63	; 0x3f
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	e02a      	b.n	8002af6 <HAL_DMA_Abort+0x49a>
 8002aa0:	40020010 	.word	0x40020010
 8002aa4:	40020028 	.word	0x40020028
 8002aa8:	40020040 	.word	0x40020040
 8002aac:	40020058 	.word	0x40020058
 8002ab0:	40020070 	.word	0x40020070
 8002ab4:	40020088 	.word	0x40020088
 8002ab8:	400200a0 	.word	0x400200a0
 8002abc:	400200b8 	.word	0x400200b8
 8002ac0:	40020410 	.word	0x40020410
 8002ac4:	40020428 	.word	0x40020428
 8002ac8:	40020440 	.word	0x40020440
 8002acc:	40020458 	.word	0x40020458
 8002ad0:	40020470 	.word	0x40020470
 8002ad4:	40020488 	.word	0x40020488
 8002ad8:	400204a0 	.word	0x400204a0
 8002adc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	2201      	movs	r2, #1
 8002af0:	409a      	lsls	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a4f      	ldr	r2, [pc, #316]	; (8002c38 <HAL_DMA_Abort+0x5dc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d072      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a4d      	ldr	r2, [pc, #308]	; (8002c3c <HAL_DMA_Abort+0x5e0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d06d      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a4c      	ldr	r2, [pc, #304]	; (8002c40 <HAL_DMA_Abort+0x5e4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d068      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a4a      	ldr	r2, [pc, #296]	; (8002c44 <HAL_DMA_Abort+0x5e8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d063      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a49      	ldr	r2, [pc, #292]	; (8002c48 <HAL_DMA_Abort+0x5ec>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d05e      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a47      	ldr	r2, [pc, #284]	; (8002c4c <HAL_DMA_Abort+0x5f0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d059      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a46      	ldr	r2, [pc, #280]	; (8002c50 <HAL_DMA_Abort+0x5f4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d054      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a44      	ldr	r2, [pc, #272]	; (8002c54 <HAL_DMA_Abort+0x5f8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04f      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a43      	ldr	r2, [pc, #268]	; (8002c58 <HAL_DMA_Abort+0x5fc>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d04a      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a41      	ldr	r2, [pc, #260]	; (8002c5c <HAL_DMA_Abort+0x600>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d045      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a40      	ldr	r2, [pc, #256]	; (8002c60 <HAL_DMA_Abort+0x604>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d040      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a3e      	ldr	r2, [pc, #248]	; (8002c64 <HAL_DMA_Abort+0x608>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d03b      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a3d      	ldr	r2, [pc, #244]	; (8002c68 <HAL_DMA_Abort+0x60c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d036      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3b      	ldr	r2, [pc, #236]	; (8002c6c <HAL_DMA_Abort+0x610>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d031      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a3a      	ldr	r2, [pc, #232]	; (8002c70 <HAL_DMA_Abort+0x614>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d02c      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a38      	ldr	r2, [pc, #224]	; (8002c74 <HAL_DMA_Abort+0x618>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d027      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a37      	ldr	r2, [pc, #220]	; (8002c78 <HAL_DMA_Abort+0x61c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d022      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a35      	ldr	r2, [pc, #212]	; (8002c7c <HAL_DMA_Abort+0x620>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01d      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a34      	ldr	r2, [pc, #208]	; (8002c80 <HAL_DMA_Abort+0x624>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d018      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a32      	ldr	r2, [pc, #200]	; (8002c84 <HAL_DMA_Abort+0x628>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a31      	ldr	r2, [pc, #196]	; (8002c88 <HAL_DMA_Abort+0x62c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00e      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2f      	ldr	r2, [pc, #188]	; (8002c8c <HAL_DMA_Abort+0x630>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d009      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2e      	ldr	r2, [pc, #184]	; (8002c90 <HAL_DMA_Abort+0x634>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_DMA_Abort+0x58a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2c      	ldr	r2, [pc, #176]	; (8002c94 <HAL_DMA_Abort+0x638>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_DMA_Abort+0x58e>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_DMA_Abort+0x590>
 8002bea:	2300      	movs	r3, #0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d015      	beq.n	8002c1c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bf8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c10:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c1a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40020010 	.word	0x40020010
 8002c3c:	40020028 	.word	0x40020028
 8002c40:	40020040 	.word	0x40020040
 8002c44:	40020058 	.word	0x40020058
 8002c48:	40020070 	.word	0x40020070
 8002c4c:	40020088 	.word	0x40020088
 8002c50:	400200a0 	.word	0x400200a0
 8002c54:	400200b8 	.word	0x400200b8
 8002c58:	40020410 	.word	0x40020410
 8002c5c:	40020428 	.word	0x40020428
 8002c60:	40020440 	.word	0x40020440
 8002c64:	40020458 	.word	0x40020458
 8002c68:	40020470 	.word	0x40020470
 8002c6c:	40020488 	.word	0x40020488
 8002c70:	400204a0 	.word	0x400204a0
 8002c74:	400204b8 	.word	0x400204b8
 8002c78:	58025408 	.word	0x58025408
 8002c7c:	5802541c 	.word	0x5802541c
 8002c80:	58025430 	.word	0x58025430
 8002c84:	58025444 	.word	0x58025444
 8002c88:	58025458 	.word	0x58025458
 8002c8c:	5802546c 	.word	0x5802546c
 8002c90:	58025480 	.word	0x58025480
 8002c94:	58025494 	.word	0x58025494

08002c98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e237      	b.n	800311a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e22c      	b.n	800311a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5c      	ldr	r2, [pc, #368]	; (8002e38 <HAL_DMA_Abort_IT+0x1a0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d04a      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5b      	ldr	r2, [pc, #364]	; (8002e3c <HAL_DMA_Abort_IT+0x1a4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d045      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a59      	ldr	r2, [pc, #356]	; (8002e40 <HAL_DMA_Abort_IT+0x1a8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d040      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a58      	ldr	r2, [pc, #352]	; (8002e44 <HAL_DMA_Abort_IT+0x1ac>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d03b      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a56      	ldr	r2, [pc, #344]	; (8002e48 <HAL_DMA_Abort_IT+0x1b0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d036      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a55      	ldr	r2, [pc, #340]	; (8002e4c <HAL_DMA_Abort_IT+0x1b4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d031      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a53      	ldr	r2, [pc, #332]	; (8002e50 <HAL_DMA_Abort_IT+0x1b8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d02c      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_DMA_Abort_IT+0x1bc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d027      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a50      	ldr	r2, [pc, #320]	; (8002e58 <HAL_DMA_Abort_IT+0x1c0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d022      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a4f      	ldr	r2, [pc, #316]	; (8002e5c <HAL_DMA_Abort_IT+0x1c4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d01d      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a4d      	ldr	r2, [pc, #308]	; (8002e60 <HAL_DMA_Abort_IT+0x1c8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d018      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a4c      	ldr	r2, [pc, #304]	; (8002e64 <HAL_DMA_Abort_IT+0x1cc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a4a      	ldr	r2, [pc, #296]	; (8002e68 <HAL_DMA_Abort_IT+0x1d0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00e      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a49      	ldr	r2, [pc, #292]	; (8002e6c <HAL_DMA_Abort_IT+0x1d4>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d009      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_DMA_Abort_IT+0x1d8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a46      	ldr	r2, [pc, #280]	; (8002e74 <HAL_DMA_Abort_IT+0x1dc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_DMA_Abort_IT+0xcc>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_DMA_Abort_IT+0xce>
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8086 	beq.w	8002e78 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <HAL_DMA_Abort_IT+0x1a0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d04a      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2e      	ldr	r2, [pc, #184]	; (8002e3c <HAL_DMA_Abort_IT+0x1a4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d045      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	; (8002e40 <HAL_DMA_Abort_IT+0x1a8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d040      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2b      	ldr	r2, [pc, #172]	; (8002e44 <HAL_DMA_Abort_IT+0x1ac>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d03b      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <HAL_DMA_Abort_IT+0x1b0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d036      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a28      	ldr	r2, [pc, #160]	; (8002e4c <HAL_DMA_Abort_IT+0x1b4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d031      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <HAL_DMA_Abort_IT+0x1b8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d02c      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <HAL_DMA_Abort_IT+0x1bc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d027      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a23      	ldr	r2, [pc, #140]	; (8002e58 <HAL_DMA_Abort_IT+0x1c0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d022      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <HAL_DMA_Abort_IT+0x1c4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d01d      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a20      	ldr	r2, [pc, #128]	; (8002e60 <HAL_DMA_Abort_IT+0x1c8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d018      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <HAL_DMA_Abort_IT+0x1cc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <HAL_DMA_Abort_IT+0x1d0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00e      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <HAL_DMA_Abort_IT+0x1d4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d009      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <HAL_DMA_Abort_IT+0x1d8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x17c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <HAL_DMA_Abort_IT+0x1dc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d108      	bne.n	8002e26 <HAL_DMA_Abort_IT+0x18e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e178      	b.n	8003118 <HAL_DMA_Abort_IT+0x480>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e16f      	b.n	8003118 <HAL_DMA_Abort_IT+0x480>
 8002e38:	40020010 	.word	0x40020010
 8002e3c:	40020028 	.word	0x40020028
 8002e40:	40020040 	.word	0x40020040
 8002e44:	40020058 	.word	0x40020058
 8002e48:	40020070 	.word	0x40020070
 8002e4c:	40020088 	.word	0x40020088
 8002e50:	400200a0 	.word	0x400200a0
 8002e54:	400200b8 	.word	0x400200b8
 8002e58:	40020410 	.word	0x40020410
 8002e5c:	40020428 	.word	0x40020428
 8002e60:	40020440 	.word	0x40020440
 8002e64:	40020458 	.word	0x40020458
 8002e68:	40020470 	.word	0x40020470
 8002e6c:	40020488 	.word	0x40020488
 8002e70:	400204a0 	.word	0x400204a0
 8002e74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 020e 	bic.w	r2, r2, #14
 8002e86:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6c      	ldr	r2, [pc, #432]	; (8003040 <HAL_DMA_Abort_IT+0x3a8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d04a      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a6b      	ldr	r2, [pc, #428]	; (8003044 <HAL_DMA_Abort_IT+0x3ac>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d045      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a69      	ldr	r2, [pc, #420]	; (8003048 <HAL_DMA_Abort_IT+0x3b0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d040      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a68      	ldr	r2, [pc, #416]	; (800304c <HAL_DMA_Abort_IT+0x3b4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d03b      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a66      	ldr	r2, [pc, #408]	; (8003050 <HAL_DMA_Abort_IT+0x3b8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d036      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a65      	ldr	r2, [pc, #404]	; (8003054 <HAL_DMA_Abort_IT+0x3bc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d031      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a63      	ldr	r2, [pc, #396]	; (8003058 <HAL_DMA_Abort_IT+0x3c0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02c      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a62      	ldr	r2, [pc, #392]	; (800305c <HAL_DMA_Abort_IT+0x3c4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d027      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a60      	ldr	r2, [pc, #384]	; (8003060 <HAL_DMA_Abort_IT+0x3c8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d022      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5f      	ldr	r2, [pc, #380]	; (8003064 <HAL_DMA_Abort_IT+0x3cc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d01d      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a5d      	ldr	r2, [pc, #372]	; (8003068 <HAL_DMA_Abort_IT+0x3d0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d018      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5c      	ldr	r2, [pc, #368]	; (800306c <HAL_DMA_Abort_IT+0x3d4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5a      	ldr	r2, [pc, #360]	; (8003070 <HAL_DMA_Abort_IT+0x3d8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00e      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a59      	ldr	r2, [pc, #356]	; (8003074 <HAL_DMA_Abort_IT+0x3dc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d009      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a57      	ldr	r2, [pc, #348]	; (8003078 <HAL_DMA_Abort_IT+0x3e0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x290>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_DMA_Abort_IT+0x3e4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d108      	bne.n	8002f3a <HAL_DMA_Abort_IT+0x2a2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e007      	b.n	8002f4a <HAL_DMA_Abort_IT+0x2b2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <HAL_DMA_Abort_IT+0x3a8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d072      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a3a      	ldr	r2, [pc, #232]	; (8003044 <HAL_DMA_Abort_IT+0x3ac>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d06d      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a39      	ldr	r2, [pc, #228]	; (8003048 <HAL_DMA_Abort_IT+0x3b0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d068      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a37      	ldr	r2, [pc, #220]	; (800304c <HAL_DMA_Abort_IT+0x3b4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d063      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a36      	ldr	r2, [pc, #216]	; (8003050 <HAL_DMA_Abort_IT+0x3b8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d05e      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a34      	ldr	r2, [pc, #208]	; (8003054 <HAL_DMA_Abort_IT+0x3bc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d059      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a33      	ldr	r2, [pc, #204]	; (8003058 <HAL_DMA_Abort_IT+0x3c0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d054      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a31      	ldr	r2, [pc, #196]	; (800305c <HAL_DMA_Abort_IT+0x3c4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d04f      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a30      	ldr	r2, [pc, #192]	; (8003060 <HAL_DMA_Abort_IT+0x3c8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d04a      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2e      	ldr	r2, [pc, #184]	; (8003064 <HAL_DMA_Abort_IT+0x3cc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d045      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <HAL_DMA_Abort_IT+0x3d0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d040      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	; (800306c <HAL_DMA_Abort_IT+0x3d4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d03b      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2a      	ldr	r2, [pc, #168]	; (8003070 <HAL_DMA_Abort_IT+0x3d8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d036      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <HAL_DMA_Abort_IT+0x3dc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_DMA_Abort_IT+0x3e0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d02c      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a25      	ldr	r2, [pc, #148]	; (800307c <HAL_DMA_Abort_IT+0x3e4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d027      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a24      	ldr	r2, [pc, #144]	; (8003080 <HAL_DMA_Abort_IT+0x3e8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a22      	ldr	r2, [pc, #136]	; (8003084 <HAL_DMA_Abort_IT+0x3ec>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01d      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a21      	ldr	r2, [pc, #132]	; (8003088 <HAL_DMA_Abort_IT+0x3f0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d018      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1f      	ldr	r2, [pc, #124]	; (800308c <HAL_DMA_Abort_IT+0x3f4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <HAL_DMA_Abort_IT+0x3f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00e      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_DMA_Abort_IT+0x3fc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <HAL_DMA_Abort_IT+0x400>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_DMA_Abort_IT+0x3a2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a19      	ldr	r2, [pc, #100]	; (800309c <HAL_DMA_Abort_IT+0x404>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d132      	bne.n	80030a0 <HAL_DMA_Abort_IT+0x408>
 800303a:	2301      	movs	r3, #1
 800303c:	e031      	b.n	80030a2 <HAL_DMA_Abort_IT+0x40a>
 800303e:	bf00      	nop
 8003040:	40020010 	.word	0x40020010
 8003044:	40020028 	.word	0x40020028
 8003048:	40020040 	.word	0x40020040
 800304c:	40020058 	.word	0x40020058
 8003050:	40020070 	.word	0x40020070
 8003054:	40020088 	.word	0x40020088
 8003058:	400200a0 	.word	0x400200a0
 800305c:	400200b8 	.word	0x400200b8
 8003060:	40020410 	.word	0x40020410
 8003064:	40020428 	.word	0x40020428
 8003068:	40020440 	.word	0x40020440
 800306c:	40020458 	.word	0x40020458
 8003070:	40020470 	.word	0x40020470
 8003074:	40020488 	.word	0x40020488
 8003078:	400204a0 	.word	0x400204a0
 800307c:	400204b8 	.word	0x400204b8
 8003080:	58025408 	.word	0x58025408
 8003084:	5802541c 	.word	0x5802541c
 8003088:	58025430 	.word	0x58025430
 800308c:	58025444 	.word	0x58025444
 8003090:	58025458 	.word	0x58025458
 8003094:	5802546c 	.word	0x5802546c
 8003098:	58025480 	.word	0x58025480
 800309c:	58025494 	.word	0x58025494
 80030a0:	2300      	movs	r3, #0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d028      	beq.n	80030f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	2201      	movs	r2, #1
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop

08003124 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003130:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_DMA_IRQHandler+0x1ac>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a67      	ldr	r2, [pc, #412]	; (80032d4 <HAL_DMA_IRQHandler+0x1b0>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5f      	ldr	r2, [pc, #380]	; (80032d8 <HAL_DMA_IRQHandler+0x1b4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d04a      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5d      	ldr	r2, [pc, #372]	; (80032dc <HAL_DMA_IRQHandler+0x1b8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d045      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a5c      	ldr	r2, [pc, #368]	; (80032e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d040      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a5a      	ldr	r2, [pc, #360]	; (80032e4 <HAL_DMA_IRQHandler+0x1c0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d03b      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a59      	ldr	r2, [pc, #356]	; (80032e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d036      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_DMA_IRQHandler+0x1c8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d031      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_DMA_IRQHandler+0x1cc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d02c      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a54      	ldr	r2, [pc, #336]	; (80032f4 <HAL_DMA_IRQHandler+0x1d0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d027      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a53      	ldr	r2, [pc, #332]	; (80032f8 <HAL_DMA_IRQHandler+0x1d4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a51      	ldr	r2, [pc, #324]	; (80032fc <HAL_DMA_IRQHandler+0x1d8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a50      	ldr	r2, [pc, #320]	; (8003300 <HAL_DMA_IRQHandler+0x1dc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d018      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a4e      	ldr	r2, [pc, #312]	; (8003304 <HAL_DMA_IRQHandler+0x1e0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a4d      	ldr	r2, [pc, #308]	; (8003308 <HAL_DMA_IRQHandler+0x1e4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	; (800330c <HAL_DMA_IRQHandler+0x1e8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_DMA_IRQHandler+0x1ec>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xd2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a48      	ldr	r2, [pc, #288]	; (8003314 <HAL_DMA_IRQHandler+0x1f0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_DMA_IRQHandler+0xd6>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_DMA_IRQHandler+0xd8>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 842b 	beq.w	8003a58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2208      	movs	r2, #8
 800320c:	409a      	lsls	r2, r3
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80a2 	beq.w	800335c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2e      	ldr	r2, [pc, #184]	; (80032d8 <HAL_DMA_IRQHandler+0x1b4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d04a      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2d      	ldr	r2, [pc, #180]	; (80032dc <HAL_DMA_IRQHandler+0x1b8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d045      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d040      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <HAL_DMA_IRQHandler+0x1c0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d03b      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a28      	ldr	r2, [pc, #160]	; (80032e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d036      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a27      	ldr	r2, [pc, #156]	; (80032ec <HAL_DMA_IRQHandler+0x1c8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d031      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <HAL_DMA_IRQHandler+0x1cc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d02c      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <HAL_DMA_IRQHandler+0x1d0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d027      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_DMA_IRQHandler+0x1d4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d022      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a21      	ldr	r2, [pc, #132]	; (80032fc <HAL_DMA_IRQHandler+0x1d8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d01d      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_DMA_IRQHandler+0x1dc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d018      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_DMA_IRQHandler+0x1e0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_DMA_IRQHandler+0x1e4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00e      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_DMA_IRQHandler+0x1e8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d009      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_DMA_IRQHandler+0x1ec>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x194>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_DMA_IRQHandler+0x1f0>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d12f      	bne.n	8003318 <HAL_DMA_IRQHandler+0x1f4>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	e02e      	b.n	800332c <HAL_DMA_IRQHandler+0x208>
 80032ce:	bf00      	nop
 80032d0:	24000004 	.word	0x24000004
 80032d4:	1b4e81b5 	.word	0x1b4e81b5
 80032d8:	40020010 	.word	0x40020010
 80032dc:	40020028 	.word	0x40020028
 80032e0:	40020040 	.word	0x40020040
 80032e4:	40020058 	.word	0x40020058
 80032e8:	40020070 	.word	0x40020070
 80032ec:	40020088 	.word	0x40020088
 80032f0:	400200a0 	.word	0x400200a0
 80032f4:	400200b8 	.word	0x400200b8
 80032f8:	40020410 	.word	0x40020410
 80032fc:	40020428 	.word	0x40020428
 8003300:	40020440 	.word	0x40020440
 8003304:	40020458 	.word	0x40020458
 8003308:	40020470 	.word	0x40020470
 800330c:	40020488 	.word	0x40020488
 8003310:	400204a0 	.word	0x400204a0
 8003314:	400204b8 	.word	0x400204b8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d015      	beq.n	800335c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0204 	bic.w	r2, r2, #4
 800333e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	2208      	movs	r2, #8
 800334a:	409a      	lsls	r2, r3
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	fa22 f303 	lsr.w	r3, r2, r3
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d06e      	beq.n	8003450 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a69      	ldr	r2, [pc, #420]	; (800351c <HAL_DMA_IRQHandler+0x3f8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d04a      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a67      	ldr	r2, [pc, #412]	; (8003520 <HAL_DMA_IRQHandler+0x3fc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d045      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a66      	ldr	r2, [pc, #408]	; (8003524 <HAL_DMA_IRQHandler+0x400>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d040      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a64      	ldr	r2, [pc, #400]	; (8003528 <HAL_DMA_IRQHandler+0x404>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d03b      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a63      	ldr	r2, [pc, #396]	; (800352c <HAL_DMA_IRQHandler+0x408>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d036      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a61      	ldr	r2, [pc, #388]	; (8003530 <HAL_DMA_IRQHandler+0x40c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d031      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a60      	ldr	r2, [pc, #384]	; (8003534 <HAL_DMA_IRQHandler+0x410>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d02c      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a5e      	ldr	r2, [pc, #376]	; (8003538 <HAL_DMA_IRQHandler+0x414>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d027      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a5d      	ldr	r2, [pc, #372]	; (800353c <HAL_DMA_IRQHandler+0x418>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a5b      	ldr	r2, [pc, #364]	; (8003540 <HAL_DMA_IRQHandler+0x41c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5a      	ldr	r2, [pc, #360]	; (8003544 <HAL_DMA_IRQHandler+0x420>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a58      	ldr	r2, [pc, #352]	; (8003548 <HAL_DMA_IRQHandler+0x424>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a57      	ldr	r2, [pc, #348]	; (800354c <HAL_DMA_IRQHandler+0x428>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a55      	ldr	r2, [pc, #340]	; (8003550 <HAL_DMA_IRQHandler+0x42c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a54      	ldr	r2, [pc, #336]	; (8003554 <HAL_DMA_IRQHandler+0x430>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_DMA_IRQHandler+0x2ee>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_DMA_IRQHandler+0x434>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10a      	bne.n	8003428 <HAL_DMA_IRQHandler+0x304>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e003      	b.n	8003430 <HAL_DMA_IRQHandler+0x30c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2201      	movs	r2, #1
 800343e:	409a      	lsls	r2, r3
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003448:	f043 0202 	orr.w	r2, r3, #2
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2204      	movs	r2, #4
 800345a:	409a      	lsls	r2, r3
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 808f 	beq.w	8003584 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2c      	ldr	r2, [pc, #176]	; (800351c <HAL_DMA_IRQHandler+0x3f8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d04a      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <HAL_DMA_IRQHandler+0x3fc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d045      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a29      	ldr	r2, [pc, #164]	; (8003524 <HAL_DMA_IRQHandler+0x400>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d040      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <HAL_DMA_IRQHandler+0x404>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d03b      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a26      	ldr	r2, [pc, #152]	; (800352c <HAL_DMA_IRQHandler+0x408>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d036      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <HAL_DMA_IRQHandler+0x40c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d031      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a23      	ldr	r2, [pc, #140]	; (8003534 <HAL_DMA_IRQHandler+0x410>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d02c      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a21      	ldr	r2, [pc, #132]	; (8003538 <HAL_DMA_IRQHandler+0x414>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d027      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a20      	ldr	r2, [pc, #128]	; (800353c <HAL_DMA_IRQHandler+0x418>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d022      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <HAL_DMA_IRQHandler+0x41c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d01d      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_DMA_IRQHandler+0x420>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d018      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <HAL_DMA_IRQHandler+0x424>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1a      	ldr	r2, [pc, #104]	; (800354c <HAL_DMA_IRQHandler+0x428>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_DMA_IRQHandler+0x42c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a17      	ldr	r2, [pc, #92]	; (8003554 <HAL_DMA_IRQHandler+0x430>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_DMA_IRQHandler+0x3e2>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a15      	ldr	r2, [pc, #84]	; (8003558 <HAL_DMA_IRQHandler+0x434>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d12a      	bne.n	800355c <HAL_DMA_IRQHandler+0x438>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e023      	b.n	8003564 <HAL_DMA_IRQHandler+0x440>
 800351c:	40020010 	.word	0x40020010
 8003520:	40020028 	.word	0x40020028
 8003524:	40020040 	.word	0x40020040
 8003528:	40020058 	.word	0x40020058
 800352c:	40020070 	.word	0x40020070
 8003530:	40020088 	.word	0x40020088
 8003534:	400200a0 	.word	0x400200a0
 8003538:	400200b8 	.word	0x400200b8
 800353c:	40020410 	.word	0x40020410
 8003540:	40020428 	.word	0x40020428
 8003544:	40020440 	.word	0x40020440
 8003548:	40020458 	.word	0x40020458
 800354c:	40020470 	.word	0x40020470
 8003550:	40020488 	.word	0x40020488
 8003554:	400204a0 	.word	0x400204a0
 8003558:	400204b8 	.word	0x400204b8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	2204      	movs	r2, #4
 8003572:	409a      	lsls	r2, r3
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f043 0204 	orr.w	r2, r3, #4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2210      	movs	r2, #16
 800358e:	409a      	lsls	r2, r3
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a6 	beq.w	80036e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a85      	ldr	r2, [pc, #532]	; (80037b4 <HAL_DMA_IRQHandler+0x690>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04a      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a83      	ldr	r2, [pc, #524]	; (80037b8 <HAL_DMA_IRQHandler+0x694>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d045      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a82      	ldr	r2, [pc, #520]	; (80037bc <HAL_DMA_IRQHandler+0x698>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d040      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a80      	ldr	r2, [pc, #512]	; (80037c0 <HAL_DMA_IRQHandler+0x69c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d03b      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7f      	ldr	r2, [pc, #508]	; (80037c4 <HAL_DMA_IRQHandler+0x6a0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d036      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a7d      	ldr	r2, [pc, #500]	; (80037c8 <HAL_DMA_IRQHandler+0x6a4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d031      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7c      	ldr	r2, [pc, #496]	; (80037cc <HAL_DMA_IRQHandler+0x6a8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d02c      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a7a      	ldr	r2, [pc, #488]	; (80037d0 <HAL_DMA_IRQHandler+0x6ac>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d027      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a79      	ldr	r2, [pc, #484]	; (80037d4 <HAL_DMA_IRQHandler+0x6b0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d022      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a77      	ldr	r2, [pc, #476]	; (80037d8 <HAL_DMA_IRQHandler+0x6b4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01d      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a76      	ldr	r2, [pc, #472]	; (80037dc <HAL_DMA_IRQHandler+0x6b8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d018      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a74      	ldr	r2, [pc, #464]	; (80037e0 <HAL_DMA_IRQHandler+0x6bc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a73      	ldr	r2, [pc, #460]	; (80037e4 <HAL_DMA_IRQHandler+0x6c0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a71      	ldr	r2, [pc, #452]	; (80037e8 <HAL_DMA_IRQHandler+0x6c4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a70      	ldr	r2, [pc, #448]	; (80037ec <HAL_DMA_IRQHandler+0x6c8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_DMA_IRQHandler+0x516>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a6e      	ldr	r2, [pc, #440]	; (80037f0 <HAL_DMA_IRQHandler+0x6cc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10a      	bne.n	8003650 <HAL_DMA_IRQHandler+0x52c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e009      	b.n	8003664 <HAL_DMA_IRQHandler+0x540>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d03e      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2210      	movs	r2, #16
 8003672:	409a      	lsls	r2, r3
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d018      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d108      	bne.n	80036a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d024      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	4798      	blx	r3
 80036a4:	e01f      	b.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01b      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
 80036b6:	e016      	b.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d107      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0208 	bic.w	r2, r2, #8
 80036d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2220      	movs	r2, #32
 80036f0:	409a      	lsls	r2, r3
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8110 	beq.w	800391c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <HAL_DMA_IRQHandler+0x690>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d04a      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <HAL_DMA_IRQHandler+0x694>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d045      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a29      	ldr	r2, [pc, #164]	; (80037bc <HAL_DMA_IRQHandler+0x698>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d040      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <HAL_DMA_IRQHandler+0x69c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d03b      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <HAL_DMA_IRQHandler+0x6a0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d036      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <HAL_DMA_IRQHandler+0x6a4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d031      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_DMA_IRQHandler+0x6a8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02c      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <HAL_DMA_IRQHandler+0x6ac>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d027      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <HAL_DMA_IRQHandler+0x6b0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d022      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <HAL_DMA_IRQHandler+0x6b4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d01d      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <HAL_DMA_IRQHandler+0x6b8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d018      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <HAL_DMA_IRQHandler+0x6bc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1a      	ldr	r2, [pc, #104]	; (80037e4 <HAL_DMA_IRQHandler+0x6c0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00e      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_DMA_IRQHandler+0x6c4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_DMA_IRQHandler+0x6c8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_DMA_IRQHandler+0x678>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <HAL_DMA_IRQHandler+0x6cc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d12b      	bne.n	80037f4 <HAL_DMA_IRQHandler+0x6d0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e02a      	b.n	8003808 <HAL_DMA_IRQHandler+0x6e4>
 80037b2:	bf00      	nop
 80037b4:	40020010 	.word	0x40020010
 80037b8:	40020028 	.word	0x40020028
 80037bc:	40020040 	.word	0x40020040
 80037c0:	40020058 	.word	0x40020058
 80037c4:	40020070 	.word	0x40020070
 80037c8:	40020088 	.word	0x40020088
 80037cc:	400200a0 	.word	0x400200a0
 80037d0:	400200b8 	.word	0x400200b8
 80037d4:	40020410 	.word	0x40020410
 80037d8:	40020428 	.word	0x40020428
 80037dc:	40020440 	.word	0x40020440
 80037e0:	40020458 	.word	0x40020458
 80037e4:	40020470 	.word	0x40020470
 80037e8:	40020488 	.word	0x40020488
 80037ec:	400204a0 	.word	0x400204a0
 80037f0:	400204b8 	.word	0x400204b8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8087 	beq.w	800391c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2220      	movs	r2, #32
 8003818:	409a      	lsls	r2, r3
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b04      	cmp	r3, #4
 8003828:	d139      	bne.n	800389e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0216 	bic.w	r2, r2, #22
 8003838:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003848:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_DMA_IRQHandler+0x736>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0208 	bic.w	r2, r2, #8
 8003868:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	223f      	movs	r2, #63	; 0x3f
 8003874:	409a      	lsls	r2, r3
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 834a 	beq.w	8003f28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
          }
          return;
 800389c:	e344      	b.n	8003f28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d018      	beq.n	80038de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d108      	bne.n	80038cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d02c      	beq.n	800391c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
 80038ca:	e027      	b.n	800391c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d023      	beq.n	800391c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
 80038dc:	e01e      	b.n	800391c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10f      	bne.n	800390c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0210 	bic.w	r2, r2, #16
 80038fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8306 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8088 	beq.w	8003a44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2204      	movs	r2, #4
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a7a      	ldr	r2, [pc, #488]	; (8003b2c <HAL_DMA_IRQHandler+0xa08>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d04a      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a79      	ldr	r2, [pc, #484]	; (8003b30 <HAL_DMA_IRQHandler+0xa0c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d045      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a77      	ldr	r2, [pc, #476]	; (8003b34 <HAL_DMA_IRQHandler+0xa10>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d040      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a76      	ldr	r2, [pc, #472]	; (8003b38 <HAL_DMA_IRQHandler+0xa14>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d03b      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a74      	ldr	r2, [pc, #464]	; (8003b3c <HAL_DMA_IRQHandler+0xa18>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d036      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a73      	ldr	r2, [pc, #460]	; (8003b40 <HAL_DMA_IRQHandler+0xa1c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d031      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a71      	ldr	r2, [pc, #452]	; (8003b44 <HAL_DMA_IRQHandler+0xa20>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a70      	ldr	r2, [pc, #448]	; (8003b48 <HAL_DMA_IRQHandler+0xa24>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d027      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6e      	ldr	r2, [pc, #440]	; (8003b4c <HAL_DMA_IRQHandler+0xa28>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6d      	ldr	r2, [pc, #436]	; (8003b50 <HAL_DMA_IRQHandler+0xa2c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d01d      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a6b      	ldr	r2, [pc, #428]	; (8003b54 <HAL_DMA_IRQHandler+0xa30>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6a      	ldr	r2, [pc, #424]	; (8003b58 <HAL_DMA_IRQHandler+0xa34>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a68      	ldr	r2, [pc, #416]	; (8003b5c <HAL_DMA_IRQHandler+0xa38>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a67      	ldr	r2, [pc, #412]	; (8003b60 <HAL_DMA_IRQHandler+0xa3c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a65      	ldr	r2, [pc, #404]	; (8003b64 <HAL_DMA_IRQHandler+0xa40>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_IRQHandler+0x8b8>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a64      	ldr	r2, [pc, #400]	; (8003b68 <HAL_DMA_IRQHandler+0xa44>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d108      	bne.n	80039ee <HAL_DMA_IRQHandler+0x8ca>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e007      	b.n	80039fe <HAL_DMA_IRQHandler+0x8da>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d307      	bcc.n	8003a1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f2      	bne.n	80039fe <HAL_DMA_IRQHandler+0x8da>
 8003a18:	e000      	b.n	8003a1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a32:	e003      	b.n	8003a3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8272 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
 8003a56:	e26c      	b.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a43      	ldr	r2, [pc, #268]	; (8003b6c <HAL_DMA_IRQHandler+0xa48>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a42      	ldr	r2, [pc, #264]	; (8003b70 <HAL_DMA_IRQHandler+0xa4c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d01d      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <HAL_DMA_IRQHandler+0xa50>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d018      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <HAL_DMA_IRQHandler+0xa54>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a3d      	ldr	r2, [pc, #244]	; (8003b7c <HAL_DMA_IRQHandler+0xa58>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a3c      	ldr	r2, [pc, #240]	; (8003b80 <HAL_DMA_IRQHandler+0xa5c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d009      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3a      	ldr	r2, [pc, #232]	; (8003b84 <HAL_DMA_IRQHandler+0xa60>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x984>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a39      	ldr	r2, [pc, #228]	; (8003b88 <HAL_DMA_IRQHandler+0xa64>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_DMA_IRQHandler+0x988>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_DMA_IRQHandler+0x98a>
 8003aac:	2300      	movs	r3, #0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 823f 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80cd 	beq.w	8003c6c <HAL_DMA_IRQHandler+0xb48>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80c7 	beq.w	8003c6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d049      	beq.n	8003b8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8210 	beq.w	8003f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b14:	e20a      	b.n	8003f2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 8206 	beq.w	8003f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b28:	e200      	b.n	8003f2c <HAL_DMA_IRQHandler+0xe08>
 8003b2a:	bf00      	nop
 8003b2c:	40020010 	.word	0x40020010
 8003b30:	40020028 	.word	0x40020028
 8003b34:	40020040 	.word	0x40020040
 8003b38:	40020058 	.word	0x40020058
 8003b3c:	40020070 	.word	0x40020070
 8003b40:	40020088 	.word	0x40020088
 8003b44:	400200a0 	.word	0x400200a0
 8003b48:	400200b8 	.word	0x400200b8
 8003b4c:	40020410 	.word	0x40020410
 8003b50:	40020428 	.word	0x40020428
 8003b54:	40020440 	.word	0x40020440
 8003b58:	40020458 	.word	0x40020458
 8003b5c:	40020470 	.word	0x40020470
 8003b60:	40020488 	.word	0x40020488
 8003b64:	400204a0 	.word	0x400204a0
 8003b68:	400204b8 	.word	0x400204b8
 8003b6c:	58025408 	.word	0x58025408
 8003b70:	5802541c 	.word	0x5802541c
 8003b74:	58025430 	.word	0x58025430
 8003b78:	58025444 	.word	0x58025444
 8003b7c:	58025458 	.word	0x58025458
 8003b80:	5802546c 	.word	0x5802546c
 8003b84:	58025480 	.word	0x58025480
 8003b88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d160      	bne.n	8003c58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7f      	ldr	r2, [pc, #508]	; (8003d98 <HAL_DMA_IRQHandler+0xc74>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d04a      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a7d      	ldr	r2, [pc, #500]	; (8003d9c <HAL_DMA_IRQHandler+0xc78>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d045      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a7c      	ldr	r2, [pc, #496]	; (8003da0 <HAL_DMA_IRQHandler+0xc7c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d040      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a7a      	ldr	r2, [pc, #488]	; (8003da4 <HAL_DMA_IRQHandler+0xc80>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d03b      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a79      	ldr	r2, [pc, #484]	; (8003da8 <HAL_DMA_IRQHandler+0xc84>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d036      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a77      	ldr	r2, [pc, #476]	; (8003dac <HAL_DMA_IRQHandler+0xc88>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d031      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a76      	ldr	r2, [pc, #472]	; (8003db0 <HAL_DMA_IRQHandler+0xc8c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d02c      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a74      	ldr	r2, [pc, #464]	; (8003db4 <HAL_DMA_IRQHandler+0xc90>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d027      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a73      	ldr	r2, [pc, #460]	; (8003db8 <HAL_DMA_IRQHandler+0xc94>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d022      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a71      	ldr	r2, [pc, #452]	; (8003dbc <HAL_DMA_IRQHandler+0xc98>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01d      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a70      	ldr	r2, [pc, #448]	; (8003dc0 <HAL_DMA_IRQHandler+0xc9c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d018      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6e      	ldr	r2, [pc, #440]	; (8003dc4 <HAL_DMA_IRQHandler+0xca0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6d      	ldr	r2, [pc, #436]	; (8003dc8 <HAL_DMA_IRQHandler+0xca4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6b      	ldr	r2, [pc, #428]	; (8003dcc <HAL_DMA_IRQHandler+0xca8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6a      	ldr	r2, [pc, #424]	; (8003dd0 <HAL_DMA_IRQHandler+0xcac>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xb12>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d108      	bne.n	8003c48 <HAL_DMA_IRQHandler+0xb24>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0208 	bic.w	r2, r2, #8
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e007      	b.n	8003c58 <HAL_DMA_IRQHandler+0xb34>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8165 	beq.w	8003f2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c6a:	e15f      	b.n	8003f2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	2202      	movs	r2, #2
 8003c76:	409a      	lsls	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80c5 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xce8>
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80bf 	beq.w	8003e0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	2202      	movs	r2, #2
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d018      	beq.n	8003cda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 813a 	beq.w	8003f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc4:	e134      	b.n	8003f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8130 	beq.w	8003f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd8:	e12a      	b.n	8003f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f040 8089 	bne.w	8003df8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a2b      	ldr	r2, [pc, #172]	; (8003d98 <HAL_DMA_IRQHandler+0xc74>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d04a      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a29      	ldr	r2, [pc, #164]	; (8003d9c <HAL_DMA_IRQHandler+0xc78>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d045      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a28      	ldr	r2, [pc, #160]	; (8003da0 <HAL_DMA_IRQHandler+0xc7c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d040      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_DMA_IRQHandler+0xc80>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d03b      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <HAL_DMA_IRQHandler+0xc84>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d036      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a23      	ldr	r2, [pc, #140]	; (8003dac <HAL_DMA_IRQHandler+0xc88>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d031      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a22      	ldr	r2, [pc, #136]	; (8003db0 <HAL_DMA_IRQHandler+0xc8c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d02c      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <HAL_DMA_IRQHandler+0xc90>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d027      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_DMA_IRQHandler+0xc94>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d022      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <HAL_DMA_IRQHandler+0xc98>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01d      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	; (8003dc0 <HAL_DMA_IRQHandler+0xc9c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d018      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <HAL_DMA_IRQHandler+0xca0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_DMA_IRQHandler+0xca4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <HAL_DMA_IRQHandler+0xca8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <HAL_DMA_IRQHandler+0xcac>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xc62>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d128      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0xcb4>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0214 	bic.w	r2, r2, #20
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e027      	b.n	8003de8 <HAL_DMA_IRQHandler+0xcc4>
 8003d98:	40020010 	.word	0x40020010
 8003d9c:	40020028 	.word	0x40020028
 8003da0:	40020040 	.word	0x40020040
 8003da4:	40020058 	.word	0x40020058
 8003da8:	40020070 	.word	0x40020070
 8003dac:	40020088 	.word	0x40020088
 8003db0:	400200a0 	.word	0x400200a0
 8003db4:	400200b8 	.word	0x400200b8
 8003db8:	40020410 	.word	0x40020410
 8003dbc:	40020428 	.word	0x40020428
 8003dc0:	40020440 	.word	0x40020440
 8003dc4:	40020458 	.word	0x40020458
 8003dc8:	40020470 	.word	0x40020470
 8003dcc:	40020488 	.word	0x40020488
 8003dd0:	400204a0 	.word	0x400204a0
 8003dd4:	400204b8 	.word	0x400204b8
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 020a 	bic.w	r2, r2, #10
 8003de6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8097 	beq.w	8003f30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0a:	e091      	b.n	8003f30 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2208      	movs	r2, #8
 8003e16:	409a      	lsls	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8088 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8082 	beq.w	8003f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a41      	ldr	r2, [pc, #260]	; (8003f38 <HAL_DMA_IRQHandler+0xe14>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d04a      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a3f      	ldr	r2, [pc, #252]	; (8003f3c <HAL_DMA_IRQHandler+0xe18>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d045      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a3e      	ldr	r2, [pc, #248]	; (8003f40 <HAL_DMA_IRQHandler+0xe1c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d040      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a3c      	ldr	r2, [pc, #240]	; (8003f44 <HAL_DMA_IRQHandler+0xe20>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d03b      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <HAL_DMA_IRQHandler+0xe24>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d036      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a39      	ldr	r2, [pc, #228]	; (8003f4c <HAL_DMA_IRQHandler+0xe28>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d031      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a38      	ldr	r2, [pc, #224]	; (8003f50 <HAL_DMA_IRQHandler+0xe2c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d02c      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a36      	ldr	r2, [pc, #216]	; (8003f54 <HAL_DMA_IRQHandler+0xe30>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d027      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a35      	ldr	r2, [pc, #212]	; (8003f58 <HAL_DMA_IRQHandler+0xe34>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a33      	ldr	r2, [pc, #204]	; (8003f5c <HAL_DMA_IRQHandler+0xe38>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01d      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a32      	ldr	r2, [pc, #200]	; (8003f60 <HAL_DMA_IRQHandler+0xe3c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d018      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a30      	ldr	r2, [pc, #192]	; (8003f64 <HAL_DMA_IRQHandler+0xe40>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2f      	ldr	r2, [pc, #188]	; (8003f68 <HAL_DMA_IRQHandler+0xe44>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2d      	ldr	r2, [pc, #180]	; (8003f6c <HAL_DMA_IRQHandler+0xe48>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <HAL_DMA_IRQHandler+0xe4c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_DMA_IRQHandler+0xdaa>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2a      	ldr	r2, [pc, #168]	; (8003f74 <HAL_DMA_IRQHandler+0xe50>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d108      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0xdbc>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 021c 	bic.w	r2, r2, #28
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e007      	b.n	8003ef0 <HAL_DMA_IRQHandler+0xdcc>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 020e 	bic.w	r2, r2, #14
 8003eee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2201      	movs	r2, #1
 8003efa:	409a      	lsls	r2, r3
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
 8003f26:	e004      	b.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f28:	bf00      	nop
 8003f2a:	e002      	b.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f32:	3728      	adds	r7, #40	; 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40020010 	.word	0x40020010
 8003f3c:	40020028 	.word	0x40020028
 8003f40:	40020040 	.word	0x40020040
 8003f44:	40020058 	.word	0x40020058
 8003f48:	40020070 	.word	0x40020070
 8003f4c:	40020088 	.word	0x40020088
 8003f50:	400200a0 	.word	0x400200a0
 8003f54:	400200b8 	.word	0x400200b8
 8003f58:	40020410 	.word	0x40020410
 8003f5c:	40020428 	.word	0x40020428
 8003f60:	40020440 	.word	0x40020440
 8003f64:	40020458 	.word	0x40020458
 8003f68:	40020470 	.word	0x40020470
 8003f6c:	40020488 	.word	0x40020488
 8003f70:	400204a0 	.word	0x400204a0
 8003f74:	400204b8 	.word	0x400204b8

08003f78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7f      	ldr	r2, [pc, #508]	; (8004194 <DMA_SetConfig+0x21c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d072      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a7d      	ldr	r2, [pc, #500]	; (8004198 <DMA_SetConfig+0x220>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d06d      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7c      	ldr	r2, [pc, #496]	; (800419c <DMA_SetConfig+0x224>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d068      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a7a      	ldr	r2, [pc, #488]	; (80041a0 <DMA_SetConfig+0x228>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d063      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a79      	ldr	r2, [pc, #484]	; (80041a4 <DMA_SetConfig+0x22c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d05e      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a77      	ldr	r2, [pc, #476]	; (80041a8 <DMA_SetConfig+0x230>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d059      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a76      	ldr	r2, [pc, #472]	; (80041ac <DMA_SetConfig+0x234>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d054      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a74      	ldr	r2, [pc, #464]	; (80041b0 <DMA_SetConfig+0x238>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d04f      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a73      	ldr	r2, [pc, #460]	; (80041b4 <DMA_SetConfig+0x23c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d04a      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a71      	ldr	r2, [pc, #452]	; (80041b8 <DMA_SetConfig+0x240>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d045      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a70      	ldr	r2, [pc, #448]	; (80041bc <DMA_SetConfig+0x244>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d040      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a6e      	ldr	r2, [pc, #440]	; (80041c0 <DMA_SetConfig+0x248>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d03b      	beq.n	8004082 <DMA_SetConfig+0x10a>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a6d      	ldr	r2, [pc, #436]	; (80041c4 <DMA_SetConfig+0x24c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d036      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a6b      	ldr	r2, [pc, #428]	; (80041c8 <DMA_SetConfig+0x250>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d031      	beq.n	8004082 <DMA_SetConfig+0x10a>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6a      	ldr	r2, [pc, #424]	; (80041cc <DMA_SetConfig+0x254>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d02c      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a68      	ldr	r2, [pc, #416]	; (80041d0 <DMA_SetConfig+0x258>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d027      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a67      	ldr	r2, [pc, #412]	; (80041d4 <DMA_SetConfig+0x25c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d022      	beq.n	8004082 <DMA_SetConfig+0x10a>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a65      	ldr	r2, [pc, #404]	; (80041d8 <DMA_SetConfig+0x260>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01d      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a64      	ldr	r2, [pc, #400]	; (80041dc <DMA_SetConfig+0x264>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a62      	ldr	r2, [pc, #392]	; (80041e0 <DMA_SetConfig+0x268>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <DMA_SetConfig+0x10a>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a61      	ldr	r2, [pc, #388]	; (80041e4 <DMA_SetConfig+0x26c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a5f      	ldr	r2, [pc, #380]	; (80041e8 <DMA_SetConfig+0x270>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <DMA_SetConfig+0x10a>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a5e      	ldr	r2, [pc, #376]	; (80041ec <DMA_SetConfig+0x274>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <DMA_SetConfig+0x10a>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5c      	ldr	r2, [pc, #368]	; (80041f0 <DMA_SetConfig+0x278>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <DMA_SetConfig+0x10e>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <DMA_SetConfig+0x110>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004094:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a39      	ldr	r2, [pc, #228]	; (8004194 <DMA_SetConfig+0x21c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04a      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a38      	ldr	r2, [pc, #224]	; (8004198 <DMA_SetConfig+0x220>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d045      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a36      	ldr	r2, [pc, #216]	; (800419c <DMA_SetConfig+0x224>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d040      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a35      	ldr	r2, [pc, #212]	; (80041a0 <DMA_SetConfig+0x228>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d03b      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a33      	ldr	r2, [pc, #204]	; (80041a4 <DMA_SetConfig+0x22c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d036      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a32      	ldr	r2, [pc, #200]	; (80041a8 <DMA_SetConfig+0x230>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d031      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a30      	ldr	r2, [pc, #192]	; (80041ac <DMA_SetConfig+0x234>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d02c      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <DMA_SetConfig+0x238>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d027      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a2d      	ldr	r2, [pc, #180]	; (80041b4 <DMA_SetConfig+0x23c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d022      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2c      	ldr	r2, [pc, #176]	; (80041b8 <DMA_SetConfig+0x240>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d01d      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2a      	ldr	r2, [pc, #168]	; (80041bc <DMA_SetConfig+0x244>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d018      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a29      	ldr	r2, [pc, #164]	; (80041c0 <DMA_SetConfig+0x248>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a27      	ldr	r2, [pc, #156]	; (80041c4 <DMA_SetConfig+0x24c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00e      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <DMA_SetConfig+0x250>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d009      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a24      	ldr	r2, [pc, #144]	; (80041cc <DMA_SetConfig+0x254>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <DMA_SetConfig+0x1d0>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <DMA_SetConfig+0x258>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <DMA_SetConfig+0x1d4>
 8004148:	2301      	movs	r3, #1
 800414a:	e000      	b.n	800414e <DMA_SetConfig+0x1d6>
 800414c:	2300      	movs	r3, #0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d059      	beq.n	8004206 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	223f      	movs	r2, #63	; 0x3f
 800415c:	409a      	lsls	r2, r3
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004170:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d138      	bne.n	80041f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004192:	e086      	b.n	80042a2 <DMA_SetConfig+0x32a>
 8004194:	40020010 	.word	0x40020010
 8004198:	40020028 	.word	0x40020028
 800419c:	40020040 	.word	0x40020040
 80041a0:	40020058 	.word	0x40020058
 80041a4:	40020070 	.word	0x40020070
 80041a8:	40020088 	.word	0x40020088
 80041ac:	400200a0 	.word	0x400200a0
 80041b0:	400200b8 	.word	0x400200b8
 80041b4:	40020410 	.word	0x40020410
 80041b8:	40020428 	.word	0x40020428
 80041bc:	40020440 	.word	0x40020440
 80041c0:	40020458 	.word	0x40020458
 80041c4:	40020470 	.word	0x40020470
 80041c8:	40020488 	.word	0x40020488
 80041cc:	400204a0 	.word	0x400204a0
 80041d0:	400204b8 	.word	0x400204b8
 80041d4:	58025408 	.word	0x58025408
 80041d8:	5802541c 	.word	0x5802541c
 80041dc:	58025430 	.word	0x58025430
 80041e0:	58025444 	.word	0x58025444
 80041e4:	58025458 	.word	0x58025458
 80041e8:	5802546c 	.word	0x5802546c
 80041ec:	58025480 	.word	0x58025480
 80041f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	60da      	str	r2, [r3, #12]
}
 8004204:	e04d      	b.n	80042a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a29      	ldr	r2, [pc, #164]	; (80042b0 <DMA_SetConfig+0x338>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <DMA_SetConfig+0x2de>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <DMA_SetConfig+0x33c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01d      	beq.n	8004256 <DMA_SetConfig+0x2de>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a26      	ldr	r2, [pc, #152]	; (80042b8 <DMA_SetConfig+0x340>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <DMA_SetConfig+0x2de>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a24      	ldr	r2, [pc, #144]	; (80042bc <DMA_SetConfig+0x344>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <DMA_SetConfig+0x2de>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <DMA_SetConfig+0x348>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <DMA_SetConfig+0x2de>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a21      	ldr	r2, [pc, #132]	; (80042c4 <DMA_SetConfig+0x34c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <DMA_SetConfig+0x2de>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a20      	ldr	r2, [pc, #128]	; (80042c8 <DMA_SetConfig+0x350>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <DMA_SetConfig+0x2de>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <DMA_SetConfig+0x354>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <DMA_SetConfig+0x2e2>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <DMA_SetConfig+0x2e4>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2201      	movs	r2, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d108      	bne.n	8004292 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	60da      	str	r2, [r3, #12]
}
 8004290:	e007      	b.n	80042a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	60da      	str	r2, [r3, #12]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	58025408 	.word	0x58025408
 80042b4:	5802541c 	.word	0x5802541c
 80042b8:	58025430 	.word	0x58025430
 80042bc:	58025444 	.word	0x58025444
 80042c0:	58025458 	.word	0x58025458
 80042c4:	5802546c 	.word	0x5802546c
 80042c8:	58025480 	.word	0x58025480
 80042cc:	58025494 	.word	0x58025494

080042d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a42      	ldr	r2, [pc, #264]	; (80043e8 <DMA_CalcBaseAndBitshift+0x118>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d04a      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a41      	ldr	r2, [pc, #260]	; (80043ec <DMA_CalcBaseAndBitshift+0x11c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d045      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3f      	ldr	r2, [pc, #252]	; (80043f0 <DMA_CalcBaseAndBitshift+0x120>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d040      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3e      	ldr	r2, [pc, #248]	; (80043f4 <DMA_CalcBaseAndBitshift+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d03b      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a3c      	ldr	r2, [pc, #240]	; (80043f8 <DMA_CalcBaseAndBitshift+0x128>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d036      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3b      	ldr	r2, [pc, #236]	; (80043fc <DMA_CalcBaseAndBitshift+0x12c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d031      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a39      	ldr	r2, [pc, #228]	; (8004400 <DMA_CalcBaseAndBitshift+0x130>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d02c      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a38      	ldr	r2, [pc, #224]	; (8004404 <DMA_CalcBaseAndBitshift+0x134>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d027      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a36      	ldr	r2, [pc, #216]	; (8004408 <DMA_CalcBaseAndBitshift+0x138>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d022      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a35      	ldr	r2, [pc, #212]	; (800440c <DMA_CalcBaseAndBitshift+0x13c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d01d      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a33      	ldr	r2, [pc, #204]	; (8004410 <DMA_CalcBaseAndBitshift+0x140>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d018      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a32      	ldr	r2, [pc, #200]	; (8004414 <DMA_CalcBaseAndBitshift+0x144>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a30      	ldr	r2, [pc, #192]	; (8004418 <DMA_CalcBaseAndBitshift+0x148>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2f      	ldr	r2, [pc, #188]	; (800441c <DMA_CalcBaseAndBitshift+0x14c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d009      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2d      	ldr	r2, [pc, #180]	; (8004420 <DMA_CalcBaseAndBitshift+0x150>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <DMA_CalcBaseAndBitshift+0x154>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d101      	bne.n	800437c <DMA_CalcBaseAndBitshift+0xac>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <DMA_CalcBaseAndBitshift+0xae>
 800437c:	2300      	movs	r3, #0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d024      	beq.n	80043cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	3b10      	subs	r3, #16
 800438a:	4a27      	ldr	r2, [pc, #156]	; (8004428 <DMA_CalcBaseAndBitshift+0x158>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	4a24      	ldr	r2, [pc, #144]	; (800442c <DMA_CalcBaseAndBitshift+0x15c>)
 800439c:	5cd3      	ldrb	r3, [r2, r3]
 800439e:	461a      	mov	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d908      	bls.n	80043bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <DMA_CalcBaseAndBitshift+0x160>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	1d1a      	adds	r2, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	659a      	str	r2, [r3, #88]	; 0x58
 80043ba:	e00d      	b.n	80043d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <DMA_CalcBaseAndBitshift+0x160>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ca:	e005      	b.n	80043d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40020010 	.word	0x40020010
 80043ec:	40020028 	.word	0x40020028
 80043f0:	40020040 	.word	0x40020040
 80043f4:	40020058 	.word	0x40020058
 80043f8:	40020070 	.word	0x40020070
 80043fc:	40020088 	.word	0x40020088
 8004400:	400200a0 	.word	0x400200a0
 8004404:	400200b8 	.word	0x400200b8
 8004408:	40020410 	.word	0x40020410
 800440c:	40020428 	.word	0x40020428
 8004410:	40020440 	.word	0x40020440
 8004414:	40020458 	.word	0x40020458
 8004418:	40020470 	.word	0x40020470
 800441c:	40020488 	.word	0x40020488
 8004420:	400204a0 	.word	0x400204a0
 8004424:	400204b8 	.word	0x400204b8
 8004428:	aaaaaaab 	.word	0xaaaaaaab
 800442c:	0800aaa8 	.word	0x0800aaa8
 8004430:	fffffc00 	.word	0xfffffc00

08004434 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d120      	bne.n	800448a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	2b03      	cmp	r3, #3
 800444e:	d858      	bhi.n	8004502 <DMA_CheckFifoParam+0xce>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <DMA_CheckFifoParam+0x24>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	08004469 	.word	0x08004469
 800445c:	0800447b 	.word	0x0800447b
 8004460:	08004469 	.word	0x08004469
 8004464:	08004503 	.word	0x08004503
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d048      	beq.n	8004506 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004478:	e045      	b.n	8004506 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004482:	d142      	bne.n	800450a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004488:	e03f      	b.n	800450a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004492:	d123      	bne.n	80044dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	2b03      	cmp	r3, #3
 800449a:	d838      	bhi.n	800450e <DMA_CheckFifoParam+0xda>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <DMA_CheckFifoParam+0x70>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044bb 	.word	0x080044bb
 80044ac:	080044b5 	.word	0x080044b5
 80044b0:	080044cd 	.word	0x080044cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
        break;
 80044b8:	e030      	b.n	800451c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d025      	beq.n	8004512 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044ca:	e022      	b.n	8004512 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044d4:	d11f      	bne.n	8004516 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044da:	e01c      	b.n	8004516 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d902      	bls.n	80044ea <DMA_CheckFifoParam+0xb6>
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d003      	beq.n	80044f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044e8:	e018      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
        break;
 80044ee:	e015      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
    break;
 8004500:	e00b      	b.n	800451a <DMA_CheckFifoParam+0xe6>
        break;
 8004502:	bf00      	nop
 8004504:	e00a      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 8004506:	bf00      	nop
 8004508:	e008      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 800450a:	bf00      	nop
 800450c:	e006      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 800450e:	bf00      	nop
 8004510:	e004      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 8004512:	bf00      	nop
 8004514:	e002      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <DMA_CheckFifoParam+0xe8>
    break;
 800451a:	bf00      	nop
    }
  }

  return status;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop

0800452c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a38      	ldr	r2, [pc, #224]	; (8004620 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a36      	ldr	r2, [pc, #216]	; (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01d      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a35      	ldr	r2, [pc, #212]	; (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a33      	ldr	r2, [pc, #204]	; (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a32      	ldr	r2, [pc, #200]	; (8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a30      	ldr	r2, [pc, #192]	; (8004634 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2f      	ldr	r2, [pc, #188]	; (8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2d      	ldr	r2, [pc, #180]	; (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01a      	beq.n	80045ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	3b08      	subs	r3, #8
 800459c:	4a28      	ldr	r2, [pc, #160]	; (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4b26      	ldr	r3, [pc, #152]	; (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a24      	ldr	r2, [pc, #144]	; (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80045b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2201      	movs	r2, #1
 80045c2:	409a      	lsls	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80045c8:	e024      	b.n	8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	3b10      	subs	r3, #16
 80045d2:	4a1e      	ldr	r2, [pc, #120]	; (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d806      	bhi.n	80045f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d902      	bls.n	80045f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3308      	adds	r3, #8
 80045f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a16      	ldr	r2, [pc, #88]	; (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004604:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2201      	movs	r2, #1
 800460e:	409a      	lsls	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	58025408 	.word	0x58025408
 8004624:	5802541c 	.word	0x5802541c
 8004628:	58025430 	.word	0x58025430
 800462c:	58025444 	.word	0x58025444
 8004630:	58025458 	.word	0x58025458
 8004634:	5802546c 	.word	0x5802546c
 8004638:	58025480 	.word	0x58025480
 800463c:	58025494 	.word	0x58025494
 8004640:	cccccccd 	.word	0xcccccccd
 8004644:	16009600 	.word	0x16009600
 8004648:	58025880 	.word	0x58025880
 800464c:	aaaaaaab 	.word	0xaaaaaaab
 8004650:	400204b8 	.word	0x400204b8
 8004654:	4002040f 	.word	0x4002040f
 8004658:	10008200 	.word	0x10008200
 800465c:	40020880 	.word	0x40020880

08004660 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d04a      	beq.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d847      	bhi.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a25      	ldr	r2, [pc, #148]	; (8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d022      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a24      	ldr	r2, [pc, #144]	; (800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d01d      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a22      	ldr	r2, [pc, #136]	; (8004720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d018      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a21      	ldr	r2, [pc, #132]	; (8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1e      	ldr	r2, [pc, #120]	; (800472c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d009      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d101      	bne.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80046d0:	2300      	movs	r3, #0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4b17      	ldr	r3, [pc, #92]	; (8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a15      	ldr	r2, [pc, #84]	; (800473c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046e8:	671a      	str	r2, [r3, #112]	; 0x70
 80046ea:	e009      	b.n	8004700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a11      	ldr	r2, [pc, #68]	; (8004744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80046fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b01      	subs	r3, #1
 8004704:	2201      	movs	r2, #1
 8004706:	409a      	lsls	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	58025408 	.word	0x58025408
 800471c:	5802541c 	.word	0x5802541c
 8004720:	58025430 	.word	0x58025430
 8004724:	58025444 	.word	0x58025444
 8004728:	58025458 	.word	0x58025458
 800472c:	5802546c 	.word	0x5802546c
 8004730:	58025480 	.word	0x58025480
 8004734:	58025494 	.word	0x58025494
 8004738:	1600963f 	.word	0x1600963f
 800473c:	58025940 	.word	0x58025940
 8004740:	1000823f 	.word	0x1000823f
 8004744:	40020940 	.word	0x40020940

08004748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004756:	4b86      	ldr	r3, [pc, #536]	; (8004970 <HAL_GPIO_Init+0x228>)
 8004758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800475a:	e18c      	b.n	8004a76 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2101      	movs	r1, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa01 f303 	lsl.w	r3, r1, r3
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 817e 	beq.w	8004a70 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d005      	beq.n	800478c <HAL_GPIO_Init+0x44>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d130      	bne.n	80047ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	2203      	movs	r2, #3
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047c2:	2201      	movs	r2, #1
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	091b      	lsrs	r3, r3, #4
 80047d8:	f003 0201 	and.w	r2, r3, #1
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d017      	beq.n	800482a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	2203      	movs	r2, #3
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d123      	bne.n	800487e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	08da      	lsrs	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3208      	adds	r2, #8
 800483e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	220f      	movs	r2, #15
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	08da      	lsrs	r2, r3, #3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3208      	adds	r2, #8
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	2203      	movs	r2, #3
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 0203 	and.w	r2, r3, #3
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80d8 	beq.w	8004a70 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c0:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <HAL_GPIO_Init+0x22c>)
 80048c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048c6:	4a2b      	ldr	r2, [pc, #172]	; (8004974 <HAL_GPIO_Init+0x22c>)
 80048c8:	f043 0302 	orr.w	r3, r3, #2
 80048cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <HAL_GPIO_Init+0x22c>)
 80048d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048de:	4a26      	ldr	r2, [pc, #152]	; (8004978 <HAL_GPIO_Init+0x230>)
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	089b      	lsrs	r3, r3, #2
 80048e4:	3302      	adds	r3, #2
 80048e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	220f      	movs	r2, #15
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1d      	ldr	r2, [pc, #116]	; (800497c <HAL_GPIO_Init+0x234>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d04a      	beq.n	80049a0 <HAL_GPIO_Init+0x258>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1c      	ldr	r2, [pc, #112]	; (8004980 <HAL_GPIO_Init+0x238>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02b      	beq.n	800496a <HAL_GPIO_Init+0x222>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a1b      	ldr	r2, [pc, #108]	; (8004984 <HAL_GPIO_Init+0x23c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d025      	beq.n	8004966 <HAL_GPIO_Init+0x21e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1a      	ldr	r2, [pc, #104]	; (8004988 <HAL_GPIO_Init+0x240>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01f      	beq.n	8004962 <HAL_GPIO_Init+0x21a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <HAL_GPIO_Init+0x244>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d019      	beq.n	800495e <HAL_GPIO_Init+0x216>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a18      	ldr	r2, [pc, #96]	; (8004990 <HAL_GPIO_Init+0x248>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <HAL_GPIO_Init+0x212>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a17      	ldr	r2, [pc, #92]	; (8004994 <HAL_GPIO_Init+0x24c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00d      	beq.n	8004956 <HAL_GPIO_Init+0x20e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a16      	ldr	r2, [pc, #88]	; (8004998 <HAL_GPIO_Init+0x250>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <HAL_GPIO_Init+0x20a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a15      	ldr	r2, [pc, #84]	; (800499c <HAL_GPIO_Init+0x254>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_GPIO_Init+0x206>
 800494a:	2309      	movs	r3, #9
 800494c:	e029      	b.n	80049a2 <HAL_GPIO_Init+0x25a>
 800494e:	230a      	movs	r3, #10
 8004950:	e027      	b.n	80049a2 <HAL_GPIO_Init+0x25a>
 8004952:	2307      	movs	r3, #7
 8004954:	e025      	b.n	80049a2 <HAL_GPIO_Init+0x25a>
 8004956:	2306      	movs	r3, #6
 8004958:	e023      	b.n	80049a2 <HAL_GPIO_Init+0x25a>
 800495a:	2305      	movs	r3, #5
 800495c:	e021      	b.n	80049a2 <HAL_GPIO_Init+0x25a>
 800495e:	2304      	movs	r3, #4
 8004960:	e01f      	b.n	80049a2 <HAL_GPIO_Init+0x25a>
 8004962:	2303      	movs	r3, #3
 8004964:	e01d      	b.n	80049a2 <HAL_GPIO_Init+0x25a>
 8004966:	2302      	movs	r3, #2
 8004968:	e01b      	b.n	80049a2 <HAL_GPIO_Init+0x25a>
 800496a:	2301      	movs	r3, #1
 800496c:	e019      	b.n	80049a2 <HAL_GPIO_Init+0x25a>
 800496e:	bf00      	nop
 8004970:	58000080 	.word	0x58000080
 8004974:	58024400 	.word	0x58024400
 8004978:	58000400 	.word	0x58000400
 800497c:	58020000 	.word	0x58020000
 8004980:	58020400 	.word	0x58020400
 8004984:	58020800 	.word	0x58020800
 8004988:	58020c00 	.word	0x58020c00
 800498c:	58021000 	.word	0x58021000
 8004990:	58021400 	.word	0x58021400
 8004994:	58021800 	.word	0x58021800
 8004998:	58021c00 	.word	0x58021c00
 800499c:	58022400 	.word	0x58022400
 80049a0:	2300      	movs	r3, #0
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	f002 0203 	and.w	r2, r2, #3
 80049a8:	0092      	lsls	r2, r2, #2
 80049aa:	4093      	lsls	r3, r2
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049b2:	4938      	ldr	r1, [pc, #224]	; (8004a94 <HAL_GPIO_Init+0x34c>)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	3302      	adds	r3, #2
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	3301      	adds	r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f47f ae6b 	bne.w	800475c <HAL_GPIO_Init+0x14>
  }
}
 8004a86:	bf00      	nop
 8004a88:	bf00      	nop
 8004a8a:	3724      	adds	r7, #36	; 0x24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	58000400 	.word	0x58000400

08004a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	887b      	ldrh	r3, [r7, #2]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
 8004ab4:	e001      	b.n	8004aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ad8:	787b      	ldrb	r3, [r7, #1]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ae4:	e003      	b.n	8004aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	041a      	lsls	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	619a      	str	r2, [r3, #24]
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_PWREx_ConfigSupply+0x70>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d00a      	beq.n	8004b26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b10:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <HAL_PWREx_ConfigSupply+0x70>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d001      	beq.n	8004b22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e01f      	b.n	8004b62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e01d      	b.n	8004b62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b26:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <HAL_PWREx_ConfigSupply+0x70>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f023 0207 	bic.w	r2, r3, #7
 8004b2e:	490f      	ldr	r1, [pc, #60]	; (8004b6c <HAL_PWREx_ConfigSupply+0x70>)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b36:	f7fc feb3 	bl	80018a0 <HAL_GetTick>
 8004b3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b3c:	e009      	b.n	8004b52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b3e:	f7fc feaf 	bl	80018a0 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b4c:	d901      	bls.n	8004b52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e007      	b.n	8004b62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_PWREx_ConfigSupply+0x70>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5e:	d1ee      	bne.n	8004b3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	58024800 	.word	0x58024800

08004b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08c      	sub	sp, #48	; 0x30
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e3c8      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 8087 	beq.w	8004c9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b90:	4b88      	ldr	r3, [pc, #544]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b9a:	4b86      	ldr	r3, [pc, #536]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d007      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x46>
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	2b18      	cmp	r3, #24
 8004baa:	d110      	bne.n	8004bce <HAL_RCC_OscConfig+0x5e>
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d10b      	bne.n	8004bce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb6:	4b7f      	ldr	r3, [pc, #508]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d06c      	beq.n	8004c9c <HAL_RCC_OscConfig+0x12c>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d168      	bne.n	8004c9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e3a2      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd6:	d106      	bne.n	8004be6 <HAL_RCC_OscConfig+0x76>
 8004bd8:	4b76      	ldr	r3, [pc, #472]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a75      	ldr	r2, [pc, #468]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e02e      	b.n	8004c44 <HAL_RCC_OscConfig+0xd4>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0x98>
 8004bee:	4b71      	ldr	r3, [pc, #452]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a70      	ldr	r2, [pc, #448]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b6e      	ldr	r3, [pc, #440]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6d      	ldr	r2, [pc, #436]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e01d      	b.n	8004c44 <HAL_RCC_OscConfig+0xd4>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCC_OscConfig+0xbc>
 8004c12:	4b68      	ldr	r3, [pc, #416]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a67      	ldr	r2, [pc, #412]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b65      	ldr	r3, [pc, #404]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a64      	ldr	r2, [pc, #400]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCC_OscConfig+0xd4>
 8004c2c:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a60      	ldr	r2, [pc, #384]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b5e      	ldr	r3, [pc, #376]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a5d      	ldr	r2, [pc, #372]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4c:	f7fc fe28 	bl	80018a0 <HAL_GetTick>
 8004c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fc fe24 	bl	80018a0 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e356      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c66:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0xe4>
 8004c72:	e014      	b.n	8004c9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fc fe14 	bl	80018a0 <HAL_GetTick>
 8004c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fc fe10 	bl	80018a0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e342      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c8e:	4b49      	ldr	r3, [pc, #292]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x10c>
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 808c 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cac:	4b41      	ldr	r3, [pc, #260]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x162>
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	2b18      	cmp	r3, #24
 8004cc6:	d137      	bne.n	8004d38 <HAL_RCC_OscConfig+0x1c8>
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d132      	bne.n	8004d38 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd2:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_RCC_OscConfig+0x17a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e314      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cea:	4b32      	ldr	r3, [pc, #200]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 0219 	bic.w	r2, r3, #25
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	492f      	ldr	r1, [pc, #188]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fdd0 	bl	80018a0 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d04:	f7fc fdcc 	bl	80018a0 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e2fe      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d16:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d22:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	4920      	ldr	r1, [pc, #128]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d36:	e045      	b.n	8004dc4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d026      	beq.n	8004d8e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f023 0219 	bic.w	r2, r3, #25
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4919      	ldr	r1, [pc, #100]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fc fda5 	bl	80018a0 <HAL_GetTick>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5a:	f7fc fda1 	bl	80018a0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e2d3      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	061b      	lsls	r3, r3, #24
 8004d86:	490b      	ldr	r1, [pc, #44]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	604b      	str	r3, [r1, #4]
 8004d8c:	e01a      	b.n	8004dc4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d8e:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <HAL_RCC_OscConfig+0x244>)
 8004d94:	f023 0301 	bic.w	r3, r3, #1
 8004d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9a:	f7fc fd81 	bl	80018a0 <HAL_GetTick>
 8004d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004da0:	e00a      	b.n	8004db8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da2:	f7fc fd7d 	bl	80018a0 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d903      	bls.n	8004db8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e2af      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
 8004db4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004db8:	4b96      	ldr	r3, [pc, #600]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1ee      	bne.n	8004da2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d06a      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd0:	4b90      	ldr	r3, [pc, #576]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dd8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dda:	4b8e      	ldr	r3, [pc, #568]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d007      	beq.n	8004df6 <HAL_RCC_OscConfig+0x286>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b18      	cmp	r3, #24
 8004dea:	d11b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x2b4>
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d116      	bne.n	8004e24 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004df6:	4b87      	ldr	r3, [pc, #540]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCC_OscConfig+0x29e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	2b80      	cmp	r3, #128	; 0x80
 8004e08:	d001      	beq.n	8004e0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e282      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e0e:	4b81      	ldr	r3, [pc, #516]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	061b      	lsls	r3, r3, #24
 8004e1c:	497d      	ldr	r1, [pc, #500]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e22:	e040      	b.n	8004ea6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d023      	beq.n	8004e74 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e2c:	4b79      	ldr	r3, [pc, #484]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a78      	ldr	r2, [pc, #480]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fc fd32 	bl	80018a0 <HAL_GetTick>
 8004e3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e40:	f7fc fd2e 	bl	80018a0 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e260      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e52:	4b70      	ldr	r3, [pc, #448]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e5e:	4b6d      	ldr	r3, [pc, #436]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	061b      	lsls	r3, r3, #24
 8004e6c:	4969      	ldr	r1, [pc, #420]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60cb      	str	r3, [r1, #12]
 8004e72:	e018      	b.n	8004ea6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e74:	4b67      	ldr	r3, [pc, #412]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a66      	ldr	r2, [pc, #408]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fc fd0e 	bl	80018a0 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e88:	f7fc fd0a 	bl	80018a0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e23c      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e9a:	4b5e      	ldr	r3, [pc, #376]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d036      	beq.n	8004f20 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d019      	beq.n	8004eee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eba:	4b56      	ldr	r3, [pc, #344]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebe:	4a55      	ldr	r2, [pc, #340]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec6:	f7fc fceb 	bl	80018a0 <HAL_GetTick>
 8004eca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ece:	f7fc fce7 	bl	80018a0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e219      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ee0:	4b4c      	ldr	r3, [pc, #304]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x35e>
 8004eec:	e018      	b.n	8004f20 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eee:	4b49      	ldr	r3, [pc, #292]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef2:	4a48      	ldr	r2, [pc, #288]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efa:	f7fc fcd1 	bl	80018a0 <HAL_GetTick>
 8004efe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f02:	f7fc fccd 	bl	80018a0 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e1ff      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f14:	4b3f      	ldr	r3, [pc, #252]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d036      	beq.n	8004f9a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d019      	beq.n	8004f68 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f34:	4b37      	ldr	r3, [pc, #220]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a36      	ldr	r2, [pc, #216]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004f3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f40:	f7fc fcae 	bl	80018a0 <HAL_GetTick>
 8004f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f48:	f7fc fcaa 	bl	80018a0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e1dc      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f5a:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x3d8>
 8004f66:	e018      	b.n	8004f9a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a29      	ldr	r2, [pc, #164]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f74:	f7fc fc94 	bl	80018a0 <HAL_GetTick>
 8004f78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f7c:	f7fc fc90 	bl	80018a0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e1c2      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8086 	beq.w	80050b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <HAL_RCC_OscConfig+0x4a8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1a      	ldr	r2, [pc, #104]	; (8005018 <HAL_RCC_OscConfig+0x4a8>)
 8004fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb4:	f7fc fc74 	bl	80018a0 <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbc:	f7fc fc70 	bl	80018a0 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	; 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e1a2      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <HAL_RCC_OscConfig+0x4a8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x480>
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	4a0b      	ldr	r2, [pc, #44]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	6713      	str	r3, [r2, #112]	; 0x70
 8004fee:	e032      	b.n	8005056 <HAL_RCC_OscConfig+0x4e6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d111      	bne.n	800501c <HAL_RCC_OscConfig+0x4ac>
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	6713      	str	r3, [r2, #112]	; 0x70
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	4a02      	ldr	r2, [pc, #8]	; (8005014 <HAL_RCC_OscConfig+0x4a4>)
 800500a:	f023 0304 	bic.w	r3, r3, #4
 800500e:	6713      	str	r3, [r2, #112]	; 0x70
 8005010:	e021      	b.n	8005056 <HAL_RCC_OscConfig+0x4e6>
 8005012:	bf00      	nop
 8005014:	58024400 	.word	0x58024400
 8005018:	58024800 	.word	0x58024800
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	2b05      	cmp	r3, #5
 8005022:	d10c      	bne.n	800503e <HAL_RCC_OscConfig+0x4ce>
 8005024:	4b83      	ldr	r3, [pc, #524]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005028:	4a82      	ldr	r2, [pc, #520]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800502a:	f043 0304 	orr.w	r3, r3, #4
 800502e:	6713      	str	r3, [r2, #112]	; 0x70
 8005030:	4b80      	ldr	r3, [pc, #512]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005034:	4a7f      	ldr	r2, [pc, #508]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	6713      	str	r3, [r2, #112]	; 0x70
 800503c:	e00b      	b.n	8005056 <HAL_RCC_OscConfig+0x4e6>
 800503e:	4b7d      	ldr	r3, [pc, #500]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	4a7c      	ldr	r2, [pc, #496]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
 800504a:	4b7a      	ldr	r3, [pc, #488]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	4a79      	ldr	r2, [pc, #484]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005050:	f023 0304 	bic.w	r3, r3, #4
 8005054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d015      	beq.n	800508a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505e:	f7fc fc1f 	bl	80018a0 <HAL_GetTick>
 8005062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005064:	e00a      	b.n	800507c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fc fc1b 	bl	80018a0 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	f241 3288 	movw	r2, #5000	; 0x1388
 8005074:	4293      	cmp	r3, r2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e14b      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800507c:	4b6d      	ldr	r3, [pc, #436]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800507e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0ee      	beq.n	8005066 <HAL_RCC_OscConfig+0x4f6>
 8005088:	e014      	b.n	80050b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508a:	f7fc fc09 	bl	80018a0 <HAL_GetTick>
 800508e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005090:	e00a      	b.n	80050a8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005092:	f7fc fc05 	bl	80018a0 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e135      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050a8:	4b62      	ldr	r3, [pc, #392]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1ee      	bne.n	8005092 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 812a 	beq.w	8005312 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050be:	4b5d      	ldr	r3, [pc, #372]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050c6:	2b18      	cmp	r3, #24
 80050c8:	f000 80ba 	beq.w	8005240 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	f040 8095 	bne.w	8005200 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d6:	4b57      	ldr	r3, [pc, #348]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a56      	ldr	r2, [pc, #344]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80050dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e2:	f7fc fbdd 	bl	80018a0 <HAL_GetTick>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ea:	f7fc fbd9 	bl	80018a0 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e10b      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050fc:	4b4d      	ldr	r3, [pc, #308]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f0      	bne.n	80050ea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005108:	4b4a      	ldr	r3, [pc, #296]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800510a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800510c:	4b4a      	ldr	r3, [pc, #296]	; (8005238 <HAL_RCC_OscConfig+0x6c8>)
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005118:	0112      	lsls	r2, r2, #4
 800511a:	430a      	orrs	r2, r1
 800511c:	4945      	ldr	r1, [pc, #276]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800511e:	4313      	orrs	r3, r2
 8005120:	628b      	str	r3, [r1, #40]	; 0x28
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	3b01      	subs	r3, #1
 8005128:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	3b01      	subs	r3, #1
 8005132:	025b      	lsls	r3, r3, #9
 8005134:	b29b      	uxth	r3, r3
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	3b01      	subs	r3, #1
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	3b01      	subs	r3, #1
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005152:	4938      	ldr	r1, [pc, #224]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005154:	4313      	orrs	r3, r2
 8005156:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005158:	4b36      	ldr	r3, [pc, #216]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	4a35      	ldr	r2, [pc, #212]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005164:	4b33      	ldr	r3, [pc, #204]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005168:	4b34      	ldr	r3, [pc, #208]	; (800523c <HAL_RCC_OscConfig+0x6cc>)
 800516a:	4013      	ands	r3, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005170:	00d2      	lsls	r2, r2, #3
 8005172:	4930      	ldr	r1, [pc, #192]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005174:	4313      	orrs	r3, r2
 8005176:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005178:	4b2e      	ldr	r3, [pc, #184]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f023 020c 	bic.w	r2, r3, #12
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005184:	492b      	ldr	r1, [pc, #172]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005186:	4313      	orrs	r3, r2
 8005188:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800518a:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	f023 0202 	bic.w	r2, r3, #2
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	4927      	ldr	r1, [pc, #156]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005198:	4313      	orrs	r3, r2
 800519a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800519c:	4b25      	ldr	r3, [pc, #148]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	4a24      	ldr	r2, [pc, #144]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a8:	4b22      	ldr	r3, [pc, #136]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	4a21      	ldr	r2, [pc, #132]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051b4:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051c0:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	4a1b      	ldr	r2, [pc, #108]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051cc:	4b19      	ldr	r3, [pc, #100]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d8:	f7fc fb62 	bl	80018a0 <HAL_GetTick>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fc fb5e 	bl	80018a0 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e090      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051f2:	4b10      	ldr	r3, [pc, #64]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x670>
 80051fe:	e088      	b.n	8005312 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005200:	4b0c      	ldr	r3, [pc, #48]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0b      	ldr	r2, [pc, #44]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800520a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fc fb48 	bl	80018a0 <HAL_GetTick>
 8005210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005214:	f7fc fb44 	bl	80018a0 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e076      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005226:	4b03      	ldr	r3, [pc, #12]	; (8005234 <HAL_RCC_OscConfig+0x6c4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x6a4>
 8005232:	e06e      	b.n	8005312 <HAL_RCC_OscConfig+0x7a2>
 8005234:	58024400 	.word	0x58024400
 8005238:	fffffc0c 	.word	0xfffffc0c
 800523c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005240:	4b36      	ldr	r3, [pc, #216]	; (800531c <HAL_RCC_OscConfig+0x7ac>)
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005246:	4b35      	ldr	r3, [pc, #212]	; (800531c <HAL_RCC_OscConfig+0x7ac>)
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	2b01      	cmp	r3, #1
 8005252:	d031      	beq.n	80052b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f003 0203 	and.w	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d12a      	bne.n	80052b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d122      	bne.n	80052b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d11a      	bne.n	80052b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	0a5b      	lsrs	r3, r3, #9
 8005286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d111      	bne.n	80052b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d108      	bne.n	80052b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	0e1b      	lsrs	r3, r3, #24
 80052aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d001      	beq.n	80052bc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e02b      	b.n	8005314 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <HAL_RCC_OscConfig+0x7ac>)
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	08db      	lsrs	r3, r3, #3
 80052c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d01f      	beq.n	8005312 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052d2:	4b12      	ldr	r3, [pc, #72]	; (800531c <HAL_RCC_OscConfig+0x7ac>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	4a11      	ldr	r2, [pc, #68]	; (800531c <HAL_RCC_OscConfig+0x7ac>)
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052de:	f7fc fadf 	bl	80018a0 <HAL_GetTick>
 80052e2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052e4:	bf00      	nop
 80052e6:	f7fc fadb 	bl	80018a0 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d0f9      	beq.n	80052e6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <HAL_RCC_OscConfig+0x7ac>)
 80052f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_RCC_OscConfig+0x7b0>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052fe:	00d2      	lsls	r2, r2, #3
 8005300:	4906      	ldr	r1, [pc, #24]	; (800531c <HAL_RCC_OscConfig+0x7ac>)
 8005302:	4313      	orrs	r3, r2
 8005304:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_OscConfig+0x7ac>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	4a04      	ldr	r2, [pc, #16]	; (800531c <HAL_RCC_OscConfig+0x7ac>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3730      	adds	r7, #48	; 0x30
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	58024400 	.word	0x58024400
 8005320:	ffff0007 	.word	0xffff0007

08005324 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e19c      	b.n	8005672 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005338:	4b8a      	ldr	r3, [pc, #552]	; (8005564 <HAL_RCC_ClockConfig+0x240>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d910      	bls.n	8005368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005346:	4b87      	ldr	r3, [pc, #540]	; (8005564 <HAL_RCC_ClockConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f023 020f 	bic.w	r2, r3, #15
 800534e:	4985      	ldr	r1, [pc, #532]	; (8005564 <HAL_RCC_ClockConfig+0x240>)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	4313      	orrs	r3, r2
 8005354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005356:	4b83      	ldr	r3, [pc, #524]	; (8005564 <HAL_RCC_ClockConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e184      	b.n	8005672 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	4b7b      	ldr	r3, [pc, #492]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005380:	429a      	cmp	r2, r3
 8005382:	d908      	bls.n	8005396 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005384:	4b78      	ldr	r3, [pc, #480]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	4975      	ldr	r1, [pc, #468]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005392:	4313      	orrs	r3, r2
 8005394:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d010      	beq.n	80053c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	4b70      	ldr	r3, [pc, #448]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d908      	bls.n	80053c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053b2:	4b6d      	ldr	r3, [pc, #436]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	496a      	ldr	r1, [pc, #424]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d010      	beq.n	80053f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	4b64      	ldr	r3, [pc, #400]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053dc:	429a      	cmp	r2, r3
 80053de:	d908      	bls.n	80053f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053e0:	4b61      	ldr	r3, [pc, #388]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	495e      	ldr	r1, [pc, #376]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d010      	beq.n	8005420 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	4b59      	ldr	r3, [pc, #356]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800540a:	429a      	cmp	r2, r3
 800540c:	d908      	bls.n	8005420 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800540e:	4b56      	ldr	r3, [pc, #344]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	4953      	ldr	r1, [pc, #332]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 800541c:	4313      	orrs	r3, r2
 800541e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d010      	beq.n	800544e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	4b4d      	ldr	r3, [pc, #308]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	429a      	cmp	r2, r3
 800543a:	d908      	bls.n	800544e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543c:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f023 020f 	bic.w	r2, r3, #15
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	4947      	ldr	r1, [pc, #284]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 800544a:	4313      	orrs	r3, r2
 800544c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d055      	beq.n	8005506 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800545a:	4b43      	ldr	r3, [pc, #268]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	4940      	ldr	r1, [pc, #256]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005468:	4313      	orrs	r3, r2
 800546a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d107      	bne.n	8005484 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005474:	4b3c      	ldr	r3, [pc, #240]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d121      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0f6      	b.n	8005672 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d107      	bne.n	800549c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800548c:	4b36      	ldr	r3, [pc, #216]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d115      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0ea      	b.n	8005672 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054a4:	4b30      	ldr	r3, [pc, #192]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0de      	b.n	8005672 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054b4:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0d6      	b.n	8005672 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054c4:	4b28      	ldr	r3, [pc, #160]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f023 0207 	bic.w	r2, r3, #7
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4925      	ldr	r1, [pc, #148]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d6:	f7fc f9e3 	bl	80018a0 <HAL_GetTick>
 80054da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054dc:	e00a      	b.n	80054f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054de:	f7fc f9df 	bl	80018a0 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e0be      	b.n	8005672 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f4:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	429a      	cmp	r2, r3
 8005504:	d1eb      	bne.n	80054de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d010      	beq.n	8005534 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	429a      	cmp	r2, r3
 8005520:	d208      	bcs.n	8005534 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	f023 020f 	bic.w	r2, r3, #15
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	490e      	ldr	r1, [pc, #56]	; (8005568 <HAL_RCC_ClockConfig+0x244>)
 8005530:	4313      	orrs	r3, r2
 8005532:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <HAL_RCC_ClockConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d214      	bcs.n	800556c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <HAL_RCC_ClockConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 020f 	bic.w	r2, r3, #15
 800554a:	4906      	ldr	r1, [pc, #24]	; (8005564 <HAL_RCC_ClockConfig+0x240>)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	4313      	orrs	r3, r2
 8005550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005552:	4b04      	ldr	r3, [pc, #16]	; (8005564 <HAL_RCC_ClockConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d005      	beq.n	800556c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e086      	b.n	8005672 <HAL_RCC_ClockConfig+0x34e>
 8005564:	52002000 	.word	0x52002000
 8005568:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d010      	beq.n	800559a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	4b3f      	ldr	r3, [pc, #252]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005584:	429a      	cmp	r2, r3
 8005586:	d208      	bcs.n	800559a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005588:	4b3c      	ldr	r3, [pc, #240]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	4939      	ldr	r1, [pc, #228]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 8005596:	4313      	orrs	r3, r2
 8005598:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d010      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695a      	ldr	r2, [r3, #20]
 80055aa:	4b34      	ldr	r3, [pc, #208]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d208      	bcs.n	80055c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055b6:	4b31      	ldr	r3, [pc, #196]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	492e      	ldr	r1, [pc, #184]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d010      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699a      	ldr	r2, [r3, #24]
 80055d8:	4b28      	ldr	r3, [pc, #160]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d208      	bcs.n	80055f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055e4:	4b25      	ldr	r3, [pc, #148]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	4922      	ldr	r1, [pc, #136]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69da      	ldr	r2, [r3, #28]
 8005606:	4b1d      	ldr	r3, [pc, #116]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800560e:	429a      	cmp	r2, r3
 8005610:	d208      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005612:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	4917      	ldr	r1, [pc, #92]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 8005620:	4313      	orrs	r3, r2
 8005622:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005624:	f000 f834 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	0a1b      	lsrs	r3, r3, #8
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	4912      	ldr	r1, [pc, #72]	; (8005680 <HAL_RCC_ClockConfig+0x35c>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
 8005640:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005642:	4b0e      	ldr	r3, [pc, #56]	; (800567c <HAL_RCC_ClockConfig+0x358>)
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	4a0d      	ldr	r2, [pc, #52]	; (8005680 <HAL_RCC_ClockConfig+0x35c>)
 800564c:	5cd3      	ldrb	r3, [r2, r3]
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
 8005658:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <HAL_RCC_ClockConfig+0x360>)
 800565a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800565c:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <HAL_RCC_ClockConfig+0x364>)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <HAL_RCC_ClockConfig+0x368>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fc f8d0 	bl	800180c <HAL_InitTick>
 800566c:	4603      	mov	r3, r0
 800566e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	58024400 	.word	0x58024400
 8005680:	0800aa98 	.word	0x0800aa98
 8005684:	24000008 	.word	0x24000008
 8005688:	24000004 	.word	0x24000004
 800568c:	2400000c 	.word	0x2400000c

08005690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005690:	b480      	push	{r7}
 8005692:	b089      	sub	sp, #36	; 0x24
 8005694:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005696:	4bb3      	ldr	r3, [pc, #716]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800569e:	2b18      	cmp	r3, #24
 80056a0:	f200 8155 	bhi.w	800594e <HAL_RCC_GetSysClockFreq+0x2be>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	08005711 	.word	0x08005711
 80056b0:	0800594f 	.word	0x0800594f
 80056b4:	0800594f 	.word	0x0800594f
 80056b8:	0800594f 	.word	0x0800594f
 80056bc:	0800594f 	.word	0x0800594f
 80056c0:	0800594f 	.word	0x0800594f
 80056c4:	0800594f 	.word	0x0800594f
 80056c8:	0800594f 	.word	0x0800594f
 80056cc:	08005737 	.word	0x08005737
 80056d0:	0800594f 	.word	0x0800594f
 80056d4:	0800594f 	.word	0x0800594f
 80056d8:	0800594f 	.word	0x0800594f
 80056dc:	0800594f 	.word	0x0800594f
 80056e0:	0800594f 	.word	0x0800594f
 80056e4:	0800594f 	.word	0x0800594f
 80056e8:	0800594f 	.word	0x0800594f
 80056ec:	0800573d 	.word	0x0800573d
 80056f0:	0800594f 	.word	0x0800594f
 80056f4:	0800594f 	.word	0x0800594f
 80056f8:	0800594f 	.word	0x0800594f
 80056fc:	0800594f 	.word	0x0800594f
 8005700:	0800594f 	.word	0x0800594f
 8005704:	0800594f 	.word	0x0800594f
 8005708:	0800594f 	.word	0x0800594f
 800570c:	08005743 	.word	0x08005743
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005710:	4b94      	ldr	r3, [pc, #592]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d009      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800571c:	4b91      	ldr	r3, [pc, #580]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	08db      	lsrs	r3, r3, #3
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	4a90      	ldr	r2, [pc, #576]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
 800572c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800572e:	e111      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005730:	4b8d      	ldr	r3, [pc, #564]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005732:	61bb      	str	r3, [r7, #24]
      break;
 8005734:	e10e      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005736:	4b8d      	ldr	r3, [pc, #564]	; (800596c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005738:	61bb      	str	r3, [r7, #24]
      break;
 800573a:	e10b      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800573c:	4b8c      	ldr	r3, [pc, #560]	; (8005970 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800573e:	61bb      	str	r3, [r7, #24]
      break;
 8005740:	e108      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005742:	4b88      	ldr	r3, [pc, #544]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800574c:	4b85      	ldr	r3, [pc, #532]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005756:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005758:	4b82      	ldr	r3, [pc, #520]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005762:	4b80      	ldr	r3, [pc, #512]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	08db      	lsrs	r3, r3, #3
 8005768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80e1 	beq.w	8005948 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b02      	cmp	r3, #2
 800578a:	f000 8083 	beq.w	8005894 <HAL_RCC_GetSysClockFreq+0x204>
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b02      	cmp	r3, #2
 8005792:	f200 80a1 	bhi.w	80058d8 <HAL_RCC_GetSysClockFreq+0x248>
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_RCC_GetSysClockFreq+0x114>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d056      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057a2:	e099      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057a4:	4b6f      	ldr	r3, [pc, #444]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d02d      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057b0:	4b6c      	ldr	r3, [pc, #432]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	08db      	lsrs	r3, r3, #3
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	4a6b      	ldr	r2, [pc, #428]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057bc:	fa22 f303 	lsr.w	r3, r2, r3
 80057c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057da:	4b62      	ldr	r3, [pc, #392]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005974 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005806:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800580a:	e087      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005816:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e8>
 800581a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800581e:	4b51      	ldr	r3, [pc, #324]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800582e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005832:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005974 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800583e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800584e:	e065      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800597c <HAL_RCC_GetSysClockFreq+0x2ec>
 800585e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005862:	4b40      	ldr	r3, [pc, #256]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005872:	ed97 6a02 	vldr	s12, [r7, #8]
 8005876:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005974 <HAL_RCC_GetSysClockFreq+0x2e4>
 800587a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005892:	e043      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005980 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058a6:	4b2f      	ldr	r3, [pc, #188]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005974 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058d6:	e021      	b.n	800591c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800597c <HAL_RCC_GetSysClockFreq+0x2ec>
 80058e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ea:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80058fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005974 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800590e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800591a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800591c:	4b11      	ldr	r3, [pc, #68]	; (8005964 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	0a5b      	lsrs	r3, r3, #9
 8005922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005926:	3301      	adds	r3, #1
 8005928:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	ee07 3a90 	vmov	s15, r3
 8005930:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005934:	edd7 6a07 	vldr	s13, [r7, #28]
 8005938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005940:	ee17 3a90 	vmov	r3, s15
 8005944:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005946:	e005      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	61bb      	str	r3, [r7, #24]
      break;
 800594c:	e002      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005950:	61bb      	str	r3, [r7, #24]
      break;
 8005952:	bf00      	nop
  }

  return sysclockfreq;
 8005954:	69bb      	ldr	r3, [r7, #24]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3724      	adds	r7, #36	; 0x24
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	58024400 	.word	0x58024400
 8005968:	03d09000 	.word	0x03d09000
 800596c:	003d0900 	.word	0x003d0900
 8005970:	017d7840 	.word	0x017d7840
 8005974:	46000000 	.word	0x46000000
 8005978:	4c742400 	.word	0x4c742400
 800597c:	4a742400 	.word	0x4a742400
 8005980:	4bbebc20 	.word	0x4bbebc20

08005984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800598a:	f7ff fe81 	bl	8005690 <HAL_RCC_GetSysClockFreq>
 800598e:	4602      	mov	r2, r0
 8005990:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	0a1b      	lsrs	r3, r3, #8
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	490f      	ldr	r1, [pc, #60]	; (80059d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800599c:	5ccb      	ldrb	r3, [r1, r3]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	fa22 f303 	lsr.w	r3, r2, r3
 80059a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80059b2:	5cd3      	ldrb	r3, [r2, r3]
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	fa22 f303 	lsr.w	r3, r2, r3
 80059be:	4a07      	ldr	r2, [pc, #28]	; (80059dc <HAL_RCC_GetHCLKFreq+0x58>)
 80059c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059c2:	4a07      	ldr	r2, [pc, #28]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059c8:	4b04      	ldr	r3, [pc, #16]	; (80059dc <HAL_RCC_GetHCLKFreq+0x58>)
 80059ca:	681b      	ldr	r3, [r3, #0]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	58024400 	.word	0x58024400
 80059d8:	0800aa98 	.word	0x0800aa98
 80059dc:	24000008 	.word	0x24000008
 80059e0:	24000004 	.word	0x24000004

080059e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059e8:	f7ff ffcc 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 80059ec:	4602      	mov	r2, r0
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	091b      	lsrs	r3, r3, #4
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	4904      	ldr	r1, [pc, #16]	; (8005a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80059fa:	5ccb      	ldrb	r3, [r1, r3]
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	58024400 	.word	0x58024400
 8005a0c:	0800aa98 	.word	0x0800aa98

08005a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a14:	f7ff ffb6 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	0a1b      	lsrs	r3, r3, #8
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	4904      	ldr	r1, [pc, #16]	; (8005a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a26:	5ccb      	ldrb	r3, [r1, r3]
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	58024400 	.word	0x58024400
 8005a38:	0800aa98 	.word	0x0800aa98

08005a3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a40:	b0c6      	sub	sp, #280	; 0x118
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005a60:	2500      	movs	r5, #0
 8005a62:	ea54 0305 	orrs.w	r3, r4, r5
 8005a66:	d049      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a72:	d02f      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a78:	d828      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a7e:	d01a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a84:	d822      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8e:	d007      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a90:	e01c      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a92:	4bab      	ldr	r3, [pc, #684]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	4aaa      	ldr	r2, [pc, #680]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a9e:	e01a      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	2102      	movs	r1, #2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fc25 	bl	80072f8 <RCCEx_PLL2_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ab4:	e00f      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aba:	3328      	adds	r3, #40	; 0x28
 8005abc:	2102      	movs	r1, #2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 fccc 	bl	800745c <RCCEx_PLL3_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aca:	e004      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ade:	4b98      	ldr	r3, [pc, #608]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aec:	4a94      	ldr	r2, [pc, #592]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aee:	430b      	orrs	r3, r1
 8005af0:	6513      	str	r3, [r2, #80]	; 0x50
 8005af2:	e003      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005af8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005b08:	f04f 0900 	mov.w	r9, #0
 8005b0c:	ea58 0309 	orrs.w	r3, r8, r9
 8005b10:	d047      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d82a      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b39 	.word	0x08005b39
 8005b28:	08005b47 	.word	0x08005b47
 8005b2c:	08005b5d 	.word	0x08005b5d
 8005b30:	08005b7b 	.word	0x08005b7b
 8005b34:	08005b7b 	.word	0x08005b7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b38:	4b81      	ldr	r3, [pc, #516]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	4a80      	ldr	r2, [pc, #512]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b44:	e01a      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4a:	3308      	adds	r3, #8
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 fbd2 	bl	80072f8 <RCCEx_PLL2_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b5a:	e00f      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b60:	3328      	adds	r3, #40	; 0x28
 8005b62:	2100      	movs	r1, #0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 fc79 	bl	800745c <RCCEx_PLL3_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b70:	e004      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b78:	e000      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10a      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b84:	4b6e      	ldr	r3, [pc, #440]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	f023 0107 	bic.w	r1, r3, #7
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	4a6b      	ldr	r2, [pc, #428]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6513      	str	r3, [r2, #80]	; 0x50
 8005b98:	e003      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005bae:	f04f 0b00 	mov.w	fp, #0
 8005bb2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005bb6:	d05b      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bc0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005bc4:	d03b      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005bc6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005bca:	d834      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bd0:	d037      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bd6:	d82e      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005bd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bdc:	d033      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005bde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005be2:	d828      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be8:	d01a      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bee:	d822      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005bf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bf8:	d007      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005bfa:	e01c      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bfc:	4b50      	ldr	r3, [pc, #320]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	4a4f      	ldr	r2, [pc, #316]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c08:	e01e      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0e:	3308      	adds	r3, #8
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fb70 	bl	80072f8 <RCCEx_PLL2_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c1e:	e013      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c24:	3328      	adds	r3, #40	; 0x28
 8005c26:	2100      	movs	r1, #0
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 fc17 	bl	800745c <RCCEx_PLL3_Config>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c34:	e008      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c3c:	e004      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c3e:	bf00      	nop
 8005c40:	e002      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c42:	bf00      	nop
 8005c44:	e000      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c50:	4b3b      	ldr	r3, [pc, #236]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c60:	4a37      	ldr	r2, [pc, #220]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c62:	430b      	orrs	r3, r1
 8005c64:	6593      	str	r3, [r2, #88]	; 0x58
 8005c66:	e003      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c86:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	d05d      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c98:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005c9c:	d03b      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005c9e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005ca2:	d834      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ca8:	d037      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005caa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cae:	d82e      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cb4:	d033      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005cb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cba:	d828      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cc0:	d01a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005cc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cc6:	d822      	bhi.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cd0:	d007      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005cd2:	e01c      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	4a19      	ldr	r2, [pc, #100]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce0:	e01e      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 fb04 	bl	80072f8 <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cf6:	e013      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfc:	3328      	adds	r3, #40	; 0x28
 8005cfe:	2100      	movs	r1, #0
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 fbab 	bl	800745c <RCCEx_PLL3_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d0c:	e008      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d14:	e004      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d16:	bf00      	nop
 8005d18:	e002      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10d      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d38:	4a01      	ldr	r2, [pc, #4]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d3a:	430b      	orrs	r3, r1
 8005d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d3e:	e005      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005d58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d62:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	d03a      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d72:	2b30      	cmp	r3, #48	; 0x30
 8005d74:	d01f      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005d76:	2b30      	cmp	r3, #48	; 0x30
 8005d78:	d819      	bhi.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d00c      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d815      	bhi.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d019      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d86:	2b10      	cmp	r3, #16
 8005d88:	d111      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d8a:	4baa      	ldr	r3, [pc, #680]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	4aa9      	ldr	r2, [pc, #676]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005d96:	e011      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	2102      	movs	r1, #2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 faa9 	bl	80072f8 <RCCEx_PLL2_Config>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005dac:	e006      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005db4:	e002      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005db6:	bf00      	nop
 8005db8:	e000      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005dc4:	4b9b      	ldr	r3, [pc, #620]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	4a98      	ldr	r2, [pc, #608]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dd8:	e003      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005dde:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005dee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005df2:	2300      	movs	r3, #0
 8005df4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005df8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	d051      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e0c:	d035      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e12:	d82e      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e18:	d031      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e1e:	d828      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e24:	d01a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2a:	d822      	bhi.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e34:	d007      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005e36:	e01c      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e38:	4b7e      	ldr	r3, [pc, #504]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	4a7d      	ldr	r2, [pc, #500]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e44:	e01c      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 fa52 	bl	80072f8 <RCCEx_PLL2_Config>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e5a:	e011      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e60:	3328      	adds	r3, #40	; 0x28
 8005e62:	2100      	movs	r1, #0
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 faf9 	bl	800745c <RCCEx_PLL3_Config>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e70:	e006      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e78:	e002      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005e7a:	bf00      	nop
 8005e7c:	e000      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e88:	4b6a      	ldr	r3, [pc, #424]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e96:	4a67      	ldr	r2, [pc, #412]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6513      	str	r3, [r2, #80]	; 0x50
 8005e9c:	e003      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ea2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005eb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ebc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	d053      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed0:	d033      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005ed2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed6:	d82c      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ed8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005edc:	d02f      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005ede:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ee2:	d826      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ee4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ee8:	d02b      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005eea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005eee:	d820      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef4:	d012      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005ef6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005efa:	d81a      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d022      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f04:	d115      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 f9f2 	bl	80072f8 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f1a:	e015      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f20:	3328      	adds	r3, #40	; 0x28
 8005f22:	2101      	movs	r1, #1
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 fa99 	bl	800745c <RCCEx_PLL3_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f30:	e00a      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e004      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e002      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f50:	4b38      	ldr	r3, [pc, #224]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5e:	4a35      	ldr	r2, [pc, #212]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6513      	str	r3, [r2, #80]	; 0x50
 8005f64:	e003      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f84:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	d058      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f9a:	d033      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa0:	d82c      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa6:	d02f      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fac:	d826      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fb2:	d02b      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005fb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fb8:	d820      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fbe:	d012      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc4:	d81a      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d022      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fce:	d115      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 f98d 	bl	80072f8 <RCCEx_PLL2_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fe4:	e015      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fea:	3328      	adds	r3, #40	; 0x28
 8005fec:	2101      	movs	r1, #1
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 fa34 	bl	800745c <RCCEx_PLL3_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ffa:	e00a      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006002:	e006      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006004:	bf00      	nop
 8006006:	e004      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006008:	bf00      	nop
 800600a:	e002      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800600c:	bf00      	nop
 800600e:	e000      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006012:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10e      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800602a:	4a02      	ldr	r2, [pc, #8]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800602c:	430b      	orrs	r3, r1
 800602e:	6593      	str	r3, [r2, #88]	; 0x58
 8006030:	e006      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006032:	bf00      	nop
 8006034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006038:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800603c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800604c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006050:	2300      	movs	r3, #0
 8006052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006056:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800605a:	460b      	mov	r3, r1
 800605c:	4313      	orrs	r3, r2
 800605e:	d037      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800606a:	d00e      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800606c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006070:	d816      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d018      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607a:	d111      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800607c:	4bc4      	ldr	r3, [pc, #784]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	4ac3      	ldr	r2, [pc, #780]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006088:	e00f      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608e:	3308      	adds	r3, #8
 8006090:	2101      	movs	r1, #1
 8006092:	4618      	mov	r0, r3
 8006094:	f001 f930 	bl	80072f8 <RCCEx_PLL2_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800609e:	e004      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060a6:	e000      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80060a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060b2:	4bb7      	ldr	r3, [pc, #732]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c0:	4ab3      	ldr	r2, [pc, #716]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060c2:	430b      	orrs	r3, r1
 80060c4:	6513      	str	r3, [r2, #80]	; 0x50
 80060c6:	e003      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80060dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060e0:	2300      	movs	r3, #0
 80060e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80060ea:	460b      	mov	r3, r1
 80060ec:	4313      	orrs	r3, r2
 80060ee:	d039      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d81c      	bhi.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	0800613d 	.word	0x0800613d
 8006104:	08006111 	.word	0x08006111
 8006108:	0800611f 	.word	0x0800611f
 800610c:	0800613d 	.word	0x0800613d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006110:	4b9f      	ldr	r3, [pc, #636]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	4a9e      	ldr	r2, [pc, #632]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800611a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800611c:	e00f      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800611e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006122:	3308      	adds	r3, #8
 8006124:	2102      	movs	r1, #2
 8006126:	4618      	mov	r0, r3
 8006128:	f001 f8e6 	bl	80072f8 <RCCEx_PLL2_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006132:	e004      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800613a:	e000      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800613c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800613e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006146:	4b92      	ldr	r3, [pc, #584]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614a:	f023 0103 	bic.w	r1, r3, #3
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006154:	4a8e      	ldr	r2, [pc, #568]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006156:	430b      	orrs	r3, r1
 8006158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800615a:	e003      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006160:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006174:	2300      	movs	r3, #0
 8006176:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800617a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800617e:	460b      	mov	r3, r1
 8006180:	4313      	orrs	r3, r2
 8006182:	f000 8099 	beq.w	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006186:	4b83      	ldr	r3, [pc, #524]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a82      	ldr	r2, [pc, #520]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800618c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006190:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006192:	f7fb fb85 	bl	80018a0 <HAL_GetTick>
 8006196:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800619a:	e00b      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619c:	f7fb fb80 	bl	80018a0 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b64      	cmp	r3, #100	; 0x64
 80061aa:	d903      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061b2:	e005      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b4:	4b77      	ldr	r3, [pc, #476]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0ed      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80061c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d173      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061c8:	4b71      	ldr	r3, [pc, #452]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061d4:	4053      	eors	r3, r2
 80061d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d015      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061de:	4b6c      	ldr	r3, [pc, #432]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ea:	4b69      	ldr	r3, [pc, #420]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	4a68      	ldr	r2, [pc, #416]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061f6:	4b66      	ldr	r3, [pc, #408]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	4a65      	ldr	r2, [pc, #404]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006200:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006202:	4a63      	ldr	r2, [pc, #396]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006208:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800620a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006216:	d118      	bne.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006218:	f7fb fb42 	bl	80018a0 <HAL_GetTick>
 800621c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006220:	e00d      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006222:	f7fb fb3d 	bl	80018a0 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800622c:	1ad2      	subs	r2, r2, r3
 800622e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006232:	429a      	cmp	r2, r3
 8006234:	d903      	bls.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800623c:	e005      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800623e:	4b54      	ldr	r3, [pc, #336]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0eb      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800624a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800624e:	2b00      	cmp	r3, #0
 8006250:	d129      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006256:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800625a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006262:	d10e      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006264:	4b4a      	ldr	r3, [pc, #296]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006274:	091a      	lsrs	r2, r3, #4
 8006276:	4b48      	ldr	r3, [pc, #288]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006278:	4013      	ands	r3, r2
 800627a:	4a45      	ldr	r2, [pc, #276]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800627c:	430b      	orrs	r3, r1
 800627e:	6113      	str	r3, [r2, #16]
 8006280:	e005      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006282:	4b43      	ldr	r3, [pc, #268]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	4a42      	ldr	r2, [pc, #264]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006288:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800628c:	6113      	str	r3, [r2, #16]
 800628e:	4b40      	ldr	r3, [pc, #256]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006290:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800629a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629e:	4a3c      	ldr	r2, [pc, #240]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6713      	str	r3, [r2, #112]	; 0x70
 80062a4:	e008      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80062ae:	e003      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f002 0301 	and.w	r3, r2, #1
 80062c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c8:	2300      	movs	r3, #0
 80062ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80062d2:	460b      	mov	r3, r1
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f000 808f 	beq.w	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e0:	2b28      	cmp	r3, #40	; 0x28
 80062e2:	d871      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80062e4:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	080063d1 	.word	0x080063d1
 80062f0:	080063c9 	.word	0x080063c9
 80062f4:	080063c9 	.word	0x080063c9
 80062f8:	080063c9 	.word	0x080063c9
 80062fc:	080063c9 	.word	0x080063c9
 8006300:	080063c9 	.word	0x080063c9
 8006304:	080063c9 	.word	0x080063c9
 8006308:	080063c9 	.word	0x080063c9
 800630c:	0800639d 	.word	0x0800639d
 8006310:	080063c9 	.word	0x080063c9
 8006314:	080063c9 	.word	0x080063c9
 8006318:	080063c9 	.word	0x080063c9
 800631c:	080063c9 	.word	0x080063c9
 8006320:	080063c9 	.word	0x080063c9
 8006324:	080063c9 	.word	0x080063c9
 8006328:	080063c9 	.word	0x080063c9
 800632c:	080063b3 	.word	0x080063b3
 8006330:	080063c9 	.word	0x080063c9
 8006334:	080063c9 	.word	0x080063c9
 8006338:	080063c9 	.word	0x080063c9
 800633c:	080063c9 	.word	0x080063c9
 8006340:	080063c9 	.word	0x080063c9
 8006344:	080063c9 	.word	0x080063c9
 8006348:	080063c9 	.word	0x080063c9
 800634c:	080063d1 	.word	0x080063d1
 8006350:	080063c9 	.word	0x080063c9
 8006354:	080063c9 	.word	0x080063c9
 8006358:	080063c9 	.word	0x080063c9
 800635c:	080063c9 	.word	0x080063c9
 8006360:	080063c9 	.word	0x080063c9
 8006364:	080063c9 	.word	0x080063c9
 8006368:	080063c9 	.word	0x080063c9
 800636c:	080063d1 	.word	0x080063d1
 8006370:	080063c9 	.word	0x080063c9
 8006374:	080063c9 	.word	0x080063c9
 8006378:	080063c9 	.word	0x080063c9
 800637c:	080063c9 	.word	0x080063c9
 8006380:	080063c9 	.word	0x080063c9
 8006384:	080063c9 	.word	0x080063c9
 8006388:	080063c9 	.word	0x080063c9
 800638c:	080063d1 	.word	0x080063d1
 8006390:	58024400 	.word	0x58024400
 8006394:	58024800 	.word	0x58024800
 8006398:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800639c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a0:	3308      	adds	r3, #8
 80063a2:	2101      	movs	r1, #1
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 ffa7 	bl	80072f8 <RCCEx_PLL2_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063b0:	e00f      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b6:	3328      	adds	r3, #40	; 0x28
 80063b8:	2101      	movs	r1, #1
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 f84e 	bl	800745c <RCCEx_PLL3_Config>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063c6:	e004      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80063ce:	e000      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80063d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063da:	4bbf      	ldr	r3, [pc, #764]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063e8:	4abb      	ldr	r2, [pc, #748]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80063ea:	430b      	orrs	r3, r1
 80063ec:	6553      	str	r3, [r2, #84]	; 0x54
 80063ee:	e003      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f002 0302 	and.w	r3, r2, #2
 8006404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006408:	2300      	movs	r3, #0
 800640a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800640e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006412:	460b      	mov	r3, r1
 8006414:	4313      	orrs	r3, r2
 8006416:	d041      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800641e:	2b05      	cmp	r3, #5
 8006420:	d824      	bhi.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	08006475 	.word	0x08006475
 800642c:	08006441 	.word	0x08006441
 8006430:	08006457 	.word	0x08006457
 8006434:	08006475 	.word	0x08006475
 8006438:	08006475 	.word	0x08006475
 800643c:	08006475 	.word	0x08006475
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006444:	3308      	adds	r3, #8
 8006446:	2101      	movs	r1, #1
 8006448:	4618      	mov	r0, r3
 800644a:	f000 ff55 	bl	80072f8 <RCCEx_PLL2_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006454:	e00f      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645a:	3328      	adds	r3, #40	; 0x28
 800645c:	2101      	movs	r1, #1
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fffc 	bl	800745c <RCCEx_PLL3_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800646a:	e004      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006472:	e000      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006476:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800647e:	4b96      	ldr	r3, [pc, #600]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f023 0107 	bic.w	r1, r3, #7
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648c:	4a92      	ldr	r2, [pc, #584]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800648e:	430b      	orrs	r3, r1
 8006490:	6553      	str	r3, [r2, #84]	; 0x54
 8006492:	e003      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006498:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f002 0304 	and.w	r3, r2, #4
 80064a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064b2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064b6:	460b      	mov	r3, r1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	d044      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	2b05      	cmp	r3, #5
 80064c6:	d825      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80064c8:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	0800651d 	.word	0x0800651d
 80064d4:	080064e9 	.word	0x080064e9
 80064d8:	080064ff 	.word	0x080064ff
 80064dc:	0800651d 	.word	0x0800651d
 80064e0:	0800651d 	.word	0x0800651d
 80064e4:	0800651d 	.word	0x0800651d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ec:	3308      	adds	r3, #8
 80064ee:	2101      	movs	r1, #1
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 ff01 	bl	80072f8 <RCCEx_PLL2_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064fc:	e00f      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006502:	3328      	adds	r3, #40	; 0x28
 8006504:	2101      	movs	r1, #1
 8006506:	4618      	mov	r0, r3
 8006508:	f000 ffa8 	bl	800745c <RCCEx_PLL3_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006512:	e004      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800651a:	e000      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800651c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006526:	4b6c      	ldr	r3, [pc, #432]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652a:	f023 0107 	bic.w	r1, r3, #7
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006536:	4a68      	ldr	r2, [pc, #416]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006538:	430b      	orrs	r3, r1
 800653a:	6593      	str	r3, [r2, #88]	; 0x58
 800653c:	e003      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006542:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f002 0320 	and.w	r3, r2, #32
 8006552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006556:	2300      	movs	r3, #0
 8006558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800655c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006560:	460b      	mov	r3, r1
 8006562:	4313      	orrs	r3, r2
 8006564:	d055      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800656e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006572:	d033      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006578:	d82c      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800657a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657e:	d02f      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006584:	d826      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006586:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800658a:	d02b      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800658c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006590:	d820      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006596:	d012      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800659c:	d81a      	bhi.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d022      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80065a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065a6:	d115      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ac:	3308      	adds	r3, #8
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fea1 	bl	80072f8 <RCCEx_PLL2_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065bc:	e015      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c2:	3328      	adds	r3, #40	; 0x28
 80065c4:	2102      	movs	r1, #2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 ff48 	bl	800745c <RCCEx_PLL3_Config>
 80065cc:	4603      	mov	r3, r0
 80065ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065d2:	e00a      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065da:	e006      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80065dc:	bf00      	nop
 80065de:	e004      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80065e0:	bf00      	nop
 80065e2:	e002      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80065e4:	bf00      	nop
 80065e6:	e000      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80065e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10b      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f2:	4b39      	ldr	r3, [pc, #228]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006602:	4a35      	ldr	r2, [pc, #212]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006604:	430b      	orrs	r3, r1
 8006606:	6553      	str	r3, [r2, #84]	; 0x54
 8006608:	e003      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800660e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800661e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006622:	2300      	movs	r3, #0
 8006624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006628:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800662c:	460b      	mov	r3, r1
 800662e:	4313      	orrs	r3, r2
 8006630:	d058      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800663a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800663e:	d033      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006640:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006644:	d82c      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664a:	d02f      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800664c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006650:	d826      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006652:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006656:	d02b      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800665c:	d820      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800665e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006662:	d012      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006668:	d81a      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d022      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800666e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006672:	d115      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006678:	3308      	adds	r3, #8
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fe3b 	bl	80072f8 <RCCEx_PLL2_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006688:	e015      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668e:	3328      	adds	r3, #40	; 0x28
 8006690:	2102      	movs	r1, #2
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fee2 	bl	800745c <RCCEx_PLL3_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800669e:	e00a      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066a6:	e006      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066a8:	bf00      	nop
 80066aa:	e004      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066ac:	bf00      	nop
 80066ae:	e002      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066b0:	bf00      	nop
 80066b2:	e000      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10e      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066be:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80066c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066ce:	4a02      	ldr	r2, [pc, #8]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6593      	str	r3, [r2, #88]	; 0x58
 80066d4:	e006      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80066d6:	bf00      	nop
 80066d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80066f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066f4:	2300      	movs	r3, #0
 80066f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80066fe:	460b      	mov	r3, r1
 8006700:	4313      	orrs	r3, r2
 8006702:	d055      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800670c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006710:	d033      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006712:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006716:	d82c      	bhi.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800671c:	d02f      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800671e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006722:	d826      	bhi.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006724:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006728:	d02b      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800672a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800672e:	d820      	bhi.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006734:	d012      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800673a:	d81a      	bhi.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d022      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006744:	d115      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674a:	3308      	adds	r3, #8
 800674c:	2100      	movs	r1, #0
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fdd2 	bl	80072f8 <RCCEx_PLL2_Config>
 8006754:	4603      	mov	r3, r0
 8006756:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800675a:	e015      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006760:	3328      	adds	r3, #40	; 0x28
 8006762:	2102      	movs	r1, #2
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fe79 	bl	800745c <RCCEx_PLL3_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006770:	e00a      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006778:	e006      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800677a:	bf00      	nop
 800677c:	e004      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800677e:	bf00      	nop
 8006780:	e002      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006782:	bf00      	nop
 8006784:	e000      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006786:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006790:	4ba0      	ldr	r3, [pc, #640]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006794:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800679c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067a0:	4a9c      	ldr	r2, [pc, #624]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067a2:	430b      	orrs	r3, r1
 80067a4:	6593      	str	r3, [r2, #88]	; 0x58
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f002 0308 	and.w	r3, r2, #8
 80067bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	d01e      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067dc:	d10c      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e2:	3328      	adds	r3, #40	; 0x28
 80067e4:	2102      	movs	r1, #2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fe38 	bl	800745c <RCCEx_PLL3_Config>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80067f8:	4b86      	ldr	r3, [pc, #536]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006808:	4a82      	ldr	r2, [pc, #520]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800680a:	430b      	orrs	r3, r1
 800680c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	f002 0310 	and.w	r3, r2, #16
 800681a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800681e:	2300      	movs	r3, #0
 8006820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006824:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006828:	460b      	mov	r3, r1
 800682a:	4313      	orrs	r3, r2
 800682c:	d01e      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683a:	d10c      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006840:	3328      	adds	r3, #40	; 0x28
 8006842:	2102      	movs	r1, #2
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fe09 	bl	800745c <RCCEx_PLL3_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006856:	4b6f      	ldr	r3, [pc, #444]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800685e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006866:	4a6b      	ldr	r2, [pc, #428]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006868:	430b      	orrs	r3, r1
 800686a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006878:	67bb      	str	r3, [r7, #120]	; 0x78
 800687a:	2300      	movs	r3, #0
 800687c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800687e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006882:	460b      	mov	r3, r1
 8006884:	4313      	orrs	r3, r2
 8006886:	d03e      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006894:	d022      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800689a:	d81b      	bhi.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a4:	d00b      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80068a6:	e015      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ac:	3308      	adds	r3, #8
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fd21 	bl	80072f8 <RCCEx_PLL2_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068bc:	e00f      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c2:	3328      	adds	r3, #40	; 0x28
 80068c4:	2102      	movs	r1, #2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fdc8 	bl	800745c <RCCEx_PLL3_Config>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068d2:	e004      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80068da:	e000      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80068dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10b      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068e6:	4b4b      	ldr	r3, [pc, #300]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068f6:	4a47      	ldr	r2, [pc, #284]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6593      	str	r3, [r2, #88]	; 0x58
 80068fc:	e003      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006902:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006912:	673b      	str	r3, [r7, #112]	; 0x70
 8006914:	2300      	movs	r3, #0
 8006916:	677b      	str	r3, [r7, #116]	; 0x74
 8006918:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800691c:	460b      	mov	r3, r1
 800691e:	4313      	orrs	r3, r2
 8006920:	d03b      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800692a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800692e:	d01f      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006930:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006934:	d818      	bhi.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693a:	d003      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800693c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006940:	d007      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006942:	e011      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006944:	4b33      	ldr	r3, [pc, #204]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	4a32      	ldr	r2, [pc, #200]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800694a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006950:	e00f      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006956:	3328      	adds	r3, #40	; 0x28
 8006958:	2101      	movs	r1, #1
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fd7e 	bl	800745c <RCCEx_PLL3_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006966:	e004      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800696e:	e000      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006972:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800697a:	4b26      	ldr	r3, [pc, #152]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800698a:	4a22      	ldr	r2, [pc, #136]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800698c:	430b      	orrs	r3, r1
 800698e:	6553      	str	r3, [r2, #84]	; 0x54
 8006990:	e003      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006996:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80069a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069a8:	2300      	movs	r3, #0
 80069aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80069b0:	460b      	mov	r3, r1
 80069b2:	4313      	orrs	r3, r2
 80069b4:	d034      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80069c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c4:	d007      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80069c6:	e011      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	4a11      	ldr	r2, [pc, #68]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069d4:	e00e      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069da:	3308      	adds	r3, #8
 80069dc:	2102      	movs	r1, #2
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fc8a 	bl	80072f8 <RCCEx_PLL2_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069ea:	e003      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10d      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0a:	4a02      	ldr	r2, [pc, #8]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a10:	e006      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a12:	bf00      	nop
 8006a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a2e:	2300      	movs	r3, #0
 8006a30:	667b      	str	r3, [r7, #100]	; 0x64
 8006a32:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006a36:	460b      	mov	r3, r1
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	d00c      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a40:	3328      	adds	r3, #40	; 0x28
 8006a42:	2102      	movs	r1, #2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fd09 	bl	800745c <RCCEx_PLL3_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006a62:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a64:	2300      	movs	r3, #0
 8006a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a68:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	d036      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7c:	d018      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006a7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a82:	d811      	bhi.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a88:	d014      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8e:	d80b      	bhi.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d011      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a98:	d106      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9a:	4bb7      	ldr	r3, [pc, #732]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	4ab6      	ldr	r2, [pc, #728]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006aa6:	e008      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006aae:	e004      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ab0:	bf00      	nop
 8006ab2:	e002      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ab4:	bf00      	nop
 8006ab6:	e000      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ac2:	4bad      	ldr	r3, [pc, #692]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ad0:	4aa9      	ldr	r2, [pc, #676]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	6553      	str	r3, [r2, #84]	; 0x54
 8006ad6:	e003      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006adc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006aec:	653b      	str	r3, [r7, #80]	; 0x50
 8006aee:	2300      	movs	r3, #0
 8006af0:	657b      	str	r3, [r7, #84]	; 0x54
 8006af2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006af6:	460b      	mov	r3, r1
 8006af8:	4313      	orrs	r3, r2
 8006afa:	d009      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006afc:	4b9e      	ldr	r3, [pc, #632]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	4a9b      	ldr	r2, [pc, #620]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b0c:	430b      	orrs	r3, r1
 8006b0e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b1e:	2300      	movs	r3, #0
 8006b20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006b26:	460b      	mov	r3, r1
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b2c:	4b92      	ldr	r3, [pc, #584]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b30:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b3a:	4a8f      	ldr	r2, [pc, #572]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b4e:	2300      	movs	r3, #0
 8006b50:	647b      	str	r3, [r7, #68]	; 0x44
 8006b52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006b56:	460b      	mov	r3, r1
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b5c:	4b86      	ldr	r3, [pc, #536]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	4a85      	ldr	r2, [pc, #532]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b66:	6113      	str	r3, [r2, #16]
 8006b68:	4b83      	ldr	r3, [pc, #524]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b6a:	6919      	ldr	r1, [r3, #16]
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b74:	4a80      	ldr	r2, [pc, #512]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b76:	430b      	orrs	r3, r1
 8006b78:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b88:	2300      	movs	r3, #0
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006b90:	460b      	mov	r3, r1
 8006b92:	4313      	orrs	r3, r2
 8006b94:	d009      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b96:	4b78      	ldr	r3, [pc, #480]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	4a74      	ldr	r2, [pc, #464]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb8:	2300      	movs	r3, #0
 8006bba:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	d00a      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bc6:	4b6c      	ldr	r3, [pc, #432]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	4a68      	ldr	r2, [pc, #416]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	2100      	movs	r1, #0
 8006be6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	d011      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	2100      	movs	r1, #0
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fb79 	bl	80072f8 <RCCEx_PLL2_Config>
 8006c06:	4603      	mov	r3, r0
 8006c08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	2100      	movs	r1, #0
 8006c26:	6239      	str	r1, [r7, #32]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c32:	460b      	mov	r3, r1
 8006c34:	4313      	orrs	r3, r2
 8006c36:	d011      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	2101      	movs	r1, #1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fb59 	bl	80072f8 <RCCEx_PLL2_Config>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	2100      	movs	r1, #0
 8006c66:	61b9      	str	r1, [r7, #24]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c72:	460b      	mov	r3, r1
 8006c74:	4313      	orrs	r3, r2
 8006c76:	d011      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	2102      	movs	r1, #2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fb39 	bl	80072f8 <RCCEx_PLL2_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	6139      	str	r1, [r7, #16]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	d011      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbc:	3328      	adds	r3, #40	; 0x28
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fbcb 	bl	800745c <RCCEx_PLL3_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	f003 0310 	and.w	r3, r3, #16
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	d011      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfc:	3328      	adds	r3, #40	; 0x28
 8006cfe:	2101      	movs	r1, #1
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 fbab 	bl	800745c <RCCEx_PLL3_Config>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	2100      	movs	r1, #0
 8006d26:	6039      	str	r1, [r7, #0]
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	607b      	str	r3, [r7, #4]
 8006d2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	d011      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3c:	3328      	adds	r3, #40	; 0x28
 8006d3e:	2102      	movs	r1, #2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fb8b 	bl	800745c <RCCEx_PLL3_Config>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006d5c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e000      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006d70:	46bd      	mov	sp, r7
 8006d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d76:	bf00      	nop
 8006d78:	58024400 	.word	0x58024400

08006d7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d80:	f7fe fe00 	bl	8005984 <HAL_RCC_GetHCLKFreq>
 8006d84:	4602      	mov	r2, r0
 8006d86:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	091b      	lsrs	r3, r3, #4
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	4904      	ldr	r1, [pc, #16]	; (8006da4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d92:	5ccb      	ldrb	r3, [r1, r3]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	58024400 	.word	0x58024400
 8006da4:	0800aa98 	.word	0x0800aa98

08006da8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b089      	sub	sp, #36	; 0x24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006db0:	4ba1      	ldr	r3, [pc, #644]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006dba:	4b9f      	ldr	r3, [pc, #636]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	0b1b      	lsrs	r3, r3, #12
 8006dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006dc6:	4b9c      	ldr	r3, [pc, #624]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	091b      	lsrs	r3, r3, #4
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006dd2:	4b99      	ldr	r3, [pc, #612]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	08db      	lsrs	r3, r3, #3
 8006dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	fb02 f303 	mul.w	r3, r2, r3
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8111 	beq.w	8007018 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	f000 8083 	beq.w	8006f04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	f200 80a1 	bhi.w	8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d056      	beq.n	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e12:	e099      	b.n	8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e14:	4b88      	ldr	r3, [pc, #544]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02d      	beq.n	8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e20:	4b85      	ldr	r3, [pc, #532]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	08db      	lsrs	r3, r3, #3
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	4a84      	ldr	r2, [pc, #528]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4a:	4b7b      	ldr	r3, [pc, #492]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e7a:	e087      	b.n	8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8e:	4b6a      	ldr	r3, [pc, #424]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ebe:	e065      	b.n	8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed2:	4b59      	ldr	r3, [pc, #356]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f02:	e043      	b.n	8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800704c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f16:	4b48      	ldr	r3, [pc, #288]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f46:	e021      	b.n	8006f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5a:	4b37      	ldr	r3, [pc, #220]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006f8c:	4b2a      	ldr	r3, [pc, #168]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	0a5b      	lsrs	r3, r3, #9
 8006f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb2:	ee17 2a90 	vmov	r2, s15
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006fba:	4b1f      	ldr	r3, [pc, #124]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	0c1b      	lsrs	r3, r3, #16
 8006fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe0:	ee17 2a90 	vmov	r2, s15
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006fe8:	4b13      	ldr	r3, [pc, #76]	; (8007038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	0e1b      	lsrs	r3, r3, #24
 8006fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007002:	edd7 6a07 	vldr	s13, [r7, #28]
 8007006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800700a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800700e:	ee17 2a90 	vmov	r2, s15
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007016:	e008      	b.n	800702a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	609a      	str	r2, [r3, #8]
}
 800702a:	bf00      	nop
 800702c:	3724      	adds	r7, #36	; 0x24
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	58024400 	.word	0x58024400
 800703c:	03d09000 	.word	0x03d09000
 8007040:	46000000 	.word	0x46000000
 8007044:	4c742400 	.word	0x4c742400
 8007048:	4a742400 	.word	0x4a742400
 800704c:	4bbebc20 	.word	0x4bbebc20

08007050 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007050:	b480      	push	{r7}
 8007052:	b089      	sub	sp, #36	; 0x24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007058:	4ba1      	ldr	r3, [pc, #644]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705c:	f003 0303 	and.w	r3, r3, #3
 8007060:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007062:	4b9f      	ldr	r3, [pc, #636]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	0d1b      	lsrs	r3, r3, #20
 8007068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800706c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800706e:	4b9c      	ldr	r3, [pc, #624]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	0a1b      	lsrs	r3, r3, #8
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800707a:	4b99      	ldr	r3, [pc, #612]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707e:	08db      	lsrs	r3, r3, #3
 8007080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	fb02 f303 	mul.w	r3, r2, r3
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007092:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8111 	beq.w	80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	f000 8083 	beq.w	80071ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	f200 80a1 	bhi.w	80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d056      	beq.n	8007168 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070ba:	e099      	b.n	80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070bc:	4b88      	ldr	r3, [pc, #544]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d02d      	beq.n	8007124 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070c8:	4b85      	ldr	r3, [pc, #532]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	08db      	lsrs	r3, r3, #3
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	4a84      	ldr	r2, [pc, #528]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80070d4:	fa22 f303 	lsr.w	r3, r2, r3
 80070d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	ee07 3a90 	vmov	s15, r3
 80070e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f2:	4b7b      	ldr	r3, [pc, #492]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007102:	ed97 6a03 	vldr	s12, [r7, #12]
 8007106:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800710a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800711a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007122:	e087      	b.n	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007136:	4b6a      	ldr	r3, [pc, #424]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007146:	ed97 6a03 	vldr	s12, [r7, #12]
 800714a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800714e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800715a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007166:	e065      	b.n	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007172:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b59      	ldr	r3, [pc, #356]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a03 	vldr	s12, [r7, #12]
 800718e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071aa:	e043      	b.n	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b48      	ldr	r3, [pc, #288]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ee:	e021      	b.n	8007234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b37      	ldr	r3, [pc, #220]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a03 	vldr	s12, [r7, #12]
 8007216:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007232:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007234:	4b2a      	ldr	r3, [pc, #168]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	0a5b      	lsrs	r3, r3, #9
 800723a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800724a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800724e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725a:	ee17 2a90 	vmov	r2, s15
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007262:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	0c1b      	lsrs	r3, r3, #16
 8007268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007278:	ee37 7a87 	vadd.f32	s14, s15, s14
 800727c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007288:	ee17 2a90 	vmov	r2, s15
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007290:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	0e1b      	lsrs	r3, r3, #24
 8007296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b6:	ee17 2a90 	vmov	r2, s15
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072be:	e008      	b.n	80072d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	609a      	str	r2, [r3, #8]
}
 80072d2:	bf00      	nop
 80072d4:	3724      	adds	r7, #36	; 0x24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	58024400 	.word	0x58024400
 80072e4:	03d09000 	.word	0x03d09000
 80072e8:	46000000 	.word	0x46000000
 80072ec:	4c742400 	.word	0x4c742400
 80072f0:	4a742400 	.word	0x4a742400
 80072f4:	4bbebc20 	.word	0x4bbebc20

080072f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007306:	4b53      	ldr	r3, [pc, #332]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d101      	bne.n	8007316 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e099      	b.n	800744a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007316:	4b4f      	ldr	r3, [pc, #316]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a4e      	ldr	r2, [pc, #312]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 800731c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007322:	f7fa fabd 	bl	80018a0 <HAL_GetTick>
 8007326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007328:	e008      	b.n	800733c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800732a:	f7fa fab9 	bl	80018a0 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e086      	b.n	800744a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800733c:	4b45      	ldr	r3, [pc, #276]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f0      	bne.n	800732a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007348:	4b42      	ldr	r3, [pc, #264]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	031b      	lsls	r3, r3, #12
 8007356:	493f      	ldr	r1, [pc, #252]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 8007358:	4313      	orrs	r3, r2
 800735a:	628b      	str	r3, [r1, #40]	; 0x28
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	3b01      	subs	r3, #1
 8007362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	3b01      	subs	r3, #1
 800736c:	025b      	lsls	r3, r3, #9
 800736e:	b29b      	uxth	r3, r3
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	3b01      	subs	r3, #1
 8007378:	041b      	lsls	r3, r3, #16
 800737a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	3b01      	subs	r3, #1
 8007386:	061b      	lsls	r3, r3, #24
 8007388:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800738c:	4931      	ldr	r1, [pc, #196]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 800738e:	4313      	orrs	r3, r2
 8007390:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007392:	4b30      	ldr	r3, [pc, #192]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	492d      	ldr	r1, [pc, #180]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073a4:	4b2b      	ldr	r3, [pc, #172]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	f023 0220 	bic.w	r2, r3, #32
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	4928      	ldr	r1, [pc, #160]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073b6:	4b27      	ldr	r3, [pc, #156]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	4a26      	ldr	r2, [pc, #152]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073bc:	f023 0310 	bic.w	r3, r3, #16
 80073c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073c2:	4b24      	ldr	r3, [pc, #144]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073c6:	4b24      	ldr	r3, [pc, #144]	; (8007458 <RCCEx_PLL2_Config+0x160>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	69d2      	ldr	r2, [r2, #28]
 80073ce:	00d2      	lsls	r2, r2, #3
 80073d0:	4920      	ldr	r1, [pc, #128]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073d6:	4b1f      	ldr	r3, [pc, #124]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	f043 0310 	orr.w	r3, r3, #16
 80073e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073e8:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4a19      	ldr	r2, [pc, #100]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073f4:	e00f      	b.n	8007416 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d106      	bne.n	800740a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80073fc:	4b15      	ldr	r3, [pc, #84]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	4a14      	ldr	r2, [pc, #80]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 8007402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007408:	e005      	b.n	8007416 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	4a11      	ldr	r2, [pc, #68]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 8007410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007414:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007416:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a0e      	ldr	r2, [pc, #56]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 800741c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007422:	f7fa fa3d 	bl	80018a0 <HAL_GetTick>
 8007426:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007428:	e008      	b.n	800743c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800742a:	f7fa fa39 	bl	80018a0 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e006      	b.n	800744a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800743c:	4b05      	ldr	r3, [pc, #20]	; (8007454 <RCCEx_PLL2_Config+0x15c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0f0      	beq.n	800742a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	58024400 	.word	0x58024400
 8007458:	ffff0007 	.word	0xffff0007

0800745c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800746a:	4b53      	ldr	r3, [pc, #332]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b03      	cmp	r3, #3
 8007474:	d101      	bne.n	800747a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e099      	b.n	80075ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800747a:	4b4f      	ldr	r3, [pc, #316]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a4e      	ldr	r2, [pc, #312]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007486:	f7fa fa0b 	bl	80018a0 <HAL_GetTick>
 800748a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800748c:	e008      	b.n	80074a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800748e:	f7fa fa07 	bl	80018a0 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e086      	b.n	80075ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074a0:	4b45      	ldr	r3, [pc, #276]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1f0      	bne.n	800748e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074ac:	4b42      	ldr	r3, [pc, #264]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	051b      	lsls	r3, r3, #20
 80074ba:	493f      	ldr	r1, [pc, #252]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	628b      	str	r3, [r1, #40]	; 0x28
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	3b01      	subs	r3, #1
 80074d0:	025b      	lsls	r3, r3, #9
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	3b01      	subs	r3, #1
 80074dc:	041b      	lsls	r3, r3, #16
 80074de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	061b      	lsls	r3, r3, #24
 80074ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074f0:	4931      	ldr	r1, [pc, #196]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80074f6:	4b30      	ldr	r3, [pc, #192]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	492d      	ldr	r1, [pc, #180]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007504:	4313      	orrs	r3, r2
 8007506:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007508:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	4928      	ldr	r1, [pc, #160]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007516:	4313      	orrs	r3, r2
 8007518:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800751a:	4b27      	ldr	r3, [pc, #156]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	4a26      	ldr	r2, [pc, #152]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007526:	4b24      	ldr	r3, [pc, #144]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800752a:	4b24      	ldr	r3, [pc, #144]	; (80075bc <RCCEx_PLL3_Config+0x160>)
 800752c:	4013      	ands	r3, r2
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	69d2      	ldr	r2, [r2, #28]
 8007532:	00d2      	lsls	r2, r2, #3
 8007534:	4920      	ldr	r1, [pc, #128]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007536:	4313      	orrs	r3, r2
 8007538:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800753a:	4b1f      	ldr	r3, [pc, #124]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	4a1e      	ldr	r2, [pc, #120]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800754c:	4b1a      	ldr	r3, [pc, #104]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	4a19      	ldr	r2, [pc, #100]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007552:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007558:	e00f      	b.n	800757a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d106      	bne.n	800756e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007560:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800756a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800756c:	e005      	b.n	800757a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007572:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007578:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800757a:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a0e      	ldr	r2, [pc, #56]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 8007580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007586:	f7fa f98b 	bl	80018a0 <HAL_GetTick>
 800758a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800758c:	e008      	b.n	80075a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800758e:	f7fa f987 	bl	80018a0 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e006      	b.n	80075ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <RCCEx_PLL3_Config+0x15c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0f0      	beq.n	800758e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	58024400 	.word	0x58024400
 80075bc:	ffff0007 	.word	0xffff0007

080075c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e049      	b.n	8007666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7f9 fbac 	bl	8000d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f000 fbbe 	bl	8007d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e049      	b.n	8007714 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d106      	bne.n	800769a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f841 	bl	800771c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2202      	movs	r2, #2
 800769e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f000 fb67 	bl	8007d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d109      	bne.n	8007754 <HAL_TIM_PWM_Start+0x24>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	bf14      	ite	ne
 800774c:	2301      	movne	r3, #1
 800774e:	2300      	moveq	r3, #0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	e03c      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b04      	cmp	r3, #4
 8007758:	d109      	bne.n	800776e <HAL_TIM_PWM_Start+0x3e>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007760:	b2db      	uxtb	r3, r3
 8007762:	2b01      	cmp	r3, #1
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e02f      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b08      	cmp	r3, #8
 8007772:	d109      	bne.n	8007788 <HAL_TIM_PWM_Start+0x58>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	bf14      	ite	ne
 8007780:	2301      	movne	r3, #1
 8007782:	2300      	moveq	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	e022      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b0c      	cmp	r3, #12
 800778c:	d109      	bne.n	80077a2 <HAL_TIM_PWM_Start+0x72>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b01      	cmp	r3, #1
 8007798:	bf14      	ite	ne
 800779a:	2301      	movne	r3, #1
 800779c:	2300      	moveq	r3, #0
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	e015      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b10      	cmp	r3, #16
 80077a6:	d109      	bne.n	80077bc <HAL_TIM_PWM_Start+0x8c>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	bf14      	ite	ne
 80077b4:	2301      	movne	r3, #1
 80077b6:	2300      	moveq	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	e008      	b.n	80077ce <HAL_TIM_PWM_Start+0x9e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	bf14      	ite	ne
 80077c8:	2301      	movne	r3, #1
 80077ca:	2300      	moveq	r3, #0
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e0ab      	b.n	800792e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_PWM_Start+0xb6>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e4:	e023      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_PWM_Start+0xc6>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f4:	e01b      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d104      	bne.n	8007806 <HAL_TIM_PWM_Start+0xd6>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007804:	e013      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b0c      	cmp	r3, #12
 800780a:	d104      	bne.n	8007816 <HAL_TIM_PWM_Start+0xe6>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007814:	e00b      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b10      	cmp	r3, #16
 800781a:	d104      	bne.n	8007826 <HAL_TIM_PWM_Start+0xf6>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007824:	e003      	b.n	800782e <HAL_TIM_PWM_Start+0xfe>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2202      	movs	r2, #2
 800782a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2201      	movs	r2, #1
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 febc 	bl	80085b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a3d      	ldr	r2, [pc, #244]	; (8007938 <HAL_TIM_PWM_Start+0x208>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <HAL_TIM_PWM_Start+0x13e>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a3c      	ldr	r2, [pc, #240]	; (800793c <HAL_TIM_PWM_Start+0x20c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00e      	beq.n	800786e <HAL_TIM_PWM_Start+0x13e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a3a      	ldr	r2, [pc, #232]	; (8007940 <HAL_TIM_PWM_Start+0x210>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d009      	beq.n	800786e <HAL_TIM_PWM_Start+0x13e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a39      	ldr	r2, [pc, #228]	; (8007944 <HAL_TIM_PWM_Start+0x214>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_TIM_PWM_Start+0x13e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a37      	ldr	r2, [pc, #220]	; (8007948 <HAL_TIM_PWM_Start+0x218>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d101      	bne.n	8007872 <HAL_TIM_PWM_Start+0x142>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <HAL_TIM_PWM_Start+0x144>
 8007872:	2300      	movs	r3, #0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007886:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2a      	ldr	r2, [pc, #168]	; (8007938 <HAL_TIM_PWM_Start+0x208>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d02c      	beq.n	80078ec <HAL_TIM_PWM_Start+0x1bc>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789a:	d027      	beq.n	80078ec <HAL_TIM_PWM_Start+0x1bc>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a2a      	ldr	r2, [pc, #168]	; (800794c <HAL_TIM_PWM_Start+0x21c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d022      	beq.n	80078ec <HAL_TIM_PWM_Start+0x1bc>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a29      	ldr	r2, [pc, #164]	; (8007950 <HAL_TIM_PWM_Start+0x220>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d01d      	beq.n	80078ec <HAL_TIM_PWM_Start+0x1bc>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a27      	ldr	r2, [pc, #156]	; (8007954 <HAL_TIM_PWM_Start+0x224>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d018      	beq.n	80078ec <HAL_TIM_PWM_Start+0x1bc>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a1f      	ldr	r2, [pc, #124]	; (800793c <HAL_TIM_PWM_Start+0x20c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d013      	beq.n	80078ec <HAL_TIM_PWM_Start+0x1bc>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a23      	ldr	r2, [pc, #140]	; (8007958 <HAL_TIM_PWM_Start+0x228>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00e      	beq.n	80078ec <HAL_TIM_PWM_Start+0x1bc>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1b      	ldr	r2, [pc, #108]	; (8007940 <HAL_TIM_PWM_Start+0x210>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <HAL_TIM_PWM_Start+0x1bc>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1f      	ldr	r2, [pc, #124]	; (800795c <HAL_TIM_PWM_Start+0x22c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_TIM_PWM_Start+0x1bc>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1e      	ldr	r2, [pc, #120]	; (8007960 <HAL_TIM_PWM_Start+0x230>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d115      	bne.n	8007918 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	4b1c      	ldr	r3, [pc, #112]	; (8007964 <HAL_TIM_PWM_Start+0x234>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d015      	beq.n	800792a <HAL_TIM_PWM_Start+0x1fa>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007904:	d011      	beq.n	800792a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0201 	orr.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007916:	e008      	b.n	800792a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e000      	b.n	800792c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	40010000 	.word	0x40010000
 800793c:	40010400 	.word	0x40010400
 8007940:	40014000 	.word	0x40014000
 8007944:	40014400 	.word	0x40014400
 8007948:	40014800 	.word	0x40014800
 800794c:	40000400 	.word	0x40000400
 8007950:	40000800 	.word	0x40000800
 8007954:	40000c00 	.word	0x40000c00
 8007958:	40001800 	.word	0x40001800
 800795c:	4000e000 	.word	0x4000e000
 8007960:	4000e400 	.word	0x4000e400
 8007964:	00010007 	.word	0x00010007

08007968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007982:	2302      	movs	r3, #2
 8007984:	e0ff      	b.n	8007b86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b14      	cmp	r3, #20
 8007992:	f200 80f0 	bhi.w	8007b76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007996:	a201      	add	r2, pc, #4	; (adr r2, 800799c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799c:	080079f1 	.word	0x080079f1
 80079a0:	08007b77 	.word	0x08007b77
 80079a4:	08007b77 	.word	0x08007b77
 80079a8:	08007b77 	.word	0x08007b77
 80079ac:	08007a31 	.word	0x08007a31
 80079b0:	08007b77 	.word	0x08007b77
 80079b4:	08007b77 	.word	0x08007b77
 80079b8:	08007b77 	.word	0x08007b77
 80079bc:	08007a73 	.word	0x08007a73
 80079c0:	08007b77 	.word	0x08007b77
 80079c4:	08007b77 	.word	0x08007b77
 80079c8:	08007b77 	.word	0x08007b77
 80079cc:	08007ab3 	.word	0x08007ab3
 80079d0:	08007b77 	.word	0x08007b77
 80079d4:	08007b77 	.word	0x08007b77
 80079d8:	08007b77 	.word	0x08007b77
 80079dc:	08007af5 	.word	0x08007af5
 80079e0:	08007b77 	.word	0x08007b77
 80079e4:	08007b77 	.word	0x08007b77
 80079e8:	08007b77 	.word	0x08007b77
 80079ec:	08007b35 	.word	0x08007b35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fa68 	bl	8007ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f042 0208 	orr.w	r2, r2, #8
 8007a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699a      	ldr	r2, [r3, #24]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0204 	bic.w	r2, r2, #4
 8007a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6999      	ldr	r1, [r3, #24]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	619a      	str	r2, [r3, #24]
      break;
 8007a2e:	e0a5      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68b9      	ldr	r1, [r7, #8]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 fad8 	bl	8007fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699a      	ldr	r2, [r3, #24]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6999      	ldr	r1, [r3, #24]
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	021a      	lsls	r2, r3, #8
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	619a      	str	r2, [r3, #24]
      break;
 8007a70:	e084      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fb41 	bl	8008100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f042 0208 	orr.w	r2, r2, #8
 8007a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69da      	ldr	r2, [r3, #28]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0204 	bic.w	r2, r2, #4
 8007a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	69d9      	ldr	r1, [r3, #28]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	61da      	str	r2, [r3, #28]
      break;
 8007ab0:	e064      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fba9 	bl	8008210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	69da      	ldr	r2, [r3, #28]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69d9      	ldr	r1, [r3, #28]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	021a      	lsls	r2, r3, #8
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	61da      	str	r2, [r3, #28]
      break;
 8007af2:	e043      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fbf2 	bl	80082e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0208 	orr.w	r2, r2, #8
 8007b0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0204 	bic.w	r2, r2, #4
 8007b1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b32:	e023      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fc36 	bl	80083ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	021a      	lsls	r2, r3, #8
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b74:	e002      	b.n	8007b7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop

08007b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d101      	bne.n	8007bac <HAL_TIM_ConfigClockSource+0x1c>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	e0dc      	b.n	8007d66 <HAL_TIM_ConfigClockSource+0x1d6>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	4b6a      	ldr	r3, [pc, #424]	; (8007d70 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a64      	ldr	r2, [pc, #400]	; (8007d74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	f000 80a9 	beq.w	8007d3a <HAL_TIM_ConfigClockSource+0x1aa>
 8007be8:	4a62      	ldr	r2, [pc, #392]	; (8007d74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	f200 80ae 	bhi.w	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007bf0:	4a61      	ldr	r2, [pc, #388]	; (8007d78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	f000 80a1 	beq.w	8007d3a <HAL_TIM_ConfigClockSource+0x1aa>
 8007bf8:	4a5f      	ldr	r2, [pc, #380]	; (8007d78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	f200 80a6 	bhi.w	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c00:	4a5e      	ldr	r2, [pc, #376]	; (8007d7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	f000 8099 	beq.w	8007d3a <HAL_TIM_ConfigClockSource+0x1aa>
 8007c08:	4a5c      	ldr	r2, [pc, #368]	; (8007d7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	f200 809e 	bhi.w	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c14:	f000 8091 	beq.w	8007d3a <HAL_TIM_ConfigClockSource+0x1aa>
 8007c18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c1c:	f200 8096 	bhi.w	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c24:	f000 8089 	beq.w	8007d3a <HAL_TIM_ConfigClockSource+0x1aa>
 8007c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c2c:	f200 808e 	bhi.w	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c34:	d03e      	beq.n	8007cb4 <HAL_TIM_ConfigClockSource+0x124>
 8007c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c3a:	f200 8087 	bhi.w	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c42:	f000 8086 	beq.w	8007d52 <HAL_TIM_ConfigClockSource+0x1c2>
 8007c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c4a:	d87f      	bhi.n	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c4c:	2b70      	cmp	r3, #112	; 0x70
 8007c4e:	d01a      	beq.n	8007c86 <HAL_TIM_ConfigClockSource+0xf6>
 8007c50:	2b70      	cmp	r3, #112	; 0x70
 8007c52:	d87b      	bhi.n	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c54:	2b60      	cmp	r3, #96	; 0x60
 8007c56:	d050      	beq.n	8007cfa <HAL_TIM_ConfigClockSource+0x16a>
 8007c58:	2b60      	cmp	r3, #96	; 0x60
 8007c5a:	d877      	bhi.n	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c5c:	2b50      	cmp	r3, #80	; 0x50
 8007c5e:	d03c      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0x14a>
 8007c60:	2b50      	cmp	r3, #80	; 0x50
 8007c62:	d873      	bhi.n	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c64:	2b40      	cmp	r3, #64	; 0x40
 8007c66:	d058      	beq.n	8007d1a <HAL_TIM_ConfigClockSource+0x18a>
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	d86f      	bhi.n	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c6c:	2b30      	cmp	r3, #48	; 0x30
 8007c6e:	d064      	beq.n	8007d3a <HAL_TIM_ConfigClockSource+0x1aa>
 8007c70:	2b30      	cmp	r3, #48	; 0x30
 8007c72:	d86b      	bhi.n	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d060      	beq.n	8007d3a <HAL_TIM_ConfigClockSource+0x1aa>
 8007c78:	2b20      	cmp	r3, #32
 8007c7a:	d867      	bhi.n	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d05c      	beq.n	8007d3a <HAL_TIM_ConfigClockSource+0x1aa>
 8007c80:	2b10      	cmp	r3, #16
 8007c82:	d05a      	beq.n	8007d3a <HAL_TIM_ConfigClockSource+0x1aa>
 8007c84:	e062      	b.n	8007d4c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c96:	f000 fc6d 	bl	8008574 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	609a      	str	r2, [r3, #8]
      break;
 8007cb2:	e04f      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cc4:	f000 fc56 	bl	8008574 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689a      	ldr	r2, [r3, #8]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cd6:	609a      	str	r2, [r3, #8]
      break;
 8007cd8:	e03c      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f000 fbc6 	bl	8008478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2150      	movs	r1, #80	; 0x50
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fc20 	bl	8008538 <TIM_ITRx_SetConfig>
      break;
 8007cf8:	e02c      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d06:	461a      	mov	r2, r3
 8007d08:	f000 fbe5 	bl	80084d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2160      	movs	r1, #96	; 0x60
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fc10 	bl	8008538 <TIM_ITRx_SetConfig>
      break;
 8007d18:	e01c      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d26:	461a      	mov	r2, r3
 8007d28:	f000 fba6 	bl	8008478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2140      	movs	r1, #64	; 0x40
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 fc00 	bl	8008538 <TIM_ITRx_SetConfig>
      break;
 8007d38:	e00c      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4619      	mov	r1, r3
 8007d44:	4610      	mov	r0, r2
 8007d46:	f000 fbf7 	bl	8008538 <TIM_ITRx_SetConfig>
      break;
 8007d4a:	e003      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d50:	e000      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007d52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	ffceff88 	.word	0xffceff88
 8007d74:	00100040 	.word	0x00100040
 8007d78:	00100030 	.word	0x00100030
 8007d7c:	00100020 	.word	0x00100020

08007d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a44      	ldr	r2, [pc, #272]	; (8007ea4 <TIM_Base_SetConfig+0x124>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d013      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9e:	d00f      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a41      	ldr	r2, [pc, #260]	; (8007ea8 <TIM_Base_SetConfig+0x128>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00b      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a40      	ldr	r2, [pc, #256]	; (8007eac <TIM_Base_SetConfig+0x12c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d007      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a3f      	ldr	r2, [pc, #252]	; (8007eb0 <TIM_Base_SetConfig+0x130>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <TIM_Base_SetConfig+0x40>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a3e      	ldr	r2, [pc, #248]	; (8007eb4 <TIM_Base_SetConfig+0x134>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d108      	bne.n	8007dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a33      	ldr	r2, [pc, #204]	; (8007ea4 <TIM_Base_SetConfig+0x124>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d027      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de0:	d023      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a30      	ldr	r2, [pc, #192]	; (8007ea8 <TIM_Base_SetConfig+0x128>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01f      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a2f      	ldr	r2, [pc, #188]	; (8007eac <TIM_Base_SetConfig+0x12c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d01b      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a2e      	ldr	r2, [pc, #184]	; (8007eb0 <TIM_Base_SetConfig+0x130>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d017      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <TIM_Base_SetConfig+0x134>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d013      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a2c      	ldr	r2, [pc, #176]	; (8007eb8 <TIM_Base_SetConfig+0x138>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00f      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a2b      	ldr	r2, [pc, #172]	; (8007ebc <TIM_Base_SetConfig+0x13c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00b      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <TIM_Base_SetConfig+0x140>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d007      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <TIM_Base_SetConfig+0x144>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d003      	beq.n	8007e2a <TIM_Base_SetConfig+0xaa>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a28      	ldr	r2, [pc, #160]	; (8007ec8 <TIM_Base_SetConfig+0x148>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d108      	bne.n	8007e3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a10      	ldr	r2, [pc, #64]	; (8007ea4 <TIM_Base_SetConfig+0x124>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d00f      	beq.n	8007e88 <TIM_Base_SetConfig+0x108>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a12      	ldr	r2, [pc, #72]	; (8007eb4 <TIM_Base_SetConfig+0x134>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d00b      	beq.n	8007e88 <TIM_Base_SetConfig+0x108>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a11      	ldr	r2, [pc, #68]	; (8007eb8 <TIM_Base_SetConfig+0x138>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d007      	beq.n	8007e88 <TIM_Base_SetConfig+0x108>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a10      	ldr	r2, [pc, #64]	; (8007ebc <TIM_Base_SetConfig+0x13c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_Base_SetConfig+0x108>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a0f      	ldr	r2, [pc, #60]	; (8007ec0 <TIM_Base_SetConfig+0x140>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d103      	bne.n	8007e90 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	615a      	str	r2, [r3, #20]
}
 8007e96:	bf00      	nop
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	40010000 	.word	0x40010000
 8007ea8:	40000400 	.word	0x40000400
 8007eac:	40000800 	.word	0x40000800
 8007eb0:	40000c00 	.word	0x40000c00
 8007eb4:	40010400 	.word	0x40010400
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	40014400 	.word	0x40014400
 8007ec0:	40014800 	.word	0x40014800
 8007ec4:	4000e000 	.word	0x4000e000
 8007ec8:	4000e400 	.word	0x4000e400

08007ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4b37      	ldr	r3, [pc, #220]	; (8007fd4 <TIM_OC1_SetConfig+0x108>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 0303 	bic.w	r3, r3, #3
 8007f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f023 0302 	bic.w	r3, r3, #2
 8007f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a2d      	ldr	r2, [pc, #180]	; (8007fd8 <TIM_OC1_SetConfig+0x10c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00f      	beq.n	8007f48 <TIM_OC1_SetConfig+0x7c>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a2c      	ldr	r2, [pc, #176]	; (8007fdc <TIM_OC1_SetConfig+0x110>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00b      	beq.n	8007f48 <TIM_OC1_SetConfig+0x7c>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a2b      	ldr	r2, [pc, #172]	; (8007fe0 <TIM_OC1_SetConfig+0x114>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d007      	beq.n	8007f48 <TIM_OC1_SetConfig+0x7c>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a2a      	ldr	r2, [pc, #168]	; (8007fe4 <TIM_OC1_SetConfig+0x118>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_OC1_SetConfig+0x7c>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a29      	ldr	r2, [pc, #164]	; (8007fe8 <TIM_OC1_SetConfig+0x11c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d10c      	bne.n	8007f62 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f023 0308 	bic.w	r3, r3, #8
 8007f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f023 0304 	bic.w	r3, r3, #4
 8007f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a1c      	ldr	r2, [pc, #112]	; (8007fd8 <TIM_OC1_SetConfig+0x10c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d00f      	beq.n	8007f8a <TIM_OC1_SetConfig+0xbe>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a1b      	ldr	r2, [pc, #108]	; (8007fdc <TIM_OC1_SetConfig+0x110>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00b      	beq.n	8007f8a <TIM_OC1_SetConfig+0xbe>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a1a      	ldr	r2, [pc, #104]	; (8007fe0 <TIM_OC1_SetConfig+0x114>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d007      	beq.n	8007f8a <TIM_OC1_SetConfig+0xbe>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a19      	ldr	r2, [pc, #100]	; (8007fe4 <TIM_OC1_SetConfig+0x118>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d003      	beq.n	8007f8a <TIM_OC1_SetConfig+0xbe>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <TIM_OC1_SetConfig+0x11c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d111      	bne.n	8007fae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	621a      	str	r2, [r3, #32]
}
 8007fc8:	bf00      	nop
 8007fca:	371c      	adds	r7, #28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	fffeff8f 	.word	0xfffeff8f
 8007fd8:	40010000 	.word	0x40010000
 8007fdc:	40010400 	.word	0x40010400
 8007fe0:	40014000 	.word	0x40014000
 8007fe4:	40014400 	.word	0x40014400
 8007fe8:	40014800 	.word	0x40014800

08007fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f023 0210 	bic.w	r2, r3, #16
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4b34      	ldr	r3, [pc, #208]	; (80080e8 <TIM_OC2_SetConfig+0xfc>)
 8008018:	4013      	ands	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f023 0320 	bic.w	r3, r3, #32
 8008036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a29      	ldr	r2, [pc, #164]	; (80080ec <TIM_OC2_SetConfig+0x100>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_OC2_SetConfig+0x68>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a28      	ldr	r2, [pc, #160]	; (80080f0 <TIM_OC2_SetConfig+0x104>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d10d      	bne.n	8008070 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800805a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800806e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a1e      	ldr	r2, [pc, #120]	; (80080ec <TIM_OC2_SetConfig+0x100>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d00f      	beq.n	8008098 <TIM_OC2_SetConfig+0xac>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a1d      	ldr	r2, [pc, #116]	; (80080f0 <TIM_OC2_SetConfig+0x104>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00b      	beq.n	8008098 <TIM_OC2_SetConfig+0xac>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a1c      	ldr	r2, [pc, #112]	; (80080f4 <TIM_OC2_SetConfig+0x108>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d007      	beq.n	8008098 <TIM_OC2_SetConfig+0xac>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a1b      	ldr	r2, [pc, #108]	; (80080f8 <TIM_OC2_SetConfig+0x10c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC2_SetConfig+0xac>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1a      	ldr	r2, [pc, #104]	; (80080fc <TIM_OC2_SetConfig+0x110>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d113      	bne.n	80080c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800809e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	feff8fff 	.word	0xfeff8fff
 80080ec:	40010000 	.word	0x40010000
 80080f0:	40010400 	.word	0x40010400
 80080f4:	40014000 	.word	0x40014000
 80080f8:	40014400 	.word	0x40014400
 80080fc:	40014800 	.word	0x40014800

08008100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4b33      	ldr	r3, [pc, #204]	; (80081f8 <TIM_OC3_SetConfig+0xf8>)
 800812c:	4013      	ands	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a28      	ldr	r2, [pc, #160]	; (80081fc <TIM_OC3_SetConfig+0xfc>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_OC3_SetConfig+0x66>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a27      	ldr	r2, [pc, #156]	; (8008200 <TIM_OC3_SetConfig+0x100>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d10d      	bne.n	8008182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800816c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a1d      	ldr	r2, [pc, #116]	; (80081fc <TIM_OC3_SetConfig+0xfc>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00f      	beq.n	80081aa <TIM_OC3_SetConfig+0xaa>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a1c      	ldr	r2, [pc, #112]	; (8008200 <TIM_OC3_SetConfig+0x100>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00b      	beq.n	80081aa <TIM_OC3_SetConfig+0xaa>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a1b      	ldr	r2, [pc, #108]	; (8008204 <TIM_OC3_SetConfig+0x104>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d007      	beq.n	80081aa <TIM_OC3_SetConfig+0xaa>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a1a      	ldr	r2, [pc, #104]	; (8008208 <TIM_OC3_SetConfig+0x108>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d003      	beq.n	80081aa <TIM_OC3_SetConfig+0xaa>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a19      	ldr	r2, [pc, #100]	; (800820c <TIM_OC3_SetConfig+0x10c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d113      	bne.n	80081d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	621a      	str	r2, [r3, #32]
}
 80081ec:	bf00      	nop
 80081ee:	371c      	adds	r7, #28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	fffeff8f 	.word	0xfffeff8f
 80081fc:	40010000 	.word	0x40010000
 8008200:	40010400 	.word	0x40010400
 8008204:	40014000 	.word	0x40014000
 8008208:	40014400 	.word	0x40014400
 800820c:	40014800 	.word	0x40014800

08008210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4b24      	ldr	r3, [pc, #144]	; (80082cc <TIM_OC4_SetConfig+0xbc>)
 800823c:	4013      	ands	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	021b      	lsls	r3, r3, #8
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800825a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	031b      	lsls	r3, r3, #12
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4313      	orrs	r3, r2
 8008266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a19      	ldr	r2, [pc, #100]	; (80082d0 <TIM_OC4_SetConfig+0xc0>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00f      	beq.n	8008290 <TIM_OC4_SetConfig+0x80>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a18      	ldr	r2, [pc, #96]	; (80082d4 <TIM_OC4_SetConfig+0xc4>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00b      	beq.n	8008290 <TIM_OC4_SetConfig+0x80>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a17      	ldr	r2, [pc, #92]	; (80082d8 <TIM_OC4_SetConfig+0xc8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d007      	beq.n	8008290 <TIM_OC4_SetConfig+0x80>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a16      	ldr	r2, [pc, #88]	; (80082dc <TIM_OC4_SetConfig+0xcc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_OC4_SetConfig+0x80>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a15      	ldr	r2, [pc, #84]	; (80082e0 <TIM_OC4_SetConfig+0xd0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d109      	bne.n	80082a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	019b      	lsls	r3, r3, #6
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	feff8fff 	.word	0xfeff8fff
 80082d0:	40010000 	.word	0x40010000
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40014000 	.word	0x40014000
 80082dc:	40014400 	.word	0x40014400
 80082e0:	40014800 	.word	0x40014800

080082e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4b21      	ldr	r3, [pc, #132]	; (8008394 <TIM_OC5_SetConfig+0xb0>)
 8008310:	4013      	ands	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	041b      	lsls	r3, r3, #16
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a18      	ldr	r2, [pc, #96]	; (8008398 <TIM_OC5_SetConfig+0xb4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00f      	beq.n	800835a <TIM_OC5_SetConfig+0x76>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a17      	ldr	r2, [pc, #92]	; (800839c <TIM_OC5_SetConfig+0xb8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00b      	beq.n	800835a <TIM_OC5_SetConfig+0x76>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a16      	ldr	r2, [pc, #88]	; (80083a0 <TIM_OC5_SetConfig+0xbc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d007      	beq.n	800835a <TIM_OC5_SetConfig+0x76>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a15      	ldr	r2, [pc, #84]	; (80083a4 <TIM_OC5_SetConfig+0xc0>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d003      	beq.n	800835a <TIM_OC5_SetConfig+0x76>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a14      	ldr	r2, [pc, #80]	; (80083a8 <TIM_OC5_SetConfig+0xc4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d109      	bne.n	800836e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008360:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	621a      	str	r2, [r3, #32]
}
 8008388:	bf00      	nop
 800838a:	371c      	adds	r7, #28
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	fffeff8f 	.word	0xfffeff8f
 8008398:	40010000 	.word	0x40010000
 800839c:	40010400 	.word	0x40010400
 80083a0:	40014000 	.word	0x40014000
 80083a4:	40014400 	.word	0x40014400
 80083a8:	40014800 	.word	0x40014800

080083ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4b22      	ldr	r3, [pc, #136]	; (8008460 <TIM_OC6_SetConfig+0xb4>)
 80083d8:	4013      	ands	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	051b      	lsls	r3, r3, #20
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a19      	ldr	r2, [pc, #100]	; (8008464 <TIM_OC6_SetConfig+0xb8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00f      	beq.n	8008424 <TIM_OC6_SetConfig+0x78>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a18      	ldr	r2, [pc, #96]	; (8008468 <TIM_OC6_SetConfig+0xbc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00b      	beq.n	8008424 <TIM_OC6_SetConfig+0x78>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a17      	ldr	r2, [pc, #92]	; (800846c <TIM_OC6_SetConfig+0xc0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_OC6_SetConfig+0x78>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a16      	ldr	r2, [pc, #88]	; (8008470 <TIM_OC6_SetConfig+0xc4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_OC6_SetConfig+0x78>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a15      	ldr	r2, [pc, #84]	; (8008474 <TIM_OC6_SetConfig+0xc8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d109      	bne.n	8008438 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800842a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	029b      	lsls	r3, r3, #10
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	feff8fff 	.word	0xfeff8fff
 8008464:	40010000 	.word	0x40010000
 8008468:	40010400 	.word	0x40010400
 800846c:	40014000 	.word	0x40014000
 8008470:	40014400 	.word	0x40014400
 8008474:	40014800 	.word	0x40014800

08008478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	f023 0201 	bic.w	r2, r3, #1
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	011b      	lsls	r3, r3, #4
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f023 030a 	bic.w	r3, r3, #10
 80084b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	621a      	str	r2, [r3, #32]
}
 80084ca:	bf00      	nop
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b087      	sub	sp, #28
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	60b9      	str	r1, [r7, #8]
 80084e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	f023 0210 	bic.w	r2, r3, #16
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	031b      	lsls	r3, r3, #12
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	011b      	lsls	r3, r3, #4
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	4313      	orrs	r3, r2
 800851c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	621a      	str	r2, [r3, #32]
}
 800852a:	bf00      	nop
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
	...

08008538 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4b09      	ldr	r3, [pc, #36]	; (8008570 <TIM_ITRx_SetConfig+0x38>)
 800854c:	4013      	ands	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	4313      	orrs	r3, r2
 8008556:	f043 0307 	orr.w	r3, r3, #7
 800855a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	609a      	str	r2, [r3, #8]
}
 8008562:	bf00      	nop
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	ffcfff8f 	.word	0xffcfff8f

08008574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800858e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	021a      	lsls	r2, r3, #8
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	431a      	orrs	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4313      	orrs	r3, r2
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	609a      	str	r2, [r3, #8]
}
 80085a8:	bf00      	nop
 80085aa:	371c      	adds	r7, #28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 031f 	and.w	r3, r3, #31
 80085c6:	2201      	movs	r2, #1
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1a      	ldr	r2, [r3, #32]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	43db      	mvns	r3, r3
 80085d6:	401a      	ands	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a1a      	ldr	r2, [r3, #32]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f003 031f 	and.w	r3, r3, #31
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	fa01 f303 	lsl.w	r3, r1, r3
 80085ec:	431a      	orrs	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	621a      	str	r2, [r3, #32]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008614:	2302      	movs	r3, #2
 8008616:	e077      	b.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a35      	ldr	r2, [pc, #212]	; (8008714 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d004      	beq.n	800864c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a34      	ldr	r2, [pc, #208]	; (8008718 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d108      	bne.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008652:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008664:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4313      	orrs	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a25      	ldr	r2, [pc, #148]	; (8008714 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d02c      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868a:	d027      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a22      	ldr	r2, [pc, #136]	; (800871c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d022      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a21      	ldr	r2, [pc, #132]	; (8008720 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d01d      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1f      	ldr	r2, [pc, #124]	; (8008724 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d018      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1a      	ldr	r2, [pc, #104]	; (8008718 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d013      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1b      	ldr	r2, [pc, #108]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d00e      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1a      	ldr	r2, [pc, #104]	; (800872c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d009      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a18      	ldr	r2, [pc, #96]	; (8008730 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d004      	beq.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a17      	ldr	r2, [pc, #92]	; (8008734 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d10c      	bne.n	80086f6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	40010000 	.word	0x40010000
 8008718:	40010400 	.word	0x40010400
 800871c:	40000400 	.word	0x40000400
 8008720:	40000800 	.word	0x40000800
 8008724:	40000c00 	.word	0x40000c00
 8008728:	40001800 	.word	0x40001800
 800872c:	40014000 	.word	0x40014000
 8008730:	4000e000 	.word	0x4000e000
 8008734:	4000e400 	.word	0x4000e400

08008738 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800874c:	2b01      	cmp	r3, #1
 800874e:	d101      	bne.n	8008754 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008750:	2302      	movs	r3, #2
 8008752:	e087      	b.n	8008864 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	4313      	orrs	r3, r2
 8008776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4313      	orrs	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	041b      	lsls	r3, r3, #16
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a27      	ldr	r2, [pc, #156]	; (8008870 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d004      	beq.n	80087e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a25      	ldr	r2, [pc, #148]	; (8008874 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d106      	bne.n	80087f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a1e      	ldr	r2, [pc, #120]	; (8008870 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d004      	beq.n	8008804 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d126      	bne.n	8008852 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	051b      	lsls	r3, r3, #20
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a0e      	ldr	r2, [pc, #56]	; (8008870 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d004      	beq.n	8008844 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a0d      	ldr	r2, [pc, #52]	; (8008874 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d106      	bne.n	8008852 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	40010000 	.word	0x40010000
 8008874:	40010400 	.word	0x40010400

08008878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e042      	b.n	8008910 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008890:	2b00      	cmp	r3, #0
 8008892:	d106      	bne.n	80088a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7f8 faaf 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2224      	movs	r2, #36	; 0x24
 80088a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0201 	bic.w	r2, r2, #1
 80088b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fc9c 	bl	80091f8 <UART_SetConfig>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d101      	bne.n	80088ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e022      	b.n	8008910 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 fafc 	bl	8009ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0201 	orr.w	r2, r2, #1
 8008906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 fb83 	bl	800a014 <UART_CheckIdleState>
 800890e:	4603      	mov	r3, r0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af02      	add	r7, sp, #8
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	4613      	mov	r3, r2
 8008926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892e:	2b20      	cmp	r3, #32
 8008930:	d17b      	bne.n	8008a2a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <HAL_UART_Transmit+0x26>
 8008938:	88fb      	ldrh	r3, [r7, #6]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e074      	b.n	8008a2c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2221      	movs	r2, #33	; 0x21
 800894e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008952:	f7f8 ffa5 	bl	80018a0 <HAL_GetTick>
 8008956:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	88fa      	ldrh	r2, [r7, #6]
 800895c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	88fa      	ldrh	r2, [r7, #6]
 8008964:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008970:	d108      	bne.n	8008984 <HAL_UART_Transmit+0x6c>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d104      	bne.n	8008984 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	61bb      	str	r3, [r7, #24]
 8008982:	e003      	b.n	800898c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800898c:	e030      	b.n	80089f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	2180      	movs	r1, #128	; 0x80
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f001 fbe5 	bl	800a168 <UART_WaitOnFlagUntilTimeout>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d005      	beq.n	80089b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e03d      	b.n	8008a2c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10b      	bne.n	80089ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	3302      	adds	r3, #2
 80089ca:	61bb      	str	r3, [r7, #24]
 80089cc:	e007      	b.n	80089de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	3301      	adds	r3, #1
 80089dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b29a      	uxth	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1c8      	bne.n	800898e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2200      	movs	r2, #0
 8008a04:	2140      	movs	r1, #64	; 0x40
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f001 fbae 	bl	800a168 <UART_WaitOnFlagUntilTimeout>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e006      	b.n	8008a2c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2220      	movs	r2, #32
 8008a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e000      	b.n	8008a2c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a2a:	2302      	movs	r3, #2
  }
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3720      	adds	r7, #32
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b0ba      	sub	sp, #232	; 0xe8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008a5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a62:	4013      	ands	r3, r2
 8008a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008a68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d11b      	bne.n	8008aa8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d015      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d105      	bne.n	8008a94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d009      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8377 	beq.w	800918c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
      }
      return;
 8008aa6:	e371      	b.n	800918c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 8123 	beq.w	8008cf8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ab2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008ab6:	4b8d      	ldr	r3, [pc, #564]	; (8008cec <HAL_UART_IRQHandler+0x2b8>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d106      	bne.n	8008acc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008abe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ac2:	4b8b      	ldr	r3, [pc, #556]	; (8008cf0 <HAL_UART_IRQHandler+0x2bc>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 8116 	beq.w	8008cf8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d011      	beq.n	8008afc <HAL_UART_IRQHandler+0xc8>
 8008ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af2:	f043 0201 	orr.w	r2, r3, #1
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d011      	beq.n	8008b2c <HAL_UART_IRQHandler+0xf8>
 8008b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b22:	f043 0204 	orr.w	r2, r3, #4
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d011      	beq.n	8008b5c <HAL_UART_IRQHandler+0x128>
 8008b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00b      	beq.n	8008b5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2204      	movs	r2, #4
 8008b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b52:	f043 0202 	orr.w	r2, r3, #2
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b60:	f003 0308 	and.w	r3, r3, #8
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d017      	beq.n	8008b98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b6c:	f003 0320 	and.w	r3, r3, #32
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008b78:	4b5c      	ldr	r3, [pc, #368]	; (8008cec <HAL_UART_IRQHandler+0x2b8>)
 8008b7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2208      	movs	r2, #8
 8008b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b8e:	f043 0208 	orr.w	r2, r3, #8
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d012      	beq.n	8008bca <HAL_UART_IRQHandler+0x196>
 8008ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00c      	beq.n	8008bca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc0:	f043 0220 	orr.w	r2, r3, #32
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 82dd 	beq.w	8009190 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bda:	f003 0320 	and.w	r3, r3, #32
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d013      	beq.n	8008c0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d007      	beq.n	8008c0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1e:	2b40      	cmp	r3, #64	; 0x40
 8008c20:	d005      	beq.n	8008c2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d054      	beq.n	8008cd8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 fbea 	bl	800a408 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3e:	2b40      	cmp	r3, #64	; 0x40
 8008c40:	d146      	bne.n	8008cd0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3308      	adds	r3, #8
 8008c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3308      	adds	r3, #8
 8008c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1d9      	bne.n	8008c42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d017      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c9e:	4a15      	ldr	r2, [pc, #84]	; (8008cf4 <HAL_UART_IRQHandler+0x2c0>)
 8008ca0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7f9 fff5 	bl	8002c98 <HAL_DMA_Abort_IT>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d019      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008cc2:	4610      	mov	r0, r2
 8008cc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc6:	e00f      	b.n	8008ce8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fa8b 	bl	80091e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cce:	e00b      	b.n	8008ce8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fa87 	bl	80091e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd6:	e007      	b.n	8008ce8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fa83 	bl	80091e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008ce6:	e253      	b.n	8009190 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce8:	bf00      	nop
    return;
 8008cea:	e251      	b.n	8009190 <HAL_UART_IRQHandler+0x75c>
 8008cec:	10000001 	.word	0x10000001
 8008cf0:	04000120 	.word	0x04000120
 8008cf4:	0800a6bb 	.word	0x0800a6bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	f040 81e7 	bne.w	80090d0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d06:	f003 0310 	and.w	r3, r3, #16
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 81e0 	beq.w	80090d0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d14:	f003 0310 	and.w	r3, r3, #16
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 81d9 	beq.w	80090d0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2210      	movs	r2, #16
 8008d24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	f040 8151 	bne.w	8008fd8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a96      	ldr	r2, [pc, #600]	; (8008f98 <HAL_UART_IRQHandler+0x564>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d068      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a93      	ldr	r2, [pc, #588]	; (8008f9c <HAL_UART_IRQHandler+0x568>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d061      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a91      	ldr	r2, [pc, #580]	; (8008fa0 <HAL_UART_IRQHandler+0x56c>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d05a      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a8e      	ldr	r2, [pc, #568]	; (8008fa4 <HAL_UART_IRQHandler+0x570>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d053      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a8c      	ldr	r2, [pc, #560]	; (8008fa8 <HAL_UART_IRQHandler+0x574>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d04c      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a89      	ldr	r2, [pc, #548]	; (8008fac <HAL_UART_IRQHandler+0x578>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d045      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a87      	ldr	r2, [pc, #540]	; (8008fb0 <HAL_UART_IRQHandler+0x57c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d03e      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a84      	ldr	r2, [pc, #528]	; (8008fb4 <HAL_UART_IRQHandler+0x580>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d037      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a82      	ldr	r2, [pc, #520]	; (8008fb8 <HAL_UART_IRQHandler+0x584>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d030      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a7f      	ldr	r2, [pc, #508]	; (8008fbc <HAL_UART_IRQHandler+0x588>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d029      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a7d      	ldr	r2, [pc, #500]	; (8008fc0 <HAL_UART_IRQHandler+0x58c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d022      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a7a      	ldr	r2, [pc, #488]	; (8008fc4 <HAL_UART_IRQHandler+0x590>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d01b      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a78      	ldr	r2, [pc, #480]	; (8008fc8 <HAL_UART_IRQHandler+0x594>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d014      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a75      	ldr	r2, [pc, #468]	; (8008fcc <HAL_UART_IRQHandler+0x598>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00d      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a73      	ldr	r2, [pc, #460]	; (8008fd0 <HAL_UART_IRQHandler+0x59c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d006      	beq.n	8008e16 <HAL_UART_IRQHandler+0x3e2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a70      	ldr	r2, [pc, #448]	; (8008fd4 <HAL_UART_IRQHandler+0x5a0>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d106      	bne.n	8008e24 <HAL_UART_IRQHandler+0x3f0>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	e005      	b.n	8008e30 <HAL_UART_IRQHandler+0x3fc>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 81ab 	beq.w	8009194 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	f080 81a3 	bcs.w	8009194 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e64:	f000 8087 	beq.w	8008f76 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1da      	bne.n	8008e68 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ec4:	f023 0301 	bic.w	r3, r3, #1
 8008ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ed6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008eda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ede:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ee2:	e841 2300 	strex	r3, r2, [r1]
 8008ee6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1e1      	bne.n	8008eb2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e3      	bne.n	8008eee <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f44:	f023 0310 	bic.w	r3, r3, #16
 8008f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f56:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f5e:	e841 2300 	strex	r3, r2, [r1]
 8008f62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e4      	bne.n	8008f34 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f9 fb73 	bl	800265c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7f7 fb39 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f96:	e0fd      	b.n	8009194 <HAL_UART_IRQHandler+0x760>
 8008f98:	40020010 	.word	0x40020010
 8008f9c:	40020028 	.word	0x40020028
 8008fa0:	40020040 	.word	0x40020040
 8008fa4:	40020058 	.word	0x40020058
 8008fa8:	40020070 	.word	0x40020070
 8008fac:	40020088 	.word	0x40020088
 8008fb0:	400200a0 	.word	0x400200a0
 8008fb4:	400200b8 	.word	0x400200b8
 8008fb8:	40020410 	.word	0x40020410
 8008fbc:	40020428 	.word	0x40020428
 8008fc0:	40020440 	.word	0x40020440
 8008fc4:	40020458 	.word	0x40020458
 8008fc8:	40020470 	.word	0x40020470
 8008fcc:	40020488 	.word	0x40020488
 8008fd0:	400204a0 	.word	0x400204a0
 8008fd4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 80cf 	beq.w	8009198 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008ffa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f000 80ca 	beq.w	8009198 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009026:	647b      	str	r3, [r7, #68]	; 0x44
 8009028:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800902c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800902e:	e841 2300 	strex	r3, r2, [r1]
 8009032:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1e4      	bne.n	8009004 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3308      	adds	r3, #8
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	623b      	str	r3, [r7, #32]
   return(result);
 800904a:	6a3a      	ldr	r2, [r7, #32]
 800904c:	4b55      	ldr	r3, [pc, #340]	; (80091a4 <HAL_UART_IRQHandler+0x770>)
 800904e:	4013      	ands	r3, r2
 8009050:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3308      	adds	r3, #8
 800905a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800905e:	633a      	str	r2, [r7, #48]	; 0x30
 8009060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e3      	bne.n	800903a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2220      	movs	r2, #32
 8009076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	e853 3f00 	ldrex	r3, [r3]
 8009092:	60fb      	str	r3, [r7, #12]
   return(result);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 0310 	bic.w	r3, r3, #16
 800909a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090a8:	61fb      	str	r3, [r7, #28]
 80090aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	69b9      	ldr	r1, [r7, #24]
 80090ae:	69fa      	ldr	r2, [r7, #28]
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	617b      	str	r3, [r7, #20]
   return(result);
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e4      	bne.n	8009086 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7f7 fa9d 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090ce:	e063      	b.n	8009198 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00e      	beq.n	80090fa <HAL_UART_IRQHandler+0x6c6>
 80090dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d008      	beq.n	80090fa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80090f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 fb22 	bl	800a73c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090f8:	e051      	b.n	800919e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009102:	2b00      	cmp	r3, #0
 8009104:	d014      	beq.n	8009130 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800910a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910e:	2b00      	cmp	r3, #0
 8009110:	d105      	bne.n	800911e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d008      	beq.n	8009130 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009122:	2b00      	cmp	r3, #0
 8009124:	d03a      	beq.n	800919c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
    }
    return;
 800912e:	e035      	b.n	800919c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	d009      	beq.n	8009150 <HAL_UART_IRQHandler+0x71c>
 800913c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 facc 	bl	800a6e6 <UART_EndTransmit_IT>
    return;
 800914e:	e026      	b.n	800919e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d009      	beq.n	8009170 <HAL_UART_IRQHandler+0x73c>
 800915c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009160:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 fafb 	bl	800a764 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800916e:	e016      	b.n	800919e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009174:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d010      	beq.n	800919e <HAL_UART_IRQHandler+0x76a>
 800917c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009180:	2b00      	cmp	r3, #0
 8009182:	da0c      	bge.n	800919e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fae3 	bl	800a750 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800918a:	e008      	b.n	800919e <HAL_UART_IRQHandler+0x76a>
      return;
 800918c:	bf00      	nop
 800918e:	e006      	b.n	800919e <HAL_UART_IRQHandler+0x76a>
    return;
 8009190:	bf00      	nop
 8009192:	e004      	b.n	800919e <HAL_UART_IRQHandler+0x76a>
      return;
 8009194:	bf00      	nop
 8009196:	e002      	b.n	800919e <HAL_UART_IRQHandler+0x76a>
      return;
 8009198:	bf00      	nop
 800919a:	e000      	b.n	800919e <HAL_UART_IRQHandler+0x76a>
    return;
 800919c:	bf00      	nop
  }
}
 800919e:	37e8      	adds	r7, #232	; 0xe8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	effffffe 	.word	0xeffffffe

080091a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091fc:	b092      	sub	sp, #72	; 0x48
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	689a      	ldr	r2, [r3, #8]
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	431a      	orrs	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	431a      	orrs	r2, r3
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	4313      	orrs	r3, r2
 800921e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	4bbe      	ldr	r3, [pc, #760]	; (8009520 <UART_SetConfig+0x328>)
 8009228:	4013      	ands	r3, r2
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	6812      	ldr	r2, [r2, #0]
 800922e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009230:	430b      	orrs	r3, r1
 8009232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4ab3      	ldr	r2, [pc, #716]	; (8009524 <UART_SetConfig+0x32c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d004      	beq.n	8009264 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009260:	4313      	orrs	r3, r2
 8009262:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689a      	ldr	r2, [r3, #8]
 800926a:	4baf      	ldr	r3, [pc, #700]	; (8009528 <UART_SetConfig+0x330>)
 800926c:	4013      	ands	r3, r2
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	6812      	ldr	r2, [r2, #0]
 8009272:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009274:	430b      	orrs	r3, r1
 8009276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927e:	f023 010f 	bic.w	r1, r3, #15
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	430a      	orrs	r2, r1
 800928c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4aa6      	ldr	r2, [pc, #664]	; (800952c <UART_SetConfig+0x334>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d177      	bne.n	8009388 <UART_SetConfig+0x190>
 8009298:	4ba5      	ldr	r3, [pc, #660]	; (8009530 <UART_SetConfig+0x338>)
 800929a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800929c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092a0:	2b28      	cmp	r3, #40	; 0x28
 80092a2:	d86d      	bhi.n	8009380 <UART_SetConfig+0x188>
 80092a4:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <UART_SetConfig+0xb4>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	08009351 	.word	0x08009351
 80092b0:	08009381 	.word	0x08009381
 80092b4:	08009381 	.word	0x08009381
 80092b8:	08009381 	.word	0x08009381
 80092bc:	08009381 	.word	0x08009381
 80092c0:	08009381 	.word	0x08009381
 80092c4:	08009381 	.word	0x08009381
 80092c8:	08009381 	.word	0x08009381
 80092cc:	08009359 	.word	0x08009359
 80092d0:	08009381 	.word	0x08009381
 80092d4:	08009381 	.word	0x08009381
 80092d8:	08009381 	.word	0x08009381
 80092dc:	08009381 	.word	0x08009381
 80092e0:	08009381 	.word	0x08009381
 80092e4:	08009381 	.word	0x08009381
 80092e8:	08009381 	.word	0x08009381
 80092ec:	08009361 	.word	0x08009361
 80092f0:	08009381 	.word	0x08009381
 80092f4:	08009381 	.word	0x08009381
 80092f8:	08009381 	.word	0x08009381
 80092fc:	08009381 	.word	0x08009381
 8009300:	08009381 	.word	0x08009381
 8009304:	08009381 	.word	0x08009381
 8009308:	08009381 	.word	0x08009381
 800930c:	08009369 	.word	0x08009369
 8009310:	08009381 	.word	0x08009381
 8009314:	08009381 	.word	0x08009381
 8009318:	08009381 	.word	0x08009381
 800931c:	08009381 	.word	0x08009381
 8009320:	08009381 	.word	0x08009381
 8009324:	08009381 	.word	0x08009381
 8009328:	08009381 	.word	0x08009381
 800932c:	08009371 	.word	0x08009371
 8009330:	08009381 	.word	0x08009381
 8009334:	08009381 	.word	0x08009381
 8009338:	08009381 	.word	0x08009381
 800933c:	08009381 	.word	0x08009381
 8009340:	08009381 	.word	0x08009381
 8009344:	08009381 	.word	0x08009381
 8009348:	08009381 	.word	0x08009381
 800934c:	08009379 	.word	0x08009379
 8009350:	2301      	movs	r3, #1
 8009352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009356:	e326      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009358:	2304      	movs	r3, #4
 800935a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800935e:	e322      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009360:	2308      	movs	r3, #8
 8009362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009366:	e31e      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009368:	2310      	movs	r3, #16
 800936a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800936e:	e31a      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009370:	2320      	movs	r3, #32
 8009372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009376:	e316      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009378:	2340      	movs	r3, #64	; 0x40
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800937e:	e312      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009380:	2380      	movs	r3, #128	; 0x80
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009386:	e30e      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a69      	ldr	r2, [pc, #420]	; (8009534 <UART_SetConfig+0x33c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d130      	bne.n	80093f4 <UART_SetConfig+0x1fc>
 8009392:	4b67      	ldr	r3, [pc, #412]	; (8009530 <UART_SetConfig+0x338>)
 8009394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	2b05      	cmp	r3, #5
 800939c:	d826      	bhi.n	80093ec <UART_SetConfig+0x1f4>
 800939e:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <UART_SetConfig+0x1ac>)
 80093a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a4:	080093bd 	.word	0x080093bd
 80093a8:	080093c5 	.word	0x080093c5
 80093ac:	080093cd 	.word	0x080093cd
 80093b0:	080093d5 	.word	0x080093d5
 80093b4:	080093dd 	.word	0x080093dd
 80093b8:	080093e5 	.word	0x080093e5
 80093bc:	2300      	movs	r3, #0
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093c2:	e2f0      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80093c4:	2304      	movs	r3, #4
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ca:	e2ec      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80093cc:	2308      	movs	r3, #8
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093d2:	e2e8      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80093d4:	2310      	movs	r3, #16
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093da:	e2e4      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80093dc:	2320      	movs	r3, #32
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093e2:	e2e0      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80093e4:	2340      	movs	r3, #64	; 0x40
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ea:	e2dc      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80093ec:	2380      	movs	r3, #128	; 0x80
 80093ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093f2:	e2d8      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a4f      	ldr	r2, [pc, #316]	; (8009538 <UART_SetConfig+0x340>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d130      	bne.n	8009460 <UART_SetConfig+0x268>
 80093fe:	4b4c      	ldr	r3, [pc, #304]	; (8009530 <UART_SetConfig+0x338>)
 8009400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	2b05      	cmp	r3, #5
 8009408:	d826      	bhi.n	8009458 <UART_SetConfig+0x260>
 800940a:	a201      	add	r2, pc, #4	; (adr r2, 8009410 <UART_SetConfig+0x218>)
 800940c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009410:	08009429 	.word	0x08009429
 8009414:	08009431 	.word	0x08009431
 8009418:	08009439 	.word	0x08009439
 800941c:	08009441 	.word	0x08009441
 8009420:	08009449 	.word	0x08009449
 8009424:	08009451 	.word	0x08009451
 8009428:	2300      	movs	r3, #0
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800942e:	e2ba      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009430:	2304      	movs	r3, #4
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009436:	e2b6      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009438:	2308      	movs	r3, #8
 800943a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800943e:	e2b2      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009440:	2310      	movs	r3, #16
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009446:	e2ae      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009448:	2320      	movs	r3, #32
 800944a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800944e:	e2aa      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009450:	2340      	movs	r3, #64	; 0x40
 8009452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009456:	e2a6      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009458:	2380      	movs	r3, #128	; 0x80
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800945e:	e2a2      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a35      	ldr	r2, [pc, #212]	; (800953c <UART_SetConfig+0x344>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d130      	bne.n	80094cc <UART_SetConfig+0x2d4>
 800946a:	4b31      	ldr	r3, [pc, #196]	; (8009530 <UART_SetConfig+0x338>)
 800946c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946e:	f003 0307 	and.w	r3, r3, #7
 8009472:	2b05      	cmp	r3, #5
 8009474:	d826      	bhi.n	80094c4 <UART_SetConfig+0x2cc>
 8009476:	a201      	add	r2, pc, #4	; (adr r2, 800947c <UART_SetConfig+0x284>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	08009495 	.word	0x08009495
 8009480:	0800949d 	.word	0x0800949d
 8009484:	080094a5 	.word	0x080094a5
 8009488:	080094ad 	.word	0x080094ad
 800948c:	080094b5 	.word	0x080094b5
 8009490:	080094bd 	.word	0x080094bd
 8009494:	2300      	movs	r3, #0
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949a:	e284      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800949c:	2304      	movs	r3, #4
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094a2:	e280      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80094a4:	2308      	movs	r3, #8
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094aa:	e27c      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80094ac:	2310      	movs	r3, #16
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094b2:	e278      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80094b4:	2320      	movs	r3, #32
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ba:	e274      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80094bc:	2340      	movs	r3, #64	; 0x40
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c2:	e270      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80094c4:	2380      	movs	r3, #128	; 0x80
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ca:	e26c      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <UART_SetConfig+0x348>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d142      	bne.n	800955c <UART_SetConfig+0x364>
 80094d6:	4b16      	ldr	r3, [pc, #88]	; (8009530 <UART_SetConfig+0x338>)
 80094d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094da:	f003 0307 	and.w	r3, r3, #7
 80094de:	2b05      	cmp	r3, #5
 80094e0:	d838      	bhi.n	8009554 <UART_SetConfig+0x35c>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <UART_SetConfig+0x2f0>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	08009501 	.word	0x08009501
 80094ec:	08009509 	.word	0x08009509
 80094f0:	08009511 	.word	0x08009511
 80094f4:	08009519 	.word	0x08009519
 80094f8:	08009545 	.word	0x08009545
 80094fc:	0800954d 	.word	0x0800954d
 8009500:	2300      	movs	r3, #0
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009506:	e24e      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009508:	2304      	movs	r3, #4
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950e:	e24a      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009510:	2308      	movs	r3, #8
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009516:	e246      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009518:	2310      	movs	r3, #16
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951e:	e242      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009520:	cfff69f3 	.word	0xcfff69f3
 8009524:	58000c00 	.word	0x58000c00
 8009528:	11fff4ff 	.word	0x11fff4ff
 800952c:	40011000 	.word	0x40011000
 8009530:	58024400 	.word	0x58024400
 8009534:	40004400 	.word	0x40004400
 8009538:	40004800 	.word	0x40004800
 800953c:	40004c00 	.word	0x40004c00
 8009540:	40005000 	.word	0x40005000
 8009544:	2320      	movs	r3, #32
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954a:	e22c      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800954c:	2340      	movs	r3, #64	; 0x40
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009552:	e228      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009554:	2380      	movs	r3, #128	; 0x80
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955a:	e224      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4ab1      	ldr	r2, [pc, #708]	; (8009828 <UART_SetConfig+0x630>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d176      	bne.n	8009654 <UART_SetConfig+0x45c>
 8009566:	4bb1      	ldr	r3, [pc, #708]	; (800982c <UART_SetConfig+0x634>)
 8009568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800956e:	2b28      	cmp	r3, #40	; 0x28
 8009570:	d86c      	bhi.n	800964c <UART_SetConfig+0x454>
 8009572:	a201      	add	r2, pc, #4	; (adr r2, 8009578 <UART_SetConfig+0x380>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	0800961d 	.word	0x0800961d
 800957c:	0800964d 	.word	0x0800964d
 8009580:	0800964d 	.word	0x0800964d
 8009584:	0800964d 	.word	0x0800964d
 8009588:	0800964d 	.word	0x0800964d
 800958c:	0800964d 	.word	0x0800964d
 8009590:	0800964d 	.word	0x0800964d
 8009594:	0800964d 	.word	0x0800964d
 8009598:	08009625 	.word	0x08009625
 800959c:	0800964d 	.word	0x0800964d
 80095a0:	0800964d 	.word	0x0800964d
 80095a4:	0800964d 	.word	0x0800964d
 80095a8:	0800964d 	.word	0x0800964d
 80095ac:	0800964d 	.word	0x0800964d
 80095b0:	0800964d 	.word	0x0800964d
 80095b4:	0800964d 	.word	0x0800964d
 80095b8:	0800962d 	.word	0x0800962d
 80095bc:	0800964d 	.word	0x0800964d
 80095c0:	0800964d 	.word	0x0800964d
 80095c4:	0800964d 	.word	0x0800964d
 80095c8:	0800964d 	.word	0x0800964d
 80095cc:	0800964d 	.word	0x0800964d
 80095d0:	0800964d 	.word	0x0800964d
 80095d4:	0800964d 	.word	0x0800964d
 80095d8:	08009635 	.word	0x08009635
 80095dc:	0800964d 	.word	0x0800964d
 80095e0:	0800964d 	.word	0x0800964d
 80095e4:	0800964d 	.word	0x0800964d
 80095e8:	0800964d 	.word	0x0800964d
 80095ec:	0800964d 	.word	0x0800964d
 80095f0:	0800964d 	.word	0x0800964d
 80095f4:	0800964d 	.word	0x0800964d
 80095f8:	0800963d 	.word	0x0800963d
 80095fc:	0800964d 	.word	0x0800964d
 8009600:	0800964d 	.word	0x0800964d
 8009604:	0800964d 	.word	0x0800964d
 8009608:	0800964d 	.word	0x0800964d
 800960c:	0800964d 	.word	0x0800964d
 8009610:	0800964d 	.word	0x0800964d
 8009614:	0800964d 	.word	0x0800964d
 8009618:	08009645 	.word	0x08009645
 800961c:	2301      	movs	r3, #1
 800961e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009622:	e1c0      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009624:	2304      	movs	r3, #4
 8009626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962a:	e1bc      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800962c:	2308      	movs	r3, #8
 800962e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009632:	e1b8      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009634:	2310      	movs	r3, #16
 8009636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963a:	e1b4      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800963c:	2320      	movs	r3, #32
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009642:	e1b0      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009644:	2340      	movs	r3, #64	; 0x40
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964a:	e1ac      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800964c:	2380      	movs	r3, #128	; 0x80
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009652:	e1a8      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a75      	ldr	r2, [pc, #468]	; (8009830 <UART_SetConfig+0x638>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d130      	bne.n	80096c0 <UART_SetConfig+0x4c8>
 800965e:	4b73      	ldr	r3, [pc, #460]	; (800982c <UART_SetConfig+0x634>)
 8009660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	2b05      	cmp	r3, #5
 8009668:	d826      	bhi.n	80096b8 <UART_SetConfig+0x4c0>
 800966a:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <UART_SetConfig+0x478>)
 800966c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009670:	08009689 	.word	0x08009689
 8009674:	08009691 	.word	0x08009691
 8009678:	08009699 	.word	0x08009699
 800967c:	080096a1 	.word	0x080096a1
 8009680:	080096a9 	.word	0x080096a9
 8009684:	080096b1 	.word	0x080096b1
 8009688:	2300      	movs	r3, #0
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968e:	e18a      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009690:	2304      	movs	r3, #4
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009696:	e186      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009698:	2308      	movs	r3, #8
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800969e:	e182      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80096a0:	2310      	movs	r3, #16
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a6:	e17e      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80096a8:	2320      	movs	r3, #32
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ae:	e17a      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80096b0:	2340      	movs	r3, #64	; 0x40
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b6:	e176      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80096b8:	2380      	movs	r3, #128	; 0x80
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096be:	e172      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a5b      	ldr	r2, [pc, #364]	; (8009834 <UART_SetConfig+0x63c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d130      	bne.n	800972c <UART_SetConfig+0x534>
 80096ca:	4b58      	ldr	r3, [pc, #352]	; (800982c <UART_SetConfig+0x634>)
 80096cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	2b05      	cmp	r3, #5
 80096d4:	d826      	bhi.n	8009724 <UART_SetConfig+0x52c>
 80096d6:	a201      	add	r2, pc, #4	; (adr r2, 80096dc <UART_SetConfig+0x4e4>)
 80096d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096dc:	080096f5 	.word	0x080096f5
 80096e0:	080096fd 	.word	0x080096fd
 80096e4:	08009705 	.word	0x08009705
 80096e8:	0800970d 	.word	0x0800970d
 80096ec:	08009715 	.word	0x08009715
 80096f0:	0800971d 	.word	0x0800971d
 80096f4:	2300      	movs	r3, #0
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fa:	e154      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80096fc:	2304      	movs	r3, #4
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009702:	e150      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009704:	2308      	movs	r3, #8
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970a:	e14c      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800970c:	2310      	movs	r3, #16
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009712:	e148      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009714:	2320      	movs	r3, #32
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971a:	e144      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800971c:	2340      	movs	r3, #64	; 0x40
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009722:	e140      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009724:	2380      	movs	r3, #128	; 0x80
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972a:	e13c      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a41      	ldr	r2, [pc, #260]	; (8009838 <UART_SetConfig+0x640>)
 8009732:	4293      	cmp	r3, r2
 8009734:	f040 8082 	bne.w	800983c <UART_SetConfig+0x644>
 8009738:	4b3c      	ldr	r3, [pc, #240]	; (800982c <UART_SetConfig+0x634>)
 800973a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009740:	2b28      	cmp	r3, #40	; 0x28
 8009742:	d86d      	bhi.n	8009820 <UART_SetConfig+0x628>
 8009744:	a201      	add	r2, pc, #4	; (adr r2, 800974c <UART_SetConfig+0x554>)
 8009746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974a:	bf00      	nop
 800974c:	080097f1 	.word	0x080097f1
 8009750:	08009821 	.word	0x08009821
 8009754:	08009821 	.word	0x08009821
 8009758:	08009821 	.word	0x08009821
 800975c:	08009821 	.word	0x08009821
 8009760:	08009821 	.word	0x08009821
 8009764:	08009821 	.word	0x08009821
 8009768:	08009821 	.word	0x08009821
 800976c:	080097f9 	.word	0x080097f9
 8009770:	08009821 	.word	0x08009821
 8009774:	08009821 	.word	0x08009821
 8009778:	08009821 	.word	0x08009821
 800977c:	08009821 	.word	0x08009821
 8009780:	08009821 	.word	0x08009821
 8009784:	08009821 	.word	0x08009821
 8009788:	08009821 	.word	0x08009821
 800978c:	08009801 	.word	0x08009801
 8009790:	08009821 	.word	0x08009821
 8009794:	08009821 	.word	0x08009821
 8009798:	08009821 	.word	0x08009821
 800979c:	08009821 	.word	0x08009821
 80097a0:	08009821 	.word	0x08009821
 80097a4:	08009821 	.word	0x08009821
 80097a8:	08009821 	.word	0x08009821
 80097ac:	08009809 	.word	0x08009809
 80097b0:	08009821 	.word	0x08009821
 80097b4:	08009821 	.word	0x08009821
 80097b8:	08009821 	.word	0x08009821
 80097bc:	08009821 	.word	0x08009821
 80097c0:	08009821 	.word	0x08009821
 80097c4:	08009821 	.word	0x08009821
 80097c8:	08009821 	.word	0x08009821
 80097cc:	08009811 	.word	0x08009811
 80097d0:	08009821 	.word	0x08009821
 80097d4:	08009821 	.word	0x08009821
 80097d8:	08009821 	.word	0x08009821
 80097dc:	08009821 	.word	0x08009821
 80097e0:	08009821 	.word	0x08009821
 80097e4:	08009821 	.word	0x08009821
 80097e8:	08009821 	.word	0x08009821
 80097ec:	08009819 	.word	0x08009819
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f6:	e0d6      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80097f8:	2304      	movs	r3, #4
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fe:	e0d2      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009800:	2308      	movs	r3, #8
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009806:	e0ce      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009808:	2310      	movs	r3, #16
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980e:	e0ca      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009810:	2320      	movs	r3, #32
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009816:	e0c6      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009818:	2340      	movs	r3, #64	; 0x40
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981e:	e0c2      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009820:	2380      	movs	r3, #128	; 0x80
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009826:	e0be      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009828:	40011400 	.word	0x40011400
 800982c:	58024400 	.word	0x58024400
 8009830:	40007800 	.word	0x40007800
 8009834:	40007c00 	.word	0x40007c00
 8009838:	40011800 	.word	0x40011800
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4aad      	ldr	r2, [pc, #692]	; (8009af8 <UART_SetConfig+0x900>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d176      	bne.n	8009934 <UART_SetConfig+0x73c>
 8009846:	4bad      	ldr	r3, [pc, #692]	; (8009afc <UART_SetConfig+0x904>)
 8009848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800984e:	2b28      	cmp	r3, #40	; 0x28
 8009850:	d86c      	bhi.n	800992c <UART_SetConfig+0x734>
 8009852:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <UART_SetConfig+0x660>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	080098fd 	.word	0x080098fd
 800985c:	0800992d 	.word	0x0800992d
 8009860:	0800992d 	.word	0x0800992d
 8009864:	0800992d 	.word	0x0800992d
 8009868:	0800992d 	.word	0x0800992d
 800986c:	0800992d 	.word	0x0800992d
 8009870:	0800992d 	.word	0x0800992d
 8009874:	0800992d 	.word	0x0800992d
 8009878:	08009905 	.word	0x08009905
 800987c:	0800992d 	.word	0x0800992d
 8009880:	0800992d 	.word	0x0800992d
 8009884:	0800992d 	.word	0x0800992d
 8009888:	0800992d 	.word	0x0800992d
 800988c:	0800992d 	.word	0x0800992d
 8009890:	0800992d 	.word	0x0800992d
 8009894:	0800992d 	.word	0x0800992d
 8009898:	0800990d 	.word	0x0800990d
 800989c:	0800992d 	.word	0x0800992d
 80098a0:	0800992d 	.word	0x0800992d
 80098a4:	0800992d 	.word	0x0800992d
 80098a8:	0800992d 	.word	0x0800992d
 80098ac:	0800992d 	.word	0x0800992d
 80098b0:	0800992d 	.word	0x0800992d
 80098b4:	0800992d 	.word	0x0800992d
 80098b8:	08009915 	.word	0x08009915
 80098bc:	0800992d 	.word	0x0800992d
 80098c0:	0800992d 	.word	0x0800992d
 80098c4:	0800992d 	.word	0x0800992d
 80098c8:	0800992d 	.word	0x0800992d
 80098cc:	0800992d 	.word	0x0800992d
 80098d0:	0800992d 	.word	0x0800992d
 80098d4:	0800992d 	.word	0x0800992d
 80098d8:	0800991d 	.word	0x0800991d
 80098dc:	0800992d 	.word	0x0800992d
 80098e0:	0800992d 	.word	0x0800992d
 80098e4:	0800992d 	.word	0x0800992d
 80098e8:	0800992d 	.word	0x0800992d
 80098ec:	0800992d 	.word	0x0800992d
 80098f0:	0800992d 	.word	0x0800992d
 80098f4:	0800992d 	.word	0x0800992d
 80098f8:	08009925 	.word	0x08009925
 80098fc:	2301      	movs	r3, #1
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009902:	e050      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009904:	2304      	movs	r3, #4
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990a:	e04c      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800990c:	2308      	movs	r3, #8
 800990e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009912:	e048      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009914:	2310      	movs	r3, #16
 8009916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991a:	e044      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800991c:	2320      	movs	r3, #32
 800991e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009922:	e040      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009924:	2340      	movs	r3, #64	; 0x40
 8009926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992a:	e03c      	b.n	80099a6 <UART_SetConfig+0x7ae>
 800992c:	2380      	movs	r3, #128	; 0x80
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009932:	e038      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a71      	ldr	r2, [pc, #452]	; (8009b00 <UART_SetConfig+0x908>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d130      	bne.n	80099a0 <UART_SetConfig+0x7a8>
 800993e:	4b6f      	ldr	r3, [pc, #444]	; (8009afc <UART_SetConfig+0x904>)
 8009940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009942:	f003 0307 	and.w	r3, r3, #7
 8009946:	2b05      	cmp	r3, #5
 8009948:	d826      	bhi.n	8009998 <UART_SetConfig+0x7a0>
 800994a:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <UART_SetConfig+0x758>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	08009969 	.word	0x08009969
 8009954:	08009971 	.word	0x08009971
 8009958:	08009979 	.word	0x08009979
 800995c:	08009981 	.word	0x08009981
 8009960:	08009989 	.word	0x08009989
 8009964:	08009991 	.word	0x08009991
 8009968:	2302      	movs	r3, #2
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996e:	e01a      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009970:	2304      	movs	r3, #4
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009976:	e016      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009978:	2308      	movs	r3, #8
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997e:	e012      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009980:	2310      	movs	r3, #16
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009986:	e00e      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009988:	2320      	movs	r3, #32
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998e:	e00a      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009990:	2340      	movs	r3, #64	; 0x40
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009996:	e006      	b.n	80099a6 <UART_SetConfig+0x7ae>
 8009998:	2380      	movs	r3, #128	; 0x80
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e002      	b.n	80099a6 <UART_SetConfig+0x7ae>
 80099a0:	2380      	movs	r3, #128	; 0x80
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a55      	ldr	r2, [pc, #340]	; (8009b00 <UART_SetConfig+0x908>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	f040 80f8 	bne.w	8009ba2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80099b6:	2b20      	cmp	r3, #32
 80099b8:	dc46      	bgt.n	8009a48 <UART_SetConfig+0x850>
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	db75      	blt.n	8009aaa <UART_SetConfig+0x8b2>
 80099be:	3b02      	subs	r3, #2
 80099c0:	2b1e      	cmp	r3, #30
 80099c2:	d872      	bhi.n	8009aaa <UART_SetConfig+0x8b2>
 80099c4:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <UART_SetConfig+0x7d4>)
 80099c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	08009a4f 	.word	0x08009a4f
 80099d0:	08009aab 	.word	0x08009aab
 80099d4:	08009a57 	.word	0x08009a57
 80099d8:	08009aab 	.word	0x08009aab
 80099dc:	08009aab 	.word	0x08009aab
 80099e0:	08009aab 	.word	0x08009aab
 80099e4:	08009a67 	.word	0x08009a67
 80099e8:	08009aab 	.word	0x08009aab
 80099ec:	08009aab 	.word	0x08009aab
 80099f0:	08009aab 	.word	0x08009aab
 80099f4:	08009aab 	.word	0x08009aab
 80099f8:	08009aab 	.word	0x08009aab
 80099fc:	08009aab 	.word	0x08009aab
 8009a00:	08009aab 	.word	0x08009aab
 8009a04:	08009a77 	.word	0x08009a77
 8009a08:	08009aab 	.word	0x08009aab
 8009a0c:	08009aab 	.word	0x08009aab
 8009a10:	08009aab 	.word	0x08009aab
 8009a14:	08009aab 	.word	0x08009aab
 8009a18:	08009aab 	.word	0x08009aab
 8009a1c:	08009aab 	.word	0x08009aab
 8009a20:	08009aab 	.word	0x08009aab
 8009a24:	08009aab 	.word	0x08009aab
 8009a28:	08009aab 	.word	0x08009aab
 8009a2c:	08009aab 	.word	0x08009aab
 8009a30:	08009aab 	.word	0x08009aab
 8009a34:	08009aab 	.word	0x08009aab
 8009a38:	08009aab 	.word	0x08009aab
 8009a3c:	08009aab 	.word	0x08009aab
 8009a40:	08009aab 	.word	0x08009aab
 8009a44:	08009a9d 	.word	0x08009a9d
 8009a48:	2b40      	cmp	r3, #64	; 0x40
 8009a4a:	d02a      	beq.n	8009aa2 <UART_SetConfig+0x8aa>
 8009a4c:	e02d      	b.n	8009aaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a4e:	f7fd f995 	bl	8006d7c <HAL_RCCEx_GetD3PCLK1Freq>
 8009a52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009a54:	e02f      	b.n	8009ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fd f9a4 	bl	8006da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a64:	e027      	b.n	8009ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a66:	f107 0318 	add.w	r3, r7, #24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fd faf0 	bl	8007050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a74:	e01f      	b.n	8009ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a76:	4b21      	ldr	r3, [pc, #132]	; (8009afc <UART_SetConfig+0x904>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d009      	beq.n	8009a96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a82:	4b1e      	ldr	r3, [pc, #120]	; (8009afc <UART_SetConfig+0x904>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	08db      	lsrs	r3, r3, #3
 8009a88:	f003 0303 	and.w	r3, r3, #3
 8009a8c:	4a1d      	ldr	r2, [pc, #116]	; (8009b04 <UART_SetConfig+0x90c>)
 8009a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a94:	e00f      	b.n	8009ab6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009a96:	4b1b      	ldr	r3, [pc, #108]	; (8009b04 <UART_SetConfig+0x90c>)
 8009a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a9a:	e00c      	b.n	8009ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a9c:	4b1a      	ldr	r3, [pc, #104]	; (8009b08 <UART_SetConfig+0x910>)
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aa0:	e009      	b.n	8009ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aa8:	e005      	b.n	8009ab6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009ab4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 81ee 	beq.w	8009e9a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	4a12      	ldr	r2, [pc, #72]	; (8009b0c <UART_SetConfig+0x914>)
 8009ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ad0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	4413      	add	r3, r2
 8009adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d305      	bcc.n	8009aee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d910      	bls.n	8009b10 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009af4:	e1d1      	b.n	8009e9a <UART_SetConfig+0xca2>
 8009af6:	bf00      	nop
 8009af8:	40011c00 	.word	0x40011c00
 8009afc:	58024400 	.word	0x58024400
 8009b00:	58000c00 	.word	0x58000c00
 8009b04:	03d09000 	.word	0x03d09000
 8009b08:	003d0900 	.word	0x003d0900
 8009b0c:	0800aab0 	.word	0x0800aab0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b12:	2200      	movs	r2, #0
 8009b14:	60bb      	str	r3, [r7, #8]
 8009b16:	60fa      	str	r2, [r7, #12]
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	4ac0      	ldr	r2, [pc, #768]	; (8009e20 <UART_SetConfig+0xc28>)
 8009b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	2200      	movs	r2, #0
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	607a      	str	r2, [r7, #4]
 8009b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b32:	f7f6 fbeb 	bl	800030c <__aeabi_uldivmod>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	f04f 0200 	mov.w	r2, #0
 8009b42:	f04f 0300 	mov.w	r3, #0
 8009b46:	020b      	lsls	r3, r1, #8
 8009b48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b4c:	0202      	lsls	r2, r0, #8
 8009b4e:	6979      	ldr	r1, [r7, #20]
 8009b50:	6849      	ldr	r1, [r1, #4]
 8009b52:	0849      	lsrs	r1, r1, #1
 8009b54:	2000      	movs	r0, #0
 8009b56:	460c      	mov	r4, r1
 8009b58:	4605      	mov	r5, r0
 8009b5a:	eb12 0804 	adds.w	r8, r2, r4
 8009b5e:	eb43 0905 	adc.w	r9, r3, r5
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	469a      	mov	sl, r3
 8009b6a:	4693      	mov	fp, r2
 8009b6c:	4652      	mov	r2, sl
 8009b6e:	465b      	mov	r3, fp
 8009b70:	4640      	mov	r0, r8
 8009b72:	4649      	mov	r1, r9
 8009b74:	f7f6 fbca 	bl	800030c <__aeabi_uldivmod>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b86:	d308      	bcc.n	8009b9a <UART_SetConfig+0x9a2>
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b8e:	d204      	bcs.n	8009b9a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b96:	60da      	str	r2, [r3, #12]
 8009b98:	e17f      	b.n	8009e9a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ba0:	e17b      	b.n	8009e9a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009baa:	f040 80bd 	bne.w	8009d28 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009bae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	dc48      	bgt.n	8009c48 <UART_SetConfig+0xa50>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	db7b      	blt.n	8009cb2 <UART_SetConfig+0xaba>
 8009bba:	2b20      	cmp	r3, #32
 8009bbc:	d879      	bhi.n	8009cb2 <UART_SetConfig+0xaba>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <UART_SetConfig+0x9cc>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009c4f 	.word	0x08009c4f
 8009bc8:	08009c57 	.word	0x08009c57
 8009bcc:	08009cb3 	.word	0x08009cb3
 8009bd0:	08009cb3 	.word	0x08009cb3
 8009bd4:	08009c5f 	.word	0x08009c5f
 8009bd8:	08009cb3 	.word	0x08009cb3
 8009bdc:	08009cb3 	.word	0x08009cb3
 8009be0:	08009cb3 	.word	0x08009cb3
 8009be4:	08009c6f 	.word	0x08009c6f
 8009be8:	08009cb3 	.word	0x08009cb3
 8009bec:	08009cb3 	.word	0x08009cb3
 8009bf0:	08009cb3 	.word	0x08009cb3
 8009bf4:	08009cb3 	.word	0x08009cb3
 8009bf8:	08009cb3 	.word	0x08009cb3
 8009bfc:	08009cb3 	.word	0x08009cb3
 8009c00:	08009cb3 	.word	0x08009cb3
 8009c04:	08009c7f 	.word	0x08009c7f
 8009c08:	08009cb3 	.word	0x08009cb3
 8009c0c:	08009cb3 	.word	0x08009cb3
 8009c10:	08009cb3 	.word	0x08009cb3
 8009c14:	08009cb3 	.word	0x08009cb3
 8009c18:	08009cb3 	.word	0x08009cb3
 8009c1c:	08009cb3 	.word	0x08009cb3
 8009c20:	08009cb3 	.word	0x08009cb3
 8009c24:	08009cb3 	.word	0x08009cb3
 8009c28:	08009cb3 	.word	0x08009cb3
 8009c2c:	08009cb3 	.word	0x08009cb3
 8009c30:	08009cb3 	.word	0x08009cb3
 8009c34:	08009cb3 	.word	0x08009cb3
 8009c38:	08009cb3 	.word	0x08009cb3
 8009c3c:	08009cb3 	.word	0x08009cb3
 8009c40:	08009cb3 	.word	0x08009cb3
 8009c44:	08009ca5 	.word	0x08009ca5
 8009c48:	2b40      	cmp	r3, #64	; 0x40
 8009c4a:	d02e      	beq.n	8009caa <UART_SetConfig+0xab2>
 8009c4c:	e031      	b.n	8009cb2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4e:	f7fb fec9 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8009c52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c54:	e033      	b.n	8009cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c56:	f7fb fedb 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8009c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c5c:	e02f      	b.n	8009cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fd f8a0 	bl	8006da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c6c:	e027      	b.n	8009cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c6e:	f107 0318 	add.w	r3, r7, #24
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fd f9ec 	bl	8007050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c7c:	e01f      	b.n	8009cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c7e:	4b69      	ldr	r3, [pc, #420]	; (8009e24 <UART_SetConfig+0xc2c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d009      	beq.n	8009c9e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c8a:	4b66      	ldr	r3, [pc, #408]	; (8009e24 <UART_SetConfig+0xc2c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	08db      	lsrs	r3, r3, #3
 8009c90:	f003 0303 	and.w	r3, r3, #3
 8009c94:	4a64      	ldr	r2, [pc, #400]	; (8009e28 <UART_SetConfig+0xc30>)
 8009c96:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c9c:	e00f      	b.n	8009cbe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009c9e:	4b62      	ldr	r3, [pc, #392]	; (8009e28 <UART_SetConfig+0xc30>)
 8009ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca2:	e00c      	b.n	8009cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ca4:	4b61      	ldr	r3, [pc, #388]	; (8009e2c <UART_SetConfig+0xc34>)
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca8:	e009      	b.n	8009cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cb0:	e005      	b.n	8009cbe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009cbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 80ea 	beq.w	8009e9a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	4a55      	ldr	r2, [pc, #340]	; (8009e20 <UART_SetConfig+0xc28>)
 8009ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cd8:	005a      	lsls	r2, r3, #1
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	441a      	add	r2, r3
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	2b0f      	cmp	r3, #15
 8009cf0:	d916      	bls.n	8009d20 <UART_SetConfig+0xb28>
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cf8:	d212      	bcs.n	8009d20 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	f023 030f 	bic.w	r3, r3, #15
 8009d02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d06:	085b      	lsrs	r3, r3, #1
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	f003 0307 	and.w	r3, r3, #7
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d12:	4313      	orrs	r3, r2
 8009d14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009d1c:	60da      	str	r2, [r3, #12]
 8009d1e:	e0bc      	b.n	8009e9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009d26:	e0b8      	b.n	8009e9a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d2c:	2b20      	cmp	r3, #32
 8009d2e:	dc4b      	bgt.n	8009dc8 <UART_SetConfig+0xbd0>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f2c0 8087 	blt.w	8009e44 <UART_SetConfig+0xc4c>
 8009d36:	2b20      	cmp	r3, #32
 8009d38:	f200 8084 	bhi.w	8009e44 <UART_SetConfig+0xc4c>
 8009d3c:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <UART_SetConfig+0xb4c>)
 8009d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d42:	bf00      	nop
 8009d44:	08009dcf 	.word	0x08009dcf
 8009d48:	08009dd7 	.word	0x08009dd7
 8009d4c:	08009e45 	.word	0x08009e45
 8009d50:	08009e45 	.word	0x08009e45
 8009d54:	08009ddf 	.word	0x08009ddf
 8009d58:	08009e45 	.word	0x08009e45
 8009d5c:	08009e45 	.word	0x08009e45
 8009d60:	08009e45 	.word	0x08009e45
 8009d64:	08009def 	.word	0x08009def
 8009d68:	08009e45 	.word	0x08009e45
 8009d6c:	08009e45 	.word	0x08009e45
 8009d70:	08009e45 	.word	0x08009e45
 8009d74:	08009e45 	.word	0x08009e45
 8009d78:	08009e45 	.word	0x08009e45
 8009d7c:	08009e45 	.word	0x08009e45
 8009d80:	08009e45 	.word	0x08009e45
 8009d84:	08009dff 	.word	0x08009dff
 8009d88:	08009e45 	.word	0x08009e45
 8009d8c:	08009e45 	.word	0x08009e45
 8009d90:	08009e45 	.word	0x08009e45
 8009d94:	08009e45 	.word	0x08009e45
 8009d98:	08009e45 	.word	0x08009e45
 8009d9c:	08009e45 	.word	0x08009e45
 8009da0:	08009e45 	.word	0x08009e45
 8009da4:	08009e45 	.word	0x08009e45
 8009da8:	08009e45 	.word	0x08009e45
 8009dac:	08009e45 	.word	0x08009e45
 8009db0:	08009e45 	.word	0x08009e45
 8009db4:	08009e45 	.word	0x08009e45
 8009db8:	08009e45 	.word	0x08009e45
 8009dbc:	08009e45 	.word	0x08009e45
 8009dc0:	08009e45 	.word	0x08009e45
 8009dc4:	08009e37 	.word	0x08009e37
 8009dc8:	2b40      	cmp	r3, #64	; 0x40
 8009dca:	d037      	beq.n	8009e3c <UART_SetConfig+0xc44>
 8009dcc:	e03a      	b.n	8009e44 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dce:	f7fb fe09 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8009dd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009dd4:	e03c      	b.n	8009e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dd6:	f7fb fe1b 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8009dda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ddc:	e038      	b.n	8009e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fc ffe0 	bl	8006da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dec:	e030      	b.n	8009e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dee:	f107 0318 	add.w	r3, r7, #24
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fd f92c 	bl	8007050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfc:	e028      	b.n	8009e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dfe:	4b09      	ldr	r3, [pc, #36]	; (8009e24 <UART_SetConfig+0xc2c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d012      	beq.n	8009e30 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e0a:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <UART_SetConfig+0xc2c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	08db      	lsrs	r3, r3, #3
 8009e10:	f003 0303 	and.w	r3, r3, #3
 8009e14:	4a04      	ldr	r2, [pc, #16]	; (8009e28 <UART_SetConfig+0xc30>)
 8009e16:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e1c:	e018      	b.n	8009e50 <UART_SetConfig+0xc58>
 8009e1e:	bf00      	nop
 8009e20:	0800aab0 	.word	0x0800aab0
 8009e24:	58024400 	.word	0x58024400
 8009e28:	03d09000 	.word	0x03d09000
 8009e2c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009e30:	4b24      	ldr	r3, [pc, #144]	; (8009ec4 <UART_SetConfig+0xccc>)
 8009e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e34:	e00c      	b.n	8009e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e36:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <UART_SetConfig+0xcd0>)
 8009e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e3a:	e009      	b.n	8009e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e42:	e005      	b.n	8009e50 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e4e:	bf00      	nop
    }

    if (pclk != 0U)
 8009e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d021      	beq.n	8009e9a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	4a1c      	ldr	r2, [pc, #112]	; (8009ecc <UART_SetConfig+0xcd4>)
 8009e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e60:	461a      	mov	r2, r3
 8009e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e64:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	085b      	lsrs	r3, r3, #1
 8009e6e:	441a      	add	r2, r3
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e78:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	2b0f      	cmp	r3, #15
 8009e7e:	d909      	bls.n	8009e94 <UART_SetConfig+0xc9c>
 8009e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e86:	d205      	bcs.n	8009e94 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60da      	str	r2, [r3, #12]
 8009e92:	e002      	b.n	8009e9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2200      	movs	r2, #0
 8009eae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009eb6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3748      	adds	r7, #72	; 0x48
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ec4:	03d09000 	.word	0x03d09000
 8009ec8:	003d0900 	.word	0x003d0900
 8009ecc:	0800aab0 	.word	0x0800aab0

08009ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00a      	beq.n	8009efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00a      	beq.n	8009f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f64:	f003 0310 	and.w	r3, r3, #16
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00a      	beq.n	8009f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f86:	f003 0320 	and.w	r3, r3, #32
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d01a      	beq.n	8009fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fce:	d10a      	bne.n	8009fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	605a      	str	r2, [r3, #4]
  }
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b098      	sub	sp, #96	; 0x60
 800a018:	af02      	add	r7, sp, #8
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a024:	f7f7 fc3c 	bl	80018a0 <HAL_GetTick>
 800a028:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0308 	and.w	r3, r3, #8
 800a034:	2b08      	cmp	r3, #8
 800a036:	d12f      	bne.n	800a098 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a040:	2200      	movs	r2, #0
 800a042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f88e 	bl	800a168 <UART_WaitOnFlagUntilTimeout>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d022      	beq.n	800a098 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a066:	653b      	str	r3, [r7, #80]	; 0x50
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a070:	647b      	str	r3, [r7, #68]	; 0x44
 800a072:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e6      	bne.n	800a052 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e063      	b.n	800a160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0304 	and.w	r3, r3, #4
 800a0a2:	2b04      	cmp	r3, #4
 800a0a4:	d149      	bne.n	800a13a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f857 	bl	800a168 <UART_WaitOnFlagUntilTimeout>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d03c      	beq.n	800a13a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0de:	633b      	str	r3, [r7, #48]	; 0x30
 800a0e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0e6:	e841 2300 	strex	r3, r2, [r1]
 800a0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1e6      	bne.n	800a0c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	e853 3f00 	ldrex	r3, [r3]
 800a100:	60fb      	str	r3, [r7, #12]
   return(result);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f023 0301 	bic.w	r3, r3, #1
 800a108:	64bb      	str	r3, [r7, #72]	; 0x48
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3308      	adds	r3, #8
 800a110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a112:	61fa      	str	r2, [r7, #28]
 800a114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a116:	69b9      	ldr	r1, [r7, #24]
 800a118:	69fa      	ldr	r2, [r7, #28]
 800a11a:	e841 2300 	strex	r3, r2, [r1]
 800a11e:	617b      	str	r3, [r7, #20]
   return(result);
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1e5      	bne.n	800a0f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2220      	movs	r2, #32
 800a12a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e012      	b.n	800a160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2220      	movs	r2, #32
 800a13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3758      	adds	r7, #88	; 0x58
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	4613      	mov	r3, r2
 800a176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a178:	e049      	b.n	800a20e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a180:	d045      	beq.n	800a20e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a182:	f7f7 fb8d 	bl	80018a0 <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d302      	bcc.n	800a198 <UART_WaitOnFlagUntilTimeout+0x30>
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e048      	b.n	800a22e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0304 	and.w	r3, r3, #4
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d031      	beq.n	800a20e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	f003 0308 	and.w	r3, r3, #8
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	d110      	bne.n	800a1da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2208      	movs	r2, #8
 800a1be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 f921 	bl	800a408 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2208      	movs	r2, #8
 800a1ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e029      	b.n	800a22e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1e8:	d111      	bne.n	800a20e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f000 f907 	bl	800a408 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2220      	movs	r2, #32
 800a1fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e00f      	b.n	800a22e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	69da      	ldr	r2, [r3, #28]
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	4013      	ands	r3, r2
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	bf0c      	ite	eq
 800a21e:	2301      	moveq	r3, #1
 800a220:	2300      	movne	r3, #0
 800a222:	b2db      	uxtb	r3, r3
 800a224:	461a      	mov	r2, r3
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d0a6      	beq.n	800a17a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b096      	sub	sp, #88	; 0x58
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	4613      	mov	r3, r2
 800a244:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	88fa      	ldrh	r2, [r7, #6]
 800a250:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2222      	movs	r2, #34	; 0x22
 800a260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d02d      	beq.n	800a2ca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a274:	4a40      	ldr	r2, [pc, #256]	; (800a378 <UART_Start_Receive_DMA+0x140>)
 800a276:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a27e:	4a3f      	ldr	r2, [pc, #252]	; (800a37c <UART_Start_Receive_DMA+0x144>)
 800a280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a288:	4a3d      	ldr	r2, [pc, #244]	; (800a380 <UART_Start_Receive_DMA+0x148>)
 800a28a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a292:	2200      	movs	r2, #0
 800a294:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3324      	adds	r3, #36	; 0x24
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	88fb      	ldrh	r3, [r7, #6]
 800a2ac:	f7f7 ff6c 	bl	8002188 <HAL_DMA_Start_IT>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d009      	beq.n	800a2ca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2210      	movs	r2, #16
 800a2ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2220      	movs	r2, #32
 800a2c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e051      	b.n	800a36e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d018      	beq.n	800a304 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2da:	e853 3f00 	ldrex	r3, [r3]
 800a2de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2e6:	657b      	str	r3, [r7, #84]	; 0x54
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2f2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2f8:	e841 2300 	strex	r3, r2, [r1]
 800a2fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e6      	bne.n	800a2d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	3308      	adds	r3, #8
 800a30a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	e853 3f00 	ldrex	r3, [r3]
 800a312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	f043 0301 	orr.w	r3, r3, #1
 800a31a:	653b      	str	r3, [r7, #80]	; 0x50
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3308      	adds	r3, #8
 800a322:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a324:	637a      	str	r2, [r7, #52]	; 0x34
 800a326:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a328:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a32a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a32c:	e841 2300 	strex	r3, r2, [r1]
 800a330:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1e5      	bne.n	800a304 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3308      	adds	r3, #8
 800a33e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	e853 3f00 	ldrex	r3, [r3]
 800a346:	613b      	str	r3, [r7, #16]
   return(result);
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a34e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a358:	623a      	str	r2, [r7, #32]
 800a35a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35c:	69f9      	ldr	r1, [r7, #28]
 800a35e:	6a3a      	ldr	r2, [r7, #32]
 800a360:	e841 2300 	strex	r3, r2, [r1]
 800a364:	61bb      	str	r3, [r7, #24]
   return(result);
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e5      	bne.n	800a338 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3758      	adds	r7, #88	; 0x58
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	0800a4d5 	.word	0x0800a4d5
 800a37c:	0800a5fd 	.word	0x0800a5fd
 800a380:	0800a63b 	.word	0x0800a63b

0800a384 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a384:	b480      	push	{r7}
 800a386:	b08f      	sub	sp, #60	; 0x3c
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	e853 3f00 	ldrex	r3, [r3]
 800a398:	61fb      	str	r3, [r7, #28]
   return(result);
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a3a0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3b2:	e841 2300 	strex	r3, r2, [r1]
 800a3b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d1e6      	bne.n	800a38c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3308      	adds	r3, #8
 800a3c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	e853 3f00 	ldrex	r3, [r3]
 800a3cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a3d4:	633b      	str	r3, [r7, #48]	; 0x30
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3308      	adds	r3, #8
 800a3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3de:	61ba      	str	r2, [r7, #24]
 800a3e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e2:	6979      	ldr	r1, [r7, #20]
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	e841 2300 	strex	r3, r2, [r1]
 800a3ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e5      	bne.n	800a3be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a3fa:	bf00      	nop
 800a3fc:	373c      	adds	r7, #60	; 0x3c
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
	...

0800a408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a408:	b480      	push	{r7}
 800a40a:	b095      	sub	sp, #84	; 0x54
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a418:	e853 3f00 	ldrex	r3, [r3]
 800a41c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a424:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42e:	643b      	str	r3, [r7, #64]	; 0x40
 800a430:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a432:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a434:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a436:	e841 2300 	strex	r3, r2, [r1]
 800a43a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1e6      	bne.n	800a410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3308      	adds	r3, #8
 800a448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	e853 3f00 	ldrex	r3, [r3]
 800a450:	61fb      	str	r3, [r7, #28]
   return(result);
 800a452:	69fa      	ldr	r2, [r7, #28]
 800a454:	4b1e      	ldr	r3, [pc, #120]	; (800a4d0 <UART_EndRxTransfer+0xc8>)
 800a456:	4013      	ands	r3, r2
 800a458:	64bb      	str	r3, [r7, #72]	; 0x48
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	3308      	adds	r3, #8
 800a460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a462:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a464:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46a:	e841 2300 	strex	r3, r2, [r1]
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1e5      	bne.n	800a442 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d118      	bne.n	800a4b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f023 0310 	bic.w	r3, r3, #16
 800a492:	647b      	str	r3, [r7, #68]	; 0x44
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a49c:	61bb      	str	r3, [r7, #24]
 800a49e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6979      	ldr	r1, [r7, #20]
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e6      	bne.n	800a47e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a4c4:	bf00      	nop
 800a4c6:	3754      	adds	r7, #84	; 0x54
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	effffffe 	.word	0xeffffffe

0800a4d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b09c      	sub	sp, #112	; 0x70
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ea:	d071      	beq.n	800a5d0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a508:	66bb      	str	r3, [r7, #104]	; 0x68
 800a50a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a512:	65bb      	str	r3, [r7, #88]	; 0x58
 800a514:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a516:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a51a:	e841 2300 	strex	r3, r2, [r1]
 800a51e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1e6      	bne.n	800a4f4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3308      	adds	r3, #8
 800a52c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	f023 0301 	bic.w	r3, r3, #1
 800a53c:	667b      	str	r3, [r7, #100]	; 0x64
 800a53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3308      	adds	r3, #8
 800a544:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a546:	647a      	str	r2, [r7, #68]	; 0x44
 800a548:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a54c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e5      	bne.n	800a526 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a55a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3308      	adds	r3, #8
 800a560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a564:	e853 3f00 	ldrex	r3, [r3]
 800a568:	623b      	str	r3, [r7, #32]
   return(result);
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a570:	663b      	str	r3, [r7, #96]	; 0x60
 800a572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3308      	adds	r3, #8
 800a578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a57a:	633a      	str	r2, [r7, #48]	; 0x30
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a582:	e841 2300 	strex	r3, r2, [r1]
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1e5      	bne.n	800a55a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a58e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a590:	2220      	movs	r2, #32
 800a592:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d118      	bne.n	800a5d0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a59e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	e853 3f00 	ldrex	r3, [r3]
 800a5aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f023 0310 	bic.w	r3, r3, #16
 800a5b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5bc:	61fb      	str	r3, [r7, #28]
 800a5be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c0:	69b9      	ldr	r1, [r7, #24]
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	e841 2300 	strex	r3, r2, [r1]
 800a5c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e6      	bne.n	800a59e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d107      	bne.n	800a5ee <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5e8:	f7f6 f80e 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5ec:	e002      	b.n	800a5f4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a5ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5f0:	f7fe fde4 	bl	80091bc <HAL_UART_RxCpltCallback>
}
 800a5f4:	bf00      	nop
 800a5f6:	3770      	adds	r7, #112	; 0x70
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a608:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2201      	movs	r2, #1
 800a60e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a614:	2b01      	cmp	r3, #1
 800a616:	d109      	bne.n	800a62c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a61e:	085b      	lsrs	r3, r3, #1
 800a620:	b29b      	uxth	r3, r3
 800a622:	4619      	mov	r1, r3
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f7f5 ffef 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a62a:	e002      	b.n	800a632 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7fe fdcf 	bl	80091d0 <HAL_UART_RxHalfCpltCallback>
}
 800a632:	bf00      	nop
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b086      	sub	sp, #24
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a646:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a656:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a662:	2b80      	cmp	r3, #128	; 0x80
 800a664:	d109      	bne.n	800a67a <UART_DMAError+0x40>
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2b21      	cmp	r3, #33	; 0x21
 800a66a:	d106      	bne.n	800a67a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2200      	movs	r2, #0
 800a670:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a674:	6978      	ldr	r0, [r7, #20]
 800a676:	f7ff fe85 	bl	800a384 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a684:	2b40      	cmp	r3, #64	; 0x40
 800a686:	d109      	bne.n	800a69c <UART_DMAError+0x62>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b22      	cmp	r3, #34	; 0x22
 800a68c:	d106      	bne.n	800a69c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2200      	movs	r2, #0
 800a692:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a696:	6978      	ldr	r0, [r7, #20]
 800a698:	f7ff feb6 	bl	800a408 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a2:	f043 0210 	orr.w	r2, r3, #16
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6ac:	6978      	ldr	r0, [r7, #20]
 800a6ae:	f7fe fd99 	bl	80091e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6b2:	bf00      	nop
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7fe fd83 	bl	80091e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b088      	sub	sp, #32
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	e853 3f00 	ldrex	r3, [r3]
 800a6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a702:	61fb      	str	r3, [r7, #28]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	461a      	mov	r2, r3
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	61bb      	str	r3, [r7, #24]
 800a70e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	6979      	ldr	r1, [r7, #20]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	e841 2300 	strex	r3, r2, [r1]
 800a718:	613b      	str	r3, [r7, #16]
   return(result);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1e6      	bne.n	800a6ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7fe fd3a 	bl	80091a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a734:	bf00      	nop
 800a736:	3720      	adds	r7, #32
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a786:	2b01      	cmp	r3, #1
 800a788:	d101      	bne.n	800a78e <HAL_UARTEx_DisableFifoMode+0x16>
 800a78a:	2302      	movs	r3, #2
 800a78c:	e027      	b.n	800a7de <HAL_UARTEx_DisableFifoMode+0x66>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2224      	movs	r2, #36	; 0x24
 800a79a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0201 	bic.w	r2, r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr

0800a7ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d101      	bne.n	800a802 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7fe:	2302      	movs	r3, #2
 800a800:	e02d      	b.n	800a85e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2224      	movs	r2, #36	; 0x24
 800a80e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 0201 	bic.w	r2, r2, #1
 800a828:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	430a      	orrs	r2, r1
 800a83c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f8a4 	bl	800a98c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2220      	movs	r2, #32
 800a850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b084      	sub	sp, #16
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a87a:	2302      	movs	r3, #2
 800a87c:	e02d      	b.n	800a8da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2224      	movs	r2, #36	; 0x24
 800a88a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0201 	bic.w	r2, r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f866 	bl	800a98c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2220      	movs	r2, #32
 800a8cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b08c      	sub	sp, #48	; 0x30
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8f6:	2b20      	cmp	r3, #32
 800a8f8:	d142      	bne.n	800a980 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a900:	88fb      	ldrh	r3, [r7, #6]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e03b      	b.n	800a982 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2201      	movs	r2, #1
 800a90e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a916:	88fb      	ldrh	r3, [r7, #6]
 800a918:	461a      	mov	r2, r3
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f7ff fc8b 	bl	800a238 <UART_Start_Receive_DMA>
 800a922:	4603      	mov	r3, r0
 800a924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d124      	bne.n	800a97a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a934:	2b01      	cmp	r3, #1
 800a936:	d11d      	bne.n	800a974 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2210      	movs	r2, #16
 800a93e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	e853 3f00 	ldrex	r3, [r3]
 800a94c:	617b      	str	r3, [r7, #20]
   return(result);
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f043 0310 	orr.w	r3, r3, #16
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
 800a960:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a962:	6a39      	ldr	r1, [r7, #32]
 800a964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a966:	e841 2300 	strex	r3, r2, [r1]
 800a96a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1e6      	bne.n	800a940 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a972:	e002      	b.n	800a97a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a97a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a97e:	e000      	b.n	800a982 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a980:	2302      	movs	r3, #2
  }
}
 800a982:	4618      	mov	r0, r3
 800a984:	3730      	adds	r7, #48	; 0x30
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9ac:	e031      	b.n	800aa12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9ae:	2310      	movs	r3, #16
 800a9b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9b2:	2310      	movs	r3, #16
 800a9b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	0e5b      	lsrs	r3, r3, #25
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f003 0307 	and.w	r3, r3, #7
 800a9c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	0f5b      	lsrs	r3, r3, #29
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	f003 0307 	and.w	r3, r3, #7
 800a9d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	7b3a      	ldrb	r2, [r7, #12]
 800a9da:	4911      	ldr	r1, [pc, #68]	; (800aa20 <UARTEx_SetNbDataToProcess+0x94>)
 800a9dc:	5c8a      	ldrb	r2, [r1, r2]
 800a9de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9e2:	7b3a      	ldrb	r2, [r7, #12]
 800a9e4:	490f      	ldr	r1, [pc, #60]	; (800aa24 <UARTEx_SetNbDataToProcess+0x98>)
 800a9e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	7b7a      	ldrb	r2, [r7, #13]
 800a9f8:	4909      	ldr	r1, [pc, #36]	; (800aa20 <UARTEx_SetNbDataToProcess+0x94>)
 800a9fa:	5c8a      	ldrb	r2, [r1, r2]
 800a9fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa00:	7b7a      	ldrb	r2, [r7, #13]
 800aa02:	4908      	ldr	r1, [pc, #32]	; (800aa24 <UARTEx_SetNbDataToProcess+0x98>)
 800aa04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa06:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa12:	bf00      	nop
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	0800aac8 	.word	0x0800aac8
 800aa24:	0800aad0 	.word	0x0800aad0

0800aa28 <memset>:
 800aa28:	4402      	add	r2, r0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d100      	bne.n	800aa32 <memset+0xa>
 800aa30:	4770      	bx	lr
 800aa32:	f803 1b01 	strb.w	r1, [r3], #1
 800aa36:	e7f9      	b.n	800aa2c <memset+0x4>

0800aa38 <__libc_init_array>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	4d0d      	ldr	r5, [pc, #52]	; (800aa70 <__libc_init_array+0x38>)
 800aa3c:	4c0d      	ldr	r4, [pc, #52]	; (800aa74 <__libc_init_array+0x3c>)
 800aa3e:	1b64      	subs	r4, r4, r5
 800aa40:	10a4      	asrs	r4, r4, #2
 800aa42:	2600      	movs	r6, #0
 800aa44:	42a6      	cmp	r6, r4
 800aa46:	d109      	bne.n	800aa5c <__libc_init_array+0x24>
 800aa48:	4d0b      	ldr	r5, [pc, #44]	; (800aa78 <__libc_init_array+0x40>)
 800aa4a:	4c0c      	ldr	r4, [pc, #48]	; (800aa7c <__libc_init_array+0x44>)
 800aa4c:	f000 f818 	bl	800aa80 <_init>
 800aa50:	1b64      	subs	r4, r4, r5
 800aa52:	10a4      	asrs	r4, r4, #2
 800aa54:	2600      	movs	r6, #0
 800aa56:	42a6      	cmp	r6, r4
 800aa58:	d105      	bne.n	800aa66 <__libc_init_array+0x2e>
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
 800aa5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa60:	4798      	blx	r3
 800aa62:	3601      	adds	r6, #1
 800aa64:	e7ee      	b.n	800aa44 <__libc_init_array+0xc>
 800aa66:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa6a:	4798      	blx	r3
 800aa6c:	3601      	adds	r6, #1
 800aa6e:	e7f2      	b.n	800aa56 <__libc_init_array+0x1e>
 800aa70:	0800aae0 	.word	0x0800aae0
 800aa74:	0800aae0 	.word	0x0800aae0
 800aa78:	0800aae0 	.word	0x0800aae0
 800aa7c:	0800aae4 	.word	0x0800aae4

0800aa80 <_init>:
 800aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa82:	bf00      	nop
 800aa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa86:	bc08      	pop	{r3}
 800aa88:	469e      	mov	lr, r3
 800aa8a:	4770      	bx	lr

0800aa8c <_fini>:
 800aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8e:	bf00      	nop
 800aa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa92:	bc08      	pop	{r3}
 800aa94:	469e      	mov	lr, r3
 800aa96:	4770      	bx	lr
