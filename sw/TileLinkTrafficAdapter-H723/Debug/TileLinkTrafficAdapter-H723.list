
TileLinkTrafficAdapter-H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d0  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800aa9c  0800aa9c  0001aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aadc  0800aadc  0001aadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aae4  0800aae4  0001aae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aae8  0800aae8  0001aae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800aaec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004c8  24000018  0800ab00  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240004e0  0800ab00  000204e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016977  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002937  00000000  00000000  000369fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000010f8  00000000  00000000  00039338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d4b  00000000  00000000  0003a430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00033997  00000000  00000000  0003b17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017ec6  00000000  00000000  0006eb12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014d03a  00000000  00000000  000869d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000480c  00000000  00000000  001d3a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  001d8220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000018 	.word	0x24000018
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800aa84 	.word	0x0800aa84

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400001c 	.word	0x2400001c
 8000308:	0800aa84 	.word	0x0800aa84

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_UARTEx_RxEventCallback>:
  APP_STATE_WAITING_FOR_RX = 2,
} AppState;

AppState app_state = APP_STATE_INVALID;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
  if (app_state != APP_STATE_IDLE) {
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <HAL_UARTEx_RxEventCallback+0x98>)
 8000616:	f993 3000 	ldrsb.w	r3, [r3]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d13b      	bne.n	8000696 <HAL_UARTEx_RxEventCallback+0x8e>
    return;
  }

  if (huart == &huart3) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d131      	bne.n	800068a <HAL_UARTEx_RxEventCallback+0x82>
    tl.tx_frame.chanid  = *(serial_rx_buffer);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800062c:	701a      	strb	r2, [r3, #0]
    tl.tx_frame.opcode  = (*(serial_rx_buffer + 1)) & 0b111;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800063a:	705a      	strb	r2, [r3, #1]
    tl.tx_frame.param   = (*(serial_rx_buffer + 1)) >> 4;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800063e:	785b      	ldrb	r3, [r3, #1]
 8000640:	091b      	lsrs	r3, r3, #4
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000646:	709a      	strb	r2, [r3, #2]
    tl.tx_frame.size    = *(serial_rx_buffer + 2);
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800064a:	789a      	ldrb	r2, [r3, #2]
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800064e:	70da      	strb	r2, [r3, #3]
    tl.tx_frame.source  = 0;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000652:	2200      	movs	r2, #0
 8000654:	711a      	strb	r2, [r3, #4]
    tl.tx_frame.address = *(uint32_t *)(serial_rx_buffer + 4);
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800065c:	6093      	str	r3, [r2, #8]
    tl.tx_frame.data    = *(uint64_t *)(serial_rx_buffer + 8);
 800065e:	4912      	ldr	r1, [pc, #72]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000660:	688a      	ldr	r2, [r1, #8]
 8000662:	68cb      	ldr	r3, [r1, #12]
 8000664:	4911      	ldr	r1, [pc, #68]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000666:	e9c1 2304 	strd	r2, r3, [r1, #16]
    tl.tx_frame.corrupt = (*(serial_rx_buffer + 1) >> 7) & 0b1;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	09db      	lsrs	r3, r3, #7
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000674:	761a      	strb	r2, [r3, #24]
    tl.tx_frame.mask    = *(serial_rx_buffer + 3);
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000678:	78da      	ldrb	r2, [r3, #3]
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 800067c:	765a      	strb	r2, [r3, #25]
    tl.tx_frame.last    = 1;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <HAL_UARTEx_RxEventCallback+0xa4>)
 8000680:	2201      	movs	r2, #1
 8000682:	769a      	strb	r2, [r3, #26]

    app_state = APP_STATE_FRAME_PENDING;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_UARTEx_RxEventCallback+0x98>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 800068a:	2220      	movs	r2, #32
 800068c:	4906      	ldr	r1, [pc, #24]	; (80006a8 <HAL_UARTEx_RxEventCallback+0xa0>)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <HAL_UARTEx_RxEventCallback+0x9c>)
 8000690:	f00a f929 	bl	800a8e6 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000694:	e000      	b.n	8000698 <HAL_UARTEx_RxEventCallback+0x90>
    return;
 8000696:	bf00      	nop
}
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	24000000 	.word	0x24000000
 80006a4:	24000358 	.word	0x24000358
 80006a8:	24000288 	.word	0x24000288
 80006ac:	24000038 	.word	0x24000038

080006b0 <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006b4:	2100      	movs	r1, #0
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <APP_init+0x20>)
 80006b8:	f007 f83c 	bl	8007734 <HAL_TIM_PWM_Start>
  app_state = APP_STATE_IDLE;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <APP_init+0x24>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 80006c2:	2220      	movs	r2, #32
 80006c4:	4904      	ldr	r1, [pc, #16]	; (80006d8 <APP_init+0x28>)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <APP_init+0x2c>)
 80006c8:	f00a f90d 	bl	800a8e6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2400030c 	.word	0x2400030c
 80006d4:	24000000 	.word	0x24000000
 80006d8:	24000288 	.word	0x24000288
 80006dc:	24000358 	.word	0x24000358

080006e0 <APP_main>:


void APP_main() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
  // Poll the TL clock.
  GPIO_PinState tl_clk_state = HAL_GPIO_ReadPin(TL_CLK_GPIO_Port, TL_CLK_Pin);
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	4836      	ldr	r0, [pc, #216]	; (80007c4 <APP_main+0xe4>)
 80006ec:	f004 f9d6 	bl	8004a9c <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	71fb      	strb	r3, [r7, #7]

  // Process TL transactions on the positive clock edge.
  if (tl_clk_state == GPIO_PIN_SET && tl_clk_prev_state == GPIO_PIN_RESET) {
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d106      	bne.n	8000708 <APP_main+0x28>
 80006fa:	4b33      	ldr	r3, [pc, #204]	; (80007c8 <APP_main+0xe8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d102      	bne.n	8000708 <APP_main+0x28>
    TL_update(&tl);
 8000702:	4832      	ldr	r0, [pc, #200]	; (80007cc <APP_main+0xec>)
 8000704:	f000 fd14 	bl	8001130 <TL_update>
  }

  if (tl_clk_state != tl_clk_prev_state) {
 8000708:	4b2f      	ldr	r3, [pc, #188]	; (80007c8 <APP_main+0xe8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	79fa      	ldrb	r2, [r7, #7]
 800070e:	429a      	cmp	r2, r3
 8000710:	d002      	beq.n	8000718 <APP_main+0x38>
    tl_clk_prev_state = tl_clk_state;
 8000712:	4a2d      	ldr	r2, [pc, #180]	; (80007c8 <APP_main+0xe8>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	7013      	strb	r3, [r2, #0]
  }

  // Process any pending TL frames.
  switch (app_state) {
 8000718:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <APP_main+0xf0>)
 800071a:	f993 3000 	ldrsb.w	r3, [r3]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d002      	beq.n	8000728 <APP_main+0x48>
 8000722:	2b02      	cmp	r3, #2
 8000724:	d007      	beq.n	8000736 <APP_main+0x56>
      }
      break;
    }
    case APP_STATE_IDLE:
    default: {
      break;
 8000726:	e048      	b.n	80007ba <APP_main+0xda>
      TL_transmit(&tl);
 8000728:	4828      	ldr	r0, [pc, #160]	; (80007cc <APP_main+0xec>)
 800072a:	f000 ffe7 	bl	80016fc <TL_transmit>
      app_state = APP_STATE_WAITING_FOR_RX;
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <APP_main+0xf0>)
 8000730:	2202      	movs	r2, #2
 8000732:	701a      	strb	r2, [r3, #0]
      break;
 8000734:	e041      	b.n	80007ba <APP_main+0xda>
      if (tl.rx_finished) {
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <APP_main+0xec>)
 8000738:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800073c:	2b00      	cmp	r3, #0
 800073e:	d03b      	beq.n	80007b8 <APP_main+0xd8>
        TL_deserialize(&tl.rx_frame);
 8000740:	4824      	ldr	r0, [pc, #144]	; (80007d4 <APP_main+0xf4>)
 8000742:	f000 fe87 	bl	8001454 <TL_deserialize>
        *(serial_tx_buffer) = tl.rx_frame.chanid;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <APP_main+0xec>)
 8000748:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <APP_main+0xf8>)
 800074e:	701a      	strb	r2, [r3, #0]
        *(serial_tx_buffer + 1) = (tl.rx_frame.corrupt << 7) | (tl.rx_frame.param << 4) | tl.rx_frame.opcode;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <APP_main+0xec>)
 8000752:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8000756:	01db      	lsls	r3, r3, #7
 8000758:	b25a      	sxtb	r2, r3
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <APP_main+0xec>)
 800075c:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	b25b      	sxtb	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b25a      	sxtb	r2, r3
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <APP_main+0xec>)
 800076a:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800076e:	b25b      	sxtb	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b25b      	sxtb	r3, r3
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <APP_main+0xf8>)
 8000778:	705a      	strb	r2, [r3, #1]
        *(serial_tx_buffer + 2) = tl.rx_frame.size;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <APP_main+0xec>)
 800077c:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <APP_main+0xf8>)
 8000782:	709a      	strb	r2, [r3, #2]
        *(serial_tx_buffer + 3) = tl.rx_frame.mask;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <APP_main+0xec>)
 8000786:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <APP_main+0xf8>)
 800078c:	70da      	strb	r2, [r3, #3]
        *(uint32_t *)(serial_tx_buffer + 4) = tl.rx_frame.address;
 800078e:	4a13      	ldr	r2, [pc, #76]	; (80007dc <APP_main+0xfc>)
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <APP_main+0xec>)
 8000792:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8000796:	6013      	str	r3, [r2, #0]
        *(uint64_t *)(serial_tx_buffer + 8) = tl.rx_frame.data;
 8000798:	4911      	ldr	r1, [pc, #68]	; (80007e0 <APP_main+0x100>)
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <APP_main+0xec>)
 800079c:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80007a0:	e9c1 2300 	strd	r2, r3, [r1]
        HAL_UART_Transmit(&huart3, serial_tx_buffer, 16, 1000);
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	2210      	movs	r2, #16
 80007aa:	490b      	ldr	r1, [pc, #44]	; (80007d8 <APP_main+0xf8>)
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <APP_main+0x104>)
 80007ae:	f008 f8b5 	bl	800891c <HAL_UART_Transmit>
        app_state = APP_STATE_IDLE;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <APP_main+0xf0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
      break;
 80007b8:	bf00      	nop
    }
  }
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	58020c00 	.word	0x58020c00
 80007c8:	24000308 	.word	0x24000308
 80007cc:	24000038 	.word	0x24000038
 80007d0:	24000000 	.word	0x24000000
 80007d4:	24000158 	.word	0x24000158
 80007d8:	240002c8 	.word	0x240002c8
 80007dc:	240002cc 	.word	0x240002cc
 80007e0:	240002d0 	.word	0x240002d0
 80007e4:	24000358 	.word	0x24000358

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 ffd4 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f80e 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 f99e 	bl	8000b34 <MX_GPIO_Init>
  MX_DMA_Init();
 80007f8:	f000 f974 	bl	8000ae4 <MX_DMA_Init>
  MX_TIM1_Init();
 80007fc:	f000 f878 	bl	80008f0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000800:	f000 f922 	bl	8000a48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000804:	f7ff ff54 	bl	80006b0 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	APP_main();
 8000808:	f7ff ff6a 	bl	80006e0 <APP_main>
 800080c:	e7fc      	b.n	8000808 <main+0x20>
	...

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09c      	sub	sp, #112	; 0x70
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	224c      	movs	r2, #76	; 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f00a f904 	bl	800aa2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2220      	movs	r2, #32
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f00a f8fe 	bl	800aa2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000830:	2002      	movs	r0, #2
 8000832:	f004 f965 	bl	8004b00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b2c      	ldr	r3, [pc, #176]	; (80008ec <SystemClock_Config+0xdc>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a2b      	ldr	r2, [pc, #172]	; (80008ec <SystemClock_Config+0xdc>)
 8000840:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <SystemClock_Config+0xdc>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000852:	bf00      	nop
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <SystemClock_Config+0xdc>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	d1f8      	bne.n	8000854 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000862:	2302      	movs	r3, #2
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000866:	2301      	movs	r3, #1
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000872:	2300      	movs	r3, #0
 8000874:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000876:	2304      	movs	r3, #4
 8000878:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 800087a:	231f      	movs	r3, #31
 800087c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800088a:	230c      	movs	r3, #12
 800088c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800088e:	2300      	movs	r3, #0
 8000890:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000896:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	4618      	mov	r0, r3
 800089e:	f004 f969 	bl	8004b74 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008a8:	f000 fa2e 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	233f      	movs	r3, #63	; 0x3f
 80008ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2303      	movs	r3, #3
 80008b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008b8:	2308      	movs	r3, #8
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008c0:	2340      	movs	r3, #64	; 0x40
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2103      	movs	r1, #3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fd28 	bl	8005328 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008de:	f000 fa13 	bl	8000d08 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3770      	adds	r7, #112	; 0x70
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	58024800 	.word	0x58024800

080008f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	; 0x70
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000910:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2234      	movs	r2, #52	; 0x34
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00a f87e 	bl	800aa2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000930:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <MX_TIM1_Init+0x150>)
 8000932:	4a44      	ldr	r2, [pc, #272]	; (8000a44 <MX_TIM1_Init+0x154>)
 8000934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000936:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <MX_TIM1_Init+0x150>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <MX_TIM1_Init+0x150>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <MX_TIM1_Init+0x150>)
 8000944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000948:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b3d      	ldr	r3, [pc, #244]	; (8000a40 <MX_TIM1_Init+0x150>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000950:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <MX_TIM1_Init+0x150>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <MX_TIM1_Init+0x150>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800095c:	4838      	ldr	r0, [pc, #224]	; (8000a40 <MX_TIM1_Init+0x150>)
 800095e:	f006 fe31 	bl	80075c4 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000968:	f000 f9ce 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000972:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000976:	4619      	mov	r1, r3
 8000978:	4831      	ldr	r0, [pc, #196]	; (8000a40 <MX_TIM1_Init+0x150>)
 800097a:	f007 f90b 	bl	8007b94 <HAL_TIM_ConfigClockSource>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000984:	f000 f9c0 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000988:	482d      	ldr	r0, [pc, #180]	; (8000a40 <MX_TIM1_Init+0x150>)
 800098a:	f006 fe72 	bl	8007672 <HAL_TIM_PWM_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000994:	f000 f9b8 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009a8:	4619      	mov	r1, r3
 80009aa:	4825      	ldr	r0, [pc, #148]	; (8000a40 <MX_TIM1_Init+0x150>)
 80009ac:	f007 fe2a 	bl	8008604 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009b6:	f000 f9a7 	bl	8000d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	; 0x60
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <MX_TIM1_Init+0x150>)
 80009e0:	f006 ffc4 	bl	800796c <HAL_TIM_PWM_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009ea:	f000 f98d 	bl	8000d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM1_Init+0x150>)
 8000a24:	f007 fe8a 	bl	800873c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a2e:	f000 f96b 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a32:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM1_Init+0x150>)
 8000a34:	f000 f9aa 	bl	8000d8c <HAL_TIM_MspPostInit>

}
 8000a38:	bf00      	nop
 8000a3a:	3770      	adds	r7, #112	; 0x70
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2400030c 	.word	0x2400030c
 8000a44:	40010000 	.word	0x40010000

08000a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a4e:	4a23      	ldr	r2, [pc, #140]	; (8000adc <MX_USART3_UART_Init+0x94>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a54:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <MX_USART3_UART_Init+0x98>)
 8000a56:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a6c:	220c      	movs	r2, #12
 8000a6e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000a90:	f007 fef4 	bl	800887c <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000a9a:	f000 f935 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000aa2:	f009 fea4 	bl	800a7ee <HAL_UARTEx_SetTxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000aac:	f000 f92c 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000ab4:	f009 fed9 	bl	800a86a <HAL_UARTEx_SetRxFifoThreshold>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000abe:	f000 f923 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART3_UART_Init+0x90>)
 8000ac4:	f009 fe5a 	bl	800a77c <HAL_UARTEx_DisableFifoMode>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000ace:	f000 f91b 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000358 	.word	0x24000358
 8000adc:	40004800 	.word	0x40004800
 8000ae0:	001e8480 	.word	0x001e8480

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_DMA_Init+0x4c>)
 8000aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <MX_DMA_Init+0x4c>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <MX_DMA_Init+0x4c>)
 8000afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2010      	movs	r0, #16
 8000b0e:	f000 ffb0 	bl	8001a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b12:	2010      	movs	r0, #16
 8000b14:	f000 ffc7 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2011      	movs	r0, #17
 8000b1e:	f000 ffa8 	bl	8001a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b22:	2011      	movs	r0, #17
 8000b24:	f000 ffbf 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	58024400 	.word	0x58024400

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	4b69      	ldr	r3, [pc, #420]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a67      	ldr	r2, [pc, #412]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b65      	ldr	r3, [pc, #404]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b68:	4b61      	ldr	r3, [pc, #388]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	4a60      	ldr	r2, [pc, #384]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b78:	4b5d      	ldr	r3, [pc, #372]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b5a      	ldr	r3, [pc, #360]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a58      	ldr	r2, [pc, #352]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b56      	ldr	r3, [pc, #344]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b52      	ldr	r3, [pc, #328]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a51      	ldr	r2, [pc, #324]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b4e      	ldr	r3, [pc, #312]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc2:	4b4b      	ldr	r3, [pc, #300]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a49      	ldr	r2, [pc, #292]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be0:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a42      	ldr	r2, [pc, #264]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <MX_GPIO_Init+0x1bc>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c04:	483b      	ldr	r0, [pc, #236]	; (8000cf4 <MX_GPIO_Init+0x1c0>)
 8000c06:	f003 ff61 	bl	8004acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	483a      	ldr	r0, [pc, #232]	; (8000cf8 <MX_GPIO_Init+0x1c4>)
 8000c10:	f003 ff5c 	bl	8004acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2108      	movs	r1, #8
 8000c18:	4838      	ldr	r0, [pc, #224]	; (8000cfc <MX_GPIO_Init+0x1c8>)
 8000c1a:	f003 ff57 	bl	8004acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2101      	movs	r1, #1
 8000c22:	4837      	ldr	r0, [pc, #220]	; (8000d00 <MX_GPIO_Init+0x1cc>)
 8000c24:	f003 ff52 	bl	8004acc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TL_OUT_VALID_Pin TL_OUT_DATA_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TL_OUT_VALID_Pin|TL_OUT_DATA_Pin;
 8000c28:	f242 0309 	movw	r3, #8201	; 0x2009
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	482e      	ldr	r0, [pc, #184]	; (8000cf8 <MX_GPIO_Init+0x1c4>)
 8000c3e:	f003 fd85 	bl	800474c <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_DATA_Pin */
  GPIO_InitStruct.Pin = TL_IN_DATA_Pin;
 8000c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <MX_GPIO_Init+0x1c0>)
 8000c5c:	f003 fd76 	bl	800474c <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_VALID_Pin */
  GPIO_InitStruct.Pin = TL_IN_VALID_Pin;
 8000c60:	2304      	movs	r3, #4
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_VALID_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4820      	ldr	r0, [pc, #128]	; (8000cf8 <MX_GPIO_Init+0x1c4>)
 8000c78:	f003 fd68 	bl	800474c <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_OUT_READY_Pin */
  GPIO_InitStruct.Pin = TL_OUT_READY_Pin;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_OUT_READY_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	481a      	ldr	r0, [pc, #104]	; (8000cfc <MX_GPIO_Init+0x1c8>)
 8000c94:	f003 fd5a 	bl	800474c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4814      	ldr	r0, [pc, #80]	; (8000d00 <MX_GPIO_Init+0x1cc>)
 8000cb0:	f003 fd4c 	bl	800474c <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_READY_Pin */
  GPIO_InitStruct.Pin = TL_IN_READY_Pin;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_IN_READY_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <MX_GPIO_Init+0x1cc>)
 8000cc8:	f003 fd40 	bl	800474c <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_CLK_Pin */
  GPIO_InitStruct.Pin = TL_CLK_Pin;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_CLK_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4808      	ldr	r0, [pc, #32]	; (8000d04 <MX_GPIO_Init+0x1d0>)
 8000ce2:	f003 fd33 	bl	800474c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	; 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58021400 	.word	0x58021400
 8000cf8:	58020800 	.word	0x58020800
 8000cfc:	58020000 	.word	0x58020000
 8000d00:	58020400 	.word	0x58020400
 8000d04:	58020c00 	.word	0x58020c00

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_MspInit+0x30>)
 8000d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d20:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x30>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x30>)
 8000d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	58024400 	.word	0x58024400

08000d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <HAL_TIM_Base_MspInit+0x3c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10e      	bne.n	8000d78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_TIM_Base_MspInit+0x40>)
 8000d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <HAL_TIM_Base_MspInit+0x40>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_TIM_Base_MspInit+0x40>)
 8000d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	40010000 	.word	0x40010000
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <HAL_TIM_MspPostInit+0x6c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d11f      	bne.n	8000dee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <HAL_TIM_MspPostInit+0x70>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <HAL_TIM_MspPostInit+0x70>)
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_TIM_MspPostInit+0x70>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <HAL_TIM_MspPostInit+0x74>)
 8000dea:	f003 fcaf 	bl	800474c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	58021000 	.word	0x58021000

08000e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0b8      	sub	sp, #224	; 0xe0
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	22b8      	movs	r2, #184	; 0xb8
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f009 fe01 	bl	800aa2c <memset>
  if(huart->Instance==USART3)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a59      	ldr	r2, [pc, #356]	; (8000f94 <HAL_UART_MspInit+0x190>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	f040 80aa 	bne.w	8000f8a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e36:	f04f 0202 	mov.w	r2, #2
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 fdf7 	bl	8005a40 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000e58:	f7ff ff56 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e5c:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <HAL_UART_MspInit+0x194>)
 8000e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e62:	4a4d      	ldr	r2, [pc, #308]	; (8000f98 <HAL_UART_MspInit+0x194>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <HAL_UART_MspInit+0x194>)
 8000e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7a:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <HAL_UART_MspInit+0x194>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a45      	ldr	r2, [pc, #276]	; (8000f98 <HAL_UART_MspInit+0x194>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <HAL_UART_MspInit+0x194>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4837      	ldr	r0, [pc, #220]	; (8000f9c <HAL_UART_MspInit+0x198>)
 8000ec0:	f003 fc44 	bl	800474c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000ec6:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <HAL_UART_MspInit+0x1a0>)
 8000ec8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000ecc:	222d      	movs	r2, #45	; 0x2d
 8000ece:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed0:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000efc:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f02:	4827      	ldr	r0, [pc, #156]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000f04:	f000 fdea 	bl	8001adc <HAL_DMA_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f0e:	f7ff fefb 	bl	8000d08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <HAL_UART_MspInit+0x19c>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream6;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f22:	4a22      	ldr	r2, [pc, #136]	; (8000fac <HAL_UART_MspInit+0x1a8>)
 8000f24:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f28:	222e      	movs	r2, #46	; 0x2e
 8000f2a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f2e:	2240      	movs	r2, #64	; 0x40
 8000f30:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f3e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f60:	f000 fdbc 	bl	8001adc <HAL_DMA_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000f6a:	f7ff fecd 	bl	8000d08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f72:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <HAL_UART_MspInit+0x1a4>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2027      	movs	r0, #39	; 0x27
 8000f80:	f000 fd77 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f84:	2027      	movs	r0, #39	; 0x27
 8000f86:	f000 fd8e 	bl	8001aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	37e0      	adds	r7, #224	; 0xe0
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40004800 	.word	0x40004800
 8000f98:	58024400 	.word	0x58024400
 8000f9c:	58020c00 	.word	0x58020c00
 8000fa0:	240003ec 	.word	0x240003ec
 8000fa4:	40020088 	.word	0x40020088
 8000fa8:	24000464 	.word	0x24000464
 8000fac:	400200a0 	.word	0x400200a0

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 fc3e 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <DMA1_Stream5_IRQHandler+0x10>)
 800100a:	f002 f88d 	bl	8003128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	240003ec 	.word	0x240003ec

08001018 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <DMA1_Stream6_IRQHandler+0x10>)
 800101e:	f002 f883 	bl	8003128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000464 	.word	0x24000464

0800102c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <USART3_IRQHandler+0x10>)
 8001032:	f007 fd01 	bl	8008a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	24000358 	.word	0x24000358

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <SystemInit+0xd0>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <SystemInit+0xd0>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <SystemInit+0xd4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	2b06      	cmp	r3, #6
 800105e:	d807      	bhi.n	8001070 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <SystemInit+0xd4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 030f 	bic.w	r3, r3, #15
 8001068:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <SystemInit+0xd4>)
 800106a:	f043 0307 	orr.w	r3, r3, #7
 800106e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <SystemInit+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a28      	ldr	r2, [pc, #160]	; (8001118 <SystemInit+0xd8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <SystemInit+0xd8>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <SystemInit+0xd8>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4924      	ldr	r1, [pc, #144]	; (8001118 <SystemInit+0xd8>)
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <SystemInit+0xdc>)
 800108a:	4013      	ands	r3, r2
 800108c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <SystemInit+0xd4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <SystemInit+0xd4>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 030f 	bic.w	r3, r3, #15
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <SystemInit+0xd4>)
 80010a4:	f043 0307 	orr.w	r3, r3, #7
 80010a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <SystemInit+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <SystemInit+0xd8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <SystemInit+0xd8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <SystemInit+0xd8>)
 80010be:	4a18      	ldr	r2, [pc, #96]	; (8001120 <SystemInit+0xe0>)
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <SystemInit+0xd8>)
 80010c4:	4a17      	ldr	r2, [pc, #92]	; (8001124 <SystemInit+0xe4>)
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <SystemInit+0xd8>)
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <SystemInit+0xe8>)
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <SystemInit+0xd8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <SystemInit+0xd8>)
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <SystemInit+0xe8>)
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <SystemInit+0xd8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <SystemInit+0xd8>)
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <SystemInit+0xe8>)
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <SystemInit+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <SystemInit+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a09      	ldr	r2, [pc, #36]	; (8001118 <SystemInit+0xd8>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <SystemInit+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <SystemInit+0xec>)
 8001100:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001104:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	52002000 	.word	0x52002000
 8001118:	58024400 	.word	0x58024400
 800111c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001120:	02020200 	.word	0x02020200
 8001124:	01ff0000 	.word	0x01ff0000
 8001128:	01010280 	.word	0x01010280
 800112c:	52004000 	.word	0x52004000

08001130 <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 800113e:	2b00      	cmp	r3, #0
 8001140:	d036      	beq.n	80011b0 <TL_update+0x80>
    HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	7edb      	ldrb	r3, [r3, #27]
 8001150:	461a      	mov	r2, r3
 8001152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001156:	4835      	ldr	r0, [pc, #212]	; (800122c <TL_update+0xfc>)
 8001158:	f003 fcb8 	bl	8004acc <HAL_GPIO_WritePin>

    if (tl->tx_bit_offset == 0) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <TL_update+0x4a>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 1);
 8001166:	2201      	movs	r2, #1
 8001168:	2108      	movs	r1, #8
 800116a:	4831      	ldr	r0, [pc, #196]	; (8001230 <TL_update+0x100>)
 800116c:	f003 fcae 	bl	8004acc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 1);
 8001170:	2201      	movs	r2, #1
 8001172:	2104      	movs	r1, #4
 8001174:	482f      	ldr	r0, [pc, #188]	; (8001234 <TL_update+0x104>)
 8001176:	f003 fca9 	bl	8004acc <HAL_GPIO_WritePin>
    }


    if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001180:	2b7b      	cmp	r3, #123	; 0x7b
 8001182:	d10c      	bne.n	800119e <TL_update+0x6e>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2104      	movs	r1, #4
 8001188:	482a      	ldr	r0, [pc, #168]	; (8001234 <TL_update+0x104>)
 800118a:	f003 fc9f 	bl	8004acc <HAL_GPIO_WritePin>
      tl->tx_pending = 0;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
      tl->tx_finished = 1;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
    }

    tl->tx_bit_offset += 1;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80011a4:	3301      	adds	r3, #1
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
        tl->rx_finished = 1;
      }
    }
  }
}
 80011ae:	e038      	b.n	8001222 <TL_update+0xf2>
  else if (tl->rx_pending) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d033      	beq.n	8001222 <TL_update+0xf2>
    if (tl->rx_finished) {
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <TL_update+0xa6>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2108      	movs	r1, #8
 80011c8:	4819      	ldr	r0, [pc, #100]	; (8001230 <TL_update+0x100>)
 80011ca:	f003 fc7f 	bl	8004acc <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
    if (HAL_GPIO_ReadPin(TL_OUT_VALID_GPIO_Port, TL_OUT_VALID_Pin) == GPIO_PIN_SET) {
 80011d6:	2101      	movs	r1, #1
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <TL_update+0x104>)
 80011da:	f003 fc5f 	bl	8004a9c <HAL_GPIO_ReadPin>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d11e      	bne.n	8001222 <TL_update+0xf2>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_OUT_DATA_GPIO_Port, TL_OUT_DATA_Pin);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 80011ea:	461c      	mov	r4, r3
 80011ec:	2108      	movs	r1, #8
 80011ee:	4811      	ldr	r0, [pc, #68]	; (8001234 <TL_update+0x104>)
 80011f0:	f003 fc54 	bl	8004a9c <HAL_GPIO_ReadPin>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4423      	add	r3, r4
 80011fc:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      tl->rx_bit_offset += 1;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001206:	3301      	adds	r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001216:	2b7b      	cmp	r3, #123	; 0x7b
 8001218:	d103      	bne.n	8001222 <TL_update+0xf2>
        tl->rx_finished = 1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	bf00      	nop
 800122c:	58021400 	.word	0x58021400
 8001230:	58020000 	.word	0x58020000
 8001234:	58020800 	.word	0x58020800

08001238 <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 8001238:	b4f0      	push	{r4, r5, r6, r7}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001240:	2100      	movs	r1, #0
 8001242:	83f9      	strh	r1, [r7, #30]
 8001244:	e011      	b.n	800126a <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	7e89      	ldrb	r1, [r1, #26]
 800124a:	4608      	mov	r0, r1
 800124c:	8bf9      	ldrh	r1, [r7, #30]
 800124e:	fa40 f101 	asr.w	r1, r0, r1
 8001252:	b2c8      	uxtb	r0, r1
 8001254:	8bf9      	ldrh	r1, [r7, #30]
 8001256:	f000 0001 	and.w	r0, r0, #1
 800125a:	b2c4      	uxtb	r4, r0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	4401      	add	r1, r0
 8001260:	4620      	mov	r0, r4
 8001262:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001264:	8bf9      	ldrh	r1, [r7, #30]
 8001266:	3101      	adds	r1, #1
 8001268:	83f9      	strh	r1, [r7, #30]
 800126a:	8bf9      	ldrh	r1, [r7, #30]
 800126c:	2900      	cmp	r1, #0
 800126e:	d0ea      	beq.n	8001246 <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001270:	2100      	movs	r1, #0
 8001272:	83b9      	strh	r1, [r7, #28]
 8001274:	e012      	b.n	800129c <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->mask >> i) & 0b1;
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	7e49      	ldrb	r1, [r1, #25]
 800127a:	4608      	mov	r0, r1
 800127c:	8bb9      	ldrh	r1, [r7, #28]
 800127e:	fa40 f101 	asr.w	r1, r0, r1
 8001282:	b2c8      	uxtb	r0, r1
 8001284:	8bb9      	ldrh	r1, [r7, #28]
 8001286:	3101      	adds	r1, #1
 8001288:	f000 0001 	and.w	r0, r0, #1
 800128c:	b2c4      	uxtb	r4, r0
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	4401      	add	r1, r0
 8001292:	4620      	mov	r0, r4
 8001294:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001296:	8bb9      	ldrh	r1, [r7, #28]
 8001298:	3101      	adds	r1, #1
 800129a:	83b9      	strh	r1, [r7, #28]
 800129c:	8bb9      	ldrh	r1, [r7, #28]
 800129e:	2907      	cmp	r1, #7
 80012a0:	d9e9      	bls.n	8001276 <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80012a2:	2100      	movs	r1, #0
 80012a4:	8379      	strh	r1, [r7, #26]
 80012a6:	e012      	b.n	80012ce <TL_serialize+0x96>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->corrupt >> i) & 0b1;
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	7e09      	ldrb	r1, [r1, #24]
 80012ac:	4608      	mov	r0, r1
 80012ae:	8b79      	ldrh	r1, [r7, #26]
 80012b0:	fa40 f101 	asr.w	r1, r0, r1
 80012b4:	b2c8      	uxtb	r0, r1
 80012b6:	8b79      	ldrh	r1, [r7, #26]
 80012b8:	3109      	adds	r1, #9
 80012ba:	f000 0001 	and.w	r0, r0, #1
 80012be:	b2c4      	uxtb	r4, r0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4401      	add	r1, r0
 80012c4:	4620      	mov	r0, r4
 80012c6:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80012c8:	8b79      	ldrh	r1, [r7, #26]
 80012ca:	3101      	adds	r1, #1
 80012cc:	8379      	strh	r1, [r7, #26]
 80012ce:	8b79      	ldrh	r1, [r7, #26]
 80012d0:	2900      	cmp	r1, #0
 80012d2:	d0e9      	beq.n	80012a8 <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80012d4:	2100      	movs	r1, #0
 80012d6:	8339      	strh	r1, [r7, #24]
 80012d8:	e01e      	b.n	8001318 <TL_serialize+0xe0>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80012e0:	8b3c      	ldrh	r4, [r7, #24]
 80012e2:	f1c4 0620 	rsb	r6, r4, #32
 80012e6:	f1a4 0520 	sub.w	r5, r4, #32
 80012ea:	fa20 f204 	lsr.w	r2, r0, r4
 80012ee:	fa01 f606 	lsl.w	r6, r1, r6
 80012f2:	4332      	orrs	r2, r6
 80012f4:	fa21 f505 	lsr.w	r5, r1, r5
 80012f8:	432a      	orrs	r2, r5
 80012fa:	fa21 f304 	lsr.w	r3, r1, r4
 80012fe:	b2d0      	uxtb	r0, r2
 8001300:	8b39      	ldrh	r1, [r7, #24]
 8001302:	310a      	adds	r1, #10
 8001304:	f000 0001 	and.w	r0, r0, #1
 8001308:	b2c4      	uxtb	r4, r0
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	4401      	add	r1, r0
 800130e:	4620      	mov	r0, r4
 8001310:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001312:	8b39      	ldrh	r1, [r7, #24]
 8001314:	3101      	adds	r1, #1
 8001316:	8339      	strh	r1, [r7, #24]
 8001318:	8b39      	ldrh	r1, [r7, #24]
 800131a:	293f      	cmp	r1, #63	; 0x3f
 800131c:	d9dd      	bls.n	80012da <TL_serialize+0xa2>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 800131e:	2300      	movs	r3, #0
 8001320:	82fb      	strh	r3, [r7, #22]
 8001322:	e011      	b.n	8001348 <TL_serialize+0x110>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->address >> i) & 0b1;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	8afb      	ldrh	r3, [r7, #22]
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	b2da      	uxtb	r2, r3
 8001330:	8afb      	ldrh	r3, [r7, #22]
 8001332:	334a      	adds	r3, #74	; 0x4a
 8001334:	f002 0201 	and.w	r2, r2, #1
 8001338:	b2d1      	uxtb	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	460a      	mov	r2, r1
 8001340:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001342:	8afb      	ldrh	r3, [r7, #22]
 8001344:	3301      	adds	r3, #1
 8001346:	82fb      	strh	r3, [r7, #22]
 8001348:	8afb      	ldrh	r3, [r7, #22]
 800134a:	2b1f      	cmp	r3, #31
 800134c:	d9ea      	bls.n	8001324 <TL_serialize+0xec>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 800134e:	2300      	movs	r3, #0
 8001350:	82bb      	strh	r3, [r7, #20]
 8001352:	e012      	b.n	800137a <TL_serialize+0x142>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	461a      	mov	r2, r3
 800135a:	8abb      	ldrh	r3, [r7, #20]
 800135c:	fa42 f303 	asr.w	r3, r2, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	8abb      	ldrh	r3, [r7, #20]
 8001364:	336a      	adds	r3, #106	; 0x6a
 8001366:	f002 0201 	and.w	r2, r2, #1
 800136a:	b2d1      	uxtb	r1, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001374:	8abb      	ldrh	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	82bb      	strh	r3, [r7, #20]
 800137a:	8abb      	ldrh	r3, [r7, #20]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d9e9      	bls.n	8001354 <TL_serialize+0x11c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001380:	2300      	movs	r3, #0
 8001382:	827b      	strh	r3, [r7, #18]
 8001384:	e012      	b.n	80013ac <TL_serialize+0x174>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	78db      	ldrb	r3, [r3, #3]
 800138a:	461a      	mov	r2, r3
 800138c:	8a7b      	ldrh	r3, [r7, #18]
 800138e:	fa42 f303 	asr.w	r3, r2, r3
 8001392:	b2da      	uxtb	r2, r3
 8001394:	8a7b      	ldrh	r3, [r7, #18]
 8001396:	336e      	adds	r3, #110	; 0x6e
 8001398:	f002 0201 	and.w	r2, r2, #1
 800139c:	b2d1      	uxtb	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	460a      	mov	r2, r1
 80013a4:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80013a6:	8a7b      	ldrh	r3, [r7, #18]
 80013a8:	3301      	adds	r3, #1
 80013aa:	827b      	strh	r3, [r7, #18]
 80013ac:	8a7b      	ldrh	r3, [r7, #18]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9e9      	bls.n	8001386 <TL_serialize+0x14e>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	823b      	strh	r3, [r7, #16]
 80013b6:	e012      	b.n	80013de <TL_serialize+0x1a6>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	461a      	mov	r2, r3
 80013be:	8a3b      	ldrh	r3, [r7, #16]
 80013c0:	fa42 f303 	asr.w	r3, r2, r3
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	8a3b      	ldrh	r3, [r7, #16]
 80013c8:	3372      	adds	r3, #114	; 0x72
 80013ca:	f002 0201 	and.w	r2, r2, #1
 80013ce:	b2d1      	uxtb	r1, r2
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	4413      	add	r3, r2
 80013d4:	460a      	mov	r2, r1
 80013d6:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80013d8:	8a3b      	ldrh	r3, [r7, #16]
 80013da:	3301      	adds	r3, #1
 80013dc:	823b      	strh	r3, [r7, #16]
 80013de:	8a3b      	ldrh	r3, [r7, #16]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d9e9      	bls.n	80013b8 <TL_serialize+0x180>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	81fb      	strh	r3, [r7, #14]
 80013e8:	e012      	b.n	8001410 <TL_serialize+0x1d8>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	461a      	mov	r2, r3
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	fa42 f303 	asr.w	r3, r2, r3
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	89fb      	ldrh	r3, [r7, #14]
 80013fa:	3375      	adds	r3, #117	; 0x75
 80013fc:	f002 0201 	and.w	r2, r2, #1
 8001400:	b2d1      	uxtb	r1, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	460a      	mov	r2, r1
 8001408:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	3301      	adds	r3, #1
 800140e:	81fb      	strh	r3, [r7, #14]
 8001410:	89fb      	ldrh	r3, [r7, #14]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d9e9      	bls.n	80013ea <TL_serialize+0x1b2>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001416:	2300      	movs	r3, #0
 8001418:	81bb      	strh	r3, [r7, #12]
 800141a:	e012      	b.n	8001442 <TL_serialize+0x20a>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	89bb      	ldrh	r3, [r7, #12]
 8001424:	fa42 f303 	asr.w	r3, r2, r3
 8001428:	b2da      	uxtb	r2, r3
 800142a:	89bb      	ldrh	r3, [r7, #12]
 800142c:	3378      	adds	r3, #120	; 0x78
 800142e:	f002 0201 	and.w	r2, r2, #1
 8001432:	b2d1      	uxtb	r1, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	4413      	add	r3, r2
 8001438:	460a      	mov	r2, r1
 800143a:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800143c:	89bb      	ldrh	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	81bb      	strh	r3, [r7, #12]
 8001442:	89bb      	ldrh	r3, [r7, #12]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d9e9      	bls.n	800141c <TL_serialize+0x1e4>
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bcf0      	pop	{r4, r5, r6, r7}
 8001452:	4770      	bx	lr

08001454 <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 8001454:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001458:	b08a      	sub	sp, #40	; 0x28
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
  frame->chanid = 0;
 800145e:	68f9      	ldr	r1, [r7, #12]
 8001460:	2000      	movs	r0, #0
 8001462:	7008      	strb	r0, [r1, #0]
  frame->opcode = 0;
 8001464:	68f9      	ldr	r1, [r7, #12]
 8001466:	2000      	movs	r0, #0
 8001468:	7048      	strb	r0, [r1, #1]
  frame->param = 0;
 800146a:	68f9      	ldr	r1, [r7, #12]
 800146c:	2000      	movs	r0, #0
 800146e:	7088      	strb	r0, [r1, #2]
  frame->size = 0;
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	2000      	movs	r0, #0
 8001474:	70c8      	strb	r0, [r1, #3]
  frame->source = 0;
 8001476:	68f9      	ldr	r1, [r7, #12]
 8001478:	2000      	movs	r0, #0
 800147a:	7108      	strb	r0, [r1, #4]
  frame->address = 0;
 800147c:	68f9      	ldr	r1, [r7, #12]
 800147e:	2000      	movs	r0, #0
 8001480:	6088      	str	r0, [r1, #8]
  frame->data = 0;
 8001482:	68fe      	ldr	r6, [r7, #12]
 8001484:	f04f 0000 	mov.w	r0, #0
 8001488:	f04f 0100 	mov.w	r1, #0
 800148c:	e9c6 0104 	strd	r0, r1, [r6, #16]
  frame->corrupt = 0;
 8001490:	68f9      	ldr	r1, [r7, #12]
 8001492:	2000      	movs	r0, #0
 8001494:	7608      	strb	r0, [r1, #24]
  frame->mask = 0;
 8001496:	68f9      	ldr	r1, [r7, #12]
 8001498:	2000      	movs	r0, #0
 800149a:	7648      	strb	r0, [r1, #25]
  frame->last = 0;
 800149c:	68f9      	ldr	r1, [r7, #12]
 800149e:	2000      	movs	r0, #0
 80014a0:	7688      	strb	r0, [r1, #26]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80014a2:	2100      	movs	r1, #0
 80014a4:	84f9      	strh	r1, [r7, #38]	; 0x26
 80014a6:	e014      	b.n	80014d2 <TL_deserialize+0x7e>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 80014a8:	68f9      	ldr	r1, [r7, #12]
 80014aa:	7e89      	ldrb	r1, [r1, #26]
 80014ac:	b248      	sxtb	r0, r1
 80014ae:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80014b0:	68fe      	ldr	r6, [r7, #12]
 80014b2:	4431      	add	r1, r6
 80014b4:	7ec9      	ldrb	r1, [r1, #27]
 80014b6:	f001 0601 	and.w	r6, r1, #1
 80014ba:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80014bc:	fa06 f101 	lsl.w	r1, r6, r1
 80014c0:	b249      	sxtb	r1, r1
 80014c2:	4301      	orrs	r1, r0
 80014c4:	b249      	sxtb	r1, r1
 80014c6:	b2c8      	uxtb	r0, r1
 80014c8:	68f9      	ldr	r1, [r7, #12]
 80014ca:	7688      	strb	r0, [r1, #26]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80014cc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80014ce:	3101      	adds	r1, #1
 80014d0:	84f9      	strh	r1, [r7, #38]	; 0x26
 80014d2:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80014d4:	2900      	cmp	r1, #0
 80014d6:	d0e7      	beq.n	80014a8 <TL_deserialize+0x54>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80014d8:	2100      	movs	r1, #0
 80014da:	84b9      	strh	r1, [r7, #36]	; 0x24
 80014dc:	e015      	b.n	800150a <TL_deserialize+0xb6>
    frame->mask |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 80014de:	68f9      	ldr	r1, [r7, #12]
 80014e0:	7e49      	ldrb	r1, [r1, #25]
 80014e2:	b248      	sxtb	r0, r1
 80014e4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80014e6:	3101      	adds	r1, #1
 80014e8:	68fe      	ldr	r6, [r7, #12]
 80014ea:	4431      	add	r1, r6
 80014ec:	7ec9      	ldrb	r1, [r1, #27]
 80014ee:	f001 0601 	and.w	r6, r1, #1
 80014f2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80014f4:	fa06 f101 	lsl.w	r1, r6, r1
 80014f8:	b249      	sxtb	r1, r1
 80014fa:	4301      	orrs	r1, r0
 80014fc:	b249      	sxtb	r1, r1
 80014fe:	b2c8      	uxtb	r0, r1
 8001500:	68f9      	ldr	r1, [r7, #12]
 8001502:	7648      	strb	r0, [r1, #25]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001504:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001506:	3101      	adds	r1, #1
 8001508:	84b9      	strh	r1, [r7, #36]	; 0x24
 800150a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800150c:	2907      	cmp	r1, #7
 800150e:	d9e6      	bls.n	80014de <TL_deserialize+0x8a>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001510:	2100      	movs	r1, #0
 8001512:	8479      	strh	r1, [r7, #34]	; 0x22
 8001514:	e015      	b.n	8001542 <TL_deserialize+0xee>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 8001516:	68f9      	ldr	r1, [r7, #12]
 8001518:	7e09      	ldrb	r1, [r1, #24]
 800151a:	b248      	sxtb	r0, r1
 800151c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800151e:	3109      	adds	r1, #9
 8001520:	68fe      	ldr	r6, [r7, #12]
 8001522:	4431      	add	r1, r6
 8001524:	7ec9      	ldrb	r1, [r1, #27]
 8001526:	f001 0601 	and.w	r6, r1, #1
 800152a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800152c:	fa06 f101 	lsl.w	r1, r6, r1
 8001530:	b249      	sxtb	r1, r1
 8001532:	4301      	orrs	r1, r0
 8001534:	b249      	sxtb	r1, r1
 8001536:	b2c8      	uxtb	r0, r1
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	7608      	strb	r0, [r1, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800153c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800153e:	3101      	adds	r1, #1
 8001540:	8479      	strh	r1, [r7, #34]	; 0x22
 8001542:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001544:	2900      	cmp	r1, #0
 8001546:	d0e6      	beq.n	8001516 <TL_deserialize+0xc2>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001548:	2100      	movs	r1, #0
 800154a:	8439      	strh	r1, [r7, #32]
 800154c:	e028      	b.n	80015a0 <TL_deserialize+0x14c>
    frame->data |= ((uint64_t)(frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	e9d1 ab04 	ldrd	sl, fp, [r1, #16]
 8001554:	8c39      	ldrh	r1, [r7, #32]
 8001556:	310a      	adds	r1, #10
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	4401      	add	r1, r0
 800155c:	7ec9      	ldrb	r1, [r1, #27]
 800155e:	b2c9      	uxtb	r1, r1
 8001560:	2000      	movs	r0, #0
 8001562:	6039      	str	r1, [r7, #0]
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	f001 0401 	and.w	r4, r1, #1
 800156c:	2500      	movs	r5, #0
 800156e:	8c39      	ldrh	r1, [r7, #32]
 8001570:	f1a1 0620 	sub.w	r6, r1, #32
 8001574:	f1c1 0020 	rsb	r0, r1, #32
 8001578:	fa05 f301 	lsl.w	r3, r5, r1
 800157c:	fa04 f606 	lsl.w	r6, r4, r6
 8001580:	4333      	orrs	r3, r6
 8001582:	fa24 f000 	lsr.w	r0, r4, r0
 8001586:	4303      	orrs	r3, r0
 8001588:	fa04 f201 	lsl.w	r2, r4, r1
 800158c:	ea4a 0802 	orr.w	r8, sl, r2
 8001590:	ea4b 0903 	orr.w	r9, fp, r3
 8001594:	68f9      	ldr	r1, [r7, #12]
 8001596:	e9c1 8904 	strd	r8, r9, [r1, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800159a:	8c39      	ldrh	r1, [r7, #32]
 800159c:	3101      	adds	r1, #1
 800159e:	8439      	strh	r1, [r7, #32]
 80015a0:	8c39      	ldrh	r1, [r7, #32]
 80015a2:	293f      	cmp	r1, #63	; 0x3f
 80015a4:	d9d3      	bls.n	800154e <TL_deserialize+0xfa>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	83fb      	strh	r3, [r7, #30]
 80015aa:	e011      	b.n	80015d0 <TL_deserialize+0x17c>
    frame->address |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	8bfa      	ldrh	r2, [r7, #30]
 80015b2:	324a      	adds	r2, #74	; 0x4a
 80015b4:	68f9      	ldr	r1, [r7, #12]
 80015b6:	440a      	add	r2, r1
 80015b8:	7ed2      	ldrb	r2, [r2, #27]
 80015ba:	f002 0101 	and.w	r1, r2, #1
 80015be:	8bfa      	ldrh	r2, [r7, #30]
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	431a      	orrs	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80015ca:	8bfb      	ldrh	r3, [r7, #30]
 80015cc:	3301      	adds	r3, #1
 80015ce:	83fb      	strh	r3, [r7, #30]
 80015d0:	8bfb      	ldrh	r3, [r7, #30]
 80015d2:	2b1f      	cmp	r3, #31
 80015d4:	d9ea      	bls.n	80015ac <TL_deserialize+0x158>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	83bb      	strh	r3, [r7, #28]
 80015da:	e015      	b.n	8001608 <TL_deserialize+0x1b4>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	791b      	ldrb	r3, [r3, #4]
 80015e0:	b25a      	sxtb	r2, r3
 80015e2:	8bbb      	ldrh	r3, [r7, #28]
 80015e4:	336a      	adds	r3, #106	; 0x6a
 80015e6:	68f9      	ldr	r1, [r7, #12]
 80015e8:	440b      	add	r3, r1
 80015ea:	7edb      	ldrb	r3, [r3, #27]
 80015ec:	f003 0101 	and.w	r1, r3, #1
 80015f0:	8bbb      	ldrh	r3, [r7, #28]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001602:	8bbb      	ldrh	r3, [r7, #28]
 8001604:	3301      	adds	r3, #1
 8001606:	83bb      	strh	r3, [r7, #28]
 8001608:	8bbb      	ldrh	r3, [r7, #28]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d9e6      	bls.n	80015dc <TL_deserialize+0x188>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800160e:	2300      	movs	r3, #0
 8001610:	837b      	strh	r3, [r7, #26]
 8001612:	e015      	b.n	8001640 <TL_deserialize+0x1ec>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	78db      	ldrb	r3, [r3, #3]
 8001618:	b25a      	sxtb	r2, r3
 800161a:	8b7b      	ldrh	r3, [r7, #26]
 800161c:	336e      	adds	r3, #110	; 0x6e
 800161e:	68f9      	ldr	r1, [r7, #12]
 8001620:	440b      	add	r3, r1
 8001622:	7edb      	ldrb	r3, [r3, #27]
 8001624:	f003 0101 	and.w	r1, r3, #1
 8001628:	8b7b      	ldrh	r3, [r7, #26]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	b25b      	sxtb	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b25b      	sxtb	r3, r3
 8001634:	b2da      	uxtb	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800163a:	8b7b      	ldrh	r3, [r7, #26]
 800163c:	3301      	adds	r3, #1
 800163e:	837b      	strh	r3, [r7, #26]
 8001640:	8b7b      	ldrh	r3, [r7, #26]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d9e6      	bls.n	8001614 <TL_deserialize+0x1c0>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001646:	2300      	movs	r3, #0
 8001648:	833b      	strh	r3, [r7, #24]
 800164a:	e015      	b.n	8001678 <TL_deserialize+0x224>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	789b      	ldrb	r3, [r3, #2]
 8001650:	b25a      	sxtb	r2, r3
 8001652:	8b3b      	ldrh	r3, [r7, #24]
 8001654:	3372      	adds	r3, #114	; 0x72
 8001656:	68f9      	ldr	r1, [r7, #12]
 8001658:	440b      	add	r3, r1
 800165a:	7edb      	ldrb	r3, [r3, #27]
 800165c:	f003 0101 	and.w	r1, r3, #1
 8001660:	8b3b      	ldrh	r3, [r7, #24]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	b25b      	sxtb	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	b2da      	uxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001672:	8b3b      	ldrh	r3, [r7, #24]
 8001674:	3301      	adds	r3, #1
 8001676:	833b      	strh	r3, [r7, #24]
 8001678:	8b3b      	ldrh	r3, [r7, #24]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d9e6      	bls.n	800164c <TL_deserialize+0x1f8>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800167e:	2300      	movs	r3, #0
 8001680:	82fb      	strh	r3, [r7, #22]
 8001682:	e015      	b.n	80016b0 <TL_deserialize+0x25c>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	785b      	ldrb	r3, [r3, #1]
 8001688:	b25a      	sxtb	r2, r3
 800168a:	8afb      	ldrh	r3, [r7, #22]
 800168c:	3375      	adds	r3, #117	; 0x75
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	440b      	add	r3, r1
 8001692:	7edb      	ldrb	r3, [r3, #27]
 8001694:	f003 0101 	and.w	r1, r3, #1
 8001698:	8afb      	ldrh	r3, [r7, #22]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80016aa:	8afb      	ldrh	r3, [r7, #22]
 80016ac:	3301      	adds	r3, #1
 80016ae:	82fb      	strh	r3, [r7, #22]
 80016b0:	8afb      	ldrh	r3, [r7, #22]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d9e6      	bls.n	8001684 <TL_deserialize+0x230>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	82bb      	strh	r3, [r7, #20]
 80016ba:	e015      	b.n	80016e8 <TL_deserialize+0x294>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b25a      	sxtb	r2, r3
 80016c2:	8abb      	ldrh	r3, [r7, #20]
 80016c4:	3378      	adds	r3, #120	; 0x78
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	440b      	add	r3, r1
 80016ca:	7edb      	ldrb	r3, [r3, #27]
 80016cc:	f003 0101 	and.w	r1, r3, #1
 80016d0:	8abb      	ldrh	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80016e2:	8abb      	ldrh	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	82bb      	strh	r3, [r7, #20]
 80016e8:	8abb      	ldrh	r3, [r7, #20]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d9e6      	bls.n	80016bc <TL_deserialize+0x268>
  }
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016fa:	4770      	bx	lr

080016fc <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fd96 	bl	8001238 <TL_serialize>

  // reset state
  tl->tx_bit_offset = 0;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->rx_bit_offset = 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
  tl->tx_finished = 0;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_finished = 0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  // enable TX RX
  tl->rx_pending = 1;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
  tl->tx_pending = 1;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001748:	f7ff fc7a 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	; (8001784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f009 f963 	bl	800aa3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7ff f837 	bl	80007e8 <main>
  bx  lr
 800177a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800177c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001780:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001784:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001788:	0800aaec 	.word	0x0800aaec
  ldr r2, =_sbss
 800178c:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001790:	240004e0 	.word	0x240004e0

08001794 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC3_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179e:	2003      	movs	r0, #3
 80017a0:	f000 f95c 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017a4:	f003 ff76 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_Init+0x68>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	4913      	ldr	r1, [pc, #76]	; (8001804 <HAL_Init+0x6c>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
 80017c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_Init+0x68>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_Init+0x6c>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_Init+0x70>)
 80017da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_Init+0x74>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e2:	200f      	movs	r0, #15
 80017e4:	f000 f814 	bl	8001810 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e002      	b.n	80017f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017f2:	f7ff fa8f 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	58024400 	.word	0x58024400
 8001804:	0800aa9c 	.word	0x0800aa9c
 8001808:	24000008 	.word	0x24000008
 800180c:	24000004 	.word	0x24000004

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_InitTick+0x60>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e021      	b.n	8001868 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_InitTick+0x64>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_InitTick+0x60>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f941 	bl	8001ac2 <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	f000 f90b 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x68>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	24000010 	.word	0x24000010
 8001874:	24000004 	.word	0x24000004
 8001878:	2400000c 	.word	0x2400000c

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	24000010 	.word	0x24000010
 80018a0:	240004dc 	.word	0x240004dc

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	240004dc 	.word	0x240004dc

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <__NVIC_SetPriorityGrouping+0x40>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x40>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00
 8001900:	05fa0000 	.word	0x05fa0000

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff29 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff40 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff90 	bl	80019b0 <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5f 	bl	800195c <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff33 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa4 	bl	8001a18 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff fede 	bl	80018a4 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e312      	b.n	800211a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a66      	ldr	r2, [pc, #408]	; (8001c94 <HAL_DMA_Init+0x1b8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d04a      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a65      	ldr	r2, [pc, #404]	; (8001c98 <HAL_DMA_Init+0x1bc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d045      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a63      	ldr	r2, [pc, #396]	; (8001c9c <HAL_DMA_Init+0x1c0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d040      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a62      	ldr	r2, [pc, #392]	; (8001ca0 <HAL_DMA_Init+0x1c4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d03b      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a60      	ldr	r2, [pc, #384]	; (8001ca4 <HAL_DMA_Init+0x1c8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d036      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ca8 <HAL_DMA_Init+0x1cc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d031      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5d      	ldr	r2, [pc, #372]	; (8001cac <HAL_DMA_Init+0x1d0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d02c      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a5c      	ldr	r2, [pc, #368]	; (8001cb0 <HAL_DMA_Init+0x1d4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d027      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_DMA_Init+0x1d8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d022      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a59      	ldr	r2, [pc, #356]	; (8001cb8 <HAL_DMA_Init+0x1dc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d01d      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a57      	ldr	r2, [pc, #348]	; (8001cbc <HAL_DMA_Init+0x1e0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d018      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a56      	ldr	r2, [pc, #344]	; (8001cc0 <HAL_DMA_Init+0x1e4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a54      	ldr	r2, [pc, #336]	; (8001cc4 <HAL_DMA_Init+0x1e8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00e      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a53      	ldr	r2, [pc, #332]	; (8001cc8 <HAL_DMA_Init+0x1ec>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d009      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a51      	ldr	r2, [pc, #324]	; (8001ccc <HAL_DMA_Init+0x1f0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_DMA_Init+0xb8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <HAL_DMA_Init+0x1f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Init+0xbc>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_DMA_Init+0xbe>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 813c 	beq.w	8001e18 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a37      	ldr	r2, [pc, #220]	; (8001c94 <HAL_DMA_Init+0x1b8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d04a      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <HAL_DMA_Init+0x1bc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d045      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a34      	ldr	r2, [pc, #208]	; (8001c9c <HAL_DMA_Init+0x1c0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d040      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <HAL_DMA_Init+0x1c4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d03b      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a31      	ldr	r2, [pc, #196]	; (8001ca4 <HAL_DMA_Init+0x1c8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d036      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <HAL_DMA_Init+0x1cc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d031      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <HAL_DMA_Init+0x1d0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d02c      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2d      	ldr	r2, [pc, #180]	; (8001cb0 <HAL_DMA_Init+0x1d4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d027      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <HAL_DMA_Init+0x1d8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d022      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2a      	ldr	r2, [pc, #168]	; (8001cb8 <HAL_DMA_Init+0x1dc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d01d      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a28      	ldr	r2, [pc, #160]	; (8001cbc <HAL_DMA_Init+0x1e0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d018      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <HAL_DMA_Init+0x1e4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <HAL_DMA_Init+0x1e8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00e      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_DMA_Init+0x1ec>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_DMA_Init+0x1f0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_DMA_Init+0x174>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_DMA_Init+0x1f4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d108      	bne.n	8001c62 <HAL_DMA_Init+0x186>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e007      	b.n	8001c72 <HAL_DMA_Init+0x196>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c72:	e02f      	b.n	8001cd4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c74:	f7ff fe16 	bl	80018a4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d928      	bls.n	8001cd4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2220      	movs	r2, #32
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e242      	b.n	800211a <HAL_DMA_Init+0x63e>
 8001c94:	40020010 	.word	0x40020010
 8001c98:	40020028 	.word	0x40020028
 8001c9c:	40020040 	.word	0x40020040
 8001ca0:	40020058 	.word	0x40020058
 8001ca4:	40020070 	.word	0x40020070
 8001ca8:	40020088 	.word	0x40020088
 8001cac:	400200a0 	.word	0x400200a0
 8001cb0:	400200b8 	.word	0x400200b8
 8001cb4:	40020410 	.word	0x40020410
 8001cb8:	40020428 	.word	0x40020428
 8001cbc:	40020440 	.word	0x40020440
 8001cc0:	40020458 	.word	0x40020458
 8001cc4:	40020470 	.word	0x40020470
 8001cc8:	40020488 	.word	0x40020488
 8001ccc:	400204a0 	.word	0x400204a0
 8001cd0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1c8      	bne.n	8001c74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4b83      	ldr	r3, [pc, #524]	; (8001efc <HAL_DMA_Init+0x420>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d107      	bne.n	8001d38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4313      	orrs	r3, r2
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b28      	cmp	r3, #40	; 0x28
 8001d3e:	d903      	bls.n	8001d48 <HAL_DMA_Init+0x26c>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b2e      	cmp	r3, #46	; 0x2e
 8001d46:	d91f      	bls.n	8001d88 <HAL_DMA_Init+0x2ac>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8001d4e:	d903      	bls.n	8001d58 <HAL_DMA_Init+0x27c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b42      	cmp	r3, #66	; 0x42
 8001d56:	d917      	bls.n	8001d88 <HAL_DMA_Init+0x2ac>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b46      	cmp	r3, #70	; 0x46
 8001d5e:	d903      	bls.n	8001d68 <HAL_DMA_Init+0x28c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b48      	cmp	r3, #72	; 0x48
 8001d66:	d90f      	bls.n	8001d88 <HAL_DMA_Init+0x2ac>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b4e      	cmp	r3, #78	; 0x4e
 8001d6e:	d903      	bls.n	8001d78 <HAL_DMA_Init+0x29c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b52      	cmp	r3, #82	; 0x52
 8001d76:	d907      	bls.n	8001d88 <HAL_DMA_Init+0x2ac>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b73      	cmp	r3, #115	; 0x73
 8001d7e:	d905      	bls.n	8001d8c <HAL_DMA_Init+0x2b0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b77      	cmp	r3, #119	; 0x77
 8001d86:	d801      	bhi.n	8001d8c <HAL_DMA_Init+0x2b0>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_DMA_Init+0x2b2>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d98:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f023 0307 	bic.w	r3, r3, #7
 8001db0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d117      	bne.n	8001df4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00e      	beq.n	8001df4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f002 fb2e 	bl	8004438 <DMA_CheckFifoParam>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e192      	b.n	800211a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f002 fa69 	bl	80042d4 <DMA_CalcBaseAndBitshift>
 8001e02:	4603      	mov	r3, r0
 8001e04:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	223f      	movs	r2, #63	; 0x3f
 8001e10:	409a      	lsls	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	e0c8      	b.n	8001faa <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a38      	ldr	r2, [pc, #224]	; (8001f00 <HAL_DMA_Init+0x424>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d022      	beq.n	8001e68 <HAL_DMA_Init+0x38c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <HAL_DMA_Init+0x428>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d01d      	beq.n	8001e68 <HAL_DMA_Init+0x38c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a35      	ldr	r2, [pc, #212]	; (8001f08 <HAL_DMA_Init+0x42c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d018      	beq.n	8001e68 <HAL_DMA_Init+0x38c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a34      	ldr	r2, [pc, #208]	; (8001f0c <HAL_DMA_Init+0x430>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_DMA_Init+0x38c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a32      	ldr	r2, [pc, #200]	; (8001f10 <HAL_DMA_Init+0x434>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00e      	beq.n	8001e68 <HAL_DMA_Init+0x38c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <HAL_DMA_Init+0x438>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d009      	beq.n	8001e68 <HAL_DMA_Init+0x38c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2f      	ldr	r2, [pc, #188]	; (8001f18 <HAL_DMA_Init+0x43c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d004      	beq.n	8001e68 <HAL_DMA_Init+0x38c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2e      	ldr	r2, [pc, #184]	; (8001f1c <HAL_DMA_Init+0x440>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_Init+0x390>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_DMA_Init+0x392>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8092 	beq.w	8001f98 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <HAL_DMA_Init+0x424>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d021      	beq.n	8001ec2 <HAL_DMA_Init+0x3e6>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_DMA_Init+0x428>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d01c      	beq.n	8001ec2 <HAL_DMA_Init+0x3e6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_DMA_Init+0x42c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d017      	beq.n	8001ec2 <HAL_DMA_Init+0x3e6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_DMA_Init+0x430>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d012      	beq.n	8001ec2 <HAL_DMA_Init+0x3e6>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_DMA_Init+0x434>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_DMA_Init+0x3e6>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <HAL_DMA_Init+0x438>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Init+0x3e6>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_DMA_Init+0x43c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d003      	beq.n	8001ec2 <HAL_DMA_Init+0x3e6>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <HAL_DMA_Init+0x440>)
 8001ec0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_DMA_Init+0x444>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d01c      	beq.n	8001f24 <HAL_DMA_Init+0x448>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b80      	cmp	r3, #128	; 0x80
 8001ef0:	d102      	bne.n	8001ef8 <HAL_DMA_Init+0x41c>
 8001ef2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ef6:	e016      	b.n	8001f26 <HAL_DMA_Init+0x44a>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e014      	b.n	8001f26 <HAL_DMA_Init+0x44a>
 8001efc:	fe10803f 	.word	0xfe10803f
 8001f00:	58025408 	.word	0x58025408
 8001f04:	5802541c 	.word	0x5802541c
 8001f08:	58025430 	.word	0x58025430
 8001f0c:	58025444 	.word	0x58025444
 8001f10:	58025458 	.word	0x58025458
 8001f14:	5802546c 	.word	0x5802546c
 8001f18:	58025480 	.word	0x58025480
 8001f1c:	58025494 	.word	0x58025494
 8001f20:	fffe000f 	.word	0xfffe000f
 8001f24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68d2      	ldr	r2, [r2, #12]
 8001f2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b6e      	ldr	r3, [pc, #440]	; (8002124 <HAL_DMA_Init+0x648>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <HAL_DMA_Init+0x64c>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	009a      	lsls	r2, r3, #2
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f002 f9a9 	bl	80042d4 <DMA_CalcBaseAndBitshift>
 8001f82:	4603      	mov	r3, r0
 8001f84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2201      	movs	r2, #1
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	e008      	b.n	8001faa <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2240      	movs	r2, #64	; 0x40
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0b7      	b.n	800211a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5f      	ldr	r2, [pc, #380]	; (800212c <HAL_DMA_Init+0x650>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d072      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a5d      	ldr	r2, [pc, #372]	; (8002130 <HAL_DMA_Init+0x654>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d06d      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a5c      	ldr	r2, [pc, #368]	; (8002134 <HAL_DMA_Init+0x658>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d068      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_DMA_Init+0x65c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d063      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a59      	ldr	r2, [pc, #356]	; (800213c <HAL_DMA_Init+0x660>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d05e      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a57      	ldr	r2, [pc, #348]	; (8002140 <HAL_DMA_Init+0x664>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d059      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a56      	ldr	r2, [pc, #344]	; (8002144 <HAL_DMA_Init+0x668>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d054      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a54      	ldr	r2, [pc, #336]	; (8002148 <HAL_DMA_Init+0x66c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d04f      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a53      	ldr	r2, [pc, #332]	; (800214c <HAL_DMA_Init+0x670>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d04a      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a51      	ldr	r2, [pc, #324]	; (8002150 <HAL_DMA_Init+0x674>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d045      	beq.n	800209a <HAL_DMA_Init+0x5be>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_DMA_Init+0x678>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d040      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4e      	ldr	r2, [pc, #312]	; (8002158 <HAL_DMA_Init+0x67c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d03b      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a4d      	ldr	r2, [pc, #308]	; (800215c <HAL_DMA_Init+0x680>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d036      	beq.n	800209a <HAL_DMA_Init+0x5be>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a4b      	ldr	r2, [pc, #300]	; (8002160 <HAL_DMA_Init+0x684>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d031      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <HAL_DMA_Init+0x688>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d02c      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a48      	ldr	r2, [pc, #288]	; (8002168 <HAL_DMA_Init+0x68c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d027      	beq.n	800209a <HAL_DMA_Init+0x5be>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a47      	ldr	r2, [pc, #284]	; (800216c <HAL_DMA_Init+0x690>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d022      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a45      	ldr	r2, [pc, #276]	; (8002170 <HAL_DMA_Init+0x694>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01d      	beq.n	800209a <HAL_DMA_Init+0x5be>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a44      	ldr	r2, [pc, #272]	; (8002174 <HAL_DMA_Init+0x698>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d018      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a42      	ldr	r2, [pc, #264]	; (8002178 <HAL_DMA_Init+0x69c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a41      	ldr	r2, [pc, #260]	; (800217c <HAL_DMA_Init+0x6a0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00e      	beq.n	800209a <HAL_DMA_Init+0x5be>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <HAL_DMA_Init+0x6a4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a3e      	ldr	r2, [pc, #248]	; (8002184 <HAL_DMA_Init+0x6a8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_DMA_Init+0x5be>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3c      	ldr	r2, [pc, #240]	; (8002188 <HAL_DMA_Init+0x6ac>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_DMA_Init+0x5c2>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_DMA_Init+0x5c4>
 800209e:	2300      	movs	r3, #0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d032      	beq.n	800210a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f002 fa43 	bl	8004530 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b80      	cmp	r3, #128	; 0x80
 80020b0:	d102      	bne.n	80020b8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d010      	beq.n	80020f8 <HAL_DMA_Init+0x61c>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d80c      	bhi.n	80020f8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f002 fac0 	bl	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	e008      	b.n	800210a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	a7fdabf8 	.word	0xa7fdabf8
 8002128:	cccccccd 	.word	0xcccccccd
 800212c:	40020010 	.word	0x40020010
 8002130:	40020028 	.word	0x40020028
 8002134:	40020040 	.word	0x40020040
 8002138:	40020058 	.word	0x40020058
 800213c:	40020070 	.word	0x40020070
 8002140:	40020088 	.word	0x40020088
 8002144:	400200a0 	.word	0x400200a0
 8002148:	400200b8 	.word	0x400200b8
 800214c:	40020410 	.word	0x40020410
 8002150:	40020428 	.word	0x40020428
 8002154:	40020440 	.word	0x40020440
 8002158:	40020458 	.word	0x40020458
 800215c:	40020470 	.word	0x40020470
 8002160:	40020488 	.word	0x40020488
 8002164:	400204a0 	.word	0x400204a0
 8002168:	400204b8 	.word	0x400204b8
 800216c:	58025408 	.word	0x58025408
 8002170:	5802541c 	.word	0x5802541c
 8002174:	58025430 	.word	0x58025430
 8002178:	58025444 	.word	0x58025444
 800217c:	58025458 	.word	0x58025458
 8002180:	5802546c 	.word	0x5802546c
 8002184:	58025480 	.word	0x58025480
 8002188:	58025494 	.word	0x58025494

0800218c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e226      	b.n	80025f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_DMA_Start_IT+0x2a>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e21f      	b.n	80025f6 <HAL_DMA_Start_IT+0x46a>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	f040 820a 	bne.w	80025e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a68      	ldr	r2, [pc, #416]	; (8002380 <HAL_DMA_Start_IT+0x1f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d04a      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a66      	ldr	r2, [pc, #408]	; (8002384 <HAL_DMA_Start_IT+0x1f8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d045      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a65      	ldr	r2, [pc, #404]	; (8002388 <HAL_DMA_Start_IT+0x1fc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d040      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a63      	ldr	r2, [pc, #396]	; (800238c <HAL_DMA_Start_IT+0x200>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d03b      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a62      	ldr	r2, [pc, #392]	; (8002390 <HAL_DMA_Start_IT+0x204>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d036      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a60      	ldr	r2, [pc, #384]	; (8002394 <HAL_DMA_Start_IT+0x208>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d031      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a5f      	ldr	r2, [pc, #380]	; (8002398 <HAL_DMA_Start_IT+0x20c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d02c      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a5d      	ldr	r2, [pc, #372]	; (800239c <HAL_DMA_Start_IT+0x210>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d027      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a5c      	ldr	r2, [pc, #368]	; (80023a0 <HAL_DMA_Start_IT+0x214>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d022      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a5a      	ldr	r2, [pc, #360]	; (80023a4 <HAL_DMA_Start_IT+0x218>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01d      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a59      	ldr	r2, [pc, #356]	; (80023a8 <HAL_DMA_Start_IT+0x21c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d018      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a57      	ldr	r2, [pc, #348]	; (80023ac <HAL_DMA_Start_IT+0x220>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a56      	ldr	r2, [pc, #344]	; (80023b0 <HAL_DMA_Start_IT+0x224>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00e      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a54      	ldr	r2, [pc, #336]	; (80023b4 <HAL_DMA_Start_IT+0x228>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a53      	ldr	r2, [pc, #332]	; (80023b8 <HAL_DMA_Start_IT+0x22c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_DMA_Start_IT+0xee>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a51      	ldr	r2, [pc, #324]	; (80023bc <HAL_DMA_Start_IT+0x230>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <HAL_DMA_Start_IT+0x100>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e007      	b.n	800229c <HAL_DMA_Start_IT+0x110>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f001 fe6a 	bl	8003f7c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a34      	ldr	r2, [pc, #208]	; (8002380 <HAL_DMA_Start_IT+0x1f4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04a      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a33      	ldr	r2, [pc, #204]	; (8002384 <HAL_DMA_Start_IT+0x1f8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d045      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a31      	ldr	r2, [pc, #196]	; (8002388 <HAL_DMA_Start_IT+0x1fc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d040      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a30      	ldr	r2, [pc, #192]	; (800238c <HAL_DMA_Start_IT+0x200>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d03b      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a2e      	ldr	r2, [pc, #184]	; (8002390 <HAL_DMA_Start_IT+0x204>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d036      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2d      	ldr	r2, [pc, #180]	; (8002394 <HAL_DMA_Start_IT+0x208>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d031      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2b      	ldr	r2, [pc, #172]	; (8002398 <HAL_DMA_Start_IT+0x20c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02c      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2a      	ldr	r2, [pc, #168]	; (800239c <HAL_DMA_Start_IT+0x210>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d027      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <HAL_DMA_Start_IT+0x214>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <HAL_DMA_Start_IT+0x218>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d01d      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <HAL_DMA_Start_IT+0x21c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d018      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_DMA_Start_IT+0x220>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <HAL_DMA_Start_IT+0x224>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_DMA_Start_IT+0x228>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <HAL_DMA_Start_IT+0x22c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_DMA_Start_IT+0x1bc>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_DMA_Start_IT+0x230>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_DMA_Start_IT+0x1c0>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_DMA_Start_IT+0x1c2>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d036      	beq.n	80023c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 021e 	bic.w	r2, r3, #30
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0216 	orr.w	r2, r2, #22
 8002364:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03e      	beq.n	80023ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0208 	orr.w	r2, r2, #8
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e035      	b.n	80023ec <HAL_DMA_Start_IT+0x260>
 8002380:	40020010 	.word	0x40020010
 8002384:	40020028 	.word	0x40020028
 8002388:	40020040 	.word	0x40020040
 800238c:	40020058 	.word	0x40020058
 8002390:	40020070 	.word	0x40020070
 8002394:	40020088 	.word	0x40020088
 8002398:	400200a0 	.word	0x400200a0
 800239c:	400200b8 	.word	0x400200b8
 80023a0:	40020410 	.word	0x40020410
 80023a4:	40020428 	.word	0x40020428
 80023a8:	40020440 	.word	0x40020440
 80023ac:	40020458 	.word	0x40020458
 80023b0:	40020470 	.word	0x40020470
 80023b4:	40020488 	.word	0x40020488
 80023b8:	400204a0 	.word	0x400204a0
 80023bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 020e 	bic.w	r2, r3, #14
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 020a 	orr.w	r2, r2, #10
 80023d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0204 	orr.w	r2, r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a83      	ldr	r2, [pc, #524]	; (8002600 <HAL_DMA_Start_IT+0x474>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d072      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a82      	ldr	r2, [pc, #520]	; (8002604 <HAL_DMA_Start_IT+0x478>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d06d      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a80      	ldr	r2, [pc, #512]	; (8002608 <HAL_DMA_Start_IT+0x47c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d068      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7f      	ldr	r2, [pc, #508]	; (800260c <HAL_DMA_Start_IT+0x480>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d063      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a7d      	ldr	r2, [pc, #500]	; (8002610 <HAL_DMA_Start_IT+0x484>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d05e      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7c      	ldr	r2, [pc, #496]	; (8002614 <HAL_DMA_Start_IT+0x488>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d059      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a7a      	ldr	r2, [pc, #488]	; (8002618 <HAL_DMA_Start_IT+0x48c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d054      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a79      	ldr	r2, [pc, #484]	; (800261c <HAL_DMA_Start_IT+0x490>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d04f      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a77      	ldr	r2, [pc, #476]	; (8002620 <HAL_DMA_Start_IT+0x494>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d04a      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a76      	ldr	r2, [pc, #472]	; (8002624 <HAL_DMA_Start_IT+0x498>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d045      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a74      	ldr	r2, [pc, #464]	; (8002628 <HAL_DMA_Start_IT+0x49c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d040      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a73      	ldr	r2, [pc, #460]	; (800262c <HAL_DMA_Start_IT+0x4a0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d03b      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a71      	ldr	r2, [pc, #452]	; (8002630 <HAL_DMA_Start_IT+0x4a4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d036      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a70      	ldr	r2, [pc, #448]	; (8002634 <HAL_DMA_Start_IT+0x4a8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d031      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a6e      	ldr	r2, [pc, #440]	; (8002638 <HAL_DMA_Start_IT+0x4ac>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02c      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6d      	ldr	r2, [pc, #436]	; (800263c <HAL_DMA_Start_IT+0x4b0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d027      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a6b      	ldr	r2, [pc, #428]	; (8002640 <HAL_DMA_Start_IT+0x4b4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d022      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6a      	ldr	r2, [pc, #424]	; (8002644 <HAL_DMA_Start_IT+0x4b8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d01d      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a68      	ldr	r2, [pc, #416]	; (8002648 <HAL_DMA_Start_IT+0x4bc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d018      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a67      	ldr	r2, [pc, #412]	; (800264c <HAL_DMA_Start_IT+0x4c0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a65      	ldr	r2, [pc, #404]	; (8002650 <HAL_DMA_Start_IT+0x4c4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00e      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a64      	ldr	r2, [pc, #400]	; (8002654 <HAL_DMA_Start_IT+0x4c8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d009      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a62      	ldr	r2, [pc, #392]	; (8002658 <HAL_DMA_Start_IT+0x4cc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_DMA_Start_IT+0x350>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a61      	ldr	r2, [pc, #388]	; (800265c <HAL_DMA_Start_IT+0x4d0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_DMA_Start_IT+0x354>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_DMA_Start_IT+0x356>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01a      	beq.n	800251c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002502:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800251a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a37      	ldr	r2, [pc, #220]	; (8002600 <HAL_DMA_Start_IT+0x474>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d04a      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a36      	ldr	r2, [pc, #216]	; (8002604 <HAL_DMA_Start_IT+0x478>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d045      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a34      	ldr	r2, [pc, #208]	; (8002608 <HAL_DMA_Start_IT+0x47c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d040      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a33      	ldr	r2, [pc, #204]	; (800260c <HAL_DMA_Start_IT+0x480>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d03b      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a31      	ldr	r2, [pc, #196]	; (8002610 <HAL_DMA_Start_IT+0x484>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d036      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a30      	ldr	r2, [pc, #192]	; (8002614 <HAL_DMA_Start_IT+0x488>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d031      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <HAL_DMA_Start_IT+0x48c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02c      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2d      	ldr	r2, [pc, #180]	; (800261c <HAL_DMA_Start_IT+0x490>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d027      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <HAL_DMA_Start_IT+0x494>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d022      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a2a      	ldr	r2, [pc, #168]	; (8002624 <HAL_DMA_Start_IT+0x498>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d01d      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a28      	ldr	r2, [pc, #160]	; (8002628 <HAL_DMA_Start_IT+0x49c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d018      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_DMA_Start_IT+0x4a0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d013      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a25      	ldr	r2, [pc, #148]	; (8002630 <HAL_DMA_Start_IT+0x4a4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00e      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_DMA_Start_IT+0x4a8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_DMA_Start_IT+0x4ac>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_DMA_Start_IT+0x430>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a21      	ldr	r2, [pc, #132]	; (800263c <HAL_DMA_Start_IT+0x4b0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d108      	bne.n	80025ce <HAL_DMA_Start_IT+0x442>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e012      	b.n	80025f4 <HAL_DMA_Start_IT+0x468>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e009      	b.n	80025f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40020010 	.word	0x40020010
 8002604:	40020028 	.word	0x40020028
 8002608:	40020040 	.word	0x40020040
 800260c:	40020058 	.word	0x40020058
 8002610:	40020070 	.word	0x40020070
 8002614:	40020088 	.word	0x40020088
 8002618:	400200a0 	.word	0x400200a0
 800261c:	400200b8 	.word	0x400200b8
 8002620:	40020410 	.word	0x40020410
 8002624:	40020428 	.word	0x40020428
 8002628:	40020440 	.word	0x40020440
 800262c:	40020458 	.word	0x40020458
 8002630:	40020470 	.word	0x40020470
 8002634:	40020488 	.word	0x40020488
 8002638:	400204a0 	.word	0x400204a0
 800263c:	400204b8 	.word	0x400204b8
 8002640:	58025408 	.word	0x58025408
 8002644:	5802541c 	.word	0x5802541c
 8002648:	58025430 	.word	0x58025430
 800264c:	58025444 	.word	0x58025444
 8002650:	58025458 	.word	0x58025458
 8002654:	5802546c 	.word	0x5802546c
 8002658:	58025480 	.word	0x58025480
 800265c:	58025494 	.word	0x58025494

08002660 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff f91c 	bl	80018a4 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e2dc      	b.n	8002c32 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d008      	beq.n	8002696 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e2cd      	b.n	8002c32 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a76      	ldr	r2, [pc, #472]	; (8002874 <HAL_DMA_Abort+0x214>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d04a      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a74      	ldr	r2, [pc, #464]	; (8002878 <HAL_DMA_Abort+0x218>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d045      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a73      	ldr	r2, [pc, #460]	; (800287c <HAL_DMA_Abort+0x21c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d040      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a71      	ldr	r2, [pc, #452]	; (8002880 <HAL_DMA_Abort+0x220>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d03b      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a70      	ldr	r2, [pc, #448]	; (8002884 <HAL_DMA_Abort+0x224>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d036      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_DMA_Abort+0x228>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d031      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a6d      	ldr	r2, [pc, #436]	; (800288c <HAL_DMA_Abort+0x22c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d02c      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a6b      	ldr	r2, [pc, #428]	; (8002890 <HAL_DMA_Abort+0x230>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d027      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6a      	ldr	r2, [pc, #424]	; (8002894 <HAL_DMA_Abort+0x234>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d022      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a68      	ldr	r2, [pc, #416]	; (8002898 <HAL_DMA_Abort+0x238>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01d      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a67      	ldr	r2, [pc, #412]	; (800289c <HAL_DMA_Abort+0x23c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d018      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a65      	ldr	r2, [pc, #404]	; (80028a0 <HAL_DMA_Abort+0x240>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a64      	ldr	r2, [pc, #400]	; (80028a4 <HAL_DMA_Abort+0x244>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00e      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a62      	ldr	r2, [pc, #392]	; (80028a8 <HAL_DMA_Abort+0x248>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d009      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a61      	ldr	r2, [pc, #388]	; (80028ac <HAL_DMA_Abort+0x24c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d004      	beq.n	8002736 <HAL_DMA_Abort+0xd6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_DMA_Abort+0x250>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d101      	bne.n	800273a <HAL_DMA_Abort+0xda>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_DMA_Abort+0xdc>
 800273a:	2300      	movs	r3, #0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 021e 	bic.w	r2, r2, #30
 800274e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800275e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	e00a      	b.n	800277e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 020e 	bic.w	r2, r2, #14
 8002776:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a3c      	ldr	r2, [pc, #240]	; (8002874 <HAL_DMA_Abort+0x214>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d072      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a3a      	ldr	r2, [pc, #232]	; (8002878 <HAL_DMA_Abort+0x218>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d06d      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a39      	ldr	r2, [pc, #228]	; (800287c <HAL_DMA_Abort+0x21c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d068      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a37      	ldr	r2, [pc, #220]	; (8002880 <HAL_DMA_Abort+0x220>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d063      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a36      	ldr	r2, [pc, #216]	; (8002884 <HAL_DMA_Abort+0x224>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d05e      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_DMA_Abort+0x228>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d059      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_DMA_Abort+0x22c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d054      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a31      	ldr	r2, [pc, #196]	; (8002890 <HAL_DMA_Abort+0x230>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d04f      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a30      	ldr	r2, [pc, #192]	; (8002894 <HAL_DMA_Abort+0x234>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d04a      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2e      	ldr	r2, [pc, #184]	; (8002898 <HAL_DMA_Abort+0x238>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d045      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2d      	ldr	r2, [pc, #180]	; (800289c <HAL_DMA_Abort+0x23c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d040      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <HAL_DMA_Abort+0x240>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d03b      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <HAL_DMA_Abort+0x244>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d036      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a28      	ldr	r2, [pc, #160]	; (80028a8 <HAL_DMA_Abort+0x248>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d031      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a27      	ldr	r2, [pc, #156]	; (80028ac <HAL_DMA_Abort+0x24c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d02c      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <HAL_DMA_Abort+0x250>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d027      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <HAL_DMA_Abort+0x254>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d022      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <HAL_DMA_Abort+0x258>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01d      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a21      	ldr	r2, [pc, #132]	; (80028bc <HAL_DMA_Abort+0x25c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d018      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_DMA_Abort+0x260>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_DMA_Abort+0x264>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00e      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_DMA_Abort+0x268>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d009      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_DMA_Abort+0x26c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_DMA_Abort+0x20e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_DMA_Abort+0x270>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d132      	bne.n	80028d4 <HAL_DMA_Abort+0x274>
 800286e:	2301      	movs	r3, #1
 8002870:	e031      	b.n	80028d6 <HAL_DMA_Abort+0x276>
 8002872:	bf00      	nop
 8002874:	40020010 	.word	0x40020010
 8002878:	40020028 	.word	0x40020028
 800287c:	40020040 	.word	0x40020040
 8002880:	40020058 	.word	0x40020058
 8002884:	40020070 	.word	0x40020070
 8002888:	40020088 	.word	0x40020088
 800288c:	400200a0 	.word	0x400200a0
 8002890:	400200b8 	.word	0x400200b8
 8002894:	40020410 	.word	0x40020410
 8002898:	40020428 	.word	0x40020428
 800289c:	40020440 	.word	0x40020440
 80028a0:	40020458 	.word	0x40020458
 80028a4:	40020470 	.word	0x40020470
 80028a8:	40020488 	.word	0x40020488
 80028ac:	400204a0 	.word	0x400204a0
 80028b0:	400204b8 	.word	0x400204b8
 80028b4:	58025408 	.word	0x58025408
 80028b8:	5802541c 	.word	0x5802541c
 80028bc:	58025430 	.word	0x58025430
 80028c0:	58025444 	.word	0x58025444
 80028c4:	58025458 	.word	0x58025458
 80028c8:	5802546c 	.word	0x5802546c
 80028cc:	58025480 	.word	0x58025480
 80028d0:	58025494 	.word	0x58025494
 80028d4:	2300      	movs	r3, #0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6d      	ldr	r2, [pc, #436]	; (8002aa4 <HAL_DMA_Abort+0x444>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04a      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6b      	ldr	r2, [pc, #428]	; (8002aa8 <HAL_DMA_Abort+0x448>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d045      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6a      	ldr	r2, [pc, #424]	; (8002aac <HAL_DMA_Abort+0x44c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d040      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a68      	ldr	r2, [pc, #416]	; (8002ab0 <HAL_DMA_Abort+0x450>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d03b      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a67      	ldr	r2, [pc, #412]	; (8002ab4 <HAL_DMA_Abort+0x454>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d036      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a65      	ldr	r2, [pc, #404]	; (8002ab8 <HAL_DMA_Abort+0x458>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d031      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a64      	ldr	r2, [pc, #400]	; (8002abc <HAL_DMA_Abort+0x45c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d02c      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a62      	ldr	r2, [pc, #392]	; (8002ac0 <HAL_DMA_Abort+0x460>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d027      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a61      	ldr	r2, [pc, #388]	; (8002ac4 <HAL_DMA_Abort+0x464>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d022      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a5f      	ldr	r2, [pc, #380]	; (8002ac8 <HAL_DMA_Abort+0x468>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01d      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a5e      	ldr	r2, [pc, #376]	; (8002acc <HAL_DMA_Abort+0x46c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d018      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a5c      	ldr	r2, [pc, #368]	; (8002ad0 <HAL_DMA_Abort+0x470>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5b      	ldr	r2, [pc, #364]	; (8002ad4 <HAL_DMA_Abort+0x474>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00e      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a59      	ldr	r2, [pc, #356]	; (8002ad8 <HAL_DMA_Abort+0x478>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d009      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a58      	ldr	r2, [pc, #352]	; (8002adc <HAL_DMA_Abort+0x47c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_DMA_Abort+0x32a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_DMA_Abort+0x480>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <HAL_DMA_Abort+0x33c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e007      	b.n	80029ac <HAL_DMA_Abort+0x34c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029ac:	e013      	b.n	80029d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ae:	f7fe ff79 	bl	80018a4 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d90c      	bls.n	80029d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2203      	movs	r2, #3
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e12d      	b.n	8002c32 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e5      	bne.n	80029ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2f      	ldr	r2, [pc, #188]	; (8002aa4 <HAL_DMA_Abort+0x444>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d04a      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_DMA_Abort+0x448>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d045      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <HAL_DMA_Abort+0x44c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d040      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_DMA_Abort+0x450>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d03b      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a29      	ldr	r2, [pc, #164]	; (8002ab4 <HAL_DMA_Abort+0x454>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d036      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a27      	ldr	r2, [pc, #156]	; (8002ab8 <HAL_DMA_Abort+0x458>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d031      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a26      	ldr	r2, [pc, #152]	; (8002abc <HAL_DMA_Abort+0x45c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d02c      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <HAL_DMA_Abort+0x460>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d027      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <HAL_DMA_Abort+0x464>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d022      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <HAL_DMA_Abort+0x468>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01d      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a20      	ldr	r2, [pc, #128]	; (8002acc <HAL_DMA_Abort+0x46c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d018      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_DMA_Abort+0x470>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_DMA_Abort+0x474>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00e      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_DMA_Abort+0x478>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_DMA_Abort+0x47c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_DMA_Abort+0x422>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_DMA_Abort+0x480>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_DMA_Abort+0x426>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_DMA_Abort+0x428>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02b      	beq.n	8002ae4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	223f      	movs	r2, #63	; 0x3f
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	e02a      	b.n	8002afa <HAL_DMA_Abort+0x49a>
 8002aa4:	40020010 	.word	0x40020010
 8002aa8:	40020028 	.word	0x40020028
 8002aac:	40020040 	.word	0x40020040
 8002ab0:	40020058 	.word	0x40020058
 8002ab4:	40020070 	.word	0x40020070
 8002ab8:	40020088 	.word	0x40020088
 8002abc:	400200a0 	.word	0x400200a0
 8002ac0:	400200b8 	.word	0x400200b8
 8002ac4:	40020410 	.word	0x40020410
 8002ac8:	40020428 	.word	0x40020428
 8002acc:	40020440 	.word	0x40020440
 8002ad0:	40020458 	.word	0x40020458
 8002ad4:	40020470 	.word	0x40020470
 8002ad8:	40020488 	.word	0x40020488
 8002adc:	400204a0 	.word	0x400204a0
 8002ae0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2201      	movs	r2, #1
 8002af4:	409a      	lsls	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a4f      	ldr	r2, [pc, #316]	; (8002c3c <HAL_DMA_Abort+0x5dc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d072      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a4d      	ldr	r2, [pc, #308]	; (8002c40 <HAL_DMA_Abort+0x5e0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d06d      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a4c      	ldr	r2, [pc, #304]	; (8002c44 <HAL_DMA_Abort+0x5e4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d068      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	; (8002c48 <HAL_DMA_Abort+0x5e8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d063      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a49      	ldr	r2, [pc, #292]	; (8002c4c <HAL_DMA_Abort+0x5ec>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d05e      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a47      	ldr	r2, [pc, #284]	; (8002c50 <HAL_DMA_Abort+0x5f0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d059      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a46      	ldr	r2, [pc, #280]	; (8002c54 <HAL_DMA_Abort+0x5f4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d054      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a44      	ldr	r2, [pc, #272]	; (8002c58 <HAL_DMA_Abort+0x5f8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d04f      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a43      	ldr	r2, [pc, #268]	; (8002c5c <HAL_DMA_Abort+0x5fc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d04a      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a41      	ldr	r2, [pc, #260]	; (8002c60 <HAL_DMA_Abort+0x600>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d045      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <HAL_DMA_Abort+0x604>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d040      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3e      	ldr	r2, [pc, #248]	; (8002c68 <HAL_DMA_Abort+0x608>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d03b      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <HAL_DMA_Abort+0x60c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d036      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3b      	ldr	r2, [pc, #236]	; (8002c70 <HAL_DMA_Abort+0x610>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d031      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a3a      	ldr	r2, [pc, #232]	; (8002c74 <HAL_DMA_Abort+0x614>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d02c      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a38      	ldr	r2, [pc, #224]	; (8002c78 <HAL_DMA_Abort+0x618>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d027      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a37      	ldr	r2, [pc, #220]	; (8002c7c <HAL_DMA_Abort+0x61c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d022      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a35      	ldr	r2, [pc, #212]	; (8002c80 <HAL_DMA_Abort+0x620>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01d      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a34      	ldr	r2, [pc, #208]	; (8002c84 <HAL_DMA_Abort+0x624>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a32      	ldr	r2, [pc, #200]	; (8002c88 <HAL_DMA_Abort+0x628>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a31      	ldr	r2, [pc, #196]	; (8002c8c <HAL_DMA_Abort+0x62c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2f      	ldr	r2, [pc, #188]	; (8002c90 <HAL_DMA_Abort+0x630>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2e      	ldr	r2, [pc, #184]	; (8002c94 <HAL_DMA_Abort+0x634>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d004      	beq.n	8002bea <HAL_DMA_Abort+0x58a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <HAL_DMA_Abort+0x638>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_DMA_Abort+0x58e>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_DMA_Abort+0x590>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bfc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00c      	beq.n	8002c20 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c14:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c1e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40020010 	.word	0x40020010
 8002c40:	40020028 	.word	0x40020028
 8002c44:	40020040 	.word	0x40020040
 8002c48:	40020058 	.word	0x40020058
 8002c4c:	40020070 	.word	0x40020070
 8002c50:	40020088 	.word	0x40020088
 8002c54:	400200a0 	.word	0x400200a0
 8002c58:	400200b8 	.word	0x400200b8
 8002c5c:	40020410 	.word	0x40020410
 8002c60:	40020428 	.word	0x40020428
 8002c64:	40020440 	.word	0x40020440
 8002c68:	40020458 	.word	0x40020458
 8002c6c:	40020470 	.word	0x40020470
 8002c70:	40020488 	.word	0x40020488
 8002c74:	400204a0 	.word	0x400204a0
 8002c78:	400204b8 	.word	0x400204b8
 8002c7c:	58025408 	.word	0x58025408
 8002c80:	5802541c 	.word	0x5802541c
 8002c84:	58025430 	.word	0x58025430
 8002c88:	58025444 	.word	0x58025444
 8002c8c:	58025458 	.word	0x58025458
 8002c90:	5802546c 	.word	0x5802546c
 8002c94:	58025480 	.word	0x58025480
 8002c98:	58025494 	.word	0x58025494

08002c9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e237      	b.n	800311e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e22c      	b.n	800311e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5c      	ldr	r2, [pc, #368]	; (8002e3c <HAL_DMA_Abort_IT+0x1a0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d04a      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	; (8002e40 <HAL_DMA_Abort_IT+0x1a4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d045      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a59      	ldr	r2, [pc, #356]	; (8002e44 <HAL_DMA_Abort_IT+0x1a8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d040      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_DMA_Abort_IT+0x1ac>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d03b      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a56      	ldr	r2, [pc, #344]	; (8002e4c <HAL_DMA_Abort_IT+0x1b0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d036      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a55      	ldr	r2, [pc, #340]	; (8002e50 <HAL_DMA_Abort_IT+0x1b4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d031      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a53      	ldr	r2, [pc, #332]	; (8002e54 <HAL_DMA_Abort_IT+0x1b8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d02c      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <HAL_DMA_Abort_IT+0x1bc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d027      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a50      	ldr	r2, [pc, #320]	; (8002e5c <HAL_DMA_Abort_IT+0x1c0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d022      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a4f      	ldr	r2, [pc, #316]	; (8002e60 <HAL_DMA_Abort_IT+0x1c4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d01d      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a4d      	ldr	r2, [pc, #308]	; (8002e64 <HAL_DMA_Abort_IT+0x1c8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d018      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a4c      	ldr	r2, [pc, #304]	; (8002e68 <HAL_DMA_Abort_IT+0x1cc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a4a      	ldr	r2, [pc, #296]	; (8002e6c <HAL_DMA_Abort_IT+0x1d0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00e      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a49      	ldr	r2, [pc, #292]	; (8002e70 <HAL_DMA_Abort_IT+0x1d4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a47      	ldr	r2, [pc, #284]	; (8002e74 <HAL_DMA_Abort_IT+0x1d8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_DMA_Abort_IT+0xc8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <HAL_DMA_Abort_IT+0x1dc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d101      	bne.n	8002d68 <HAL_DMA_Abort_IT+0xcc>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <HAL_DMA_Abort_IT+0xce>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8086 	beq.w	8002e7c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2204      	movs	r2, #4
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2f      	ldr	r2, [pc, #188]	; (8002e3c <HAL_DMA_Abort_IT+0x1a0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d04a      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2e      	ldr	r2, [pc, #184]	; (8002e40 <HAL_DMA_Abort_IT+0x1a4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d045      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <HAL_DMA_Abort_IT+0x1a8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d040      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <HAL_DMA_Abort_IT+0x1ac>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d03b      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <HAL_DMA_Abort_IT+0x1b0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d036      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <HAL_DMA_Abort_IT+0x1b4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d031      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <HAL_DMA_Abort_IT+0x1b8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02c      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <HAL_DMA_Abort_IT+0x1bc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d027      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <HAL_DMA_Abort_IT+0x1c0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_DMA_Abort_IT+0x1c4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01d      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <HAL_DMA_Abort_IT+0x1c8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <HAL_DMA_Abort_IT+0x1cc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <HAL_DMA_Abort_IT+0x1d0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_DMA_Abort_IT+0x1d4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_DMA_Abort_IT+0x1d8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_DMA_Abort_IT+0x17c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_DMA_Abort_IT+0x1dc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d108      	bne.n	8002e2a <HAL_DMA_Abort_IT+0x18e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e178      	b.n	800311c <HAL_DMA_Abort_IT+0x480>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e16f      	b.n	800311c <HAL_DMA_Abort_IT+0x480>
 8002e3c:	40020010 	.word	0x40020010
 8002e40:	40020028 	.word	0x40020028
 8002e44:	40020040 	.word	0x40020040
 8002e48:	40020058 	.word	0x40020058
 8002e4c:	40020070 	.word	0x40020070
 8002e50:	40020088 	.word	0x40020088
 8002e54:	400200a0 	.word	0x400200a0
 8002e58:	400200b8 	.word	0x400200b8
 8002e5c:	40020410 	.word	0x40020410
 8002e60:	40020428 	.word	0x40020428
 8002e64:	40020440 	.word	0x40020440
 8002e68:	40020458 	.word	0x40020458
 8002e6c:	40020470 	.word	0x40020470
 8002e70:	40020488 	.word	0x40020488
 8002e74:	400204a0 	.word	0x400204a0
 8002e78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 020e 	bic.w	r2, r2, #14
 8002e8a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a6c      	ldr	r2, [pc, #432]	; (8003044 <HAL_DMA_Abort_IT+0x3a8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d04a      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6b      	ldr	r2, [pc, #428]	; (8003048 <HAL_DMA_Abort_IT+0x3ac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d045      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a69      	ldr	r2, [pc, #420]	; (800304c <HAL_DMA_Abort_IT+0x3b0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d040      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a68      	ldr	r2, [pc, #416]	; (8003050 <HAL_DMA_Abort_IT+0x3b4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d03b      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a66      	ldr	r2, [pc, #408]	; (8003054 <HAL_DMA_Abort_IT+0x3b8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d036      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a65      	ldr	r2, [pc, #404]	; (8003058 <HAL_DMA_Abort_IT+0x3bc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d031      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a63      	ldr	r2, [pc, #396]	; (800305c <HAL_DMA_Abort_IT+0x3c0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d02c      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a62      	ldr	r2, [pc, #392]	; (8003060 <HAL_DMA_Abort_IT+0x3c4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d027      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a60      	ldr	r2, [pc, #384]	; (8003064 <HAL_DMA_Abort_IT+0x3c8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d022      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a5f      	ldr	r2, [pc, #380]	; (8003068 <HAL_DMA_Abort_IT+0x3cc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d01d      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a5d      	ldr	r2, [pc, #372]	; (800306c <HAL_DMA_Abort_IT+0x3d0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d018      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a5c      	ldr	r2, [pc, #368]	; (8003070 <HAL_DMA_Abort_IT+0x3d4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a5a      	ldr	r2, [pc, #360]	; (8003074 <HAL_DMA_Abort_IT+0x3d8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00e      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a59      	ldr	r2, [pc, #356]	; (8003078 <HAL_DMA_Abort_IT+0x3dc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a57      	ldr	r2, [pc, #348]	; (800307c <HAL_DMA_Abort_IT+0x3e0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x290>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a56      	ldr	r2, [pc, #344]	; (8003080 <HAL_DMA_Abort_IT+0x3e4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d108      	bne.n	8002f3e <HAL_DMA_Abort_IT+0x2a2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e007      	b.n	8002f4e <HAL_DMA_Abort_IT+0x2b2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <HAL_DMA_Abort_IT+0x3a8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d072      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3a      	ldr	r2, [pc, #232]	; (8003048 <HAL_DMA_Abort_IT+0x3ac>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d06d      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a39      	ldr	r2, [pc, #228]	; (800304c <HAL_DMA_Abort_IT+0x3b0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d068      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a37      	ldr	r2, [pc, #220]	; (8003050 <HAL_DMA_Abort_IT+0x3b4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d063      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a36      	ldr	r2, [pc, #216]	; (8003054 <HAL_DMA_Abort_IT+0x3b8>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d05e      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a34      	ldr	r2, [pc, #208]	; (8003058 <HAL_DMA_Abort_IT+0x3bc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d059      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a33      	ldr	r2, [pc, #204]	; (800305c <HAL_DMA_Abort_IT+0x3c0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d054      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a31      	ldr	r2, [pc, #196]	; (8003060 <HAL_DMA_Abort_IT+0x3c4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d04f      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a30      	ldr	r2, [pc, #192]	; (8003064 <HAL_DMA_Abort_IT+0x3c8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d04a      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2e      	ldr	r2, [pc, #184]	; (8003068 <HAL_DMA_Abort_IT+0x3cc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d045      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2d      	ldr	r2, [pc, #180]	; (800306c <HAL_DMA_Abort_IT+0x3d0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d040      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <HAL_DMA_Abort_IT+0x3d4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d03b      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <HAL_DMA_Abort_IT+0x3d8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d036      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <HAL_DMA_Abort_IT+0x3dc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d031      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a27      	ldr	r2, [pc, #156]	; (800307c <HAL_DMA_Abort_IT+0x3e0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d02c      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a25      	ldr	r2, [pc, #148]	; (8003080 <HAL_DMA_Abort_IT+0x3e4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d027      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a24      	ldr	r2, [pc, #144]	; (8003084 <HAL_DMA_Abort_IT+0x3e8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d022      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a22      	ldr	r2, [pc, #136]	; (8003088 <HAL_DMA_Abort_IT+0x3ec>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01d      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a21      	ldr	r2, [pc, #132]	; (800308c <HAL_DMA_Abort_IT+0x3f0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d018      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_DMA_Abort_IT+0x3f4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_DMA_Abort_IT+0x3f8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00e      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_DMA_Abort_IT+0x3fc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d009      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_DMA_Abort_IT+0x400>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_DMA_Abort_IT+0x3a2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_DMA_Abort_IT+0x404>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d132      	bne.n	80030a4 <HAL_DMA_Abort_IT+0x408>
 800303e:	2301      	movs	r3, #1
 8003040:	e031      	b.n	80030a6 <HAL_DMA_Abort_IT+0x40a>
 8003042:	bf00      	nop
 8003044:	40020010 	.word	0x40020010
 8003048:	40020028 	.word	0x40020028
 800304c:	40020040 	.word	0x40020040
 8003050:	40020058 	.word	0x40020058
 8003054:	40020070 	.word	0x40020070
 8003058:	40020088 	.word	0x40020088
 800305c:	400200a0 	.word	0x400200a0
 8003060:	400200b8 	.word	0x400200b8
 8003064:	40020410 	.word	0x40020410
 8003068:	40020428 	.word	0x40020428
 800306c:	40020440 	.word	0x40020440
 8003070:	40020458 	.word	0x40020458
 8003074:	40020470 	.word	0x40020470
 8003078:	40020488 	.word	0x40020488
 800307c:	400204a0 	.word	0x400204a0
 8003080:	400204b8 	.word	0x400204b8
 8003084:	58025408 	.word	0x58025408
 8003088:	5802541c 	.word	0x5802541c
 800308c:	58025430 	.word	0x58025430
 8003090:	58025444 	.word	0x58025444
 8003094:	58025458 	.word	0x58025458
 8003098:	5802546c 	.word	0x5802546c
 800309c:	58025480 	.word	0x58025480
 80030a0:	58025494 	.word	0x58025494
 80030a4:	2300      	movs	r3, #0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d028      	beq.n	80030fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	2201      	movs	r2, #1
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop

08003128 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003134:	4b67      	ldr	r3, [pc, #412]	; (80032d4 <HAL_DMA_IRQHandler+0x1ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a67      	ldr	r2, [pc, #412]	; (80032d8 <HAL_DMA_IRQHandler+0x1b0>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0a9b      	lsrs	r3, r3, #10
 8003140:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a5f      	ldr	r2, [pc, #380]	; (80032dc <HAL_DMA_IRQHandler+0x1b4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d04a      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5d      	ldr	r2, [pc, #372]	; (80032e0 <HAL_DMA_IRQHandler+0x1b8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d045      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5c      	ldr	r2, [pc, #368]	; (80032e4 <HAL_DMA_IRQHandler+0x1bc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d040      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5a      	ldr	r2, [pc, #360]	; (80032e8 <HAL_DMA_IRQHandler+0x1c0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d03b      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a59      	ldr	r2, [pc, #356]	; (80032ec <HAL_DMA_IRQHandler+0x1c4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d036      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a57      	ldr	r2, [pc, #348]	; (80032f0 <HAL_DMA_IRQHandler+0x1c8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d031      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a56      	ldr	r2, [pc, #344]	; (80032f4 <HAL_DMA_IRQHandler+0x1cc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d02c      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a54      	ldr	r2, [pc, #336]	; (80032f8 <HAL_DMA_IRQHandler+0x1d0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d027      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a53      	ldr	r2, [pc, #332]	; (80032fc <HAL_DMA_IRQHandler+0x1d4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d022      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a51      	ldr	r2, [pc, #324]	; (8003300 <HAL_DMA_IRQHandler+0x1d8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a50      	ldr	r2, [pc, #320]	; (8003304 <HAL_DMA_IRQHandler+0x1dc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d018      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a4e      	ldr	r2, [pc, #312]	; (8003308 <HAL_DMA_IRQHandler+0x1e0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a4d      	ldr	r2, [pc, #308]	; (800330c <HAL_DMA_IRQHandler+0x1e4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4b      	ldr	r2, [pc, #300]	; (8003310 <HAL_DMA_IRQHandler+0x1e8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a4a      	ldr	r2, [pc, #296]	; (8003314 <HAL_DMA_IRQHandler+0x1ec>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_DMA_IRQHandler+0xd2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a48      	ldr	r2, [pc, #288]	; (8003318 <HAL_DMA_IRQHandler+0x1f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_DMA_IRQHandler+0xd6>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_DMA_IRQHandler+0xd8>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 842b 	beq.w	8003a5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	f003 031f 	and.w	r3, r3, #31
 800320e:	2208      	movs	r2, #8
 8003210:	409a      	lsls	r2, r3
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 80a2 	beq.w	8003360 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2e      	ldr	r2, [pc, #184]	; (80032dc <HAL_DMA_IRQHandler+0x1b4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d04a      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <HAL_DMA_IRQHandler+0x1b8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d045      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <HAL_DMA_IRQHandler+0x1bc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d040      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <HAL_DMA_IRQHandler+0x1c0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d03b      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_DMA_IRQHandler+0x1c4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d036      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_DMA_IRQHandler+0x1c8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d031      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <HAL_DMA_IRQHandler+0x1cc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d02c      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <HAL_DMA_IRQHandler+0x1d0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d027      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a22      	ldr	r2, [pc, #136]	; (80032fc <HAL_DMA_IRQHandler+0x1d4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d022      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_DMA_IRQHandler+0x1d8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d01d      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <HAL_DMA_IRQHandler+0x1dc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d018      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <HAL_DMA_IRQHandler+0x1e0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1c      	ldr	r2, [pc, #112]	; (800330c <HAL_DMA_IRQHandler+0x1e4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00e      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_DMA_IRQHandler+0x1e8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d009      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	; (8003314 <HAL_DMA_IRQHandler+0x1ec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_DMA_IRQHandler+0x194>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a18      	ldr	r2, [pc, #96]	; (8003318 <HAL_DMA_IRQHandler+0x1f0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d12f      	bne.n	800331c <HAL_DMA_IRQHandler+0x1f4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	e02e      	b.n	8003330 <HAL_DMA_IRQHandler+0x208>
 80032d2:	bf00      	nop
 80032d4:	24000004 	.word	0x24000004
 80032d8:	1b4e81b5 	.word	0x1b4e81b5
 80032dc:	40020010 	.word	0x40020010
 80032e0:	40020028 	.word	0x40020028
 80032e4:	40020040 	.word	0x40020040
 80032e8:	40020058 	.word	0x40020058
 80032ec:	40020070 	.word	0x40020070
 80032f0:	40020088 	.word	0x40020088
 80032f4:	400200a0 	.word	0x400200a0
 80032f8:	400200b8 	.word	0x400200b8
 80032fc:	40020410 	.word	0x40020410
 8003300:	40020428 	.word	0x40020428
 8003304:	40020440 	.word	0x40020440
 8003308:	40020458 	.word	0x40020458
 800330c:	40020470 	.word	0x40020470
 8003310:	40020488 	.word	0x40020488
 8003314:	400204a0 	.word	0x400204a0
 8003318:	400204b8 	.word	0x400204b8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf14      	ite	ne
 800332a:	2301      	movne	r3, #1
 800332c:	2300      	moveq	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2208      	movs	r2, #8
 800334e:	409a      	lsls	r2, r3
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f043 0201 	orr.w	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d06e      	beq.n	8003454 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a69      	ldr	r2, [pc, #420]	; (8003520 <HAL_DMA_IRQHandler+0x3f8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d04a      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a67      	ldr	r2, [pc, #412]	; (8003524 <HAL_DMA_IRQHandler+0x3fc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d045      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a66      	ldr	r2, [pc, #408]	; (8003528 <HAL_DMA_IRQHandler+0x400>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d040      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a64      	ldr	r2, [pc, #400]	; (800352c <HAL_DMA_IRQHandler+0x404>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d03b      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a63      	ldr	r2, [pc, #396]	; (8003530 <HAL_DMA_IRQHandler+0x408>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d036      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a61      	ldr	r2, [pc, #388]	; (8003534 <HAL_DMA_IRQHandler+0x40c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a60      	ldr	r2, [pc, #384]	; (8003538 <HAL_DMA_IRQHandler+0x410>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d02c      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a5e      	ldr	r2, [pc, #376]	; (800353c <HAL_DMA_IRQHandler+0x414>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d027      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a5d      	ldr	r2, [pc, #372]	; (8003540 <HAL_DMA_IRQHandler+0x418>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5b      	ldr	r2, [pc, #364]	; (8003544 <HAL_DMA_IRQHandler+0x41c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01d      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a5a      	ldr	r2, [pc, #360]	; (8003548 <HAL_DMA_IRQHandler+0x420>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d018      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_DMA_IRQHandler+0x424>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_DMA_IRQHandler+0x428>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a55      	ldr	r2, [pc, #340]	; (8003554 <HAL_DMA_IRQHandler+0x42c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a54      	ldr	r2, [pc, #336]	; (8003558 <HAL_DMA_IRQHandler+0x430>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_DMA_IRQHandler+0x2ee>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_DMA_IRQHandler+0x434>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10a      	bne.n	800342c <HAL_DMA_IRQHandler+0x304>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e003      	b.n	8003434 <HAL_DMA_IRQHandler+0x30c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	2201      	movs	r2, #1
 8003442:	409a      	lsls	r2, r3
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f043 0202 	orr.w	r2, r3, #2
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2204      	movs	r2, #4
 800345e:	409a      	lsls	r2, r3
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 808f 	beq.w	8003588 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <HAL_DMA_IRQHandler+0x3f8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d04a      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <HAL_DMA_IRQHandler+0x3fc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d045      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a29      	ldr	r2, [pc, #164]	; (8003528 <HAL_DMA_IRQHandler+0x400>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d040      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a27      	ldr	r2, [pc, #156]	; (800352c <HAL_DMA_IRQHandler+0x404>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d03b      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a26      	ldr	r2, [pc, #152]	; (8003530 <HAL_DMA_IRQHandler+0x408>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d036      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a24      	ldr	r2, [pc, #144]	; (8003534 <HAL_DMA_IRQHandler+0x40c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a23      	ldr	r2, [pc, #140]	; (8003538 <HAL_DMA_IRQHandler+0x410>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a21      	ldr	r2, [pc, #132]	; (800353c <HAL_DMA_IRQHandler+0x414>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d027      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a20      	ldr	r2, [pc, #128]	; (8003540 <HAL_DMA_IRQHandler+0x418>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <HAL_DMA_IRQHandler+0x41c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01d      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_DMA_IRQHandler+0x420>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d018      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_DMA_IRQHandler+0x424>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d013      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <HAL_DMA_IRQHandler+0x428>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00e      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a18      	ldr	r2, [pc, #96]	; (8003554 <HAL_DMA_IRQHandler+0x42c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d009      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a17      	ldr	r2, [pc, #92]	; (8003558 <HAL_DMA_IRQHandler+0x430>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d004      	beq.n	800350a <HAL_DMA_IRQHandler+0x3e2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_DMA_IRQHandler+0x434>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d12a      	bne.n	8003560 <HAL_DMA_IRQHandler+0x438>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e023      	b.n	8003568 <HAL_DMA_IRQHandler+0x440>
 8003520:	40020010 	.word	0x40020010
 8003524:	40020028 	.word	0x40020028
 8003528:	40020040 	.word	0x40020040
 800352c:	40020058 	.word	0x40020058
 8003530:	40020070 	.word	0x40020070
 8003534:	40020088 	.word	0x40020088
 8003538:	400200a0 	.word	0x400200a0
 800353c:	400200b8 	.word	0x400200b8
 8003540:	40020410 	.word	0x40020410
 8003544:	40020428 	.word	0x40020428
 8003548:	40020440 	.word	0x40020440
 800354c:	40020458 	.word	0x40020458
 8003550:	40020470 	.word	0x40020470
 8003554:	40020488 	.word	0x40020488
 8003558:	400204a0 	.word	0x400204a0
 800355c:	400204b8 	.word	0x400204b8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2204      	movs	r2, #4
 8003576:	409a      	lsls	r2, r3
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f043 0204 	orr.w	r2, r3, #4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2210      	movs	r2, #16
 8003592:	409a      	lsls	r2, r3
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a6 	beq.w	80036ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a85      	ldr	r2, [pc, #532]	; (80037b8 <HAL_DMA_IRQHandler+0x690>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04a      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a83      	ldr	r2, [pc, #524]	; (80037bc <HAL_DMA_IRQHandler+0x694>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d045      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a82      	ldr	r2, [pc, #520]	; (80037c0 <HAL_DMA_IRQHandler+0x698>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d040      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a80      	ldr	r2, [pc, #512]	; (80037c4 <HAL_DMA_IRQHandler+0x69c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03b      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a7f      	ldr	r2, [pc, #508]	; (80037c8 <HAL_DMA_IRQHandler+0x6a0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d036      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a7d      	ldr	r2, [pc, #500]	; (80037cc <HAL_DMA_IRQHandler+0x6a4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a7c      	ldr	r2, [pc, #496]	; (80037d0 <HAL_DMA_IRQHandler+0x6a8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a7a      	ldr	r2, [pc, #488]	; (80037d4 <HAL_DMA_IRQHandler+0x6ac>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a79      	ldr	r2, [pc, #484]	; (80037d8 <HAL_DMA_IRQHandler+0x6b0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a77      	ldr	r2, [pc, #476]	; (80037dc <HAL_DMA_IRQHandler+0x6b4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a76      	ldr	r2, [pc, #472]	; (80037e0 <HAL_DMA_IRQHandler+0x6b8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a74      	ldr	r2, [pc, #464]	; (80037e4 <HAL_DMA_IRQHandler+0x6bc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a73      	ldr	r2, [pc, #460]	; (80037e8 <HAL_DMA_IRQHandler+0x6c0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a71      	ldr	r2, [pc, #452]	; (80037ec <HAL_DMA_IRQHandler+0x6c4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a70      	ldr	r2, [pc, #448]	; (80037f0 <HAL_DMA_IRQHandler+0x6c8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_IRQHandler+0x516>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6e      	ldr	r2, [pc, #440]	; (80037f4 <HAL_DMA_IRQHandler+0x6cc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10a      	bne.n	8003654 <HAL_DMA_IRQHandler+0x52c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf14      	ite	ne
 800364c:	2301      	movne	r3, #1
 800364e:	2300      	moveq	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e009      	b.n	8003668 <HAL_DMA_IRQHandler+0x540>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	bf14      	ite	ne
 8003662:	2301      	movne	r3, #1
 8003664:	2300      	moveq	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d03e      	beq.n	80036ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2210      	movs	r2, #16
 8003676:	409a      	lsls	r2, r3
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d018      	beq.n	80036bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d108      	bne.n	80036aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d024      	beq.n	80036ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
 80036a8:	e01f      	b.n	80036ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d01b      	beq.n	80036ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	4798      	blx	r3
 80036ba:	e016      	b.n	80036ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d107      	bne.n	80036da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0208 	bic.w	r2, r2, #8
 80036d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2220      	movs	r2, #32
 80036f4:	409a      	lsls	r2, r3
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8110 	beq.w	8003920 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <HAL_DMA_IRQHandler+0x690>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d04a      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2b      	ldr	r2, [pc, #172]	; (80037bc <HAL_DMA_IRQHandler+0x694>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d045      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <HAL_DMA_IRQHandler+0x698>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d040      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a28      	ldr	r2, [pc, #160]	; (80037c4 <HAL_DMA_IRQHandler+0x69c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d03b      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <HAL_DMA_IRQHandler+0x6a0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d036      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a25      	ldr	r2, [pc, #148]	; (80037cc <HAL_DMA_IRQHandler+0x6a4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d031      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a23      	ldr	r2, [pc, #140]	; (80037d0 <HAL_DMA_IRQHandler+0x6a8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d02c      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <HAL_DMA_IRQHandler+0x6ac>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d027      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <HAL_DMA_IRQHandler+0x6b0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d022      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <HAL_DMA_IRQHandler+0x6b4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d01d      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_DMA_IRQHandler+0x6b8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d018      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <HAL_DMA_IRQHandler+0x6bc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d013      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <HAL_DMA_IRQHandler+0x6c0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a19      	ldr	r2, [pc, #100]	; (80037ec <HAL_DMA_IRQHandler+0x6c4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <HAL_DMA_IRQHandler+0x6c8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x678>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <HAL_DMA_IRQHandler+0x6cc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d12b      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x6d0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e02a      	b.n	800380c <HAL_DMA_IRQHandler+0x6e4>
 80037b6:	bf00      	nop
 80037b8:	40020010 	.word	0x40020010
 80037bc:	40020028 	.word	0x40020028
 80037c0:	40020040 	.word	0x40020040
 80037c4:	40020058 	.word	0x40020058
 80037c8:	40020070 	.word	0x40020070
 80037cc:	40020088 	.word	0x40020088
 80037d0:	400200a0 	.word	0x400200a0
 80037d4:	400200b8 	.word	0x400200b8
 80037d8:	40020410 	.word	0x40020410
 80037dc:	40020428 	.word	0x40020428
 80037e0:	40020440 	.word	0x40020440
 80037e4:	40020458 	.word	0x40020458
 80037e8:	40020470 	.word	0x40020470
 80037ec:	40020488 	.word	0x40020488
 80037f0:	400204a0 	.word	0x400204a0
 80037f4:	400204b8 	.word	0x400204b8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf14      	ite	ne
 8003806:	2301      	movne	r3, #1
 8003808:	2300      	moveq	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8087 	beq.w	8003920 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2220      	movs	r2, #32
 800381c:	409a      	lsls	r2, r3
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b04      	cmp	r3, #4
 800382c:	d139      	bne.n	80038a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0216 	bic.w	r2, r2, #22
 800383c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <HAL_DMA_IRQHandler+0x736>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0208 	bic.w	r2, r2, #8
 800386c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	223f      	movs	r2, #63	; 0x3f
 8003878:	409a      	lsls	r2, r3
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 834a 	beq.w	8003f2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
          }
          return;
 80038a0:	e344      	b.n	8003f2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d108      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d02c      	beq.n	8003920 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	e027      	b.n	8003920 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
 80038e0:	e01e      	b.n	8003920 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10f      	bne.n	8003910 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0210 	bic.w	r2, r2, #16
 80038fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8306 	beq.w	8003f36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8088 	beq.w	8003a48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2204      	movs	r2, #4
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a7a      	ldr	r2, [pc, #488]	; (8003b30 <HAL_DMA_IRQHandler+0xa08>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d04a      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a79      	ldr	r2, [pc, #484]	; (8003b34 <HAL_DMA_IRQHandler+0xa0c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d045      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a77      	ldr	r2, [pc, #476]	; (8003b38 <HAL_DMA_IRQHandler+0xa10>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d040      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a76      	ldr	r2, [pc, #472]	; (8003b3c <HAL_DMA_IRQHandler+0xa14>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d03b      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a74      	ldr	r2, [pc, #464]	; (8003b40 <HAL_DMA_IRQHandler+0xa18>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d036      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a73      	ldr	r2, [pc, #460]	; (8003b44 <HAL_DMA_IRQHandler+0xa1c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d031      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a71      	ldr	r2, [pc, #452]	; (8003b48 <HAL_DMA_IRQHandler+0xa20>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d02c      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a70      	ldr	r2, [pc, #448]	; (8003b4c <HAL_DMA_IRQHandler+0xa24>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d027      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a6e      	ldr	r2, [pc, #440]	; (8003b50 <HAL_DMA_IRQHandler+0xa28>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d022      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6d      	ldr	r2, [pc, #436]	; (8003b54 <HAL_DMA_IRQHandler+0xa2c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01d      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6b      	ldr	r2, [pc, #428]	; (8003b58 <HAL_DMA_IRQHandler+0xa30>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d018      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6a      	ldr	r2, [pc, #424]	; (8003b5c <HAL_DMA_IRQHandler+0xa34>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d013      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a68      	ldr	r2, [pc, #416]	; (8003b60 <HAL_DMA_IRQHandler+0xa38>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a67      	ldr	r2, [pc, #412]	; (8003b64 <HAL_DMA_IRQHandler+0xa3c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a65      	ldr	r2, [pc, #404]	; (8003b68 <HAL_DMA_IRQHandler+0xa40>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x8b8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a64      	ldr	r2, [pc, #400]	; (8003b6c <HAL_DMA_IRQHandler+0xa44>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d108      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x8ca>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e007      	b.n	8003a02 <HAL_DMA_IRQHandler+0x8da>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d307      	bcc.n	8003a1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f2      	bne.n	8003a02 <HAL_DMA_IRQHandler+0x8da>
 8003a1c:	e000      	b.n	8003a20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d004      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2203      	movs	r2, #3
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a36:	e003      	b.n	8003a40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8272 	beq.w	8003f36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
 8003a5a:	e26c      	b.n	8003f36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a43      	ldr	r2, [pc, #268]	; (8003b70 <HAL_DMA_IRQHandler+0xa48>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d022      	beq.n	8003aac <HAL_DMA_IRQHandler+0x984>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a42      	ldr	r2, [pc, #264]	; (8003b74 <HAL_DMA_IRQHandler+0xa4c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d01d      	beq.n	8003aac <HAL_DMA_IRQHandler+0x984>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a40      	ldr	r2, [pc, #256]	; (8003b78 <HAL_DMA_IRQHandler+0xa50>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d018      	beq.n	8003aac <HAL_DMA_IRQHandler+0x984>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a3f      	ldr	r2, [pc, #252]	; (8003b7c <HAL_DMA_IRQHandler+0xa54>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <HAL_DMA_IRQHandler+0x984>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a3d      	ldr	r2, [pc, #244]	; (8003b80 <HAL_DMA_IRQHandler+0xa58>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_DMA_IRQHandler+0x984>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a3c      	ldr	r2, [pc, #240]	; (8003b84 <HAL_DMA_IRQHandler+0xa5c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_DMA_IRQHandler+0x984>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a3a      	ldr	r2, [pc, #232]	; (8003b88 <HAL_DMA_IRQHandler+0xa60>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_IRQHandler+0x984>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a39      	ldr	r2, [pc, #228]	; (8003b8c <HAL_DMA_IRQHandler+0xa64>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x988>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_DMA_IRQHandler+0x98a>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 823f 	beq.w	8003f36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	2204      	movs	r2, #4
 8003aca:	409a      	lsls	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80cd 	beq.w	8003c70 <HAL_DMA_IRQHandler+0xb48>
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80c7 	beq.w	8003c70 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2204      	movs	r2, #4
 8003aec:	409a      	lsls	r2, r3
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d049      	beq.n	8003b90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8210 	beq.w	8003f30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b18:	e20a      	b.n	8003f30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8206 	beq.w	8003f30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b2c:	e200      	b.n	8003f30 <HAL_DMA_IRQHandler+0xe08>
 8003b2e:	bf00      	nop
 8003b30:	40020010 	.word	0x40020010
 8003b34:	40020028 	.word	0x40020028
 8003b38:	40020040 	.word	0x40020040
 8003b3c:	40020058 	.word	0x40020058
 8003b40:	40020070 	.word	0x40020070
 8003b44:	40020088 	.word	0x40020088
 8003b48:	400200a0 	.word	0x400200a0
 8003b4c:	400200b8 	.word	0x400200b8
 8003b50:	40020410 	.word	0x40020410
 8003b54:	40020428 	.word	0x40020428
 8003b58:	40020440 	.word	0x40020440
 8003b5c:	40020458 	.word	0x40020458
 8003b60:	40020470 	.word	0x40020470
 8003b64:	40020488 	.word	0x40020488
 8003b68:	400204a0 	.word	0x400204a0
 8003b6c:	400204b8 	.word	0x400204b8
 8003b70:	58025408 	.word	0x58025408
 8003b74:	5802541c 	.word	0x5802541c
 8003b78:	58025430 	.word	0x58025430
 8003b7c:	58025444 	.word	0x58025444
 8003b80:	58025458 	.word	0x58025458
 8003b84:	5802546c 	.word	0x5802546c
 8003b88:	58025480 	.word	0x58025480
 8003b8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d160      	bne.n	8003c5c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a7f      	ldr	r2, [pc, #508]	; (8003d9c <HAL_DMA_IRQHandler+0xc74>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d04a      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a7d      	ldr	r2, [pc, #500]	; (8003da0 <HAL_DMA_IRQHandler+0xc78>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d045      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a7c      	ldr	r2, [pc, #496]	; (8003da4 <HAL_DMA_IRQHandler+0xc7c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d040      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a7a      	ldr	r2, [pc, #488]	; (8003da8 <HAL_DMA_IRQHandler+0xc80>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d03b      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a79      	ldr	r2, [pc, #484]	; (8003dac <HAL_DMA_IRQHandler+0xc84>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d036      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a77      	ldr	r2, [pc, #476]	; (8003db0 <HAL_DMA_IRQHandler+0xc88>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d031      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a76      	ldr	r2, [pc, #472]	; (8003db4 <HAL_DMA_IRQHandler+0xc8c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d02c      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a74      	ldr	r2, [pc, #464]	; (8003db8 <HAL_DMA_IRQHandler+0xc90>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d027      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a73      	ldr	r2, [pc, #460]	; (8003dbc <HAL_DMA_IRQHandler+0xc94>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a71      	ldr	r2, [pc, #452]	; (8003dc0 <HAL_DMA_IRQHandler+0xc98>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01d      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a70      	ldr	r2, [pc, #448]	; (8003dc4 <HAL_DMA_IRQHandler+0xc9c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a6e      	ldr	r2, [pc, #440]	; (8003dc8 <HAL_DMA_IRQHandler+0xca0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6d      	ldr	r2, [pc, #436]	; (8003dcc <HAL_DMA_IRQHandler+0xca4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a6b      	ldr	r2, [pc, #428]	; (8003dd0 <HAL_DMA_IRQHandler+0xca8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6a      	ldr	r2, [pc, #424]	; (8003dd4 <HAL_DMA_IRQHandler+0xcac>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_IRQHandler+0xb12>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a68      	ldr	r2, [pc, #416]	; (8003dd8 <HAL_DMA_IRQHandler+0xcb0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d108      	bne.n	8003c4c <HAL_DMA_IRQHandler+0xb24>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0208 	bic.w	r2, r2, #8
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e007      	b.n	8003c5c <HAL_DMA_IRQHandler+0xb34>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0204 	bic.w	r2, r2, #4
 8003c5a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8165 	beq.w	8003f30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c6e:	e15f      	b.n	8003f30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2202      	movs	r2, #2
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80c5 	beq.w	8003e10 <HAL_DMA_IRQHandler+0xce8>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80bf 	beq.w	8003e10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 813a 	beq.w	8003f34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc8:	e134      	b.n	8003f34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8130 	beq.w	8003f34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cdc:	e12a      	b.n	8003f34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 8089 	bne.w	8003dfc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2b      	ldr	r2, [pc, #172]	; (8003d9c <HAL_DMA_IRQHandler+0xc74>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d04a      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a29      	ldr	r2, [pc, #164]	; (8003da0 <HAL_DMA_IRQHandler+0xc78>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d045      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a28      	ldr	r2, [pc, #160]	; (8003da4 <HAL_DMA_IRQHandler+0xc7c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d040      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <HAL_DMA_IRQHandler+0xc80>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d03b      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a25      	ldr	r2, [pc, #148]	; (8003dac <HAL_DMA_IRQHandler+0xc84>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d036      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <HAL_DMA_IRQHandler+0xc88>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <HAL_DMA_IRQHandler+0xc8c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d02c      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <HAL_DMA_IRQHandler+0xc90>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <HAL_DMA_IRQHandler+0xc94>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <HAL_DMA_IRQHandler+0xc98>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_DMA_IRQHandler+0xc9c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1a      	ldr	r2, [pc, #104]	; (8003dc8 <HAL_DMA_IRQHandler+0xca0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <HAL_DMA_IRQHandler+0xca4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <HAL_DMA_IRQHandler+0xca8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a16      	ldr	r2, [pc, #88]	; (8003dd4 <HAL_DMA_IRQHandler+0xcac>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xc62>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <HAL_DMA_IRQHandler+0xcb0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d128      	bne.n	8003ddc <HAL_DMA_IRQHandler+0xcb4>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0214 	bic.w	r2, r2, #20
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e027      	b.n	8003dec <HAL_DMA_IRQHandler+0xcc4>
 8003d9c:	40020010 	.word	0x40020010
 8003da0:	40020028 	.word	0x40020028
 8003da4:	40020040 	.word	0x40020040
 8003da8:	40020058 	.word	0x40020058
 8003dac:	40020070 	.word	0x40020070
 8003db0:	40020088 	.word	0x40020088
 8003db4:	400200a0 	.word	0x400200a0
 8003db8:	400200b8 	.word	0x400200b8
 8003dbc:	40020410 	.word	0x40020410
 8003dc0:	40020428 	.word	0x40020428
 8003dc4:	40020440 	.word	0x40020440
 8003dc8:	40020458 	.word	0x40020458
 8003dcc:	40020470 	.word	0x40020470
 8003dd0:	40020488 	.word	0x40020488
 8003dd4:	400204a0 	.word	0x400204a0
 8003dd8:	400204b8 	.word	0x400204b8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 020a 	bic.w	r2, r2, #10
 8003dea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8097 	beq.w	8003f34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e0e:	e091      	b.n	8003f34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	2208      	movs	r2, #8
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8088 	beq.w	8003f36 <HAL_DMA_IRQHandler+0xe0e>
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8082 	beq.w	8003f36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a41      	ldr	r2, [pc, #260]	; (8003f3c <HAL_DMA_IRQHandler+0xe14>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04a      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a3f      	ldr	r2, [pc, #252]	; (8003f40 <HAL_DMA_IRQHandler+0xe18>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d045      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a3e      	ldr	r2, [pc, #248]	; (8003f44 <HAL_DMA_IRQHandler+0xe1c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d040      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a3c      	ldr	r2, [pc, #240]	; (8003f48 <HAL_DMA_IRQHandler+0xe20>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d03b      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a3b      	ldr	r2, [pc, #236]	; (8003f4c <HAL_DMA_IRQHandler+0xe24>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d036      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a39      	ldr	r2, [pc, #228]	; (8003f50 <HAL_DMA_IRQHandler+0xe28>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a38      	ldr	r2, [pc, #224]	; (8003f54 <HAL_DMA_IRQHandler+0xe2c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d02c      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a36      	ldr	r2, [pc, #216]	; (8003f58 <HAL_DMA_IRQHandler+0xe30>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d027      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a35      	ldr	r2, [pc, #212]	; (8003f5c <HAL_DMA_IRQHandler+0xe34>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a33      	ldr	r2, [pc, #204]	; (8003f60 <HAL_DMA_IRQHandler+0xe38>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a32      	ldr	r2, [pc, #200]	; (8003f64 <HAL_DMA_IRQHandler+0xe3c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a30      	ldr	r2, [pc, #192]	; (8003f68 <HAL_DMA_IRQHandler+0xe40>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2f      	ldr	r2, [pc, #188]	; (8003f6c <HAL_DMA_IRQHandler+0xe44>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2d      	ldr	r2, [pc, #180]	; (8003f70 <HAL_DMA_IRQHandler+0xe48>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2c      	ldr	r2, [pc, #176]	; (8003f74 <HAL_DMA_IRQHandler+0xe4c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xdaa>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <HAL_DMA_IRQHandler+0xe50>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d108      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0xdbc>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 021c 	bic.w	r2, r2, #28
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e007      	b.n	8003ef4 <HAL_DMA_IRQHandler+0xdcc>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 020e 	bic.w	r2, r2, #14
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2201      	movs	r2, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	4798      	blx	r3
 8003f2a:	e004      	b.n	8003f36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f2c:	bf00      	nop
 8003f2e:	e002      	b.n	8003f36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f36:	3728      	adds	r7, #40	; 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40020010 	.word	0x40020010
 8003f40:	40020028 	.word	0x40020028
 8003f44:	40020040 	.word	0x40020040
 8003f48:	40020058 	.word	0x40020058
 8003f4c:	40020070 	.word	0x40020070
 8003f50:	40020088 	.word	0x40020088
 8003f54:	400200a0 	.word	0x400200a0
 8003f58:	400200b8 	.word	0x400200b8
 8003f5c:	40020410 	.word	0x40020410
 8003f60:	40020428 	.word	0x40020428
 8003f64:	40020440 	.word	0x40020440
 8003f68:	40020458 	.word	0x40020458
 8003f6c:	40020470 	.word	0x40020470
 8003f70:	40020488 	.word	0x40020488
 8003f74:	400204a0 	.word	0x400204a0
 8003f78:	400204b8 	.word	0x400204b8

08003f7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7f      	ldr	r2, [pc, #508]	; (8004198 <DMA_SetConfig+0x21c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d072      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7d      	ldr	r2, [pc, #500]	; (800419c <DMA_SetConfig+0x220>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d06d      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7c      	ldr	r2, [pc, #496]	; (80041a0 <DMA_SetConfig+0x224>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d068      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7a      	ldr	r2, [pc, #488]	; (80041a4 <DMA_SetConfig+0x228>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d063      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a79      	ldr	r2, [pc, #484]	; (80041a8 <DMA_SetConfig+0x22c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d05e      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a77      	ldr	r2, [pc, #476]	; (80041ac <DMA_SetConfig+0x230>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d059      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a76      	ldr	r2, [pc, #472]	; (80041b0 <DMA_SetConfig+0x234>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d054      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a74      	ldr	r2, [pc, #464]	; (80041b4 <DMA_SetConfig+0x238>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d04f      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	; (80041b8 <DMA_SetConfig+0x23c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d04a      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a71      	ldr	r2, [pc, #452]	; (80041bc <DMA_SetConfig+0x240>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d045      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a70      	ldr	r2, [pc, #448]	; (80041c0 <DMA_SetConfig+0x244>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d040      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	; (80041c4 <DMA_SetConfig+0x248>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d03b      	beq.n	8004086 <DMA_SetConfig+0x10a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6d      	ldr	r2, [pc, #436]	; (80041c8 <DMA_SetConfig+0x24c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d036      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a6b      	ldr	r2, [pc, #428]	; (80041cc <DMA_SetConfig+0x250>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d031      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a6a      	ldr	r2, [pc, #424]	; (80041d0 <DMA_SetConfig+0x254>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d02c      	beq.n	8004086 <DMA_SetConfig+0x10a>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a68      	ldr	r2, [pc, #416]	; (80041d4 <DMA_SetConfig+0x258>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d027      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a67      	ldr	r2, [pc, #412]	; (80041d8 <DMA_SetConfig+0x25c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d022      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a65      	ldr	r2, [pc, #404]	; (80041dc <DMA_SetConfig+0x260>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01d      	beq.n	8004086 <DMA_SetConfig+0x10a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a64      	ldr	r2, [pc, #400]	; (80041e0 <DMA_SetConfig+0x264>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d018      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a62      	ldr	r2, [pc, #392]	; (80041e4 <DMA_SetConfig+0x268>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <DMA_SetConfig+0x10a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a61      	ldr	r2, [pc, #388]	; (80041e8 <DMA_SetConfig+0x26c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a5f      	ldr	r2, [pc, #380]	; (80041ec <DMA_SetConfig+0x270>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d009      	beq.n	8004086 <DMA_SetConfig+0x10a>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a5e      	ldr	r2, [pc, #376]	; (80041f0 <DMA_SetConfig+0x274>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <DMA_SetConfig+0x10a>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a5c      	ldr	r2, [pc, #368]	; (80041f4 <DMA_SetConfig+0x278>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <DMA_SetConfig+0x10e>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <DMA_SetConfig+0x110>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004098:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d004      	beq.n	80040ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a39      	ldr	r2, [pc, #228]	; (8004198 <DMA_SetConfig+0x21c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d04a      	beq.n	800414c <DMA_SetConfig+0x1d0>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a38      	ldr	r2, [pc, #224]	; (800419c <DMA_SetConfig+0x220>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d045      	beq.n	800414c <DMA_SetConfig+0x1d0>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a36      	ldr	r2, [pc, #216]	; (80041a0 <DMA_SetConfig+0x224>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d040      	beq.n	800414c <DMA_SetConfig+0x1d0>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a35      	ldr	r2, [pc, #212]	; (80041a4 <DMA_SetConfig+0x228>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d03b      	beq.n	800414c <DMA_SetConfig+0x1d0>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a33      	ldr	r2, [pc, #204]	; (80041a8 <DMA_SetConfig+0x22c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d036      	beq.n	800414c <DMA_SetConfig+0x1d0>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a32      	ldr	r2, [pc, #200]	; (80041ac <DMA_SetConfig+0x230>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d031      	beq.n	800414c <DMA_SetConfig+0x1d0>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <DMA_SetConfig+0x234>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d02c      	beq.n	800414c <DMA_SetConfig+0x1d0>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2f      	ldr	r2, [pc, #188]	; (80041b4 <DMA_SetConfig+0x238>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d027      	beq.n	800414c <DMA_SetConfig+0x1d0>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <DMA_SetConfig+0x23c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d022      	beq.n	800414c <DMA_SetConfig+0x1d0>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2c      	ldr	r2, [pc, #176]	; (80041bc <DMA_SetConfig+0x240>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d01d      	beq.n	800414c <DMA_SetConfig+0x1d0>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2a      	ldr	r2, [pc, #168]	; (80041c0 <DMA_SetConfig+0x244>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d018      	beq.n	800414c <DMA_SetConfig+0x1d0>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <DMA_SetConfig+0x248>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d013      	beq.n	800414c <DMA_SetConfig+0x1d0>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <DMA_SetConfig+0x24c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00e      	beq.n	800414c <DMA_SetConfig+0x1d0>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a26      	ldr	r2, [pc, #152]	; (80041cc <DMA_SetConfig+0x250>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d009      	beq.n	800414c <DMA_SetConfig+0x1d0>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <DMA_SetConfig+0x254>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <DMA_SetConfig+0x1d0>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <DMA_SetConfig+0x258>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <DMA_SetConfig+0x1d4>
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <DMA_SetConfig+0x1d6>
 8004150:	2300      	movs	r3, #0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d059      	beq.n	800420a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	223f      	movs	r2, #63	; 0x3f
 8004160:	409a      	lsls	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004174:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d138      	bne.n	80041f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004196:	e086      	b.n	80042a6 <DMA_SetConfig+0x32a>
 8004198:	40020010 	.word	0x40020010
 800419c:	40020028 	.word	0x40020028
 80041a0:	40020040 	.word	0x40020040
 80041a4:	40020058 	.word	0x40020058
 80041a8:	40020070 	.word	0x40020070
 80041ac:	40020088 	.word	0x40020088
 80041b0:	400200a0 	.word	0x400200a0
 80041b4:	400200b8 	.word	0x400200b8
 80041b8:	40020410 	.word	0x40020410
 80041bc:	40020428 	.word	0x40020428
 80041c0:	40020440 	.word	0x40020440
 80041c4:	40020458 	.word	0x40020458
 80041c8:	40020470 	.word	0x40020470
 80041cc:	40020488 	.word	0x40020488
 80041d0:	400204a0 	.word	0x400204a0
 80041d4:	400204b8 	.word	0x400204b8
 80041d8:	58025408 	.word	0x58025408
 80041dc:	5802541c 	.word	0x5802541c
 80041e0:	58025430 	.word	0x58025430
 80041e4:	58025444 	.word	0x58025444
 80041e8:	58025458 	.word	0x58025458
 80041ec:	5802546c 	.word	0x5802546c
 80041f0:	58025480 	.word	0x58025480
 80041f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	60da      	str	r2, [r3, #12]
}
 8004208:	e04d      	b.n	80042a6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <DMA_SetConfig+0x338>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <DMA_SetConfig+0x2de>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a27      	ldr	r2, [pc, #156]	; (80042b8 <DMA_SetConfig+0x33c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01d      	beq.n	800425a <DMA_SetConfig+0x2de>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <DMA_SetConfig+0x340>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <DMA_SetConfig+0x2de>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <DMA_SetConfig+0x344>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <DMA_SetConfig+0x2de>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <DMA_SetConfig+0x348>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <DMA_SetConfig+0x2de>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <DMA_SetConfig+0x34c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <DMA_SetConfig+0x2de>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a20      	ldr	r2, [pc, #128]	; (80042cc <DMA_SetConfig+0x350>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <DMA_SetConfig+0x2de>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <DMA_SetConfig+0x354>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <DMA_SetConfig+0x2e2>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <DMA_SetConfig+0x2e4>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d020      	beq.n	80042a6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d108      	bne.n	8004296 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	60da      	str	r2, [r3, #12]
}
 8004294:	e007      	b.n	80042a6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	60da      	str	r2, [r3, #12]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	58025408 	.word	0x58025408
 80042b8:	5802541c 	.word	0x5802541c
 80042bc:	58025430 	.word	0x58025430
 80042c0:	58025444 	.word	0x58025444
 80042c4:	58025458 	.word	0x58025458
 80042c8:	5802546c 	.word	0x5802546c
 80042cc:	58025480 	.word	0x58025480
 80042d0:	58025494 	.word	0x58025494

080042d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a42      	ldr	r2, [pc, #264]	; (80043ec <DMA_CalcBaseAndBitshift+0x118>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d04a      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a41      	ldr	r2, [pc, #260]	; (80043f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d045      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a3f      	ldr	r2, [pc, #252]	; (80043f4 <DMA_CalcBaseAndBitshift+0x120>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d040      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a3e      	ldr	r2, [pc, #248]	; (80043f8 <DMA_CalcBaseAndBitshift+0x124>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d03b      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a3c      	ldr	r2, [pc, #240]	; (80043fc <DMA_CalcBaseAndBitshift+0x128>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d036      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a3b      	ldr	r2, [pc, #236]	; (8004400 <DMA_CalcBaseAndBitshift+0x12c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d031      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a39      	ldr	r2, [pc, #228]	; (8004404 <DMA_CalcBaseAndBitshift+0x130>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d02c      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a38      	ldr	r2, [pc, #224]	; (8004408 <DMA_CalcBaseAndBitshift+0x134>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d027      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a36      	ldr	r2, [pc, #216]	; (800440c <DMA_CalcBaseAndBitshift+0x138>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d022      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a35      	ldr	r2, [pc, #212]	; (8004410 <DMA_CalcBaseAndBitshift+0x13c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d01d      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a33      	ldr	r2, [pc, #204]	; (8004414 <DMA_CalcBaseAndBitshift+0x140>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a32      	ldr	r2, [pc, #200]	; (8004418 <DMA_CalcBaseAndBitshift+0x144>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a30      	ldr	r2, [pc, #192]	; (800441c <DMA_CalcBaseAndBitshift+0x148>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2f      	ldr	r2, [pc, #188]	; (8004420 <DMA_CalcBaseAndBitshift+0x14c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a2d      	ldr	r2, [pc, #180]	; (8004424 <DMA_CalcBaseAndBitshift+0x150>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <DMA_CalcBaseAndBitshift+0xa8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <DMA_CalcBaseAndBitshift+0x154>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <DMA_CalcBaseAndBitshift+0xac>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <DMA_CalcBaseAndBitshift+0xae>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d024      	beq.n	80043d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	3b10      	subs	r3, #16
 800438e:	4a27      	ldr	r2, [pc, #156]	; (800442c <DMA_CalcBaseAndBitshift+0x158>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	4a24      	ldr	r2, [pc, #144]	; (8004430 <DMA_CalcBaseAndBitshift+0x15c>)
 80043a0:	5cd3      	ldrb	r3, [r2, r3]
 80043a2:	461a      	mov	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d908      	bls.n	80043c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <DMA_CalcBaseAndBitshift+0x160>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	659a      	str	r2, [r3, #88]	; 0x58
 80043be:	e00d      	b.n	80043dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <DMA_CalcBaseAndBitshift+0x160>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6593      	str	r3, [r2, #88]	; 0x58
 80043ce:	e005      	b.n	80043dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40020010 	.word	0x40020010
 80043f0:	40020028 	.word	0x40020028
 80043f4:	40020040 	.word	0x40020040
 80043f8:	40020058 	.word	0x40020058
 80043fc:	40020070 	.word	0x40020070
 8004400:	40020088 	.word	0x40020088
 8004404:	400200a0 	.word	0x400200a0
 8004408:	400200b8 	.word	0x400200b8
 800440c:	40020410 	.word	0x40020410
 8004410:	40020428 	.word	0x40020428
 8004414:	40020440 	.word	0x40020440
 8004418:	40020458 	.word	0x40020458
 800441c:	40020470 	.word	0x40020470
 8004420:	40020488 	.word	0x40020488
 8004424:	400204a0 	.word	0x400204a0
 8004428:	400204b8 	.word	0x400204b8
 800442c:	aaaaaaab 	.word	0xaaaaaaab
 8004430:	0800aaac 	.word	0x0800aaac
 8004434:	fffffc00 	.word	0xfffffc00

08004438 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004440:	2300      	movs	r3, #0
 8004442:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d120      	bne.n	800448e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	2b03      	cmp	r3, #3
 8004452:	d858      	bhi.n	8004506 <DMA_CheckFifoParam+0xce>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <DMA_CheckFifoParam+0x24>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	0800446d 	.word	0x0800446d
 8004460:	0800447f 	.word	0x0800447f
 8004464:	0800446d 	.word	0x0800446d
 8004468:	08004507 	.word	0x08004507
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d048      	beq.n	800450a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800447c:	e045      	b.n	800450a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004486:	d142      	bne.n	800450e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800448c:	e03f      	b.n	800450e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004496:	d123      	bne.n	80044e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	2b03      	cmp	r3, #3
 800449e:	d838      	bhi.n	8004512 <DMA_CheckFifoParam+0xda>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <DMA_CheckFifoParam+0x70>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044bf 	.word	0x080044bf
 80044b0:	080044b9 	.word	0x080044b9
 80044b4:	080044d1 	.word	0x080044d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
        break;
 80044bc:	e030      	b.n	8004520 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d025      	beq.n	8004516 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044ce:	e022      	b.n	8004516 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044d8:	d11f      	bne.n	800451a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044de:	e01c      	b.n	800451a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d902      	bls.n	80044ee <DMA_CheckFifoParam+0xb6>
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d003      	beq.n	80044f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044ec:	e018      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
        break;
 80044f2:	e015      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00e      	beq.n	800451e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
    break;
 8004504:	e00b      	b.n	800451e <DMA_CheckFifoParam+0xe6>
        break;
 8004506:	bf00      	nop
 8004508:	e00a      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
        break;
 800450a:	bf00      	nop
 800450c:	e008      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
        break;
 800450e:	bf00      	nop
 8004510:	e006      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
        break;
 8004512:	bf00      	nop
 8004514:	e004      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
        break;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
        break;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <DMA_CheckFifoParam+0xe8>
    break;
 800451e:	bf00      	nop
    }
  }

  return status;
 8004520:	7bfb      	ldrb	r3, [r7, #15]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop

08004530 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a38      	ldr	r2, [pc, #224]	; (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d022      	beq.n	800458e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a36      	ldr	r2, [pc, #216]	; (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01d      	beq.n	800458e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a35      	ldr	r2, [pc, #212]	; (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d018      	beq.n	800458e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a33      	ldr	r2, [pc, #204]	; (8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d013      	beq.n	800458e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a32      	ldr	r2, [pc, #200]	; (8004634 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00e      	beq.n	800458e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a30      	ldr	r2, [pc, #192]	; (8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d009      	beq.n	800458e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d004      	beq.n	800458e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2d      	ldr	r2, [pc, #180]	; (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d101      	bne.n	8004592 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004592:	2300      	movs	r3, #0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01a      	beq.n	80045ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	3b08      	subs	r3, #8
 80045a0:	4a28      	ldr	r2, [pc, #160]	; (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4b26      	ldr	r3, [pc, #152]	; (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a24      	ldr	r2, [pc, #144]	; (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80045bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	2201      	movs	r2, #1
 80045c6:	409a      	lsls	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80045cc:	e024      	b.n	8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3b10      	subs	r3, #16
 80045d6:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d806      	bhi.n	80045f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d902      	bls.n	80045f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3308      	adds	r3, #8
 80045f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4b18      	ldr	r3, [pc, #96]	; (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	461a      	mov	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a16      	ldr	r2, [pc, #88]	; (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004608:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	58025408 	.word	0x58025408
 8004628:	5802541c 	.word	0x5802541c
 800462c:	58025430 	.word	0x58025430
 8004630:	58025444 	.word	0x58025444
 8004634:	58025458 	.word	0x58025458
 8004638:	5802546c 	.word	0x5802546c
 800463c:	58025480 	.word	0x58025480
 8004640:	58025494 	.word	0x58025494
 8004644:	cccccccd 	.word	0xcccccccd
 8004648:	16009600 	.word	0x16009600
 800464c:	58025880 	.word	0x58025880
 8004650:	aaaaaaab 	.word	0xaaaaaaab
 8004654:	400204b8 	.word	0x400204b8
 8004658:	4002040f 	.word	0x4002040f
 800465c:	10008200 	.word	0x10008200
 8004660:	40020880 	.word	0x40020880

08004664 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d04a      	beq.n	8004710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d847      	bhi.n	8004710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a25      	ldr	r2, [pc, #148]	; (800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d022      	beq.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a24      	ldr	r2, [pc, #144]	; (8004720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d01d      	beq.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a22      	ldr	r2, [pc, #136]	; (8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d018      	beq.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a21      	ldr	r2, [pc, #132]	; (8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1f      	ldr	r2, [pc, #124]	; (800472c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00e      	beq.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1e      	ldr	r2, [pc, #120]	; (8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d009      	beq.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d101      	bne.n	80046d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4b17      	ldr	r3, [pc, #92]	; (800473c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	461a      	mov	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046ec:	671a      	str	r2, [r3, #112]	; 0x70
 80046ee:	e009      	b.n	8004704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4b14      	ldr	r3, [pc, #80]	; (8004744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	461a      	mov	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a11      	ldr	r2, [pc, #68]	; (8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004702:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3b01      	subs	r3, #1
 8004708:	2201      	movs	r2, #1
 800470a:	409a      	lsls	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	58025408 	.word	0x58025408
 8004720:	5802541c 	.word	0x5802541c
 8004724:	58025430 	.word	0x58025430
 8004728:	58025444 	.word	0x58025444
 800472c:	58025458 	.word	0x58025458
 8004730:	5802546c 	.word	0x5802546c
 8004734:	58025480 	.word	0x58025480
 8004738:	58025494 	.word	0x58025494
 800473c:	1600963f 	.word	0x1600963f
 8004740:	58025940 	.word	0x58025940
 8004744:	1000823f 	.word	0x1000823f
 8004748:	40020940 	.word	0x40020940

0800474c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800474c:	b480      	push	{r7}
 800474e:	b089      	sub	sp, #36	; 0x24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800475a:	4b86      	ldr	r3, [pc, #536]	; (8004974 <HAL_GPIO_Init+0x228>)
 800475c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800475e:	e18c      	b.n	8004a7a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	2101      	movs	r1, #1
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	4013      	ands	r3, r2
 800476e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 817e 	beq.w	8004a74 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b01      	cmp	r3, #1
 8004782:	d005      	beq.n	8004790 <HAL_GPIO_Init+0x44>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d130      	bne.n	80047f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	2203      	movs	r2, #3
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047c6:	2201      	movs	r2, #1
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	091b      	lsrs	r3, r3, #4
 80047dc:	f003 0201 	and.w	r2, r3, #1
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d017      	beq.n	800482e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	2203      	movs	r2, #3
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d123      	bne.n	8004882 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	08da      	lsrs	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3208      	adds	r2, #8
 8004842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	220f      	movs	r2, #15
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	08da      	lsrs	r2, r3, #3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3208      	adds	r2, #8
 800487c:	69b9      	ldr	r1, [r7, #24]
 800487e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	2203      	movs	r2, #3
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 0203 	and.w	r2, r3, #3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80d8 	beq.w	8004a74 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c4:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <HAL_GPIO_Init+0x22c>)
 80048c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ca:	4a2b      	ldr	r2, [pc, #172]	; (8004978 <HAL_GPIO_Init+0x22c>)
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048d4:	4b28      	ldr	r3, [pc, #160]	; (8004978 <HAL_GPIO_Init+0x22c>)
 80048d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048e2:	4a26      	ldr	r2, [pc, #152]	; (800497c <HAL_GPIO_Init+0x230>)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	3302      	adds	r3, #2
 80048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	220f      	movs	r2, #15
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <HAL_GPIO_Init+0x234>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d04a      	beq.n	80049a4 <HAL_GPIO_Init+0x258>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <HAL_GPIO_Init+0x238>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d02b      	beq.n	800496e <HAL_GPIO_Init+0x222>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <HAL_GPIO_Init+0x23c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d025      	beq.n	800496a <HAL_GPIO_Init+0x21e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a1a      	ldr	r2, [pc, #104]	; (800498c <HAL_GPIO_Init+0x240>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d01f      	beq.n	8004966 <HAL_GPIO_Init+0x21a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_GPIO_Init+0x244>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d019      	beq.n	8004962 <HAL_GPIO_Init+0x216>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a18      	ldr	r2, [pc, #96]	; (8004994 <HAL_GPIO_Init+0x248>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <HAL_GPIO_Init+0x212>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a17      	ldr	r2, [pc, #92]	; (8004998 <HAL_GPIO_Init+0x24c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00d      	beq.n	800495a <HAL_GPIO_Init+0x20e>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a16      	ldr	r2, [pc, #88]	; (800499c <HAL_GPIO_Init+0x250>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <HAL_GPIO_Init+0x20a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <HAL_GPIO_Init+0x254>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_GPIO_Init+0x206>
 800494e:	2309      	movs	r3, #9
 8004950:	e029      	b.n	80049a6 <HAL_GPIO_Init+0x25a>
 8004952:	230a      	movs	r3, #10
 8004954:	e027      	b.n	80049a6 <HAL_GPIO_Init+0x25a>
 8004956:	2307      	movs	r3, #7
 8004958:	e025      	b.n	80049a6 <HAL_GPIO_Init+0x25a>
 800495a:	2306      	movs	r3, #6
 800495c:	e023      	b.n	80049a6 <HAL_GPIO_Init+0x25a>
 800495e:	2305      	movs	r3, #5
 8004960:	e021      	b.n	80049a6 <HAL_GPIO_Init+0x25a>
 8004962:	2304      	movs	r3, #4
 8004964:	e01f      	b.n	80049a6 <HAL_GPIO_Init+0x25a>
 8004966:	2303      	movs	r3, #3
 8004968:	e01d      	b.n	80049a6 <HAL_GPIO_Init+0x25a>
 800496a:	2302      	movs	r3, #2
 800496c:	e01b      	b.n	80049a6 <HAL_GPIO_Init+0x25a>
 800496e:	2301      	movs	r3, #1
 8004970:	e019      	b.n	80049a6 <HAL_GPIO_Init+0x25a>
 8004972:	bf00      	nop
 8004974:	58000080 	.word	0x58000080
 8004978:	58024400 	.word	0x58024400
 800497c:	58000400 	.word	0x58000400
 8004980:	58020000 	.word	0x58020000
 8004984:	58020400 	.word	0x58020400
 8004988:	58020800 	.word	0x58020800
 800498c:	58020c00 	.word	0x58020c00
 8004990:	58021000 	.word	0x58021000
 8004994:	58021400 	.word	0x58021400
 8004998:	58021800 	.word	0x58021800
 800499c:	58021c00 	.word	0x58021c00
 80049a0:	58022400 	.word	0x58022400
 80049a4:	2300      	movs	r3, #0
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	f002 0203 	and.w	r2, r2, #3
 80049ac:	0092      	lsls	r2, r2, #2
 80049ae:	4093      	lsls	r3, r2
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049b6:	4938      	ldr	r1, [pc, #224]	; (8004a98 <HAL_GPIO_Init+0x34c>)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	3302      	adds	r3, #2
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	3301      	adds	r3, #1
 8004a78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f ae6b 	bne.w	8004760 <HAL_GPIO_Init+0x14>
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	3724      	adds	r7, #36	; 0x24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	58000400 	.word	0x58000400

08004a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	887b      	ldrh	r3, [r7, #2]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	e001      	b.n	8004abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	807b      	strh	r3, [r7, #2]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004adc:	787b      	ldrb	r3, [r7, #1]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ae8:	e003      	b.n	8004af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aea:	887b      	ldrh	r3, [r7, #2]
 8004aec:	041a      	lsls	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	619a      	str	r2, [r3, #24]
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b08:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <HAL_PWREx_ConfigSupply+0x70>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d00a      	beq.n	8004b2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b14:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <HAL_PWREx_ConfigSupply+0x70>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d001      	beq.n	8004b26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e01f      	b.n	8004b66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e01d      	b.n	8004b66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <HAL_PWREx_ConfigSupply+0x70>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f023 0207 	bic.w	r2, r3, #7
 8004b32:	490f      	ldr	r1, [pc, #60]	; (8004b70 <HAL_PWREx_ConfigSupply+0x70>)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004b3a:	f7fc feb3 	bl	80018a4 <HAL_GetTick>
 8004b3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b40:	e009      	b.n	8004b56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b42:	f7fc feaf 	bl	80018a4 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b50:	d901      	bls.n	8004b56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e007      	b.n	8004b66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_PWREx_ConfigSupply+0x70>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b62:	d1ee      	bne.n	8004b42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	58024800 	.word	0x58024800

08004b74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08c      	sub	sp, #48	; 0x30
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e3c8      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8087 	beq.w	8004ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b94:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b9e:	4b86      	ldr	r3, [pc, #536]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d007      	beq.n	8004bba <HAL_RCC_OscConfig+0x46>
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	2b18      	cmp	r3, #24
 8004bae:	d110      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x5e>
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d10b      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bba:	4b7f      	ldr	r3, [pc, #508]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d06c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x12c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d168      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e3a2      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_OscConfig+0x76>
 8004bdc:	4b76      	ldr	r3, [pc, #472]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a75      	ldr	r2, [pc, #468]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	e02e      	b.n	8004c48 <HAL_RCC_OscConfig+0xd4>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10c      	bne.n	8004c0c <HAL_RCC_OscConfig+0x98>
 8004bf2:	4b71      	ldr	r3, [pc, #452]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a70      	ldr	r2, [pc, #448]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	4b6e      	ldr	r3, [pc, #440]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6d      	ldr	r2, [pc, #436]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e01d      	b.n	8004c48 <HAL_RCC_OscConfig+0xd4>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCC_OscConfig+0xbc>
 8004c16:	4b68      	ldr	r3, [pc, #416]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a67      	ldr	r2, [pc, #412]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b65      	ldr	r3, [pc, #404]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a64      	ldr	r2, [pc, #400]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e00b      	b.n	8004c48 <HAL_RCC_OscConfig+0xd4>
 8004c30:	4b61      	ldr	r3, [pc, #388]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a60      	ldr	r2, [pc, #384]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	4b5e      	ldr	r3, [pc, #376]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a5d      	ldr	r2, [pc, #372]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d013      	beq.n	8004c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fc fe28 	bl	80018a4 <HAL_GetTick>
 8004c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fc fe24 	bl	80018a4 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e356      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c6a:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0xe4>
 8004c76:	e014      	b.n	8004ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fc fe14 	bl	80018a4 <HAL_GetTick>
 8004c7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c80:	f7fc fe10 	bl	80018a4 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e342      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c92:	4b49      	ldr	r3, [pc, #292]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x10c>
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 808c 	beq.w	8004dc8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb0:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cba:	4b3f      	ldr	r3, [pc, #252]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x162>
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	2b18      	cmp	r3, #24
 8004cca:	d137      	bne.n	8004d3c <HAL_RCC_OscConfig+0x1c8>
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d132      	bne.n	8004d3c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd6:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_RCC_OscConfig+0x17a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e314      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cee:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 0219 	bic.w	r2, r3, #25
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	492f      	ldr	r1, [pc, #188]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fc fdd0 	bl	80018a4 <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d08:	f7fc fdcc 	bl	80018a4 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e2fe      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d1a:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d26:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	061b      	lsls	r3, r3, #24
 8004d34:	4920      	ldr	r1, [pc, #128]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d3a:	e045      	b.n	8004dc8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d026      	beq.n	8004d92 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d44:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 0219 	bic.w	r2, r3, #25
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4919      	ldr	r1, [pc, #100]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fc fda5 	bl	80018a4 <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5e:	f7fc fda1 	bl	80018a4 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e2d3      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	490b      	ldr	r1, [pc, #44]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
 8004d90:	e01a      	b.n	8004dc8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <HAL_RCC_OscConfig+0x244>)
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fc fd81 	bl	80018a4 <HAL_GetTick>
 8004da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da6:	f7fc fd7d 	bl	80018a4 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d903      	bls.n	8004dbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e2af      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
 8004db8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dbc:	4b96      	ldr	r3, [pc, #600]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d06a      	beq.n	8004eaa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd4:	4b90      	ldr	r3, [pc, #576]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ddc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dde:	4b8e      	ldr	r3, [pc, #568]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d007      	beq.n	8004dfa <HAL_RCC_OscConfig+0x286>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b18      	cmp	r3, #24
 8004dee:	d11b      	bne.n	8004e28 <HAL_RCC_OscConfig+0x2b4>
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d116      	bne.n	8004e28 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dfa:	4b87      	ldr	r3, [pc, #540]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_RCC_OscConfig+0x29e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d001      	beq.n	8004e12 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e282      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e12:	4b81      	ldr	r3, [pc, #516]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	061b      	lsls	r3, r3, #24
 8004e20:	497d      	ldr	r1, [pc, #500]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e26:	e040      	b.n	8004eaa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d023      	beq.n	8004e78 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e30:	4b79      	ldr	r3, [pc, #484]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a78      	ldr	r2, [pc, #480]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fc fd32 	bl	80018a4 <HAL_GetTick>
 8004e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e44:	f7fc fd2e 	bl	80018a4 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e260      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e56:	4b70      	ldr	r3, [pc, #448]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e62:	4b6d      	ldr	r3, [pc, #436]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	061b      	lsls	r3, r3, #24
 8004e70:	4969      	ldr	r1, [pc, #420]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60cb      	str	r3, [r1, #12]
 8004e76:	e018      	b.n	8004eaa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004e78:	4b67      	ldr	r3, [pc, #412]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a66      	ldr	r2, [pc, #408]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fc fd0e 	bl	80018a4 <HAL_GetTick>
 8004e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e8c:	f7fc fd0a 	bl	80018a4 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e23c      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004e9e:	4b5e      	ldr	r3, [pc, #376]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d036      	beq.n	8004f24 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d019      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ebe:	4b56      	ldr	r3, [pc, #344]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec2:	4a55      	ldr	r2, [pc, #340]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eca:	f7fc fceb 	bl	80018a4 <HAL_GetTick>
 8004ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed2:	f7fc fce7 	bl	80018a4 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e219      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ee4:	4b4c      	ldr	r3, [pc, #304]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x35e>
 8004ef0:	e018      	b.n	8004f24 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ef2:	4b49      	ldr	r3, [pc, #292]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef6:	4a48      	ldr	r2, [pc, #288]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efe:	f7fc fcd1 	bl	80018a4 <HAL_GetTick>
 8004f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f04:	e008      	b.n	8004f18 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f06:	f7fc fccd 	bl	80018a4 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e1ff      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f18:	4b3f      	ldr	r3, [pc, #252]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d036      	beq.n	8004f9e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d019      	beq.n	8004f6c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f38:	4b37      	ldr	r3, [pc, #220]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a36      	ldr	r2, [pc, #216]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004f3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f44:	f7fc fcae 	bl	80018a4 <HAL_GetTick>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f4c:	f7fc fcaa 	bl	80018a4 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e1dc      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f5e:	4b2e      	ldr	r3, [pc, #184]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCC_OscConfig+0x3d8>
 8004f6a:	e018      	b.n	8004f9e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f6c:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a29      	ldr	r2, [pc, #164]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004f72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f78:	f7fc fc94 	bl	80018a4 <HAL_GetTick>
 8004f7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f80:	f7fc fc90 	bl	80018a4 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e1c2      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f92:	4b21      	ldr	r3, [pc, #132]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8086 	beq.w	80050b8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <HAL_RCC_OscConfig+0x4a8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a1a      	ldr	r2, [pc, #104]	; (800501c <HAL_RCC_OscConfig+0x4a8>)
 8004fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fb8:	f7fc fc74 	bl	80018a4 <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc0:	f7fc fc70 	bl	80018a4 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b64      	cmp	r3, #100	; 0x64
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e1a2      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_RCC_OscConfig+0x4a8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d106      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x480>
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	4a0b      	ldr	r2, [pc, #44]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff2:	e032      	b.n	800505a <HAL_RCC_OscConfig+0x4e6>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d111      	bne.n	8005020 <HAL_RCC_OscConfig+0x4ac>
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	4a05      	ldr	r2, [pc, #20]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	6713      	str	r3, [r2, #112]	; 0x70
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	4a02      	ldr	r2, [pc, #8]	; (8005018 <HAL_RCC_OscConfig+0x4a4>)
 800500e:	f023 0304 	bic.w	r3, r3, #4
 8005012:	6713      	str	r3, [r2, #112]	; 0x70
 8005014:	e021      	b.n	800505a <HAL_RCC_OscConfig+0x4e6>
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	58024800 	.word	0x58024800
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b05      	cmp	r3, #5
 8005026:	d10c      	bne.n	8005042 <HAL_RCC_OscConfig+0x4ce>
 8005028:	4b83      	ldr	r3, [pc, #524]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	4a82      	ldr	r2, [pc, #520]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800502e:	f043 0304 	orr.w	r3, r3, #4
 8005032:	6713      	str	r3, [r2, #112]	; 0x70
 8005034:	4b80      	ldr	r3, [pc, #512]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	4a7f      	ldr	r2, [pc, #508]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6713      	str	r3, [r2, #112]	; 0x70
 8005040:	e00b      	b.n	800505a <HAL_RCC_OscConfig+0x4e6>
 8005042:	4b7d      	ldr	r3, [pc, #500]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005046:	4a7c      	ldr	r2, [pc, #496]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	6713      	str	r3, [r2, #112]	; 0x70
 800504e:	4b7a      	ldr	r3, [pc, #488]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	4a79      	ldr	r2, [pc, #484]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005054:	f023 0304 	bic.w	r3, r3, #4
 8005058:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d015      	beq.n	800508e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005062:	f7fc fc1f 	bl	80018a4 <HAL_GetTick>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005068:	e00a      	b.n	8005080 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506a:	f7fc fc1b 	bl	80018a4 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	; 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e14b      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005080:	4b6d      	ldr	r3, [pc, #436]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ee      	beq.n	800506a <HAL_RCC_OscConfig+0x4f6>
 800508c:	e014      	b.n	80050b8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508e:	f7fc fc09 	bl	80018a4 <HAL_GetTick>
 8005092:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fc fc05 	bl	80018a4 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e135      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050ac:	4b62      	ldr	r3, [pc, #392]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80050ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ee      	bne.n	8005096 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 812a 	beq.w	8005316 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050c2:	4b5d      	ldr	r3, [pc, #372]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ca:	2b18      	cmp	r3, #24
 80050cc:	f000 80ba 	beq.w	8005244 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	f040 8095 	bne.w	8005204 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b57      	ldr	r3, [pc, #348]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a56      	ldr	r2, [pc, #344]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80050e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e6:	f7fc fbdd 	bl	80018a4 <HAL_GetTick>
 80050ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ee:	f7fc fbd9 	bl	80018a4 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e10b      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005100:	4b4d      	ldr	r3, [pc, #308]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f0      	bne.n	80050ee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800510c:	4b4a      	ldr	r3, [pc, #296]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800510e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005110:	4b4a      	ldr	r3, [pc, #296]	; (800523c <HAL_RCC_OscConfig+0x6c8>)
 8005112:	4013      	ands	r3, r2
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800511c:	0112      	lsls	r2, r2, #4
 800511e:	430a      	orrs	r2, r1
 8005120:	4945      	ldr	r1, [pc, #276]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005122:	4313      	orrs	r3, r2
 8005124:	628b      	str	r3, [r1, #40]	; 0x28
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	3b01      	subs	r3, #1
 800512c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005134:	3b01      	subs	r3, #1
 8005136:	025b      	lsls	r3, r3, #9
 8005138:	b29b      	uxth	r3, r3
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	3b01      	subs	r3, #1
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	3b01      	subs	r3, #1
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005156:	4938      	ldr	r1, [pc, #224]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005158:	4313      	orrs	r3, r2
 800515a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800515c:	4b36      	ldr	r3, [pc, #216]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	4a35      	ldr	r2, [pc, #212]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005168:	4b33      	ldr	r3, [pc, #204]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800516a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516c:	4b34      	ldr	r3, [pc, #208]	; (8005240 <HAL_RCC_OscConfig+0x6cc>)
 800516e:	4013      	ands	r3, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005174:	00d2      	lsls	r2, r2, #3
 8005176:	4930      	ldr	r1, [pc, #192]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005178:	4313      	orrs	r3, r2
 800517a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800517c:	4b2e      	ldr	r3, [pc, #184]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	f023 020c 	bic.w	r2, r3, #12
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	492b      	ldr	r1, [pc, #172]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800518e:	4b2a      	ldr	r3, [pc, #168]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	f023 0202 	bic.w	r2, r3, #2
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	4927      	ldr	r1, [pc, #156]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800519c:	4313      	orrs	r3, r2
 800519e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051a0:	4b25      	ldr	r3, [pc, #148]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4a24      	ldr	r2, [pc, #144]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ac:	4b22      	ldr	r3, [pc, #136]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	4a21      	ldr	r2, [pc, #132]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051b8:	4b1f      	ldr	r3, [pc, #124]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	4a1e      	ldr	r2, [pc, #120]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051c4:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fc fb62 	bl	80018a4 <HAL_GetTick>
 80051e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fc fb5e 	bl	80018a4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e090      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051f6:	4b10      	ldr	r3, [pc, #64]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x670>
 8005202:	e088      	b.n	8005316 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005204:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a0b      	ldr	r2, [pc, #44]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800520a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800520e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fc fb48 	bl	80018a4 <HAL_GetTick>
 8005214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7fc fb44 	bl	80018a4 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e076      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800522a:	4b03      	ldr	r3, [pc, #12]	; (8005238 <HAL_RCC_OscConfig+0x6c4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x6a4>
 8005236:	e06e      	b.n	8005316 <HAL_RCC_OscConfig+0x7a2>
 8005238:	58024400 	.word	0x58024400
 800523c:	fffffc0c 	.word	0xfffffc0c
 8005240:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005244:	4b36      	ldr	r3, [pc, #216]	; (8005320 <HAL_RCC_OscConfig+0x7ac>)
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800524a:	4b35      	ldr	r3, [pc, #212]	; (8005320 <HAL_RCC_OscConfig+0x7ac>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	2b01      	cmp	r3, #1
 8005256:	d031      	beq.n	80052bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f003 0203 	and.w	r2, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005262:	429a      	cmp	r2, r3
 8005264:	d12a      	bne.n	80052bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d122      	bne.n	80052bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005282:	429a      	cmp	r2, r3
 8005284:	d11a      	bne.n	80052bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	0a5b      	lsrs	r3, r3, #9
 800528a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005294:	429a      	cmp	r2, r3
 8005296:	d111      	bne.n	80052bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	0c1b      	lsrs	r3, r3, #16
 800529c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d108      	bne.n	80052bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	0e1b      	lsrs	r3, r3, #24
 80052ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e02b      	b.n	8005318 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052c0:	4b17      	ldr	r3, [pc, #92]	; (8005320 <HAL_RCC_OscConfig+0x7ac>)
 80052c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c4:	08db      	lsrs	r3, r3, #3
 80052c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d01f      	beq.n	8005316 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80052d6:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_RCC_OscConfig+0x7ac>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	4a11      	ldr	r2, [pc, #68]	; (8005320 <HAL_RCC_OscConfig+0x7ac>)
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052e2:	f7fc fadf 	bl	80018a4 <HAL_GetTick>
 80052e6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80052e8:	bf00      	nop
 80052ea:	f7fc fadb 	bl	80018a4 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d0f9      	beq.n	80052ea <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_RCC_OscConfig+0x7ac>)
 80052f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <HAL_RCC_OscConfig+0x7b0>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005302:	00d2      	lsls	r2, r2, #3
 8005304:	4906      	ldr	r1, [pc, #24]	; (8005320 <HAL_RCC_OscConfig+0x7ac>)
 8005306:	4313      	orrs	r3, r2
 8005308:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_RCC_OscConfig+0x7ac>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	4a04      	ldr	r2, [pc, #16]	; (8005320 <HAL_RCC_OscConfig+0x7ac>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3730      	adds	r7, #48	; 0x30
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	58024400 	.word	0x58024400
 8005324:	ffff0007 	.word	0xffff0007

08005328 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e19c      	b.n	8005676 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800533c:	4b8a      	ldr	r3, [pc, #552]	; (8005568 <HAL_RCC_ClockConfig+0x240>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d910      	bls.n	800536c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534a:	4b87      	ldr	r3, [pc, #540]	; (8005568 <HAL_RCC_ClockConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 020f 	bic.w	r2, r3, #15
 8005352:	4985      	ldr	r1, [pc, #532]	; (8005568 <HAL_RCC_ClockConfig+0x240>)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	4313      	orrs	r3, r2
 8005358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b83      	ldr	r3, [pc, #524]	; (8005568 <HAL_RCC_ClockConfig+0x240>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e184      	b.n	8005676 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d010      	beq.n	800539a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	4b7b      	ldr	r3, [pc, #492]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005384:	429a      	cmp	r2, r3
 8005386:	d908      	bls.n	800539a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005388:	4b78      	ldr	r3, [pc, #480]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	4975      	ldr	r1, [pc, #468]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005396:	4313      	orrs	r3, r2
 8005398:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d010      	beq.n	80053c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	4b70      	ldr	r3, [pc, #448]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d908      	bls.n	80053c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053b6:	4b6d      	ldr	r3, [pc, #436]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	496a      	ldr	r1, [pc, #424]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d010      	beq.n	80053f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	4b64      	ldr	r3, [pc, #400]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d908      	bls.n	80053f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053e4:	4b61      	ldr	r3, [pc, #388]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	495e      	ldr	r1, [pc, #376]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	4b59      	ldr	r3, [pc, #356]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800540e:	429a      	cmp	r2, r3
 8005410:	d908      	bls.n	8005424 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005412:	4b56      	ldr	r3, [pc, #344]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	4953      	ldr	r1, [pc, #332]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005420:	4313      	orrs	r3, r2
 8005422:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d010      	beq.n	8005452 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	4b4d      	ldr	r3, [pc, #308]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	429a      	cmp	r2, r3
 800543e:	d908      	bls.n	8005452 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005440:	4b4a      	ldr	r3, [pc, #296]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f023 020f 	bic.w	r2, r3, #15
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4947      	ldr	r1, [pc, #284]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 800544e:	4313      	orrs	r3, r2
 8005450:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d055      	beq.n	800550a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800545e:	4b43      	ldr	r3, [pc, #268]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	4940      	ldr	r1, [pc, #256]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 800546c:	4313      	orrs	r3, r2
 800546e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d107      	bne.n	8005488 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005478:	4b3c      	ldr	r3, [pc, #240]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d121      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e0f6      	b.n	8005676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005490:	4b36      	ldr	r3, [pc, #216]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d115      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0ea      	b.n	8005676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054a8:	4b30      	ldr	r3, [pc, #192]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d109      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0de      	b.n	8005676 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054b8:	4b2c      	ldr	r3, [pc, #176]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0d6      	b.n	8005676 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054c8:	4b28      	ldr	r3, [pc, #160]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f023 0207 	bic.w	r2, r3, #7
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4925      	ldr	r1, [pc, #148]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054da:	f7fc f9e3 	bl	80018a4 <HAL_GetTick>
 80054de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e0:	e00a      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e2:	f7fc f9df 	bl	80018a4 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e0be      	b.n	8005676 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f8:	4b1c      	ldr	r3, [pc, #112]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	429a      	cmp	r2, r3
 8005508:	d1eb      	bne.n	80054e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d010      	beq.n	8005538 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	4b14      	ldr	r3, [pc, #80]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	429a      	cmp	r2, r3
 8005524:	d208      	bcs.n	8005538 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f023 020f 	bic.w	r2, r3, #15
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	490e      	ldr	r1, [pc, #56]	; (800556c <HAL_RCC_ClockConfig+0x244>)
 8005534:	4313      	orrs	r3, r2
 8005536:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCC_ClockConfig+0x240>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d214      	bcs.n	8005570 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005546:	4b08      	ldr	r3, [pc, #32]	; (8005568 <HAL_RCC_ClockConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 020f 	bic.w	r2, r3, #15
 800554e:	4906      	ldr	r1, [pc, #24]	; (8005568 <HAL_RCC_ClockConfig+0x240>)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005556:	4b04      	ldr	r3, [pc, #16]	; (8005568 <HAL_RCC_ClockConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d005      	beq.n	8005570 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e086      	b.n	8005676 <HAL_RCC_ClockConfig+0x34e>
 8005568:	52002000 	.word	0x52002000
 800556c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d010      	beq.n	800559e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	4b3f      	ldr	r3, [pc, #252]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005588:	429a      	cmp	r2, r3
 800558a:	d208      	bcs.n	800559e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800558c:	4b3c      	ldr	r3, [pc, #240]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	4939      	ldr	r1, [pc, #228]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 800559a:	4313      	orrs	r3, r2
 800559c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d010      	beq.n	80055cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	4b34      	ldr	r3, [pc, #208]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d208      	bcs.n	80055cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055ba:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	492e      	ldr	r1, [pc, #184]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	4b28      	ldr	r3, [pc, #160]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d208      	bcs.n	80055fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055e8:	4b25      	ldr	r3, [pc, #148]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	4922      	ldr	r1, [pc, #136]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d010      	beq.n	8005628 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69da      	ldr	r2, [r3, #28]
 800560a:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005612:	429a      	cmp	r2, r3
 8005614:	d208      	bcs.n	8005628 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005616:	4b1a      	ldr	r3, [pc, #104]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4917      	ldr	r1, [pc, #92]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 8005624:	4313      	orrs	r3, r2
 8005626:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005628:	f000 f834 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 800562c:	4602      	mov	r2, r0
 800562e:	4b14      	ldr	r3, [pc, #80]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	4912      	ldr	r1, [pc, #72]	; (8005684 <HAL_RCC_ClockConfig+0x35c>)
 800563a:	5ccb      	ldrb	r3, [r1, r3]
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
 8005644:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005646:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <HAL_RCC_ClockConfig+0x358>)
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <HAL_RCC_ClockConfig+0x35c>)
 8005650:	5cd3      	ldrb	r3, [r2, r3]
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
 800565c:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <HAL_RCC_ClockConfig+0x360>)
 800565e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005660:	4a0a      	ldr	r2, [pc, #40]	; (800568c <HAL_RCC_ClockConfig+0x364>)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <HAL_RCC_ClockConfig+0x368>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7fc f8d0 	bl	8001810 <HAL_InitTick>
 8005670:	4603      	mov	r3, r0
 8005672:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	58024400 	.word	0x58024400
 8005684:	0800aa9c 	.word	0x0800aa9c
 8005688:	24000008 	.word	0x24000008
 800568c:	24000004 	.word	0x24000004
 8005690:	2400000c 	.word	0x2400000c

08005694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800569a:	4bb3      	ldr	r3, [pc, #716]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056a2:	2b18      	cmp	r3, #24
 80056a4:	f200 8155 	bhi.w	8005952 <HAL_RCC_GetSysClockFreq+0x2be>
 80056a8:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	08005715 	.word	0x08005715
 80056b4:	08005953 	.word	0x08005953
 80056b8:	08005953 	.word	0x08005953
 80056bc:	08005953 	.word	0x08005953
 80056c0:	08005953 	.word	0x08005953
 80056c4:	08005953 	.word	0x08005953
 80056c8:	08005953 	.word	0x08005953
 80056cc:	08005953 	.word	0x08005953
 80056d0:	0800573b 	.word	0x0800573b
 80056d4:	08005953 	.word	0x08005953
 80056d8:	08005953 	.word	0x08005953
 80056dc:	08005953 	.word	0x08005953
 80056e0:	08005953 	.word	0x08005953
 80056e4:	08005953 	.word	0x08005953
 80056e8:	08005953 	.word	0x08005953
 80056ec:	08005953 	.word	0x08005953
 80056f0:	08005741 	.word	0x08005741
 80056f4:	08005953 	.word	0x08005953
 80056f8:	08005953 	.word	0x08005953
 80056fc:	08005953 	.word	0x08005953
 8005700:	08005953 	.word	0x08005953
 8005704:	08005953 	.word	0x08005953
 8005708:	08005953 	.word	0x08005953
 800570c:	08005953 	.word	0x08005953
 8005710:	08005747 	.word	0x08005747
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005714:	4b94      	ldr	r3, [pc, #592]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005720:	4b91      	ldr	r3, [pc, #580]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	08db      	lsrs	r3, r3, #3
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	4a90      	ldr	r2, [pc, #576]	; (800596c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005732:	e111      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005734:	4b8d      	ldr	r3, [pc, #564]	; (800596c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005736:	61bb      	str	r3, [r7, #24]
      break;
 8005738:	e10e      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800573a:	4b8d      	ldr	r3, [pc, #564]	; (8005970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800573c:	61bb      	str	r3, [r7, #24]
      break;
 800573e:	e10b      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005740:	4b8c      	ldr	r3, [pc, #560]	; (8005974 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005742:	61bb      	str	r3, [r7, #24]
      break;
 8005744:	e108      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005746:	4b88      	ldr	r3, [pc, #544]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005750:	4b85      	ldr	r3, [pc, #532]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800575a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800575c:	4b82      	ldr	r3, [pc, #520]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005766:	4b80      	ldr	r3, [pc, #512]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576a:	08db      	lsrs	r3, r3, #3
 800576c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80e1 	beq.w	800594c <HAL_RCC_GetSysClockFreq+0x2b8>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b02      	cmp	r3, #2
 800578e:	f000 8083 	beq.w	8005898 <HAL_RCC_GetSysClockFreq+0x204>
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b02      	cmp	r3, #2
 8005796:	f200 80a1 	bhi.w	80058dc <HAL_RCC_GetSysClockFreq+0x248>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x114>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d056      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057a6:	e099      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057a8:	4b6f      	ldr	r3, [pc, #444]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d02d      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057b4:	4b6c      	ldr	r3, [pc, #432]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	08db      	lsrs	r3, r3, #3
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	4a6b      	ldr	r2, [pc, #428]	; (800596c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
 80057c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057de:	4b62      	ldr	r3, [pc, #392]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80057f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800580e:	e087      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800597c <HAL_RCC_GetSysClockFreq+0x2e8>
 800581e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005822:	4b51      	ldr	r3, [pc, #324]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005832:	ed97 6a02 	vldr	s12, [r7, #8]
 8005836:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800583a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800583e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005852:	e065      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005980 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005866:	4b40      	ldr	r3, [pc, #256]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005876:	ed97 6a02 	vldr	s12, [r7, #8]
 800587a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 800587e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800588a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005892:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005896:	e043      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005984 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058aa:	4b2f      	ldr	r3, [pc, #188]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80058be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058da:	e021      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005980 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ee:	4b1e      	ldr	r3, [pc, #120]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005902:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005978 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800590a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800590e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800591e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005920:	4b11      	ldr	r3, [pc, #68]	; (8005968 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	0a5b      	lsrs	r3, r3, #9
 8005926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800592a:	3301      	adds	r3, #1
 800592c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	ee07 3a90 	vmov	s15, r3
 8005934:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005938:	edd7 6a07 	vldr	s13, [r7, #28]
 800593c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005944:	ee17 3a90 	vmov	r3, s15
 8005948:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800594a:	e005      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
      break;
 8005950:	e002      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005952:	4b07      	ldr	r3, [pc, #28]	; (8005970 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005954:	61bb      	str	r3, [r7, #24]
      break;
 8005956:	bf00      	nop
  }

  return sysclockfreq;
 8005958:	69bb      	ldr	r3, [r7, #24]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3724      	adds	r7, #36	; 0x24
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	58024400 	.word	0x58024400
 800596c:	03d09000 	.word	0x03d09000
 8005970:	003d0900 	.word	0x003d0900
 8005974:	017d7840 	.word	0x017d7840
 8005978:	46000000 	.word	0x46000000
 800597c:	4c742400 	.word	0x4c742400
 8005980:	4a742400 	.word	0x4a742400
 8005984:	4bbebc20 	.word	0x4bbebc20

08005988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800598e:	f7ff fe81 	bl	8005694 <HAL_RCC_GetSysClockFreq>
 8005992:	4602      	mov	r2, r0
 8005994:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	490f      	ldr	r1, [pc, #60]	; (80059dc <HAL_RCC_GetHCLKFreq+0x54>)
 80059a0:	5ccb      	ldrb	r3, [r1, r3]
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	fa22 f303 	lsr.w	r3, r2, r3
 80059aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	4a09      	ldr	r2, [pc, #36]	; (80059dc <HAL_RCC_GetHCLKFreq+0x54>)
 80059b6:	5cd3      	ldrb	r3, [r2, r3]
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	fa22 f303 	lsr.w	r3, r2, r3
 80059c2:	4a07      	ldr	r2, [pc, #28]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80059c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059c6:	4a07      	ldr	r2, [pc, #28]	; (80059e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80059cc:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	58024400 	.word	0x58024400
 80059dc:	0800aa9c 	.word	0x0800aa9c
 80059e0:	24000008 	.word	0x24000008
 80059e4:	24000004 	.word	0x24000004

080059e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80059ec:	f7ff ffcc 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 80059f0:	4602      	mov	r2, r0
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	4904      	ldr	r1, [pc, #16]	; (8005a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059fe:	5ccb      	ldrb	r3, [r1, r3]
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	58024400 	.word	0x58024400
 8005a10:	0800aa9c 	.word	0x0800aa9c

08005a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005a18:	f7ff ffb6 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	0a1b      	lsrs	r3, r3, #8
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	4904      	ldr	r1, [pc, #16]	; (8005a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a2a:	5ccb      	ldrb	r3, [r1, r3]
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	58024400 	.word	0x58024400
 8005a3c:	0800aa9c 	.word	0x0800aa9c

08005a40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a44:	b0c6      	sub	sp, #280	; 0x118
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005a64:	2500      	movs	r5, #0
 8005a66:	ea54 0305 	orrs.w	r3, r4, r5
 8005a6a:	d049      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a76:	d02f      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a7c:	d828      	bhi.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a82:	d01a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a88:	d822      	bhi.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a92:	d007      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a94:	e01c      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a96:	4bab      	ldr	r3, [pc, #684]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	4aaa      	ldr	r2, [pc, #680]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005aa2:	e01a      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	2102      	movs	r1, #2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fc25 	bl	80072fc <RCCEx_PLL2_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ab8:	e00f      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abe:	3328      	adds	r3, #40	; 0x28
 8005ac0:	2102      	movs	r1, #2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 fccc 	bl	8007460 <RCCEx_PLL3_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ace:	e004      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ad6:	e000      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ada:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ae2:	4b98      	ldr	r3, [pc, #608]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af0:	4a94      	ldr	r2, [pc, #592]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005af2:	430b      	orrs	r3, r1
 8005af4:	6513      	str	r3, [r2, #80]	; 0x50
 8005af6:	e003      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005afc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005b0c:	f04f 0900 	mov.w	r9, #0
 8005b10:	ea58 0309 	orrs.w	r3, r8, r9
 8005b14:	d047      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d82a      	bhi.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b20:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b3d 	.word	0x08005b3d
 8005b2c:	08005b4b 	.word	0x08005b4b
 8005b30:	08005b61 	.word	0x08005b61
 8005b34:	08005b7f 	.word	0x08005b7f
 8005b38:	08005b7f 	.word	0x08005b7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b3c:	4b81      	ldr	r3, [pc, #516]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a80      	ldr	r2, [pc, #512]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b48:	e01a      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4e:	3308      	adds	r3, #8
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 fbd2 	bl	80072fc <RCCEx_PLL2_Config>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b5e:	e00f      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b64:	3328      	adds	r3, #40	; 0x28
 8005b66:	2100      	movs	r1, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 fc79 	bl	8007460 <RCCEx_PLL3_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b74:	e004      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b7c:	e000      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b88:	4b6e      	ldr	r3, [pc, #440]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8c:	f023 0107 	bic.w	r1, r3, #7
 8005b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b96:	4a6b      	ldr	r2, [pc, #428]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6513      	str	r3, [r2, #80]	; 0x50
 8005b9c:	e003      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ba2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005bb2:	f04f 0b00 	mov.w	fp, #0
 8005bb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005bba:	d05b      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005bc4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005bc8:	d03b      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005bca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005bce:	d834      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bd4:	d037      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005bd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bda:	d82e      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005bdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005be0:	d033      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005be2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005be6:	d828      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bec:	d01a      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bf2:	d822      	bhi.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d003      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bfc:	d007      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005bfe:	e01c      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c00:	4b50      	ldr	r3, [pc, #320]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	4a4f      	ldr	r2, [pc, #316]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c0c:	e01e      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c12:	3308      	adds	r3, #8
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f001 fb70 	bl	80072fc <RCCEx_PLL2_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c22:	e013      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c28:	3328      	adds	r3, #40	; 0x28
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 fc17 	bl	8007460 <RCCEx_PLL3_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c38:	e008      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c40:	e004      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c54:	4b3b      	ldr	r3, [pc, #236]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c58:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c64:	4a37      	ldr	r2, [pc, #220]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c66:	430b      	orrs	r3, r1
 8005c68:	6593      	str	r3, [r2, #88]	; 0x58
 8005c6a:	e003      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c84:	2300      	movs	r3, #0
 8005c86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d05d      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c9c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005ca0:	d03b      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005ca2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005ca6:	d834      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cac:	d037      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cb2:	d82e      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cb8:	d033      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005cba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005cbe:	d828      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cc4:	d01a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cca:	d822      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cd4:	d007      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005cd6:	e01c      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a19      	ldr	r2, [pc, #100]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce4:	e01e      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cea:	3308      	adds	r3, #8
 8005cec:	2100      	movs	r1, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fb04 	bl	80072fc <RCCEx_PLL2_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cfa:	e013      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d00:	3328      	adds	r3, #40	; 0x28
 8005d02:	2100      	movs	r1, #0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f001 fbab 	bl	8007460 <RCCEx_PLL3_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d10:	e008      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d18:	e004      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d1a:	bf00      	nop
 8005d1c:	e002      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10d      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d3c:	4a01      	ldr	r2, [pc, #4]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	6593      	str	r3, [r2, #88]	; 0x58
 8005d42:	e005      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005d44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d66:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	d03a      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d76:	2b30      	cmp	r3, #48	; 0x30
 8005d78:	d01f      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005d7a:	2b30      	cmp	r3, #48	; 0x30
 8005d7c:	d819      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d00c      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d815      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d019      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d8a:	2b10      	cmp	r3, #16
 8005d8c:	d111      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d8e:	4baa      	ldr	r3, [pc, #680]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	4aa9      	ldr	r2, [pc, #676]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005d9a:	e011      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da0:	3308      	adds	r3, #8
 8005da2:	2102      	movs	r1, #2
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 faa9 	bl	80072fc <RCCEx_PLL2_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005db0:	e006      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005db8:	e002      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005dba:	bf00      	nop
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005dc8:	4b9b      	ldr	r3, [pc, #620]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dcc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd6:	4a98      	ldr	r2, [pc, #608]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ddc:	e003      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005de2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005df6:	2300      	movs	r3, #0
 8005df8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dfc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005e00:	460b      	mov	r3, r1
 8005e02:	4313      	orrs	r3, r2
 8005e04:	d051      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e10:	d035      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005e12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e16:	d82e      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e1c:	d031      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005e1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e22:	d828      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e28:	d01a      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2e:	d822      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e38:	d007      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005e3a:	e01c      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3c:	4b7e      	ldr	r3, [pc, #504]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	4a7d      	ldr	r2, [pc, #500]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e48:	e01c      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4e:	3308      	adds	r3, #8
 8005e50:	2100      	movs	r1, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fa52 	bl	80072fc <RCCEx_PLL2_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e5e:	e011      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e64:	3328      	adds	r3, #40	; 0x28
 8005e66:	2100      	movs	r1, #0
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 faf9 	bl	8007460 <RCCEx_PLL3_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e74:	e006      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e7c:	e002      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e8c:	4b6a      	ldr	r3, [pc, #424]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9a:	4a67      	ldr	r2, [pc, #412]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6513      	str	r3, [r2, #80]	; 0x50
 8005ea0:	e003      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ea6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005eb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ec0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	d053      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed4:	d033      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eda:	d82c      	bhi.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005edc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ee0:	d02f      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ee6:	d826      	bhi.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ee8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005eec:	d02b      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005eee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ef2:	d820      	bhi.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef8:	d012      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005efe:	d81a      	bhi.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d022      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f08:	d115      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0e:	3308      	adds	r3, #8
 8005f10:	2101      	movs	r1, #1
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f9f2 	bl	80072fc <RCCEx_PLL2_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f1e:	e015      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f24:	3328      	adds	r3, #40	; 0x28
 8005f26:	2101      	movs	r1, #1
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 fa99 	bl	8007460 <RCCEx_PLL3_Config>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f34:	e00a      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f3c:	e006      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e004      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f54:	4b38      	ldr	r3, [pc, #224]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f58:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f62:	4a35      	ldr	r2, [pc, #212]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f64:	430b      	orrs	r3, r1
 8005f66:	6513      	str	r3, [r2, #80]	; 0x50
 8005f68:	e003      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f82:	2300      	movs	r3, #0
 8005f84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f88:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d058      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f9e:	d033      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa4:	d82c      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005faa:	d02f      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d826      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fb6:	d02b      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005fb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fbc:	d820      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc2:	d012      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fc8:	d81a      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d022      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fd2:	d115      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd8:	3308      	adds	r3, #8
 8005fda:	2101      	movs	r1, #1
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 f98d 	bl	80072fc <RCCEx_PLL2_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fe8:	e015      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fee:	3328      	adds	r3, #40	; 0x28
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fa34 	bl	8007460 <RCCEx_PLL3_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ffe:	e00a      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006006:	e006      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006008:	bf00      	nop
 800600a:	e004      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006016:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10e      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800602e:	4a02      	ldr	r2, [pc, #8]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006030:	430b      	orrs	r3, r1
 8006032:	6593      	str	r3, [r2, #88]	; 0x58
 8006034:	e006      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006036:	bf00      	nop
 8006038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006040:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800605a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d037      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800606e:	d00e      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006074:	d816      	bhi.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d018      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800607a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607e:	d111      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006080:	4bc4      	ldr	r3, [pc, #784]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	4ac3      	ldr	r2, [pc, #780]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800608c:	e00f      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006092:	3308      	adds	r3, #8
 8006094:	2101      	movs	r1, #1
 8006096:	4618      	mov	r0, r3
 8006098:	f001 f930 	bl	80072fc <RCCEx_PLL2_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060a2:	e004      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060aa:	e000      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80060ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060b6:	4bb7      	ldr	r3, [pc, #732]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80060be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c4:	4ab3      	ldr	r2, [pc, #716]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060c6:	430b      	orrs	r3, r1
 80060c8:	6513      	str	r3, [r2, #80]	; 0x50
 80060ca:	e003      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80060e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060e4:	2300      	movs	r3, #0
 80060e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80060ee:	460b      	mov	r3, r1
 80060f0:	4313      	orrs	r3, r2
 80060f2:	d039      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d81c      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006141 	.word	0x08006141
 8006108:	08006115 	.word	0x08006115
 800610c:	08006123 	.word	0x08006123
 8006110:	08006141 	.word	0x08006141
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006114:	4b9f      	ldr	r3, [pc, #636]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	4a9e      	ldr	r2, [pc, #632]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800611a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800611e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006120:	e00f      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006126:	3308      	adds	r3, #8
 8006128:	2102      	movs	r1, #2
 800612a:	4618      	mov	r0, r3
 800612c:	f001 f8e6 	bl	80072fc <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006136:	e004      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006142:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800614a:	4b92      	ldr	r3, [pc, #584]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800614c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614e:	f023 0103 	bic.w	r1, r3, #3
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006158:	4a8e      	ldr	r2, [pc, #568]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800615a:	430b      	orrs	r3, r1
 800615c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800615e:	e003      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006164:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006178:	2300      	movs	r3, #0
 800617a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800617e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	f000 8099 	beq.w	80062bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800618a:	4b83      	ldr	r3, [pc, #524]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a82      	ldr	r2, [pc, #520]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006194:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006196:	f7fb fb85 	bl	80018a4 <HAL_GetTick>
 800619a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800619e:	e00b      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a0:	f7fb fb80 	bl	80018a4 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b64      	cmp	r3, #100	; 0x64
 80061ae:	d903      	bls.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061b6:	e005      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b8:	4b77      	ldr	r3, [pc, #476]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0ed      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80061c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d173      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061cc:	4b71      	ldr	r3, [pc, #452]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061d8:	4053      	eors	r3, r2
 80061da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d015      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061e2:	4b6c      	ldr	r3, [pc, #432]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ee:	4b69      	ldr	r3, [pc, #420]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	4a68      	ldr	r2, [pc, #416]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061fa:	4b66      	ldr	r3, [pc, #408]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	4a65      	ldr	r2, [pc, #404]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006204:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006206:	4a63      	ldr	r2, [pc, #396]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006212:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621a:	d118      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fb fb42 	bl	80018a4 <HAL_GetTick>
 8006220:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006224:	e00d      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006226:	f7fb fb3d 	bl	80018a4 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006230:	1ad2      	subs	r2, r2, r3
 8006232:	f241 3388 	movw	r3, #5000	; 0x1388
 8006236:	429a      	cmp	r2, r3
 8006238:	d903      	bls.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006240:	e005      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006242:	4b54      	ldr	r3, [pc, #336]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0eb      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800624e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006252:	2b00      	cmp	r3, #0
 8006254:	d129      	bne.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800625e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006266:	d10e      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006268:	4b4a      	ldr	r3, [pc, #296]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006274:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006278:	091a      	lsrs	r2, r3, #4
 800627a:	4b48      	ldr	r3, [pc, #288]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800627c:	4013      	ands	r3, r2
 800627e:	4a45      	ldr	r2, [pc, #276]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006280:	430b      	orrs	r3, r1
 8006282:	6113      	str	r3, [r2, #16]
 8006284:	e005      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006286:	4b43      	ldr	r3, [pc, #268]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	4a42      	ldr	r2, [pc, #264]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800628c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006290:	6113      	str	r3, [r2, #16]
 8006292:	4b40      	ldr	r3, [pc, #256]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006294:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800629e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a2:	4a3c      	ldr	r2, [pc, #240]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a4:	430b      	orrs	r3, r1
 80062a6:	6713      	str	r3, [r2, #112]	; 0x70
 80062a8:	e008      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80062b2:	e003      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	f002 0301 	and.w	r3, r2, #1
 80062c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062cc:	2300      	movs	r3, #0
 80062ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	f000 808f 	beq.w	80063fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062e4:	2b28      	cmp	r3, #40	; 0x28
 80062e6:	d871      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80062e8:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80062ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ee:	bf00      	nop
 80062f0:	080063d5 	.word	0x080063d5
 80062f4:	080063cd 	.word	0x080063cd
 80062f8:	080063cd 	.word	0x080063cd
 80062fc:	080063cd 	.word	0x080063cd
 8006300:	080063cd 	.word	0x080063cd
 8006304:	080063cd 	.word	0x080063cd
 8006308:	080063cd 	.word	0x080063cd
 800630c:	080063cd 	.word	0x080063cd
 8006310:	080063a1 	.word	0x080063a1
 8006314:	080063cd 	.word	0x080063cd
 8006318:	080063cd 	.word	0x080063cd
 800631c:	080063cd 	.word	0x080063cd
 8006320:	080063cd 	.word	0x080063cd
 8006324:	080063cd 	.word	0x080063cd
 8006328:	080063cd 	.word	0x080063cd
 800632c:	080063cd 	.word	0x080063cd
 8006330:	080063b7 	.word	0x080063b7
 8006334:	080063cd 	.word	0x080063cd
 8006338:	080063cd 	.word	0x080063cd
 800633c:	080063cd 	.word	0x080063cd
 8006340:	080063cd 	.word	0x080063cd
 8006344:	080063cd 	.word	0x080063cd
 8006348:	080063cd 	.word	0x080063cd
 800634c:	080063cd 	.word	0x080063cd
 8006350:	080063d5 	.word	0x080063d5
 8006354:	080063cd 	.word	0x080063cd
 8006358:	080063cd 	.word	0x080063cd
 800635c:	080063cd 	.word	0x080063cd
 8006360:	080063cd 	.word	0x080063cd
 8006364:	080063cd 	.word	0x080063cd
 8006368:	080063cd 	.word	0x080063cd
 800636c:	080063cd 	.word	0x080063cd
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063cd 	.word	0x080063cd
 8006378:	080063cd 	.word	0x080063cd
 800637c:	080063cd 	.word	0x080063cd
 8006380:	080063cd 	.word	0x080063cd
 8006384:	080063cd 	.word	0x080063cd
 8006388:	080063cd 	.word	0x080063cd
 800638c:	080063cd 	.word	0x080063cd
 8006390:	080063d5 	.word	0x080063d5
 8006394:	58024400 	.word	0x58024400
 8006398:	58024800 	.word	0x58024800
 800639c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a4:	3308      	adds	r3, #8
 80063a6:	2101      	movs	r1, #1
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 ffa7 	bl	80072fc <RCCEx_PLL2_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063b4:	e00f      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ba:	3328      	adds	r3, #40	; 0x28
 80063bc:	2101      	movs	r1, #1
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 f84e 	bl	8007460 <RCCEx_PLL3_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063ca:	e004      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80063d2:	e000      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80063d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063de:	4bbf      	ldr	r3, [pc, #764]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80063e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ec:	4abb      	ldr	r2, [pc, #748]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80063ee:	430b      	orrs	r3, r1
 80063f0:	6553      	str	r3, [r2, #84]	; 0x54
 80063f2:	e003      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f002 0302 	and.w	r3, r2, #2
 8006408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006412:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d041      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006422:	2b05      	cmp	r3, #5
 8006424:	d824      	bhi.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006426:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006479 	.word	0x08006479
 8006430:	08006445 	.word	0x08006445
 8006434:	0800645b 	.word	0x0800645b
 8006438:	08006479 	.word	0x08006479
 800643c:	08006479 	.word	0x08006479
 8006440:	08006479 	.word	0x08006479
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006448:	3308      	adds	r3, #8
 800644a:	2101      	movs	r1, #1
 800644c:	4618      	mov	r0, r3
 800644e:	f000 ff55 	bl	80072fc <RCCEx_PLL2_Config>
 8006452:	4603      	mov	r3, r0
 8006454:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006458:	e00f      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645e:	3328      	adds	r3, #40	; 0x28
 8006460:	2101      	movs	r1, #1
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fffc 	bl	8007460 <RCCEx_PLL3_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800646e:	e004      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006476:	e000      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800647a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006482:	4b96      	ldr	r3, [pc, #600]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006486:	f023 0107 	bic.w	r1, r3, #7
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006490:	4a92      	ldr	r2, [pc, #584]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006492:	430b      	orrs	r3, r1
 8006494:	6553      	str	r3, [r2, #84]	; 0x54
 8006496:	e003      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006498:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800649c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f002 0304 	and.w	r3, r2, #4
 80064ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064b0:	2300      	movs	r3, #0
 80064b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064ba:	460b      	mov	r3, r1
 80064bc:	4313      	orrs	r3, r2
 80064be:	d044      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d825      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80064cc:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80064ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d2:	bf00      	nop
 80064d4:	08006521 	.word	0x08006521
 80064d8:	080064ed 	.word	0x080064ed
 80064dc:	08006503 	.word	0x08006503
 80064e0:	08006521 	.word	0x08006521
 80064e4:	08006521 	.word	0x08006521
 80064e8:	08006521 	.word	0x08006521
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f0:	3308      	adds	r3, #8
 80064f2:	2101      	movs	r1, #1
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 ff01 	bl	80072fc <RCCEx_PLL2_Config>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006500:	e00f      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006506:	3328      	adds	r3, #40	; 0x28
 8006508:	2101      	movs	r1, #1
 800650a:	4618      	mov	r0, r3
 800650c:	f000 ffa8 	bl	8007460 <RCCEx_PLL3_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006516:	e004      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800651e:	e000      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006522:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10b      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800652a:	4b6c      	ldr	r3, [pc, #432]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800652c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652e:	f023 0107 	bic.w	r1, r3, #7
 8006532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	4a68      	ldr	r2, [pc, #416]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800653c:	430b      	orrs	r3, r1
 800653e:	6593      	str	r3, [r2, #88]	; 0x58
 8006540:	e003      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006542:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006546:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f002 0320 	and.w	r3, r2, #32
 8006556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800655a:	2300      	movs	r3, #0
 800655c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006560:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006564:	460b      	mov	r3, r1
 8006566:	4313      	orrs	r3, r2
 8006568:	d055      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800656e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006576:	d033      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800657c:	d82c      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800657e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006582:	d02f      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d826      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800658a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800658e:	d02b      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006590:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006594:	d820      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800659a:	d012      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800659c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065a0:	d81a      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d022      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80065a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065aa:	d115      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b0:	3308      	adds	r3, #8
 80065b2:	2100      	movs	r1, #0
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fea1 	bl	80072fc <RCCEx_PLL2_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065c0:	e015      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c6:	3328      	adds	r3, #40	; 0x28
 80065c8:	2102      	movs	r1, #2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 ff48 	bl	8007460 <RCCEx_PLL3_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065d6:	e00a      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065de:	e006      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80065e0:	bf00      	nop
 80065e2:	e004      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80065e4:	bf00      	nop
 80065e6:	e002      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80065e8:	bf00      	nop
 80065ea:	e000      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80065ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10b      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f6:	4b39      	ldr	r3, [pc, #228]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006606:	4a35      	ldr	r2, [pc, #212]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006608:	430b      	orrs	r3, r1
 800660a:	6553      	str	r3, [r2, #84]	; 0x54
 800660c:	e003      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006612:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006622:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006626:	2300      	movs	r3, #0
 8006628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800662c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006630:	460b      	mov	r3, r1
 8006632:	4313      	orrs	r3, r2
 8006634:	d058      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800663e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006642:	d033      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006644:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006648:	d82c      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	d02f      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006654:	d826      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006656:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800665a:	d02b      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800665c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006660:	d820      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006666:	d012      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666c:	d81a      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d022      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006676:	d115      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667c:	3308      	adds	r3, #8
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fe3b 	bl	80072fc <RCCEx_PLL2_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800668c:	e015      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800668e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006692:	3328      	adds	r3, #40	; 0x28
 8006694:	2102      	movs	r1, #2
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fee2 	bl	8007460 <RCCEx_PLL3_Config>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066a2:	e00a      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066aa:	e006      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066ac:	bf00      	nop
 80066ae:	e004      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066b0:	bf00      	nop
 80066b2:	e002      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066b4:	bf00      	nop
 80066b6:	e000      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80066b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10e      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066c2:	4b06      	ldr	r3, [pc, #24]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066d2:	4a02      	ldr	r2, [pc, #8]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066d4:	430b      	orrs	r3, r1
 80066d6:	6593      	str	r3, [r2, #88]	; 0x58
 80066d8:	e006      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80066da:	bf00      	nop
 80066dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80066f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066f8:	2300      	movs	r3, #0
 80066fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006702:	460b      	mov	r3, r1
 8006704:	4313      	orrs	r3, r2
 8006706:	d055      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006710:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006714:	d033      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006716:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800671a:	d82c      	bhi.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800671c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006720:	d02f      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006726:	d826      	bhi.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006728:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800672c:	d02b      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800672e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006732:	d820      	bhi.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006738:	d012      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800673a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800673e:	d81a      	bhi.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d022      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006748:	d115      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674e:	3308      	adds	r3, #8
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fdd2 	bl	80072fc <RCCEx_PLL2_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800675e:	e015      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006764:	3328      	adds	r3, #40	; 0x28
 8006766:	2102      	movs	r1, #2
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fe79 	bl	8007460 <RCCEx_PLL3_Config>
 800676e:	4603      	mov	r3, r0
 8006770:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006774:	e00a      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800677c:	e006      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800677e:	bf00      	nop
 8006780:	e004      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006782:	bf00      	nop
 8006784:	e002      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006786:	bf00      	nop
 8006788:	e000      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800678a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10b      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006794:	4ba0      	ldr	r3, [pc, #640]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006798:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067a4:	4a9c      	ldr	r2, [pc, #624]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067a6:	430b      	orrs	r3, r1
 80067a8:	6593      	str	r3, [r2, #88]	; 0x58
 80067aa:	e003      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f002 0308 	and.w	r3, r2, #8
 80067c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067c4:	2300      	movs	r3, #0
 80067c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80067ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80067ce:	460b      	mov	r3, r1
 80067d0:	4313      	orrs	r3, r2
 80067d2:	d01e      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e0:	d10c      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e6:	3328      	adds	r3, #40	; 0x28
 80067e8:	2102      	movs	r1, #2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fe38 	bl	8007460 <RCCEx_PLL3_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80067fc:	4b86      	ldr	r3, [pc, #536]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006800:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800680c:	4a82      	ldr	r2, [pc, #520]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800680e:	430b      	orrs	r3, r1
 8006810:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	f002 0310 	and.w	r3, r2, #16
 800681e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006822:	2300      	movs	r3, #0
 8006824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006828:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800682c:	460b      	mov	r3, r1
 800682e:	4313      	orrs	r3, r2
 8006830:	d01e      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800683a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683e:	d10c      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006844:	3328      	adds	r3, #40	; 0x28
 8006846:	2102      	movs	r1, #2
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fe09 	bl	8007460 <RCCEx_PLL3_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800685a:	4b6f      	ldr	r3, [pc, #444]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800686a:	4a6b      	ldr	r2, [pc, #428]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800686c:	430b      	orrs	r3, r1
 800686e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800687c:	67bb      	str	r3, [r7, #120]	; 0x78
 800687e:	2300      	movs	r3, #0
 8006880:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006882:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006886:	460b      	mov	r3, r1
 8006888:	4313      	orrs	r3, r2
 800688a:	d03e      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006890:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006898:	d022      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800689a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800689e:	d81b      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a8:	d00b      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80068aa:	e015      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b0:	3308      	adds	r3, #8
 80068b2:	2100      	movs	r1, #0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fd21 	bl	80072fc <RCCEx_PLL2_Config>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068c0:	e00f      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c6:	3328      	adds	r3, #40	; 0x28
 80068c8:	2102      	movs	r1, #2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fdc8 	bl	8007460 <RCCEx_PLL3_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068d6:	e004      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80068de:	e000      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80068e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068ea:	4b4b      	ldr	r3, [pc, #300]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80068f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068fa:	4a47      	ldr	r2, [pc, #284]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068fc:	430b      	orrs	r3, r1
 80068fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006900:	e003      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006902:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006906:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006916:	673b      	str	r3, [r7, #112]	; 0x70
 8006918:	2300      	movs	r3, #0
 800691a:	677b      	str	r3, [r7, #116]	; 0x74
 800691c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006920:	460b      	mov	r3, r1
 8006922:	4313      	orrs	r3, r2
 8006924:	d03b      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800692e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006932:	d01f      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006934:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006938:	d818      	bhi.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800693a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693e:	d003      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006944:	d007      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006946:	e011      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006948:	4b33      	ldr	r3, [pc, #204]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	4a32      	ldr	r2, [pc, #200]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800694e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006954:	e00f      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695a:	3328      	adds	r3, #40	; 0x28
 800695c:	2101      	movs	r1, #1
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fd7e 	bl	8007460 <RCCEx_PLL3_Config>
 8006964:	4603      	mov	r3, r0
 8006966:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800696a:	e004      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006972:	e000      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006976:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10b      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800697e:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006982:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800698e:	4a22      	ldr	r2, [pc, #136]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006990:	430b      	orrs	r3, r1
 8006992:	6553      	str	r3, [r2, #84]	; 0x54
 8006994:	e003      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006996:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800699a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80069aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80069ac:	2300      	movs	r3, #0
 80069ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80069b4:	460b      	mov	r3, r1
 80069b6:	4313      	orrs	r3, r2
 80069b8:	d034      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80069c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c8:	d007      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80069ca:	e011      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069cc:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	4a11      	ldr	r2, [pc, #68]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069d8:	e00e      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069de:	3308      	adds	r3, #8
 80069e0:	2102      	movs	r1, #2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fc8a 	bl	80072fc <RCCEx_PLL2_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069ee:	e003      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10d      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0e:	4a02      	ldr	r2, [pc, #8]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a10:	430b      	orrs	r3, r1
 8006a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a14:	e006      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006a16:	bf00      	nop
 8006a18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006a30:	663b      	str	r3, [r7, #96]	; 0x60
 8006a32:	2300      	movs	r3, #0
 8006a34:	667b      	str	r3, [r7, #100]	; 0x64
 8006a36:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	d00c      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a44:	3328      	adds	r3, #40	; 0x28
 8006a46:	2102      	movs	r1, #2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fd09 	bl	8007460 <RCCEx_PLL3_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a68:	2300      	movs	r3, #0
 8006a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a6c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006a70:	460b      	mov	r3, r1
 8006a72:	4313      	orrs	r3, r2
 8006a74:	d036      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a80:	d018      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a86:	d811      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8c:	d014      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a92:	d80b      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d011      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9c:	d106      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9e:	4bb7      	ldr	r3, [pc, #732]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	4ab6      	ldr	r2, [pc, #728]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006aaa:	e008      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ab2:	e004      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ab4:	bf00      	nop
 8006ab6:	e002      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006ab8:	bf00      	nop
 8006aba:	e000      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006abe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ac6:	4bad      	ldr	r3, [pc, #692]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ad4:	4aa9      	ldr	r2, [pc, #676]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	6553      	str	r3, [r2, #84]	; 0x54
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006adc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ae0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006af0:	653b      	str	r3, [r7, #80]	; 0x50
 8006af2:	2300      	movs	r3, #0
 8006af4:	657b      	str	r3, [r7, #84]	; 0x54
 8006af6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006afa:	460b      	mov	r3, r1
 8006afc:	4313      	orrs	r3, r2
 8006afe:	d009      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b00:	4b9e      	ldr	r3, [pc, #632]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	4a9b      	ldr	r2, [pc, #620]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b10:	430b      	orrs	r3, r1
 8006b12:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b22:	2300      	movs	r3, #0
 8006b24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b26:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	d009      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b30:	4b92      	ldr	r3, [pc, #584]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b34:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b3e:	4a8f      	ldr	r2, [pc, #572]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b40:	430b      	orrs	r3, r1
 8006b42:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006b50:	643b      	str	r3, [r7, #64]	; 0x40
 8006b52:	2300      	movs	r3, #0
 8006b54:	647b      	str	r3, [r7, #68]	; 0x44
 8006b56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	d00e      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b60:	4b86      	ldr	r3, [pc, #536]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	4a85      	ldr	r2, [pc, #532]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b6a:	6113      	str	r3, [r2, #16]
 8006b6c:	4b83      	ldr	r3, [pc, #524]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b6e:	6919      	ldr	r1, [r3, #16]
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b78:	4a80      	ldr	r2, [pc, #512]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006b94:	460b      	mov	r3, r1
 8006b96:	4313      	orrs	r3, r2
 8006b98:	d009      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b9a:	4b78      	ldr	r3, [pc, #480]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	4a74      	ldr	r2, [pc, #464]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006baa:	430b      	orrs	r3, r1
 8006bac:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006bba:	633b      	str	r3, [r7, #48]	; 0x30
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	d00a      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bca:	4b6c      	ldr	r3, [pc, #432]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bda:	4a68      	ldr	r2, [pc, #416]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	2100      	movs	r1, #0
 8006bea:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	d011      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c00:	3308      	adds	r3, #8
 8006c02:	2100      	movs	r1, #0
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fb79 	bl	80072fc <RCCEx_PLL2_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006c10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	6239      	str	r1, [r7, #32]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
 8006c32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c36:	460b      	mov	r3, r1
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	d011      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c40:	3308      	adds	r3, #8
 8006c42:	2101      	movs	r1, #1
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fb59 	bl	80072fc <RCCEx_PLL2_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006c50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	2100      	movs	r1, #0
 8006c6a:	61b9      	str	r1, [r7, #24]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c76:	460b      	mov	r3, r1
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	d011      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c80:	3308      	adds	r3, #8
 8006c82:	2102      	movs	r1, #2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fb39 	bl	80072fc <RCCEx_PLL2_Config>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006c90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	6139      	str	r1, [r7, #16]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	d011      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc0:	3328      	adds	r3, #40	; 0x28
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fbcb 	bl	8007460 <RCCEx_PLL3_Config>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	f003 0310 	and.w	r3, r3, #16
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	d011      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d00:	3328      	adds	r3, #40	; 0x28
 8006d02:	2101      	movs	r1, #1
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fbab 	bl	8007460 <RCCEx_PLL3_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	2100      	movs	r1, #0
 8006d2a:	6039      	str	r1, [r7, #0]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	607b      	str	r3, [r7, #4]
 8006d32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d36:	460b      	mov	r3, r1
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	d011      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d40:	3328      	adds	r3, #40	; 0x28
 8006d42:	2102      	movs	r1, #2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fb8b 	bl	8007460 <RCCEx_PLL3_Config>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006d60:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e000      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006d74:	46bd      	mov	sp, r7
 8006d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d7a:	bf00      	nop
 8006d7c:	58024400 	.word	0x58024400

08006d80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d84:	f7fe fe00 	bl	8005988 <HAL_RCC_GetHCLKFreq>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	091b      	lsrs	r3, r3, #4
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	4904      	ldr	r1, [pc, #16]	; (8006da8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d96:	5ccb      	ldrb	r3, [r1, r3]
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	58024400 	.word	0x58024400
 8006da8:	0800aa9c 	.word	0x0800aa9c

08006dac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b089      	sub	sp, #36	; 0x24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006db4:	4ba1      	ldr	r3, [pc, #644]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db8:	f003 0303 	and.w	r3, r3, #3
 8006dbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006dbe:	4b9f      	ldr	r3, [pc, #636]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc2:	0b1b      	lsrs	r3, r3, #12
 8006dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006dca:	4b9c      	ldr	r3, [pc, #624]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	091b      	lsrs	r3, r3, #4
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006dd6:	4b99      	ldr	r3, [pc, #612]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dda:	08db      	lsrs	r3, r3, #3
 8006ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	fb02 f303 	mul.w	r3, r2, r3
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8111 	beq.w	800701c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	f000 8083 	beq.w	8006f08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	f200 80a1 	bhi.w	8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d056      	beq.n	8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e16:	e099      	b.n	8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e18:	4b88      	ldr	r3, [pc, #544]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d02d      	beq.n	8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e24:	4b85      	ldr	r3, [pc, #532]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	08db      	lsrs	r3, r3, #3
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	4a84      	ldr	r2, [pc, #528]	; (8007040 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e30:	fa22 f303 	lsr.w	r3, r2, r3
 8006e34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4e:	4b7b      	ldr	r3, [pc, #492]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e7e:	e087      	b.n	8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e92:	4b6a      	ldr	r3, [pc, #424]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ec2:	e065      	b.n	8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ece:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800704c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed6:	4b59      	ldr	r3, [pc, #356]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f06:	e043      	b.n	8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1a:	4b48      	ldr	r3, [pc, #288]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f4a:	e021      	b.n	8006f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800704c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5e:	4b37      	ldr	r3, [pc, #220]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006f90:	4b2a      	ldr	r3, [pc, #168]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	0a5b      	lsrs	r3, r3, #9
 8006f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb6:	ee17 2a90 	vmov	r2, s15
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006fbe:	4b1f      	ldr	r3, [pc, #124]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc8:	ee07 3a90 	vmov	s15, r3
 8006fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe4:	ee17 2a90 	vmov	r2, s15
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006fec:	4b13      	ldr	r3, [pc, #76]	; (800703c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	0e1b      	lsrs	r3, r3, #24
 8006ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007006:	edd7 6a07 	vldr	s13, [r7, #28]
 800700a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800700e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007012:	ee17 2a90 	vmov	r2, s15
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800701a:	e008      	b.n	800702e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	609a      	str	r2, [r3, #8]
}
 800702e:	bf00      	nop
 8007030:	3724      	adds	r7, #36	; 0x24
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	58024400 	.word	0x58024400
 8007040:	03d09000 	.word	0x03d09000
 8007044:	46000000 	.word	0x46000000
 8007048:	4c742400 	.word	0x4c742400
 800704c:	4a742400 	.word	0x4a742400
 8007050:	4bbebc20 	.word	0x4bbebc20

08007054 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007054:	b480      	push	{r7}
 8007056:	b089      	sub	sp, #36	; 0x24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800705c:	4ba1      	ldr	r3, [pc, #644]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007060:	f003 0303 	and.w	r3, r3, #3
 8007064:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007066:	4b9f      	ldr	r3, [pc, #636]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706a:	0d1b      	lsrs	r3, r3, #20
 800706c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007070:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007072:	4b9c      	ldr	r3, [pc, #624]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	0a1b      	lsrs	r3, r3, #8
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800707e:	4b99      	ldr	r3, [pc, #612]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007082:	08db      	lsrs	r3, r3, #3
 8007084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	fb02 f303 	mul.w	r3, r2, r3
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8111 	beq.w	80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	f000 8083 	beq.w	80071b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	f200 80a1 	bhi.w	80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d056      	beq.n	800716c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070be:	e099      	b.n	80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070c0:	4b88      	ldr	r3, [pc, #544]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0320 	and.w	r3, r3, #32
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d02d      	beq.n	8007128 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070cc:	4b85      	ldr	r3, [pc, #532]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	08db      	lsrs	r3, r3, #3
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	4a84      	ldr	r2, [pc, #528]	; (80072e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80070d8:	fa22 f303 	lsr.w	r3, r2, r3
 80070dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f6:	4b7b      	ldr	r3, [pc, #492]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007106:	ed97 6a03 	vldr	s12, [r7, #12]
 800710a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800710e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800711a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800711e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007126:	e087      	b.n	8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713a:	4b6a      	ldr	r3, [pc, #424]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714a:	ed97 6a03 	vldr	s12, [r7, #12]
 800714e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800715e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800716a:	e065      	b.n	8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800717a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717e:	4b59      	ldr	r3, [pc, #356]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007192:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ae:	e043      	b.n	8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c2:	4b48      	ldr	r3, [pc, #288]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f2:	e021      	b.n	8007238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007206:	4b37      	ldr	r3, [pc, #220]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007216:	ed97 6a03 	vldr	s12, [r7, #12]
 800721a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800721e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007236:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007238:	4b2a      	ldr	r3, [pc, #168]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	0a5b      	lsrs	r3, r3, #9
 800723e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800724e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007252:	edd7 6a07 	vldr	s13, [r7, #28]
 8007256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725e:	ee17 2a90 	vmov	r2, s15
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007266:	4b1f      	ldr	r3, [pc, #124]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	0c1b      	lsrs	r3, r3, #16
 800726c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007270:	ee07 3a90 	vmov	s15, r3
 8007274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800727c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007280:	edd7 6a07 	vldr	s13, [r7, #28]
 8007284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728c:	ee17 2a90 	vmov	r2, s15
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007294:	4b13      	ldr	r3, [pc, #76]	; (80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	0e1b      	lsrs	r3, r3, #24
 800729a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729e:	ee07 3a90 	vmov	s15, r3
 80072a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ba:	ee17 2a90 	vmov	r2, s15
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072c2:	e008      	b.n	80072d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	609a      	str	r2, [r3, #8]
}
 80072d6:	bf00      	nop
 80072d8:	3724      	adds	r7, #36	; 0x24
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	58024400 	.word	0x58024400
 80072e8:	03d09000 	.word	0x03d09000
 80072ec:	46000000 	.word	0x46000000
 80072f0:	4c742400 	.word	0x4c742400
 80072f4:	4a742400 	.word	0x4a742400
 80072f8:	4bbebc20 	.word	0x4bbebc20

080072fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800730a:	4b53      	ldr	r3, [pc, #332]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b03      	cmp	r3, #3
 8007314:	d101      	bne.n	800731a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e099      	b.n	800744e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800731a:	4b4f      	ldr	r3, [pc, #316]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a4e      	ldr	r2, [pc, #312]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007320:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007326:	f7fa fabd 	bl	80018a4 <HAL_GetTick>
 800732a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800732c:	e008      	b.n	8007340 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800732e:	f7fa fab9 	bl	80018a4 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e086      	b.n	800744e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007340:	4b45      	ldr	r3, [pc, #276]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f0      	bne.n	800732e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800734c:	4b42      	ldr	r3, [pc, #264]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	031b      	lsls	r3, r3, #12
 800735a:	493f      	ldr	r1, [pc, #252]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 800735c:	4313      	orrs	r3, r2
 800735e:	628b      	str	r3, [r1, #40]	; 0x28
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	3b01      	subs	r3, #1
 8007366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	3b01      	subs	r3, #1
 8007370:	025b      	lsls	r3, r3, #9
 8007372:	b29b      	uxth	r3, r3
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	3b01      	subs	r3, #1
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	3b01      	subs	r3, #1
 800738a:	061b      	lsls	r3, r3, #24
 800738c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007390:	4931      	ldr	r1, [pc, #196]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007392:	4313      	orrs	r3, r2
 8007394:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007396:	4b30      	ldr	r3, [pc, #192]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	492d      	ldr	r1, [pc, #180]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073a8:	4b2b      	ldr	r3, [pc, #172]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	f023 0220 	bic.w	r2, r3, #32
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	4928      	ldr	r1, [pc, #160]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073ba:	4b27      	ldr	r3, [pc, #156]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	4a26      	ldr	r2, [pc, #152]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073c0:	f023 0310 	bic.w	r3, r3, #16
 80073c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073c6:	4b24      	ldr	r3, [pc, #144]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073ca:	4b24      	ldr	r3, [pc, #144]	; (800745c <RCCEx_PLL2_Config+0x160>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	69d2      	ldr	r2, [r2, #28]
 80073d2:	00d2      	lsls	r2, r2, #3
 80073d4:	4920      	ldr	r1, [pc, #128]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073da:	4b1f      	ldr	r3, [pc, #124]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	4a1e      	ldr	r2, [pc, #120]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073e0:	f043 0310 	orr.w	r3, r3, #16
 80073e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d106      	bne.n	80073fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073ec:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	4a19      	ldr	r2, [pc, #100]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 80073f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073f8:	e00f      	b.n	800741a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d106      	bne.n	800740e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007400:	4b15      	ldr	r3, [pc, #84]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	4a14      	ldr	r2, [pc, #80]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800740a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800740c:	e005      	b.n	800741a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800740e:	4b12      	ldr	r3, [pc, #72]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	4a11      	ldr	r2, [pc, #68]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007414:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007418:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800741a:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a0e      	ldr	r2, [pc, #56]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007420:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007426:	f7fa fa3d 	bl	80018a4 <HAL_GetTick>
 800742a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800742c:	e008      	b.n	8007440 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800742e:	f7fa fa39 	bl	80018a4 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b02      	cmp	r3, #2
 800743a:	d901      	bls.n	8007440 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e006      	b.n	800744e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <RCCEx_PLL2_Config+0x15c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0f0      	beq.n	800742e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	58024400 	.word	0x58024400
 800745c:	ffff0007 	.word	0xffff0007

08007460 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800746e:	4b53      	ldr	r3, [pc, #332]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	2b03      	cmp	r3, #3
 8007478:	d101      	bne.n	800747e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e099      	b.n	80075b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800747e:	4b4f      	ldr	r3, [pc, #316]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a4e      	ldr	r2, [pc, #312]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800748a:	f7fa fa0b 	bl	80018a4 <HAL_GetTick>
 800748e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007490:	e008      	b.n	80074a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007492:	f7fa fa07 	bl	80018a4 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e086      	b.n	80075b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074a4:	4b45      	ldr	r3, [pc, #276]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f0      	bne.n	8007492 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074b0:	4b42      	ldr	r3, [pc, #264]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	051b      	lsls	r3, r3, #20
 80074be:	493f      	ldr	r1, [pc, #252]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	628b      	str	r3, [r1, #40]	; 0x28
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	025b      	lsls	r3, r3, #9
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	3b01      	subs	r3, #1
 80074e0:	041b      	lsls	r3, r3, #16
 80074e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	061b      	lsls	r3, r3, #24
 80074f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074f4:	4931      	ldr	r1, [pc, #196]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80074fa:	4b30      	ldr	r3, [pc, #192]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	492d      	ldr	r1, [pc, #180]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007508:	4313      	orrs	r3, r2
 800750a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800750c:	4b2b      	ldr	r3, [pc, #172]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 800750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007510:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	4928      	ldr	r1, [pc, #160]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 800751a:	4313      	orrs	r3, r2
 800751c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800751e:	4b27      	ldr	r3, [pc, #156]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	4a26      	ldr	r2, [pc, #152]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007528:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800752a:	4b24      	ldr	r3, [pc, #144]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 800752c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800752e:	4b24      	ldr	r3, [pc, #144]	; (80075c0 <RCCEx_PLL3_Config+0x160>)
 8007530:	4013      	ands	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	69d2      	ldr	r2, [r2, #28]
 8007536:	00d2      	lsls	r2, r2, #3
 8007538:	4920      	ldr	r1, [pc, #128]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 800753a:	4313      	orrs	r3, r2
 800753c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800753e:	4b1f      	ldr	r3, [pc, #124]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007548:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d106      	bne.n	800755e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007550:	4b1a      	ldr	r3, [pc, #104]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	4a19      	ldr	r2, [pc, #100]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007556:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800755a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800755c:	e00f      	b.n	800757e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d106      	bne.n	8007572 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007564:	4b15      	ldr	r3, [pc, #84]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	4a14      	ldr	r2, [pc, #80]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 800756a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800756e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007570:	e005      	b.n	800757e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007572:	4b12      	ldr	r3, [pc, #72]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	4a11      	ldr	r2, [pc, #68]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800757c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800757e:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a0e      	ldr	r2, [pc, #56]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 8007584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007588:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800758a:	f7fa f98b 	bl	80018a4 <HAL_GetTick>
 800758e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007590:	e008      	b.n	80075a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007592:	f7fa f987 	bl	80018a4 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d901      	bls.n	80075a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e006      	b.n	80075b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <RCCEx_PLL3_Config+0x15c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0f0      	beq.n	8007592 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	58024400 	.word	0x58024400
 80075c0:	ffff0007 	.word	0xffff0007

080075c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e049      	b.n	800766a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7f9 fbac 	bl	8000d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f000 fbbe 	bl	8007d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e049      	b.n	8007718 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f841 	bl	8007720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f000 fb67 	bl	8007d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d109      	bne.n	8007758 <HAL_TIM_PWM_Start+0x24>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	bf14      	ite	ne
 8007750:	2301      	movne	r3, #1
 8007752:	2300      	moveq	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	e03c      	b.n	80077d2 <HAL_TIM_PWM_Start+0x9e>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d109      	bne.n	8007772 <HAL_TIM_PWM_Start+0x3e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b01      	cmp	r3, #1
 8007768:	bf14      	ite	ne
 800776a:	2301      	movne	r3, #1
 800776c:	2300      	moveq	r3, #0
 800776e:	b2db      	uxtb	r3, r3
 8007770:	e02f      	b.n	80077d2 <HAL_TIM_PWM_Start+0x9e>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b08      	cmp	r3, #8
 8007776:	d109      	bne.n	800778c <HAL_TIM_PWM_Start+0x58>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b01      	cmp	r3, #1
 8007782:	bf14      	ite	ne
 8007784:	2301      	movne	r3, #1
 8007786:	2300      	moveq	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	e022      	b.n	80077d2 <HAL_TIM_PWM_Start+0x9e>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b0c      	cmp	r3, #12
 8007790:	d109      	bne.n	80077a6 <HAL_TIM_PWM_Start+0x72>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b01      	cmp	r3, #1
 800779c:	bf14      	ite	ne
 800779e:	2301      	movne	r3, #1
 80077a0:	2300      	moveq	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	e015      	b.n	80077d2 <HAL_TIM_PWM_Start+0x9e>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b10      	cmp	r3, #16
 80077aa:	d109      	bne.n	80077c0 <HAL_TIM_PWM_Start+0x8c>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	bf14      	ite	ne
 80077b8:	2301      	movne	r3, #1
 80077ba:	2300      	moveq	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	e008      	b.n	80077d2 <HAL_TIM_PWM_Start+0x9e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	bf14      	ite	ne
 80077cc:	2301      	movne	r3, #1
 80077ce:	2300      	moveq	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e0ab      	b.n	8007932 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <HAL_TIM_PWM_Start+0xb6>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e8:	e023      	b.n	8007832 <HAL_TIM_PWM_Start+0xfe>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d104      	bne.n	80077fa <HAL_TIM_PWM_Start+0xc6>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f8:	e01b      	b.n	8007832 <HAL_TIM_PWM_Start+0xfe>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d104      	bne.n	800780a <HAL_TIM_PWM_Start+0xd6>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007808:	e013      	b.n	8007832 <HAL_TIM_PWM_Start+0xfe>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b0c      	cmp	r3, #12
 800780e:	d104      	bne.n	800781a <HAL_TIM_PWM_Start+0xe6>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007818:	e00b      	b.n	8007832 <HAL_TIM_PWM_Start+0xfe>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b10      	cmp	r3, #16
 800781e:	d104      	bne.n	800782a <HAL_TIM_PWM_Start+0xf6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007828:	e003      	b.n	8007832 <HAL_TIM_PWM_Start+0xfe>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2201      	movs	r2, #1
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f000 febc 	bl	80085b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a3d      	ldr	r2, [pc, #244]	; (800793c <HAL_TIM_PWM_Start+0x208>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d013      	beq.n	8007872 <HAL_TIM_PWM_Start+0x13e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a3c      	ldr	r2, [pc, #240]	; (8007940 <HAL_TIM_PWM_Start+0x20c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00e      	beq.n	8007872 <HAL_TIM_PWM_Start+0x13e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a3a      	ldr	r2, [pc, #232]	; (8007944 <HAL_TIM_PWM_Start+0x210>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d009      	beq.n	8007872 <HAL_TIM_PWM_Start+0x13e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a39      	ldr	r2, [pc, #228]	; (8007948 <HAL_TIM_PWM_Start+0x214>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d004      	beq.n	8007872 <HAL_TIM_PWM_Start+0x13e>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a37      	ldr	r2, [pc, #220]	; (800794c <HAL_TIM_PWM_Start+0x218>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d101      	bne.n	8007876 <HAL_TIM_PWM_Start+0x142>
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <HAL_TIM_PWM_Start+0x144>
 8007876:	2300      	movs	r3, #0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800788a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2a      	ldr	r2, [pc, #168]	; (800793c <HAL_TIM_PWM_Start+0x208>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d02c      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1bc>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789e:	d027      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1bc>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a2a      	ldr	r2, [pc, #168]	; (8007950 <HAL_TIM_PWM_Start+0x21c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d022      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1bc>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a29      	ldr	r2, [pc, #164]	; (8007954 <HAL_TIM_PWM_Start+0x220>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d01d      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1bc>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a27      	ldr	r2, [pc, #156]	; (8007958 <HAL_TIM_PWM_Start+0x224>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d018      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1bc>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1f      	ldr	r2, [pc, #124]	; (8007940 <HAL_TIM_PWM_Start+0x20c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1bc>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a23      	ldr	r2, [pc, #140]	; (800795c <HAL_TIM_PWM_Start+0x228>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00e      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1bc>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1b      	ldr	r2, [pc, #108]	; (8007944 <HAL_TIM_PWM_Start+0x210>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d009      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1bc>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1f      	ldr	r2, [pc, #124]	; (8007960 <HAL_TIM_PWM_Start+0x22c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d004      	beq.n	80078f0 <HAL_TIM_PWM_Start+0x1bc>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1e      	ldr	r2, [pc, #120]	; (8007964 <HAL_TIM_PWM_Start+0x230>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d115      	bne.n	800791c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	4b1c      	ldr	r3, [pc, #112]	; (8007968 <HAL_TIM_PWM_Start+0x234>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b06      	cmp	r3, #6
 8007900:	d015      	beq.n	800792e <HAL_TIM_PWM_Start+0x1fa>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007908:	d011      	beq.n	800792e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0201 	orr.w	r2, r2, #1
 8007918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791a:	e008      	b.n	800792e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	e000      	b.n	8007930 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40010000 	.word	0x40010000
 8007940:	40010400 	.word	0x40010400
 8007944:	40014000 	.word	0x40014000
 8007948:	40014400 	.word	0x40014400
 800794c:	40014800 	.word	0x40014800
 8007950:	40000400 	.word	0x40000400
 8007954:	40000800 	.word	0x40000800
 8007958:	40000c00 	.word	0x40000c00
 800795c:	40001800 	.word	0x40001800
 8007960:	4000e000 	.word	0x4000e000
 8007964:	4000e400 	.word	0x4000e400
 8007968:	00010007 	.word	0x00010007

0800796c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007986:	2302      	movs	r3, #2
 8007988:	e0ff      	b.n	8007b8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b14      	cmp	r3, #20
 8007996:	f200 80f0 	bhi.w	8007b7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800799a:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	08007b7b 	.word	0x08007b7b
 80079a8:	08007b7b 	.word	0x08007b7b
 80079ac:	08007b7b 	.word	0x08007b7b
 80079b0:	08007a35 	.word	0x08007a35
 80079b4:	08007b7b 	.word	0x08007b7b
 80079b8:	08007b7b 	.word	0x08007b7b
 80079bc:	08007b7b 	.word	0x08007b7b
 80079c0:	08007a77 	.word	0x08007a77
 80079c4:	08007b7b 	.word	0x08007b7b
 80079c8:	08007b7b 	.word	0x08007b7b
 80079cc:	08007b7b 	.word	0x08007b7b
 80079d0:	08007ab7 	.word	0x08007ab7
 80079d4:	08007b7b 	.word	0x08007b7b
 80079d8:	08007b7b 	.word	0x08007b7b
 80079dc:	08007b7b 	.word	0x08007b7b
 80079e0:	08007af9 	.word	0x08007af9
 80079e4:	08007b7b 	.word	0x08007b7b
 80079e8:	08007b7b 	.word	0x08007b7b
 80079ec:	08007b7b 	.word	0x08007b7b
 80079f0:	08007b39 	.word	0x08007b39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 fa68 	bl	8007ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699a      	ldr	r2, [r3, #24]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0208 	orr.w	r2, r2, #8
 8007a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0204 	bic.w	r2, r2, #4
 8007a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6999      	ldr	r1, [r3, #24]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	619a      	str	r2, [r3, #24]
      break;
 8007a32:	e0a5      	b.n	8007b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68b9      	ldr	r1, [r7, #8]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fad8 	bl	8007ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6999      	ldr	r1, [r3, #24]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	021a      	lsls	r2, r3, #8
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	619a      	str	r2, [r3, #24]
      break;
 8007a74:	e084      	b.n	8007b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fb41 	bl	8008104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69da      	ldr	r2, [r3, #28]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0208 	orr.w	r2, r2, #8
 8007a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0204 	bic.w	r2, r2, #4
 8007aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69d9      	ldr	r1, [r3, #28]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	61da      	str	r2, [r3, #28]
      break;
 8007ab4:	e064      	b.n	8007b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fba9 	bl	8008214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69da      	ldr	r2, [r3, #28]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69d9      	ldr	r1, [r3, #28]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	021a      	lsls	r2, r3, #8
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	61da      	str	r2, [r3, #28]
      break;
 8007af6:	e043      	b.n	8007b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68b9      	ldr	r1, [r7, #8]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fbf2 	bl	80082e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0208 	orr.w	r2, r2, #8
 8007b12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0204 	bic.w	r2, r2, #4
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	691a      	ldr	r2, [r3, #16]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b36:	e023      	b.n	8007b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fc36 	bl	80083b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	021a      	lsls	r2, r3, #8
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b78:	e002      	b.n	8007b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop

08007b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e0dc      	b.n	8007d6a <HAL_TIM_ConfigClockSource+0x1d6>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4b6a      	ldr	r3, [pc, #424]	; (8007d74 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a64      	ldr	r2, [pc, #400]	; (8007d78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	f000 80a9 	beq.w	8007d3e <HAL_TIM_ConfigClockSource+0x1aa>
 8007bec:	4a62      	ldr	r2, [pc, #392]	; (8007d78 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	f200 80ae 	bhi.w	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bf4:	4a61      	ldr	r2, [pc, #388]	; (8007d7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	f000 80a1 	beq.w	8007d3e <HAL_TIM_ConfigClockSource+0x1aa>
 8007bfc:	4a5f      	ldr	r2, [pc, #380]	; (8007d7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	f200 80a6 	bhi.w	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c04:	4a5e      	ldr	r2, [pc, #376]	; (8007d80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	f000 8099 	beq.w	8007d3e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c0c:	4a5c      	ldr	r2, [pc, #368]	; (8007d80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	f200 809e 	bhi.w	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c18:	f000 8091 	beq.w	8007d3e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c20:	f200 8096 	bhi.w	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c28:	f000 8089 	beq.w	8007d3e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c30:	f200 808e 	bhi.w	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c38:	d03e      	beq.n	8007cb8 <HAL_TIM_ConfigClockSource+0x124>
 8007c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c3e:	f200 8087 	bhi.w	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c46:	f000 8086 	beq.w	8007d56 <HAL_TIM_ConfigClockSource+0x1c2>
 8007c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c4e:	d87f      	bhi.n	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c50:	2b70      	cmp	r3, #112	; 0x70
 8007c52:	d01a      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0xf6>
 8007c54:	2b70      	cmp	r3, #112	; 0x70
 8007c56:	d87b      	bhi.n	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c58:	2b60      	cmp	r3, #96	; 0x60
 8007c5a:	d050      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0x16a>
 8007c5c:	2b60      	cmp	r3, #96	; 0x60
 8007c5e:	d877      	bhi.n	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c60:	2b50      	cmp	r3, #80	; 0x50
 8007c62:	d03c      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x14a>
 8007c64:	2b50      	cmp	r3, #80	; 0x50
 8007c66:	d873      	bhi.n	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	d058      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x18a>
 8007c6c:	2b40      	cmp	r3, #64	; 0x40
 8007c6e:	d86f      	bhi.n	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c70:	2b30      	cmp	r3, #48	; 0x30
 8007c72:	d064      	beq.n	8007d3e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c74:	2b30      	cmp	r3, #48	; 0x30
 8007c76:	d86b      	bhi.n	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c78:	2b20      	cmp	r3, #32
 8007c7a:	d060      	beq.n	8007d3e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c7c:	2b20      	cmp	r3, #32
 8007c7e:	d867      	bhi.n	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d05c      	beq.n	8007d3e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d05a      	beq.n	8007d3e <HAL_TIM_ConfigClockSource+0x1aa>
 8007c88:	e062      	b.n	8007d50 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c9a:	f000 fc6d 	bl	8008578 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007cac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	609a      	str	r2, [r3, #8]
      break;
 8007cb6:	e04f      	b.n	8007d58 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cc8:	f000 fc56 	bl	8008578 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cda:	609a      	str	r2, [r3, #8]
      break;
 8007cdc:	e03c      	b.n	8007d58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cea:	461a      	mov	r2, r3
 8007cec:	f000 fbc6 	bl	800847c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2150      	movs	r1, #80	; 0x50
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fc20 	bl	800853c <TIM_ITRx_SetConfig>
      break;
 8007cfc:	e02c      	b.n	8007d58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f000 fbe5 	bl	80084da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2160      	movs	r1, #96	; 0x60
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fc10 	bl	800853c <TIM_ITRx_SetConfig>
      break;
 8007d1c:	e01c      	b.n	8007d58 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f000 fba6 	bl	800847c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2140      	movs	r1, #64	; 0x40
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fc00 	bl	800853c <TIM_ITRx_SetConfig>
      break;
 8007d3c:	e00c      	b.n	8007d58 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4619      	mov	r1, r3
 8007d48:	4610      	mov	r0, r2
 8007d4a:	f000 fbf7 	bl	800853c <TIM_ITRx_SetConfig>
      break;
 8007d4e:	e003      	b.n	8007d58 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
      break;
 8007d54:	e000      	b.n	8007d58 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	ffceff88 	.word	0xffceff88
 8007d78:	00100040 	.word	0x00100040
 8007d7c:	00100030 	.word	0x00100030
 8007d80:	00100020 	.word	0x00100020

08007d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a44      	ldr	r2, [pc, #272]	; (8007ea8 <TIM_Base_SetConfig+0x124>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d013      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007da2:	d00f      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a41      	ldr	r2, [pc, #260]	; (8007eac <TIM_Base_SetConfig+0x128>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00b      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a40      	ldr	r2, [pc, #256]	; (8007eb0 <TIM_Base_SetConfig+0x12c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d007      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a3f      	ldr	r2, [pc, #252]	; (8007eb4 <TIM_Base_SetConfig+0x130>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a3e      	ldr	r2, [pc, #248]	; (8007eb8 <TIM_Base_SetConfig+0x134>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d108      	bne.n	8007dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a33      	ldr	r2, [pc, #204]	; (8007ea8 <TIM_Base_SetConfig+0x124>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d027      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de4:	d023      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a30      	ldr	r2, [pc, #192]	; (8007eac <TIM_Base_SetConfig+0x128>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d01f      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a2f      	ldr	r2, [pc, #188]	; (8007eb0 <TIM_Base_SetConfig+0x12c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d01b      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a2e      	ldr	r2, [pc, #184]	; (8007eb4 <TIM_Base_SetConfig+0x130>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d017      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a2d      	ldr	r2, [pc, #180]	; (8007eb8 <TIM_Base_SetConfig+0x134>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d013      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a2c      	ldr	r2, [pc, #176]	; (8007ebc <TIM_Base_SetConfig+0x138>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00f      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a2b      	ldr	r2, [pc, #172]	; (8007ec0 <TIM_Base_SetConfig+0x13c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00b      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a2a      	ldr	r2, [pc, #168]	; (8007ec4 <TIM_Base_SetConfig+0x140>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d007      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a29      	ldr	r2, [pc, #164]	; (8007ec8 <TIM_Base_SetConfig+0x144>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d003      	beq.n	8007e2e <TIM_Base_SetConfig+0xaa>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a28      	ldr	r2, [pc, #160]	; (8007ecc <TIM_Base_SetConfig+0x148>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d108      	bne.n	8007e40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a10      	ldr	r2, [pc, #64]	; (8007ea8 <TIM_Base_SetConfig+0x124>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d00f      	beq.n	8007e8c <TIM_Base_SetConfig+0x108>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a12      	ldr	r2, [pc, #72]	; (8007eb8 <TIM_Base_SetConfig+0x134>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00b      	beq.n	8007e8c <TIM_Base_SetConfig+0x108>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a11      	ldr	r2, [pc, #68]	; (8007ebc <TIM_Base_SetConfig+0x138>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d007      	beq.n	8007e8c <TIM_Base_SetConfig+0x108>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a10      	ldr	r2, [pc, #64]	; (8007ec0 <TIM_Base_SetConfig+0x13c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d003      	beq.n	8007e8c <TIM_Base_SetConfig+0x108>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a0f      	ldr	r2, [pc, #60]	; (8007ec4 <TIM_Base_SetConfig+0x140>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d103      	bne.n	8007e94 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	615a      	str	r2, [r3, #20]
}
 8007e9a:	bf00      	nop
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	40000800 	.word	0x40000800
 8007eb4:	40000c00 	.word	0x40000c00
 8007eb8:	40010400 	.word	0x40010400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40014400 	.word	0x40014400
 8007ec4:	40014800 	.word	0x40014800
 8007ec8:	4000e000 	.word	0x4000e000
 8007ecc:	4000e400 	.word	0x4000e400

08007ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f023 0201 	bic.w	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4b37      	ldr	r3, [pc, #220]	; (8007fd8 <TIM_OC1_SetConfig+0x108>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0303 	bic.w	r3, r3, #3
 8007f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f023 0302 	bic.w	r3, r3, #2
 8007f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a2d      	ldr	r2, [pc, #180]	; (8007fdc <TIM_OC1_SetConfig+0x10c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00f      	beq.n	8007f4c <TIM_OC1_SetConfig+0x7c>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <TIM_OC1_SetConfig+0x110>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00b      	beq.n	8007f4c <TIM_OC1_SetConfig+0x7c>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a2b      	ldr	r2, [pc, #172]	; (8007fe4 <TIM_OC1_SetConfig+0x114>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d007      	beq.n	8007f4c <TIM_OC1_SetConfig+0x7c>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a2a      	ldr	r2, [pc, #168]	; (8007fe8 <TIM_OC1_SetConfig+0x118>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d003      	beq.n	8007f4c <TIM_OC1_SetConfig+0x7c>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a29      	ldr	r2, [pc, #164]	; (8007fec <TIM_OC1_SetConfig+0x11c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d10c      	bne.n	8007f66 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f023 0308 	bic.w	r3, r3, #8
 8007f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	f023 0304 	bic.w	r3, r3, #4
 8007f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1c      	ldr	r2, [pc, #112]	; (8007fdc <TIM_OC1_SetConfig+0x10c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00f      	beq.n	8007f8e <TIM_OC1_SetConfig+0xbe>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <TIM_OC1_SetConfig+0x110>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00b      	beq.n	8007f8e <TIM_OC1_SetConfig+0xbe>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a1a      	ldr	r2, [pc, #104]	; (8007fe4 <TIM_OC1_SetConfig+0x114>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d007      	beq.n	8007f8e <TIM_OC1_SetConfig+0xbe>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a19      	ldr	r2, [pc, #100]	; (8007fe8 <TIM_OC1_SetConfig+0x118>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d003      	beq.n	8007f8e <TIM_OC1_SetConfig+0xbe>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a18      	ldr	r2, [pc, #96]	; (8007fec <TIM_OC1_SetConfig+0x11c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d111      	bne.n	8007fb2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	621a      	str	r2, [r3, #32]
}
 8007fcc:	bf00      	nop
 8007fce:	371c      	adds	r7, #28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	fffeff8f 	.word	0xfffeff8f
 8007fdc:	40010000 	.word	0x40010000
 8007fe0:	40010400 	.word	0x40010400
 8007fe4:	40014000 	.word	0x40014000
 8007fe8:	40014400 	.word	0x40014400
 8007fec:	40014800 	.word	0x40014800

08007ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	f023 0210 	bic.w	r2, r3, #16
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	4b34      	ldr	r3, [pc, #208]	; (80080ec <TIM_OC2_SetConfig+0xfc>)
 800801c:	4013      	ands	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4313      	orrs	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f023 0320 	bic.w	r3, r3, #32
 800803a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a29      	ldr	r2, [pc, #164]	; (80080f0 <TIM_OC2_SetConfig+0x100>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d003      	beq.n	8008058 <TIM_OC2_SetConfig+0x68>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a28      	ldr	r2, [pc, #160]	; (80080f4 <TIM_OC2_SetConfig+0x104>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d10d      	bne.n	8008074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800805e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4313      	orrs	r3, r2
 800806a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a1e      	ldr	r2, [pc, #120]	; (80080f0 <TIM_OC2_SetConfig+0x100>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00f      	beq.n	800809c <TIM_OC2_SetConfig+0xac>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <TIM_OC2_SetConfig+0x104>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00b      	beq.n	800809c <TIM_OC2_SetConfig+0xac>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a1c      	ldr	r2, [pc, #112]	; (80080f8 <TIM_OC2_SetConfig+0x108>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d007      	beq.n	800809c <TIM_OC2_SetConfig+0xac>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a1b      	ldr	r2, [pc, #108]	; (80080fc <TIM_OC2_SetConfig+0x10c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d003      	beq.n	800809c <TIM_OC2_SetConfig+0xac>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a1a      	ldr	r2, [pc, #104]	; (8008100 <TIM_OC2_SetConfig+0x110>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d113      	bne.n	80080c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	621a      	str	r2, [r3, #32]
}
 80080de:	bf00      	nop
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	feff8fff 	.word	0xfeff8fff
 80080f0:	40010000 	.word	0x40010000
 80080f4:	40010400 	.word	0x40010400
 80080f8:	40014000 	.word	0x40014000
 80080fc:	40014400 	.word	0x40014400
 8008100:	40014800 	.word	0x40014800

08008104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	4b33      	ldr	r3, [pc, #204]	; (80081fc <TIM_OC3_SetConfig+0xf8>)
 8008130:	4013      	ands	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800814c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a28      	ldr	r2, [pc, #160]	; (8008200 <TIM_OC3_SetConfig+0xfc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d003      	beq.n	800816a <TIM_OC3_SetConfig+0x66>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a27      	ldr	r2, [pc, #156]	; (8008204 <TIM_OC3_SetConfig+0x100>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d10d      	bne.n	8008186 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a1d      	ldr	r2, [pc, #116]	; (8008200 <TIM_OC3_SetConfig+0xfc>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00f      	beq.n	80081ae <TIM_OC3_SetConfig+0xaa>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <TIM_OC3_SetConfig+0x100>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00b      	beq.n	80081ae <TIM_OC3_SetConfig+0xaa>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a1b      	ldr	r2, [pc, #108]	; (8008208 <TIM_OC3_SetConfig+0x104>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d007      	beq.n	80081ae <TIM_OC3_SetConfig+0xaa>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a1a      	ldr	r2, [pc, #104]	; (800820c <TIM_OC3_SetConfig+0x108>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d003      	beq.n	80081ae <TIM_OC3_SetConfig+0xaa>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a19      	ldr	r2, [pc, #100]	; (8008210 <TIM_OC3_SetConfig+0x10c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d113      	bne.n	80081d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	621a      	str	r2, [r3, #32]
}
 80081f0:	bf00      	nop
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	fffeff8f 	.word	0xfffeff8f
 8008200:	40010000 	.word	0x40010000
 8008204:	40010400 	.word	0x40010400
 8008208:	40014000 	.word	0x40014000
 800820c:	40014400 	.word	0x40014400
 8008210:	40014800 	.word	0x40014800

08008214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <TIM_OC4_SetConfig+0xbc>)
 8008240:	4013      	ands	r3, r2
 8008242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800824a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	021b      	lsls	r3, r3, #8
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800825e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	031b      	lsls	r3, r3, #12
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	4313      	orrs	r3, r2
 800826a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a19      	ldr	r2, [pc, #100]	; (80082d4 <TIM_OC4_SetConfig+0xc0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00f      	beq.n	8008294 <TIM_OC4_SetConfig+0x80>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a18      	ldr	r2, [pc, #96]	; (80082d8 <TIM_OC4_SetConfig+0xc4>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00b      	beq.n	8008294 <TIM_OC4_SetConfig+0x80>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a17      	ldr	r2, [pc, #92]	; (80082dc <TIM_OC4_SetConfig+0xc8>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d007      	beq.n	8008294 <TIM_OC4_SetConfig+0x80>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a16      	ldr	r2, [pc, #88]	; (80082e0 <TIM_OC4_SetConfig+0xcc>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d003      	beq.n	8008294 <TIM_OC4_SetConfig+0x80>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a15      	ldr	r2, [pc, #84]	; (80082e4 <TIM_OC4_SetConfig+0xd0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d109      	bne.n	80082a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800829a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	019b      	lsls	r3, r3, #6
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	621a      	str	r2, [r3, #32]
}
 80082c2:	bf00      	nop
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	feff8fff 	.word	0xfeff8fff
 80082d4:	40010000 	.word	0x40010000
 80082d8:	40010400 	.word	0x40010400
 80082dc:	40014000 	.word	0x40014000
 80082e0:	40014400 	.word	0x40014400
 80082e4:	40014800 	.word	0x40014800

080082e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4b21      	ldr	r3, [pc, #132]	; (8008398 <TIM_OC5_SetConfig+0xb0>)
 8008314:	4013      	ands	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008328:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a18      	ldr	r2, [pc, #96]	; (800839c <TIM_OC5_SetConfig+0xb4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d00f      	beq.n	800835e <TIM_OC5_SetConfig+0x76>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a17      	ldr	r2, [pc, #92]	; (80083a0 <TIM_OC5_SetConfig+0xb8>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00b      	beq.n	800835e <TIM_OC5_SetConfig+0x76>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a16      	ldr	r2, [pc, #88]	; (80083a4 <TIM_OC5_SetConfig+0xbc>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d007      	beq.n	800835e <TIM_OC5_SetConfig+0x76>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a15      	ldr	r2, [pc, #84]	; (80083a8 <TIM_OC5_SetConfig+0xc0>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d003      	beq.n	800835e <TIM_OC5_SetConfig+0x76>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a14      	ldr	r2, [pc, #80]	; (80083ac <TIM_OC5_SetConfig+0xc4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d109      	bne.n	8008372 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008364:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	621a      	str	r2, [r3, #32]
}
 800838c:	bf00      	nop
 800838e:	371c      	adds	r7, #28
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	fffeff8f 	.word	0xfffeff8f
 800839c:	40010000 	.word	0x40010000
 80083a0:	40010400 	.word	0x40010400
 80083a4:	40014000 	.word	0x40014000
 80083a8:	40014400 	.word	0x40014400
 80083ac:	40014800 	.word	0x40014800

080083b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	4b22      	ldr	r3, [pc, #136]	; (8008464 <TIM_OC6_SetConfig+0xb4>)
 80083dc:	4013      	ands	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	051b      	lsls	r3, r3, #20
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a19      	ldr	r2, [pc, #100]	; (8008468 <TIM_OC6_SetConfig+0xb8>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00f      	beq.n	8008428 <TIM_OC6_SetConfig+0x78>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a18      	ldr	r2, [pc, #96]	; (800846c <TIM_OC6_SetConfig+0xbc>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00b      	beq.n	8008428 <TIM_OC6_SetConfig+0x78>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a17      	ldr	r2, [pc, #92]	; (8008470 <TIM_OC6_SetConfig+0xc0>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d007      	beq.n	8008428 <TIM_OC6_SetConfig+0x78>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a16      	ldr	r2, [pc, #88]	; (8008474 <TIM_OC6_SetConfig+0xc4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_OC6_SetConfig+0x78>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a15      	ldr	r2, [pc, #84]	; (8008478 <TIM_OC6_SetConfig+0xc8>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d109      	bne.n	800843c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800842e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	695b      	ldr	r3, [r3, #20]
 8008434:	029b      	lsls	r3, r3, #10
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	4313      	orrs	r3, r2
 800843a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	621a      	str	r2, [r3, #32]
}
 8008456:	bf00      	nop
 8008458:	371c      	adds	r7, #28
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	feff8fff 	.word	0xfeff8fff
 8008468:	40010000 	.word	0x40010000
 800846c:	40010400 	.word	0x40010400
 8008470:	40014000 	.word	0x40014000
 8008474:	40014400 	.word	0x40014400
 8008478:	40014800 	.word	0x40014800

0800847c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6a1b      	ldr	r3, [r3, #32]
 800848c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	f023 0201 	bic.w	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f023 030a 	bic.w	r3, r3, #10
 80084b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084da:	b480      	push	{r7}
 80084dc:	b087      	sub	sp, #28
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	f023 0210 	bic.w	r2, r3, #16
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	031b      	lsls	r3, r3, #12
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	4313      	orrs	r3, r2
 800850e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	621a      	str	r2, [r3, #32]
}
 800852e:	bf00      	nop
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
	...

0800853c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4b09      	ldr	r3, [pc, #36]	; (8008574 <TIM_ITRx_SetConfig+0x38>)
 8008550:	4013      	ands	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4313      	orrs	r3, r2
 800855a:	f043 0307 	orr.w	r3, r3, #7
 800855e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	609a      	str	r2, [r3, #8]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	ffcfff8f 	.word	0xffcfff8f

08008578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	021a      	lsls	r2, r3, #8
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	431a      	orrs	r2, r3
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	4313      	orrs	r3, r2
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	609a      	str	r2, [r3, #8]
}
 80085ac:	bf00      	nop
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f003 031f 	and.w	r3, r3, #31
 80085ca:	2201      	movs	r2, #1
 80085cc:	fa02 f303 	lsl.w	r3, r2, r3
 80085d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6a1a      	ldr	r2, [r3, #32]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	43db      	mvns	r3, r3
 80085da:	401a      	ands	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a1a      	ldr	r2, [r3, #32]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	fa01 f303 	lsl.w	r3, r1, r3
 80085f0:	431a      	orrs	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	621a      	str	r2, [r3, #32]
}
 80085f6:	bf00      	nop
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
	...

08008604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008618:	2302      	movs	r3, #2
 800861a:	e077      	b.n	800870c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a35      	ldr	r2, [pc, #212]	; (8008718 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d004      	beq.n	8008650 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a34      	ldr	r2, [pc, #208]	; (800871c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d108      	bne.n	8008662 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4313      	orrs	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a25      	ldr	r2, [pc, #148]	; (8008718 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d02c      	beq.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868e:	d027      	beq.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a22      	ldr	r2, [pc, #136]	; (8008720 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d022      	beq.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a21      	ldr	r2, [pc, #132]	; (8008724 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d01d      	beq.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a1f      	ldr	r2, [pc, #124]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d018      	beq.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1a      	ldr	r2, [pc, #104]	; (800871c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d013      	beq.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1b      	ldr	r2, [pc, #108]	; (800872c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d00e      	beq.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a1a      	ldr	r2, [pc, #104]	; (8008730 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d009      	beq.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a18      	ldr	r2, [pc, #96]	; (8008734 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d004      	beq.n	80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a17      	ldr	r2, [pc, #92]	; (8008738 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d10c      	bne.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	40010000 	.word	0x40010000
 800871c:	40010400 	.word	0x40010400
 8008720:	40000400 	.word	0x40000400
 8008724:	40000800 	.word	0x40000800
 8008728:	40000c00 	.word	0x40000c00
 800872c:	40001800 	.word	0x40001800
 8008730:	40014000 	.word	0x40014000
 8008734:	4000e000 	.word	0x4000e000
 8008738:	4000e400 	.word	0x4000e400

0800873c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008754:	2302      	movs	r3, #2
 8008756:	e087      	b.n	8008868 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	4313      	orrs	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	4313      	orrs	r3, r2
 8008788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087be:	4313      	orrs	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	041b      	lsls	r3, r3, #16
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a27      	ldr	r2, [pc, #156]	; (8008874 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d004      	beq.n	80087e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a25      	ldr	r2, [pc, #148]	; (8008878 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d106      	bne.n	80087f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a1e      	ldr	r2, [pc, #120]	; (8008874 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d004      	beq.n	8008808 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a1d      	ldr	r2, [pc, #116]	; (8008878 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d126      	bne.n	8008856 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	051b      	lsls	r3, r3, #20
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a0e      	ldr	r2, [pc, #56]	; (8008874 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d004      	beq.n	8008848 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a0d      	ldr	r2, [pc, #52]	; (8008878 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d106      	bne.n	8008856 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	40010000 	.word	0x40010000
 8008878:	40010400 	.word	0x40010400

0800887c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e042      	b.n	8008914 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7f8 faaf 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2224      	movs	r2, #36	; 0x24
 80088aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0201 	bic.w	r2, r2, #1
 80088bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fc9c 	bl	80091fc <UART_SetConfig>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e022      	b.n	8008914 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 fafc 	bl	8009ed4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0201 	orr.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 fb83 	bl	800a018 <UART_CheckIdleState>
 8008912:	4603      	mov	r3, r0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	; 0x28
 8008920:	af02      	add	r7, sp, #8
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	4613      	mov	r3, r2
 800892a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008932:	2b20      	cmp	r3, #32
 8008934:	d17b      	bne.n	8008a2e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <HAL_UART_Transmit+0x26>
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d101      	bne.n	8008946 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e074      	b.n	8008a30 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2221      	movs	r2, #33	; 0x21
 8008952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008956:	f7f8 ffa5 	bl	80018a4 <HAL_GetTick>
 800895a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	88fa      	ldrh	r2, [r7, #6]
 8008960:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	88fa      	ldrh	r2, [r7, #6]
 8008968:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008974:	d108      	bne.n	8008988 <HAL_UART_Transmit+0x6c>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d104      	bne.n	8008988 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	61bb      	str	r3, [r7, #24]
 8008986:	e003      	b.n	8008990 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800898c:	2300      	movs	r3, #0
 800898e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008990:	e030      	b.n	80089f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2200      	movs	r2, #0
 800899a:	2180      	movs	r1, #128	; 0x80
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f001 fbe5 	bl	800a16c <UART_WaitOnFlagUntilTimeout>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e03d      	b.n	8008a30 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10b      	bne.n	80089d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	3302      	adds	r3, #2
 80089ce:	61bb      	str	r3, [r7, #24]
 80089d0:	e007      	b.n	80089e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	781a      	ldrb	r2, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	3301      	adds	r3, #1
 80089e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1c8      	bne.n	8008992 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2200      	movs	r2, #0
 8008a08:	2140      	movs	r1, #64	; 0x40
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f001 fbae 	bl	800a16c <UART_WaitOnFlagUntilTimeout>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d005      	beq.n	8008a22 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e006      	b.n	8008a30 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e000      	b.n	8008a30 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a2e:	2302      	movs	r3, #2
  }
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3720      	adds	r7, #32
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b0ba      	sub	sp, #232	; 0xe8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008a62:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a66:	4013      	ands	r3, r2
 8008a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d11b      	bne.n	8008aac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a78:	f003 0320 	and.w	r3, r3, #32
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d015      	beq.n	8008aac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a84:	f003 0320 	and.w	r3, r3, #32
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d105      	bne.n	8008a98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d009      	beq.n	8008aac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8377 	beq.w	8009190 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
      }
      return;
 8008aaa:	e371      	b.n	8009190 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 8123 	beq.w	8008cfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ab6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008aba:	4b8d      	ldr	r3, [pc, #564]	; (8008cf0 <HAL_UART_IRQHandler+0x2b8>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d106      	bne.n	8008ad0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ac2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ac6:	4b8b      	ldr	r3, [pc, #556]	; (8008cf4 <HAL_UART_IRQHandler+0x2bc>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8116 	beq.w	8008cfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d011      	beq.n	8008b00 <HAL_UART_IRQHandler+0xc8>
 8008adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00b      	beq.n	8008b00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2201      	movs	r2, #1
 8008aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af6:	f043 0201 	orr.w	r2, r3, #1
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b04:	f003 0302 	and.w	r3, r3, #2
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d011      	beq.n	8008b30 <HAL_UART_IRQHandler+0xf8>
 8008b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b26:	f043 0204 	orr.w	r2, r3, #4
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d011      	beq.n	8008b60 <HAL_UART_IRQHandler+0x128>
 8008b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b40:	f003 0301 	and.w	r3, r3, #1
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b56:	f043 0202 	orr.w	r2, r3, #2
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b64:	f003 0308 	and.w	r3, r3, #8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d017      	beq.n	8008b9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b70:	f003 0320 	and.w	r3, r3, #32
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008b7c:	4b5c      	ldr	r3, [pc, #368]	; (8008cf0 <HAL_UART_IRQHandler+0x2b8>)
 8008b7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2208      	movs	r2, #8
 8008b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b92:	f043 0208 	orr.w	r2, r3, #8
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d012      	beq.n	8008bce <HAL_UART_IRQHandler+0x196>
 8008ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00c      	beq.n	8008bce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc4:	f043 0220 	orr.w	r2, r3, #32
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 82dd 	beq.w	8009194 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d013      	beq.n	8008c0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d105      	bne.n	8008bfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d007      	beq.n	8008c0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c22:	2b40      	cmp	r3, #64	; 0x40
 8008c24:	d005      	beq.n	8008c32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d054      	beq.n	8008cdc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 fbea 	bl	800a40c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c42:	2b40      	cmp	r3, #64	; 0x40
 8008c44:	d146      	bne.n	8008cd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3308      	adds	r3, #8
 8008c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1d9      	bne.n	8008c46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d017      	beq.n	8008ccc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ca2:	4a15      	ldr	r2, [pc, #84]	; (8008cf8 <HAL_UART_IRQHandler+0x2c0>)
 8008ca4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7f9 fff5 	bl	8002c9c <HAL_DMA_Abort_IT>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d019      	beq.n	8008cec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008cc6:	4610      	mov	r0, r2
 8008cc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cca:	e00f      	b.n	8008cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fa8b 	bl	80091e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd2:	e00b      	b.n	8008cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fa87 	bl	80091e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cda:	e007      	b.n	8008cec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fa83 	bl	80091e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008cea:	e253      	b.n	8009194 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cec:	bf00      	nop
    return;
 8008cee:	e251      	b.n	8009194 <HAL_UART_IRQHandler+0x75c>
 8008cf0:	10000001 	.word	0x10000001
 8008cf4:	04000120 	.word	0x04000120
 8008cf8:	0800a6bf 	.word	0x0800a6bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	f040 81e7 	bne.w	80090d4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0a:	f003 0310 	and.w	r3, r3, #16
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 81e0 	beq.w	80090d4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d18:	f003 0310 	and.w	r3, r3, #16
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 81d9 	beq.w	80090d4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2210      	movs	r2, #16
 8008d28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d34:	2b40      	cmp	r3, #64	; 0x40
 8008d36:	f040 8151 	bne.w	8008fdc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a96      	ldr	r2, [pc, #600]	; (8008f9c <HAL_UART_IRQHandler+0x564>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d068      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a93      	ldr	r2, [pc, #588]	; (8008fa0 <HAL_UART_IRQHandler+0x568>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d061      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a91      	ldr	r2, [pc, #580]	; (8008fa4 <HAL_UART_IRQHandler+0x56c>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d05a      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a8e      	ldr	r2, [pc, #568]	; (8008fa8 <HAL_UART_IRQHandler+0x570>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d053      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a8c      	ldr	r2, [pc, #560]	; (8008fac <HAL_UART_IRQHandler+0x574>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d04c      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a89      	ldr	r2, [pc, #548]	; (8008fb0 <HAL_UART_IRQHandler+0x578>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d045      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a87      	ldr	r2, [pc, #540]	; (8008fb4 <HAL_UART_IRQHandler+0x57c>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d03e      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a84      	ldr	r2, [pc, #528]	; (8008fb8 <HAL_UART_IRQHandler+0x580>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d037      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a82      	ldr	r2, [pc, #520]	; (8008fbc <HAL_UART_IRQHandler+0x584>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d030      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a7f      	ldr	r2, [pc, #508]	; (8008fc0 <HAL_UART_IRQHandler+0x588>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d029      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a7d      	ldr	r2, [pc, #500]	; (8008fc4 <HAL_UART_IRQHandler+0x58c>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d022      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a7a      	ldr	r2, [pc, #488]	; (8008fc8 <HAL_UART_IRQHandler+0x590>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d01b      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a78      	ldr	r2, [pc, #480]	; (8008fcc <HAL_UART_IRQHandler+0x594>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d014      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a75      	ldr	r2, [pc, #468]	; (8008fd0 <HAL_UART_IRQHandler+0x598>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d00d      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a73      	ldr	r2, [pc, #460]	; (8008fd4 <HAL_UART_IRQHandler+0x59c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d006      	beq.n	8008e1a <HAL_UART_IRQHandler+0x3e2>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a70      	ldr	r2, [pc, #448]	; (8008fd8 <HAL_UART_IRQHandler+0x5a0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d106      	bne.n	8008e28 <HAL_UART_IRQHandler+0x3f0>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	e005      	b.n	8008e34 <HAL_UART_IRQHandler+0x3fc>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 81ab 	beq.w	8009198 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	f080 81a3 	bcs.w	8009198 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e68:	f000 8087 	beq.w	8008f7a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	461a      	mov	r2, r3
 8008e92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1da      	bne.n	8008e6c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008eda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ede:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e1      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3308      	adds	r3, #8
 8008f12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e3      	bne.n	8008ef2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f40:	e853 3f00 	ldrex	r3, [r3]
 8008f44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f48:	f023 0310 	bic.w	r3, r3, #16
 8008f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e4      	bne.n	8008f38 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7f9 fb73 	bl	8002660 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7f7 fb37 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f9a:	e0fd      	b.n	8009198 <HAL_UART_IRQHandler+0x760>
 8008f9c:	40020010 	.word	0x40020010
 8008fa0:	40020028 	.word	0x40020028
 8008fa4:	40020040 	.word	0x40020040
 8008fa8:	40020058 	.word	0x40020058
 8008fac:	40020070 	.word	0x40020070
 8008fb0:	40020088 	.word	0x40020088
 8008fb4:	400200a0 	.word	0x400200a0
 8008fb8:	400200b8 	.word	0x400200b8
 8008fbc:	40020410 	.word	0x40020410
 8008fc0:	40020428 	.word	0x40020428
 8008fc4:	40020440 	.word	0x40020440
 8008fc8:	40020458 	.word	0x40020458
 8008fcc:	40020470 	.word	0x40020470
 8008fd0:	40020488 	.word	0x40020488
 8008fd4:	400204a0 	.word	0x400204a0
 8008fd8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 80cf 	beq.w	800919c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008ffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 80ca 	beq.w	800919c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	e853 3f00 	ldrex	r3, [r3]
 8009014:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800901c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800902a:	647b      	str	r3, [r7, #68]	; 0x44
 800902c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e4      	bne.n	8009008 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	623b      	str	r3, [r7, #32]
   return(result);
 800904e:	6a3a      	ldr	r2, [r7, #32]
 8009050:	4b55      	ldr	r3, [pc, #340]	; (80091a8 <HAL_UART_IRQHandler+0x770>)
 8009052:	4013      	ands	r3, r2
 8009054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009062:	633a      	str	r2, [r7, #48]	; 0x30
 8009064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e3      	bne.n	800903e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	e853 3f00 	ldrex	r3, [r3]
 8009096:	60fb      	str	r3, [r7, #12]
   return(result);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 0310 	bic.w	r3, r3, #16
 800909e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80090ac:	61fb      	str	r3, [r7, #28]
 80090ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	69b9      	ldr	r1, [r7, #24]
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	617b      	str	r3, [r7, #20]
   return(result);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e4      	bne.n	800908a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7f7 fa9b 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090d2:	e063      	b.n	800919c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00e      	beq.n	80090fe <HAL_UART_IRQHandler+0x6c6>
 80090e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d008      	beq.n	80090fe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80090f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f001 fb22 	bl	800a740 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090fc:	e051      	b.n	80091a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009106:	2b00      	cmp	r3, #0
 8009108:	d014      	beq.n	8009134 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800910a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800910e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009112:	2b00      	cmp	r3, #0
 8009114:	d105      	bne.n	8009122 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800911a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d008      	beq.n	8009134 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009126:	2b00      	cmp	r3, #0
 8009128:	d03a      	beq.n	80091a0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	4798      	blx	r3
    }
    return;
 8009132:	e035      	b.n	80091a0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d009      	beq.n	8009154 <HAL_UART_IRQHandler+0x71c>
 8009140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 facc 	bl	800a6ea <UART_EndTransmit_IT>
    return;
 8009152:	e026      	b.n	80091a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d009      	beq.n	8009174 <HAL_UART_IRQHandler+0x73c>
 8009160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 fafb 	bl	800a768 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009172:	e016      	b.n	80091a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d010      	beq.n	80091a2 <HAL_UART_IRQHandler+0x76a>
 8009180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009184:	2b00      	cmp	r3, #0
 8009186:	da0c      	bge.n	80091a2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f001 fae3 	bl	800a754 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800918e:	e008      	b.n	80091a2 <HAL_UART_IRQHandler+0x76a>
      return;
 8009190:	bf00      	nop
 8009192:	e006      	b.n	80091a2 <HAL_UART_IRQHandler+0x76a>
    return;
 8009194:	bf00      	nop
 8009196:	e004      	b.n	80091a2 <HAL_UART_IRQHandler+0x76a>
      return;
 8009198:	bf00      	nop
 800919a:	e002      	b.n	80091a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800919c:	bf00      	nop
 800919e:	e000      	b.n	80091a2 <HAL_UART_IRQHandler+0x76a>
    return;
 80091a0:	bf00      	nop
  }
}
 80091a2:	37e8      	adds	r7, #232	; 0xe8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	effffffe 	.word	0xeffffffe

080091ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009200:	b092      	sub	sp, #72	; 0x48
 8009202:	af00      	add	r7, sp, #0
 8009204:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	689a      	ldr	r2, [r3, #8]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	431a      	orrs	r2, r3
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	431a      	orrs	r2, r3
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	4313      	orrs	r3, r2
 8009222:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	4bbe      	ldr	r3, [pc, #760]	; (8009524 <UART_SetConfig+0x328>)
 800922c:	4013      	ands	r3, r2
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	6812      	ldr	r2, [r2, #0]
 8009232:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009234:	430b      	orrs	r3, r1
 8009236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4ab3      	ldr	r2, [pc, #716]	; (8009528 <UART_SetConfig+0x32c>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d004      	beq.n	8009268 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009264:	4313      	orrs	r3, r2
 8009266:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	689a      	ldr	r2, [r3, #8]
 800926e:	4baf      	ldr	r3, [pc, #700]	; (800952c <UART_SetConfig+0x330>)
 8009270:	4013      	ands	r3, r2
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009278:	430b      	orrs	r3, r1
 800927a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009282:	f023 010f 	bic.w	r1, r3, #15
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4aa6      	ldr	r2, [pc, #664]	; (8009530 <UART_SetConfig+0x334>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d177      	bne.n	800938c <UART_SetConfig+0x190>
 800929c:	4ba5      	ldr	r3, [pc, #660]	; (8009534 <UART_SetConfig+0x338>)
 800929e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092a4:	2b28      	cmp	r3, #40	; 0x28
 80092a6:	d86d      	bhi.n	8009384 <UART_SetConfig+0x188>
 80092a8:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <UART_SetConfig+0xb4>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	08009355 	.word	0x08009355
 80092b4:	08009385 	.word	0x08009385
 80092b8:	08009385 	.word	0x08009385
 80092bc:	08009385 	.word	0x08009385
 80092c0:	08009385 	.word	0x08009385
 80092c4:	08009385 	.word	0x08009385
 80092c8:	08009385 	.word	0x08009385
 80092cc:	08009385 	.word	0x08009385
 80092d0:	0800935d 	.word	0x0800935d
 80092d4:	08009385 	.word	0x08009385
 80092d8:	08009385 	.word	0x08009385
 80092dc:	08009385 	.word	0x08009385
 80092e0:	08009385 	.word	0x08009385
 80092e4:	08009385 	.word	0x08009385
 80092e8:	08009385 	.word	0x08009385
 80092ec:	08009385 	.word	0x08009385
 80092f0:	08009365 	.word	0x08009365
 80092f4:	08009385 	.word	0x08009385
 80092f8:	08009385 	.word	0x08009385
 80092fc:	08009385 	.word	0x08009385
 8009300:	08009385 	.word	0x08009385
 8009304:	08009385 	.word	0x08009385
 8009308:	08009385 	.word	0x08009385
 800930c:	08009385 	.word	0x08009385
 8009310:	0800936d 	.word	0x0800936d
 8009314:	08009385 	.word	0x08009385
 8009318:	08009385 	.word	0x08009385
 800931c:	08009385 	.word	0x08009385
 8009320:	08009385 	.word	0x08009385
 8009324:	08009385 	.word	0x08009385
 8009328:	08009385 	.word	0x08009385
 800932c:	08009385 	.word	0x08009385
 8009330:	08009375 	.word	0x08009375
 8009334:	08009385 	.word	0x08009385
 8009338:	08009385 	.word	0x08009385
 800933c:	08009385 	.word	0x08009385
 8009340:	08009385 	.word	0x08009385
 8009344:	08009385 	.word	0x08009385
 8009348:	08009385 	.word	0x08009385
 800934c:	08009385 	.word	0x08009385
 8009350:	0800937d 	.word	0x0800937d
 8009354:	2301      	movs	r3, #1
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800935a:	e326      	b.n	80099aa <UART_SetConfig+0x7ae>
 800935c:	2304      	movs	r3, #4
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009362:	e322      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009364:	2308      	movs	r3, #8
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800936a:	e31e      	b.n	80099aa <UART_SetConfig+0x7ae>
 800936c:	2310      	movs	r3, #16
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009372:	e31a      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009374:	2320      	movs	r3, #32
 8009376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800937a:	e316      	b.n	80099aa <UART_SetConfig+0x7ae>
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009382:	e312      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009384:	2380      	movs	r3, #128	; 0x80
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800938a:	e30e      	b.n	80099aa <UART_SetConfig+0x7ae>
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a69      	ldr	r2, [pc, #420]	; (8009538 <UART_SetConfig+0x33c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d130      	bne.n	80093f8 <UART_SetConfig+0x1fc>
 8009396:	4b67      	ldr	r3, [pc, #412]	; (8009534 <UART_SetConfig+0x338>)
 8009398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	2b05      	cmp	r3, #5
 80093a0:	d826      	bhi.n	80093f0 <UART_SetConfig+0x1f4>
 80093a2:	a201      	add	r2, pc, #4	; (adr r2, 80093a8 <UART_SetConfig+0x1ac>)
 80093a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a8:	080093c1 	.word	0x080093c1
 80093ac:	080093c9 	.word	0x080093c9
 80093b0:	080093d1 	.word	0x080093d1
 80093b4:	080093d9 	.word	0x080093d9
 80093b8:	080093e1 	.word	0x080093e1
 80093bc:	080093e9 	.word	0x080093e9
 80093c0:	2300      	movs	r3, #0
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093c6:	e2f0      	b.n	80099aa <UART_SetConfig+0x7ae>
 80093c8:	2304      	movs	r3, #4
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ce:	e2ec      	b.n	80099aa <UART_SetConfig+0x7ae>
 80093d0:	2308      	movs	r3, #8
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093d6:	e2e8      	b.n	80099aa <UART_SetConfig+0x7ae>
 80093d8:	2310      	movs	r3, #16
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e2e4      	b.n	80099aa <UART_SetConfig+0x7ae>
 80093e0:	2320      	movs	r3, #32
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093e6:	e2e0      	b.n	80099aa <UART_SetConfig+0x7ae>
 80093e8:	2340      	movs	r3, #64	; 0x40
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ee:	e2dc      	b.n	80099aa <UART_SetConfig+0x7ae>
 80093f0:	2380      	movs	r3, #128	; 0x80
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093f6:	e2d8      	b.n	80099aa <UART_SetConfig+0x7ae>
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a4f      	ldr	r2, [pc, #316]	; (800953c <UART_SetConfig+0x340>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d130      	bne.n	8009464 <UART_SetConfig+0x268>
 8009402:	4b4c      	ldr	r3, [pc, #304]	; (8009534 <UART_SetConfig+0x338>)
 8009404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	2b05      	cmp	r3, #5
 800940c:	d826      	bhi.n	800945c <UART_SetConfig+0x260>
 800940e:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <UART_SetConfig+0x218>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	0800942d 	.word	0x0800942d
 8009418:	08009435 	.word	0x08009435
 800941c:	0800943d 	.word	0x0800943d
 8009420:	08009445 	.word	0x08009445
 8009424:	0800944d 	.word	0x0800944d
 8009428:	08009455 	.word	0x08009455
 800942c:	2300      	movs	r3, #0
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009432:	e2ba      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009434:	2304      	movs	r3, #4
 8009436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800943a:	e2b6      	b.n	80099aa <UART_SetConfig+0x7ae>
 800943c:	2308      	movs	r3, #8
 800943e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009442:	e2b2      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009444:	2310      	movs	r3, #16
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800944a:	e2ae      	b.n	80099aa <UART_SetConfig+0x7ae>
 800944c:	2320      	movs	r3, #32
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009452:	e2aa      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009454:	2340      	movs	r3, #64	; 0x40
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800945a:	e2a6      	b.n	80099aa <UART_SetConfig+0x7ae>
 800945c:	2380      	movs	r3, #128	; 0x80
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009462:	e2a2      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a35      	ldr	r2, [pc, #212]	; (8009540 <UART_SetConfig+0x344>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d130      	bne.n	80094d0 <UART_SetConfig+0x2d4>
 800946e:	4b31      	ldr	r3, [pc, #196]	; (8009534 <UART_SetConfig+0x338>)
 8009470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009472:	f003 0307 	and.w	r3, r3, #7
 8009476:	2b05      	cmp	r3, #5
 8009478:	d826      	bhi.n	80094c8 <UART_SetConfig+0x2cc>
 800947a:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <UART_SetConfig+0x284>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	08009499 	.word	0x08009499
 8009484:	080094a1 	.word	0x080094a1
 8009488:	080094a9 	.word	0x080094a9
 800948c:	080094b1 	.word	0x080094b1
 8009490:	080094b9 	.word	0x080094b9
 8009494:	080094c1 	.word	0x080094c1
 8009498:	2300      	movs	r3, #0
 800949a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949e:	e284      	b.n	80099aa <UART_SetConfig+0x7ae>
 80094a0:	2304      	movs	r3, #4
 80094a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094a6:	e280      	b.n	80099aa <UART_SetConfig+0x7ae>
 80094a8:	2308      	movs	r3, #8
 80094aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ae:	e27c      	b.n	80099aa <UART_SetConfig+0x7ae>
 80094b0:	2310      	movs	r3, #16
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094b6:	e278      	b.n	80099aa <UART_SetConfig+0x7ae>
 80094b8:	2320      	movs	r3, #32
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094be:	e274      	b.n	80099aa <UART_SetConfig+0x7ae>
 80094c0:	2340      	movs	r3, #64	; 0x40
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c6:	e270      	b.n	80099aa <UART_SetConfig+0x7ae>
 80094c8:	2380      	movs	r3, #128	; 0x80
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ce:	e26c      	b.n	80099aa <UART_SetConfig+0x7ae>
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a1b      	ldr	r2, [pc, #108]	; (8009544 <UART_SetConfig+0x348>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d142      	bne.n	8009560 <UART_SetConfig+0x364>
 80094da:	4b16      	ldr	r3, [pc, #88]	; (8009534 <UART_SetConfig+0x338>)
 80094dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	2b05      	cmp	r3, #5
 80094e4:	d838      	bhi.n	8009558 <UART_SetConfig+0x35c>
 80094e6:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <UART_SetConfig+0x2f0>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	08009505 	.word	0x08009505
 80094f0:	0800950d 	.word	0x0800950d
 80094f4:	08009515 	.word	0x08009515
 80094f8:	0800951d 	.word	0x0800951d
 80094fc:	08009549 	.word	0x08009549
 8009500:	08009551 	.word	0x08009551
 8009504:	2300      	movs	r3, #0
 8009506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950a:	e24e      	b.n	80099aa <UART_SetConfig+0x7ae>
 800950c:	2304      	movs	r3, #4
 800950e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009512:	e24a      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009514:	2308      	movs	r3, #8
 8009516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951a:	e246      	b.n	80099aa <UART_SetConfig+0x7ae>
 800951c:	2310      	movs	r3, #16
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009522:	e242      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009524:	cfff69f3 	.word	0xcfff69f3
 8009528:	58000c00 	.word	0x58000c00
 800952c:	11fff4ff 	.word	0x11fff4ff
 8009530:	40011000 	.word	0x40011000
 8009534:	58024400 	.word	0x58024400
 8009538:	40004400 	.word	0x40004400
 800953c:	40004800 	.word	0x40004800
 8009540:	40004c00 	.word	0x40004c00
 8009544:	40005000 	.word	0x40005000
 8009548:	2320      	movs	r3, #32
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954e:	e22c      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009550:	2340      	movs	r3, #64	; 0x40
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009556:	e228      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009558:	2380      	movs	r3, #128	; 0x80
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955e:	e224      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4ab1      	ldr	r2, [pc, #708]	; (800982c <UART_SetConfig+0x630>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d176      	bne.n	8009658 <UART_SetConfig+0x45c>
 800956a:	4bb1      	ldr	r3, [pc, #708]	; (8009830 <UART_SetConfig+0x634>)
 800956c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009572:	2b28      	cmp	r3, #40	; 0x28
 8009574:	d86c      	bhi.n	8009650 <UART_SetConfig+0x454>
 8009576:	a201      	add	r2, pc, #4	; (adr r2, 800957c <UART_SetConfig+0x380>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	08009621 	.word	0x08009621
 8009580:	08009651 	.word	0x08009651
 8009584:	08009651 	.word	0x08009651
 8009588:	08009651 	.word	0x08009651
 800958c:	08009651 	.word	0x08009651
 8009590:	08009651 	.word	0x08009651
 8009594:	08009651 	.word	0x08009651
 8009598:	08009651 	.word	0x08009651
 800959c:	08009629 	.word	0x08009629
 80095a0:	08009651 	.word	0x08009651
 80095a4:	08009651 	.word	0x08009651
 80095a8:	08009651 	.word	0x08009651
 80095ac:	08009651 	.word	0x08009651
 80095b0:	08009651 	.word	0x08009651
 80095b4:	08009651 	.word	0x08009651
 80095b8:	08009651 	.word	0x08009651
 80095bc:	08009631 	.word	0x08009631
 80095c0:	08009651 	.word	0x08009651
 80095c4:	08009651 	.word	0x08009651
 80095c8:	08009651 	.word	0x08009651
 80095cc:	08009651 	.word	0x08009651
 80095d0:	08009651 	.word	0x08009651
 80095d4:	08009651 	.word	0x08009651
 80095d8:	08009651 	.word	0x08009651
 80095dc:	08009639 	.word	0x08009639
 80095e0:	08009651 	.word	0x08009651
 80095e4:	08009651 	.word	0x08009651
 80095e8:	08009651 	.word	0x08009651
 80095ec:	08009651 	.word	0x08009651
 80095f0:	08009651 	.word	0x08009651
 80095f4:	08009651 	.word	0x08009651
 80095f8:	08009651 	.word	0x08009651
 80095fc:	08009641 	.word	0x08009641
 8009600:	08009651 	.word	0x08009651
 8009604:	08009651 	.word	0x08009651
 8009608:	08009651 	.word	0x08009651
 800960c:	08009651 	.word	0x08009651
 8009610:	08009651 	.word	0x08009651
 8009614:	08009651 	.word	0x08009651
 8009618:	08009651 	.word	0x08009651
 800961c:	08009649 	.word	0x08009649
 8009620:	2301      	movs	r3, #1
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009626:	e1c0      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009628:	2304      	movs	r3, #4
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962e:	e1bc      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009630:	2308      	movs	r3, #8
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009636:	e1b8      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009638:	2310      	movs	r3, #16
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963e:	e1b4      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009640:	2320      	movs	r3, #32
 8009642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009646:	e1b0      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009648:	2340      	movs	r3, #64	; 0x40
 800964a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964e:	e1ac      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009650:	2380      	movs	r3, #128	; 0x80
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009656:	e1a8      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a75      	ldr	r2, [pc, #468]	; (8009834 <UART_SetConfig+0x638>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d130      	bne.n	80096c4 <UART_SetConfig+0x4c8>
 8009662:	4b73      	ldr	r3, [pc, #460]	; (8009830 <UART_SetConfig+0x634>)
 8009664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	2b05      	cmp	r3, #5
 800966c:	d826      	bhi.n	80096bc <UART_SetConfig+0x4c0>
 800966e:	a201      	add	r2, pc, #4	; (adr r2, 8009674 <UART_SetConfig+0x478>)
 8009670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009674:	0800968d 	.word	0x0800968d
 8009678:	08009695 	.word	0x08009695
 800967c:	0800969d 	.word	0x0800969d
 8009680:	080096a5 	.word	0x080096a5
 8009684:	080096ad 	.word	0x080096ad
 8009688:	080096b5 	.word	0x080096b5
 800968c:	2300      	movs	r3, #0
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009692:	e18a      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009694:	2304      	movs	r3, #4
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800969a:	e186      	b.n	80099aa <UART_SetConfig+0x7ae>
 800969c:	2308      	movs	r3, #8
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a2:	e182      	b.n	80099aa <UART_SetConfig+0x7ae>
 80096a4:	2310      	movs	r3, #16
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096aa:	e17e      	b.n	80099aa <UART_SetConfig+0x7ae>
 80096ac:	2320      	movs	r3, #32
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b2:	e17a      	b.n	80099aa <UART_SetConfig+0x7ae>
 80096b4:	2340      	movs	r3, #64	; 0x40
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ba:	e176      	b.n	80099aa <UART_SetConfig+0x7ae>
 80096bc:	2380      	movs	r3, #128	; 0x80
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c2:	e172      	b.n	80099aa <UART_SetConfig+0x7ae>
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a5b      	ldr	r2, [pc, #364]	; (8009838 <UART_SetConfig+0x63c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d130      	bne.n	8009730 <UART_SetConfig+0x534>
 80096ce:	4b58      	ldr	r3, [pc, #352]	; (8009830 <UART_SetConfig+0x634>)
 80096d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d2:	f003 0307 	and.w	r3, r3, #7
 80096d6:	2b05      	cmp	r3, #5
 80096d8:	d826      	bhi.n	8009728 <UART_SetConfig+0x52c>
 80096da:	a201      	add	r2, pc, #4	; (adr r2, 80096e0 <UART_SetConfig+0x4e4>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	080096f9 	.word	0x080096f9
 80096e4:	08009701 	.word	0x08009701
 80096e8:	08009709 	.word	0x08009709
 80096ec:	08009711 	.word	0x08009711
 80096f0:	08009719 	.word	0x08009719
 80096f4:	08009721 	.word	0x08009721
 80096f8:	2300      	movs	r3, #0
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fe:	e154      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009700:	2304      	movs	r3, #4
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009706:	e150      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009708:	2308      	movs	r3, #8
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970e:	e14c      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009710:	2310      	movs	r3, #16
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009716:	e148      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009718:	2320      	movs	r3, #32
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971e:	e144      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009720:	2340      	movs	r3, #64	; 0x40
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009726:	e140      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009728:	2380      	movs	r3, #128	; 0x80
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972e:	e13c      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a41      	ldr	r2, [pc, #260]	; (800983c <UART_SetConfig+0x640>)
 8009736:	4293      	cmp	r3, r2
 8009738:	f040 8082 	bne.w	8009840 <UART_SetConfig+0x644>
 800973c:	4b3c      	ldr	r3, [pc, #240]	; (8009830 <UART_SetConfig+0x634>)
 800973e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009740:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009744:	2b28      	cmp	r3, #40	; 0x28
 8009746:	d86d      	bhi.n	8009824 <UART_SetConfig+0x628>
 8009748:	a201      	add	r2, pc, #4	; (adr r2, 8009750 <UART_SetConfig+0x554>)
 800974a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974e:	bf00      	nop
 8009750:	080097f5 	.word	0x080097f5
 8009754:	08009825 	.word	0x08009825
 8009758:	08009825 	.word	0x08009825
 800975c:	08009825 	.word	0x08009825
 8009760:	08009825 	.word	0x08009825
 8009764:	08009825 	.word	0x08009825
 8009768:	08009825 	.word	0x08009825
 800976c:	08009825 	.word	0x08009825
 8009770:	080097fd 	.word	0x080097fd
 8009774:	08009825 	.word	0x08009825
 8009778:	08009825 	.word	0x08009825
 800977c:	08009825 	.word	0x08009825
 8009780:	08009825 	.word	0x08009825
 8009784:	08009825 	.word	0x08009825
 8009788:	08009825 	.word	0x08009825
 800978c:	08009825 	.word	0x08009825
 8009790:	08009805 	.word	0x08009805
 8009794:	08009825 	.word	0x08009825
 8009798:	08009825 	.word	0x08009825
 800979c:	08009825 	.word	0x08009825
 80097a0:	08009825 	.word	0x08009825
 80097a4:	08009825 	.word	0x08009825
 80097a8:	08009825 	.word	0x08009825
 80097ac:	08009825 	.word	0x08009825
 80097b0:	0800980d 	.word	0x0800980d
 80097b4:	08009825 	.word	0x08009825
 80097b8:	08009825 	.word	0x08009825
 80097bc:	08009825 	.word	0x08009825
 80097c0:	08009825 	.word	0x08009825
 80097c4:	08009825 	.word	0x08009825
 80097c8:	08009825 	.word	0x08009825
 80097cc:	08009825 	.word	0x08009825
 80097d0:	08009815 	.word	0x08009815
 80097d4:	08009825 	.word	0x08009825
 80097d8:	08009825 	.word	0x08009825
 80097dc:	08009825 	.word	0x08009825
 80097e0:	08009825 	.word	0x08009825
 80097e4:	08009825 	.word	0x08009825
 80097e8:	08009825 	.word	0x08009825
 80097ec:	08009825 	.word	0x08009825
 80097f0:	0800981d 	.word	0x0800981d
 80097f4:	2301      	movs	r3, #1
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e0d6      	b.n	80099aa <UART_SetConfig+0x7ae>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009802:	e0d2      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e0ce      	b.n	80099aa <UART_SetConfig+0x7ae>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009812:	e0ca      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009814:	2320      	movs	r3, #32
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981a:	e0c6      	b.n	80099aa <UART_SetConfig+0x7ae>
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009822:	e0c2      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009824:	2380      	movs	r3, #128	; 0x80
 8009826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982a:	e0be      	b.n	80099aa <UART_SetConfig+0x7ae>
 800982c:	40011400 	.word	0x40011400
 8009830:	58024400 	.word	0x58024400
 8009834:	40007800 	.word	0x40007800
 8009838:	40007c00 	.word	0x40007c00
 800983c:	40011800 	.word	0x40011800
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4aad      	ldr	r2, [pc, #692]	; (8009afc <UART_SetConfig+0x900>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d176      	bne.n	8009938 <UART_SetConfig+0x73c>
 800984a:	4bad      	ldr	r3, [pc, #692]	; (8009b00 <UART_SetConfig+0x904>)
 800984c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009852:	2b28      	cmp	r3, #40	; 0x28
 8009854:	d86c      	bhi.n	8009930 <UART_SetConfig+0x734>
 8009856:	a201      	add	r2, pc, #4	; (adr r2, 800985c <UART_SetConfig+0x660>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009901 	.word	0x08009901
 8009860:	08009931 	.word	0x08009931
 8009864:	08009931 	.word	0x08009931
 8009868:	08009931 	.word	0x08009931
 800986c:	08009931 	.word	0x08009931
 8009870:	08009931 	.word	0x08009931
 8009874:	08009931 	.word	0x08009931
 8009878:	08009931 	.word	0x08009931
 800987c:	08009909 	.word	0x08009909
 8009880:	08009931 	.word	0x08009931
 8009884:	08009931 	.word	0x08009931
 8009888:	08009931 	.word	0x08009931
 800988c:	08009931 	.word	0x08009931
 8009890:	08009931 	.word	0x08009931
 8009894:	08009931 	.word	0x08009931
 8009898:	08009931 	.word	0x08009931
 800989c:	08009911 	.word	0x08009911
 80098a0:	08009931 	.word	0x08009931
 80098a4:	08009931 	.word	0x08009931
 80098a8:	08009931 	.word	0x08009931
 80098ac:	08009931 	.word	0x08009931
 80098b0:	08009931 	.word	0x08009931
 80098b4:	08009931 	.word	0x08009931
 80098b8:	08009931 	.word	0x08009931
 80098bc:	08009919 	.word	0x08009919
 80098c0:	08009931 	.word	0x08009931
 80098c4:	08009931 	.word	0x08009931
 80098c8:	08009931 	.word	0x08009931
 80098cc:	08009931 	.word	0x08009931
 80098d0:	08009931 	.word	0x08009931
 80098d4:	08009931 	.word	0x08009931
 80098d8:	08009931 	.word	0x08009931
 80098dc:	08009921 	.word	0x08009921
 80098e0:	08009931 	.word	0x08009931
 80098e4:	08009931 	.word	0x08009931
 80098e8:	08009931 	.word	0x08009931
 80098ec:	08009931 	.word	0x08009931
 80098f0:	08009931 	.word	0x08009931
 80098f4:	08009931 	.word	0x08009931
 80098f8:	08009931 	.word	0x08009931
 80098fc:	08009929 	.word	0x08009929
 8009900:	2301      	movs	r3, #1
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009906:	e050      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009908:	2304      	movs	r3, #4
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990e:	e04c      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009910:	2308      	movs	r3, #8
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009916:	e048      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009918:	2310      	movs	r3, #16
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991e:	e044      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009920:	2320      	movs	r3, #32
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009926:	e040      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009928:	2340      	movs	r3, #64	; 0x40
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992e:	e03c      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009930:	2380      	movs	r3, #128	; 0x80
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009936:	e038      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a71      	ldr	r2, [pc, #452]	; (8009b04 <UART_SetConfig+0x908>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d130      	bne.n	80099a4 <UART_SetConfig+0x7a8>
 8009942:	4b6f      	ldr	r3, [pc, #444]	; (8009b00 <UART_SetConfig+0x904>)
 8009944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	2b05      	cmp	r3, #5
 800994c:	d826      	bhi.n	800999c <UART_SetConfig+0x7a0>
 800994e:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <UART_SetConfig+0x758>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	0800996d 	.word	0x0800996d
 8009958:	08009975 	.word	0x08009975
 800995c:	0800997d 	.word	0x0800997d
 8009960:	08009985 	.word	0x08009985
 8009964:	0800998d 	.word	0x0800998d
 8009968:	08009995 	.word	0x08009995
 800996c:	2302      	movs	r3, #2
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009972:	e01a      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009974:	2304      	movs	r3, #4
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e016      	b.n	80099aa <UART_SetConfig+0x7ae>
 800997c:	2308      	movs	r3, #8
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009982:	e012      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009984:	2310      	movs	r3, #16
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998a:	e00e      	b.n	80099aa <UART_SetConfig+0x7ae>
 800998c:	2320      	movs	r3, #32
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009992:	e00a      	b.n	80099aa <UART_SetConfig+0x7ae>
 8009994:	2340      	movs	r3, #64	; 0x40
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999a:	e006      	b.n	80099aa <UART_SetConfig+0x7ae>
 800999c:	2380      	movs	r3, #128	; 0x80
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a2:	e002      	b.n	80099aa <UART_SetConfig+0x7ae>
 80099a4:	2380      	movs	r3, #128	; 0x80
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a55      	ldr	r2, [pc, #340]	; (8009b04 <UART_SetConfig+0x908>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	f040 80f8 	bne.w	8009ba6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80099ba:	2b20      	cmp	r3, #32
 80099bc:	dc46      	bgt.n	8009a4c <UART_SetConfig+0x850>
 80099be:	2b02      	cmp	r3, #2
 80099c0:	db75      	blt.n	8009aae <UART_SetConfig+0x8b2>
 80099c2:	3b02      	subs	r3, #2
 80099c4:	2b1e      	cmp	r3, #30
 80099c6:	d872      	bhi.n	8009aae <UART_SetConfig+0x8b2>
 80099c8:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <UART_SetConfig+0x7d4>)
 80099ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ce:	bf00      	nop
 80099d0:	08009a53 	.word	0x08009a53
 80099d4:	08009aaf 	.word	0x08009aaf
 80099d8:	08009a5b 	.word	0x08009a5b
 80099dc:	08009aaf 	.word	0x08009aaf
 80099e0:	08009aaf 	.word	0x08009aaf
 80099e4:	08009aaf 	.word	0x08009aaf
 80099e8:	08009a6b 	.word	0x08009a6b
 80099ec:	08009aaf 	.word	0x08009aaf
 80099f0:	08009aaf 	.word	0x08009aaf
 80099f4:	08009aaf 	.word	0x08009aaf
 80099f8:	08009aaf 	.word	0x08009aaf
 80099fc:	08009aaf 	.word	0x08009aaf
 8009a00:	08009aaf 	.word	0x08009aaf
 8009a04:	08009aaf 	.word	0x08009aaf
 8009a08:	08009a7b 	.word	0x08009a7b
 8009a0c:	08009aaf 	.word	0x08009aaf
 8009a10:	08009aaf 	.word	0x08009aaf
 8009a14:	08009aaf 	.word	0x08009aaf
 8009a18:	08009aaf 	.word	0x08009aaf
 8009a1c:	08009aaf 	.word	0x08009aaf
 8009a20:	08009aaf 	.word	0x08009aaf
 8009a24:	08009aaf 	.word	0x08009aaf
 8009a28:	08009aaf 	.word	0x08009aaf
 8009a2c:	08009aaf 	.word	0x08009aaf
 8009a30:	08009aaf 	.word	0x08009aaf
 8009a34:	08009aaf 	.word	0x08009aaf
 8009a38:	08009aaf 	.word	0x08009aaf
 8009a3c:	08009aaf 	.word	0x08009aaf
 8009a40:	08009aaf 	.word	0x08009aaf
 8009a44:	08009aaf 	.word	0x08009aaf
 8009a48:	08009aa1 	.word	0x08009aa1
 8009a4c:	2b40      	cmp	r3, #64	; 0x40
 8009a4e:	d02a      	beq.n	8009aa6 <UART_SetConfig+0x8aa>
 8009a50:	e02d      	b.n	8009aae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a52:	f7fd f995 	bl	8006d80 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009a58:	e02f      	b.n	8009aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fd f9a4 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a68:	e027      	b.n	8009aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a6a:	f107 0318 	add.w	r3, r7, #24
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fd faf0 	bl	8007054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a78:	e01f      	b.n	8009aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a7a:	4b21      	ldr	r3, [pc, #132]	; (8009b00 <UART_SetConfig+0x904>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d009      	beq.n	8009a9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a86:	4b1e      	ldr	r3, [pc, #120]	; (8009b00 <UART_SetConfig+0x904>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	08db      	lsrs	r3, r3, #3
 8009a8c:	f003 0303 	and.w	r3, r3, #3
 8009a90:	4a1d      	ldr	r2, [pc, #116]	; (8009b08 <UART_SetConfig+0x90c>)
 8009a92:	fa22 f303 	lsr.w	r3, r2, r3
 8009a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a98:	e00f      	b.n	8009aba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009a9a:	4b1b      	ldr	r3, [pc, #108]	; (8009b08 <UART_SetConfig+0x90c>)
 8009a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a9e:	e00c      	b.n	8009aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009aa0:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <UART_SetConfig+0x910>)
 8009aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aa4:	e009      	b.n	8009aba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009aac:	e005      	b.n	8009aba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009ab8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 81ee 	beq.w	8009e9e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac6:	4a12      	ldr	r2, [pc, #72]	; (8009b10 <UART_SetConfig+0x914>)
 8009ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ad4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	4613      	mov	r3, r2
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	4413      	add	r3, r2
 8009ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d305      	bcc.n	8009af2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d910      	bls.n	8009b14 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009af8:	e1d1      	b.n	8009e9e <UART_SetConfig+0xca2>
 8009afa:	bf00      	nop
 8009afc:	40011c00 	.word	0x40011c00
 8009b00:	58024400 	.word	0x58024400
 8009b04:	58000c00 	.word	0x58000c00
 8009b08:	03d09000 	.word	0x03d09000
 8009b0c:	003d0900 	.word	0x003d0900
 8009b10:	0800aab4 	.word	0x0800aab4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	2200      	movs	r2, #0
 8009b18:	60bb      	str	r3, [r7, #8]
 8009b1a:	60fa      	str	r2, [r7, #12]
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	4ac0      	ldr	r2, [pc, #768]	; (8009e24 <UART_SetConfig+0xc28>)
 8009b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	2200      	movs	r2, #0
 8009b2a:	603b      	str	r3, [r7, #0]
 8009b2c:	607a      	str	r2, [r7, #4]
 8009b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b36:	f7f6 fbe9 	bl	800030c <__aeabi_uldivmod>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4610      	mov	r0, r2
 8009b40:	4619      	mov	r1, r3
 8009b42:	f04f 0200 	mov.w	r2, #0
 8009b46:	f04f 0300 	mov.w	r3, #0
 8009b4a:	020b      	lsls	r3, r1, #8
 8009b4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b50:	0202      	lsls	r2, r0, #8
 8009b52:	6979      	ldr	r1, [r7, #20]
 8009b54:	6849      	ldr	r1, [r1, #4]
 8009b56:	0849      	lsrs	r1, r1, #1
 8009b58:	2000      	movs	r0, #0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	eb12 0804 	adds.w	r8, r2, r4
 8009b62:	eb43 0905 	adc.w	r9, r3, r5
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	469a      	mov	sl, r3
 8009b6e:	4693      	mov	fp, r2
 8009b70:	4652      	mov	r2, sl
 8009b72:	465b      	mov	r3, fp
 8009b74:	4640      	mov	r0, r8
 8009b76:	4649      	mov	r1, r9
 8009b78:	f7f6 fbc8 	bl	800030c <__aeabi_uldivmod>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4613      	mov	r3, r2
 8009b82:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b8a:	d308      	bcc.n	8009b9e <UART_SetConfig+0x9a2>
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b92:	d204      	bcs.n	8009b9e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b9a:	60da      	str	r2, [r3, #12]
 8009b9c:	e17f      	b.n	8009e9e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ba4:	e17b      	b.n	8009e9e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bae:	f040 80bd 	bne.w	8009d2c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009bb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009bb6:	2b20      	cmp	r3, #32
 8009bb8:	dc48      	bgt.n	8009c4c <UART_SetConfig+0xa50>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	db7b      	blt.n	8009cb6 <UART_SetConfig+0xaba>
 8009bbe:	2b20      	cmp	r3, #32
 8009bc0:	d879      	bhi.n	8009cb6 <UART_SetConfig+0xaba>
 8009bc2:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <UART_SetConfig+0x9cc>)
 8009bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc8:	08009c53 	.word	0x08009c53
 8009bcc:	08009c5b 	.word	0x08009c5b
 8009bd0:	08009cb7 	.word	0x08009cb7
 8009bd4:	08009cb7 	.word	0x08009cb7
 8009bd8:	08009c63 	.word	0x08009c63
 8009bdc:	08009cb7 	.word	0x08009cb7
 8009be0:	08009cb7 	.word	0x08009cb7
 8009be4:	08009cb7 	.word	0x08009cb7
 8009be8:	08009c73 	.word	0x08009c73
 8009bec:	08009cb7 	.word	0x08009cb7
 8009bf0:	08009cb7 	.word	0x08009cb7
 8009bf4:	08009cb7 	.word	0x08009cb7
 8009bf8:	08009cb7 	.word	0x08009cb7
 8009bfc:	08009cb7 	.word	0x08009cb7
 8009c00:	08009cb7 	.word	0x08009cb7
 8009c04:	08009cb7 	.word	0x08009cb7
 8009c08:	08009c83 	.word	0x08009c83
 8009c0c:	08009cb7 	.word	0x08009cb7
 8009c10:	08009cb7 	.word	0x08009cb7
 8009c14:	08009cb7 	.word	0x08009cb7
 8009c18:	08009cb7 	.word	0x08009cb7
 8009c1c:	08009cb7 	.word	0x08009cb7
 8009c20:	08009cb7 	.word	0x08009cb7
 8009c24:	08009cb7 	.word	0x08009cb7
 8009c28:	08009cb7 	.word	0x08009cb7
 8009c2c:	08009cb7 	.word	0x08009cb7
 8009c30:	08009cb7 	.word	0x08009cb7
 8009c34:	08009cb7 	.word	0x08009cb7
 8009c38:	08009cb7 	.word	0x08009cb7
 8009c3c:	08009cb7 	.word	0x08009cb7
 8009c40:	08009cb7 	.word	0x08009cb7
 8009c44:	08009cb7 	.word	0x08009cb7
 8009c48:	08009ca9 	.word	0x08009ca9
 8009c4c:	2b40      	cmp	r3, #64	; 0x40
 8009c4e:	d02e      	beq.n	8009cae <UART_SetConfig+0xab2>
 8009c50:	e031      	b.n	8009cb6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c52:	f7fb fec9 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8009c56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c58:	e033      	b.n	8009cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c5a:	f7fb fedb 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8009c5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c60:	e02f      	b.n	8009cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fd f8a0 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c70:	e027      	b.n	8009cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c72:	f107 0318 	add.w	r3, r7, #24
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd f9ec 	bl	8007054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c80:	e01f      	b.n	8009cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c82:	4b69      	ldr	r3, [pc, #420]	; (8009e28 <UART_SetConfig+0xc2c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0320 	and.w	r3, r3, #32
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d009      	beq.n	8009ca2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c8e:	4b66      	ldr	r3, [pc, #408]	; (8009e28 <UART_SetConfig+0xc2c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	08db      	lsrs	r3, r3, #3
 8009c94:	f003 0303 	and.w	r3, r3, #3
 8009c98:	4a64      	ldr	r2, [pc, #400]	; (8009e2c <UART_SetConfig+0xc30>)
 8009c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ca0:	e00f      	b.n	8009cc2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009ca2:	4b62      	ldr	r3, [pc, #392]	; (8009e2c <UART_SetConfig+0xc30>)
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca6:	e00c      	b.n	8009cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ca8:	4b61      	ldr	r3, [pc, #388]	; (8009e30 <UART_SetConfig+0xc34>)
 8009caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cac:	e009      	b.n	8009cc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cb4:	e005      	b.n	8009cc2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009cc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 80ea 	beq.w	8009e9e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cce:	4a55      	ldr	r2, [pc, #340]	; (8009e24 <UART_SetConfig+0xc28>)
 8009cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cdc:	005a      	lsls	r2, r3, #1
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	085b      	lsrs	r3, r3, #1
 8009ce4:	441a      	add	r2, r3
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	2b0f      	cmp	r3, #15
 8009cf4:	d916      	bls.n	8009d24 <UART_SetConfig+0xb28>
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cfc:	d212      	bcs.n	8009d24 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	f023 030f 	bic.w	r3, r3, #15
 8009d06:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0a:	085b      	lsrs	r3, r3, #1
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d16:	4313      	orrs	r3, r2
 8009d18:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009d20:	60da      	str	r2, [r3, #12]
 8009d22:	e0bc      	b.n	8009e9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009d2a:	e0b8      	b.n	8009e9e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d30:	2b20      	cmp	r3, #32
 8009d32:	dc4b      	bgt.n	8009dcc <UART_SetConfig+0xbd0>
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f2c0 8087 	blt.w	8009e48 <UART_SetConfig+0xc4c>
 8009d3a:	2b20      	cmp	r3, #32
 8009d3c:	f200 8084 	bhi.w	8009e48 <UART_SetConfig+0xc4c>
 8009d40:	a201      	add	r2, pc, #4	; (adr r2, 8009d48 <UART_SetConfig+0xb4c>)
 8009d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d46:	bf00      	nop
 8009d48:	08009dd3 	.word	0x08009dd3
 8009d4c:	08009ddb 	.word	0x08009ddb
 8009d50:	08009e49 	.word	0x08009e49
 8009d54:	08009e49 	.word	0x08009e49
 8009d58:	08009de3 	.word	0x08009de3
 8009d5c:	08009e49 	.word	0x08009e49
 8009d60:	08009e49 	.word	0x08009e49
 8009d64:	08009e49 	.word	0x08009e49
 8009d68:	08009df3 	.word	0x08009df3
 8009d6c:	08009e49 	.word	0x08009e49
 8009d70:	08009e49 	.word	0x08009e49
 8009d74:	08009e49 	.word	0x08009e49
 8009d78:	08009e49 	.word	0x08009e49
 8009d7c:	08009e49 	.word	0x08009e49
 8009d80:	08009e49 	.word	0x08009e49
 8009d84:	08009e49 	.word	0x08009e49
 8009d88:	08009e03 	.word	0x08009e03
 8009d8c:	08009e49 	.word	0x08009e49
 8009d90:	08009e49 	.word	0x08009e49
 8009d94:	08009e49 	.word	0x08009e49
 8009d98:	08009e49 	.word	0x08009e49
 8009d9c:	08009e49 	.word	0x08009e49
 8009da0:	08009e49 	.word	0x08009e49
 8009da4:	08009e49 	.word	0x08009e49
 8009da8:	08009e49 	.word	0x08009e49
 8009dac:	08009e49 	.word	0x08009e49
 8009db0:	08009e49 	.word	0x08009e49
 8009db4:	08009e49 	.word	0x08009e49
 8009db8:	08009e49 	.word	0x08009e49
 8009dbc:	08009e49 	.word	0x08009e49
 8009dc0:	08009e49 	.word	0x08009e49
 8009dc4:	08009e49 	.word	0x08009e49
 8009dc8:	08009e3b 	.word	0x08009e3b
 8009dcc:	2b40      	cmp	r3, #64	; 0x40
 8009dce:	d037      	beq.n	8009e40 <UART_SetConfig+0xc44>
 8009dd0:	e03a      	b.n	8009e48 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dd2:	f7fb fe09 	bl	80059e8 <HAL_RCC_GetPCLK1Freq>
 8009dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009dd8:	e03c      	b.n	8009e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dda:	f7fb fe1b 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8009dde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009de0:	e038      	b.n	8009e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fc ffe0 	bl	8006dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df0:	e030      	b.n	8009e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df2:	f107 0318 	add.w	r3, r7, #24
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fd f92c 	bl	8007054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e00:	e028      	b.n	8009e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e02:	4b09      	ldr	r3, [pc, #36]	; (8009e28 <UART_SetConfig+0xc2c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d012      	beq.n	8009e34 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e0e:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <UART_SetConfig+0xc2c>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	08db      	lsrs	r3, r3, #3
 8009e14:	f003 0303 	and.w	r3, r3, #3
 8009e18:	4a04      	ldr	r2, [pc, #16]	; (8009e2c <UART_SetConfig+0xc30>)
 8009e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e20:	e018      	b.n	8009e54 <UART_SetConfig+0xc58>
 8009e22:	bf00      	nop
 8009e24:	0800aab4 	.word	0x0800aab4
 8009e28:	58024400 	.word	0x58024400
 8009e2c:	03d09000 	.word	0x03d09000
 8009e30:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009e34:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <UART_SetConfig+0xccc>)
 8009e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e38:	e00c      	b.n	8009e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e3a:	4b24      	ldr	r3, [pc, #144]	; (8009ecc <UART_SetConfig+0xcd0>)
 8009e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e3e:	e009      	b.n	8009e54 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e46:	e005      	b.n	8009e54 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e52:	bf00      	nop
    }

    if (pclk != 0U)
 8009e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d021      	beq.n	8009e9e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	4a1c      	ldr	r2, [pc, #112]	; (8009ed0 <UART_SetConfig+0xcd4>)
 8009e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e64:	461a      	mov	r2, r3
 8009e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e68:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	085b      	lsrs	r3, r3, #1
 8009e72:	441a      	add	r2, r3
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e7c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	2b0f      	cmp	r3, #15
 8009e82:	d909      	bls.n	8009e98 <UART_SetConfig+0xc9c>
 8009e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e8a:	d205      	bcs.n	8009e98 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	e002      	b.n	8009e9e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009eba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3748      	adds	r7, #72	; 0x48
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ec8:	03d09000 	.word	0x03d09000
 8009ecc:	003d0900 	.word	0x003d0900
 8009ed0:	0800aab4 	.word	0x0800aab4

08009ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00a      	beq.n	8009efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00a      	beq.n	8009f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f46:	f003 0308 	and.w	r3, r3, #8
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00a      	beq.n	8009f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00a      	beq.n	8009f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8a:	f003 0320 	and.w	r3, r3, #32
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d01a      	beq.n	8009fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fd2:	d10a      	bne.n	8009fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00a      	beq.n	800a00c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	430a      	orrs	r2, r1
 800a00a:	605a      	str	r2, [r3, #4]
  }
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b098      	sub	sp, #96	; 0x60
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a028:	f7f7 fc3c 	bl	80018a4 <HAL_GetTick>
 800a02c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0308 	and.w	r3, r3, #8
 800a038:	2b08      	cmp	r3, #8
 800a03a:	d12f      	bne.n	800a09c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a03c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a044:	2200      	movs	r2, #0
 800a046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f88e 	bl	800a16c <UART_WaitOnFlagUntilTimeout>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d022      	beq.n	800a09c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	e853 3f00 	ldrex	r3, [r3]
 800a062:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a06a:	653b      	str	r3, [r7, #80]	; 0x50
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	461a      	mov	r2, r3
 800a072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a074:	647b      	str	r3, [r7, #68]	; 0x44
 800a076:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a07a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a07c:	e841 2300 	strex	r3, r2, [r1]
 800a080:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1e6      	bne.n	800a056 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e063      	b.n	800a164 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0304 	and.w	r3, r3, #4
 800a0a6:	2b04      	cmp	r3, #4
 800a0a8:	d149      	bne.n	800a13e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f857 	bl	800a16c <UART_WaitOnFlagUntilTimeout>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d03c      	beq.n	800a13e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e2:	633b      	str	r3, [r7, #48]	; 0x30
 800a0e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e6      	bne.n	800a0c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	60fb      	str	r3, [r7, #12]
   return(result);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f023 0301 	bic.w	r3, r3, #1
 800a10c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3308      	adds	r3, #8
 800a114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a116:	61fa      	str	r2, [r7, #28]
 800a118:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	69b9      	ldr	r1, [r7, #24]
 800a11c:	69fa      	ldr	r2, [r7, #28]
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	617b      	str	r3, [r7, #20]
   return(result);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1e5      	bne.n	800a0f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e012      	b.n	800a164 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2220      	movs	r2, #32
 800a142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3758      	adds	r7, #88	; 0x58
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	4613      	mov	r3, r2
 800a17a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a17c:	e049      	b.n	800a212 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a184:	d045      	beq.n	800a212 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a186:	f7f7 fb8d 	bl	80018a4 <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	429a      	cmp	r2, r3
 800a194:	d302      	bcc.n	800a19c <UART_WaitOnFlagUntilTimeout+0x30>
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e048      	b.n	800a232 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d031      	beq.n	800a212 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	f003 0308 	and.w	r3, r3, #8
 800a1b8:	2b08      	cmp	r3, #8
 800a1ba:	d110      	bne.n	800a1de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2208      	movs	r2, #8
 800a1c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 f921 	bl	800a40c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2208      	movs	r2, #8
 800a1ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e029      	b.n	800a232 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	69db      	ldr	r3, [r3, #28]
 800a1e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ec:	d111      	bne.n	800a212 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f907 	bl	800a40c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2220      	movs	r2, #32
 800a202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a20e:	2303      	movs	r3, #3
 800a210:	e00f      	b.n	800a232 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	69da      	ldr	r2, [r3, #28]
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	4013      	ands	r3, r2
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	429a      	cmp	r2, r3
 800a220:	bf0c      	ite	eq
 800a222:	2301      	moveq	r3, #1
 800a224:	2300      	movne	r3, #0
 800a226:	b2db      	uxtb	r3, r3
 800a228:	461a      	mov	r2, r3
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d0a6      	beq.n	800a17e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b096      	sub	sp, #88	; 0x58
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	4613      	mov	r3, r2
 800a248:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	88fa      	ldrh	r2, [r7, #6]
 800a254:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2222      	movs	r2, #34	; 0x22
 800a264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d02d      	beq.n	800a2ce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a278:	4a40      	ldr	r2, [pc, #256]	; (800a37c <UART_Start_Receive_DMA+0x140>)
 800a27a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a282:	4a3f      	ldr	r2, [pc, #252]	; (800a380 <UART_Start_Receive_DMA+0x144>)
 800a284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a28c:	4a3d      	ldr	r2, [pc, #244]	; (800a384 <UART_Start_Receive_DMA+0x148>)
 800a28e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a296:	2200      	movs	r2, #0
 800a298:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3324      	adds	r3, #36	; 0x24
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	88fb      	ldrh	r3, [r7, #6]
 800a2b0:	f7f7 ff6c 	bl	800218c <HAL_DMA_Start_IT>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d009      	beq.n	800a2ce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2210      	movs	r2, #16
 800a2be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2220      	movs	r2, #32
 800a2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e051      	b.n	800a372 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d018      	beq.n	800a308 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2ea:	657b      	str	r3, [r7, #84]	; 0x54
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2f6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e6      	bne.n	800a2d6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3308      	adds	r3, #8
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	e853 3f00 	ldrex	r3, [r3]
 800a316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	f043 0301 	orr.w	r3, r3, #1
 800a31e:	653b      	str	r3, [r7, #80]	; 0x50
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3308      	adds	r3, #8
 800a326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a328:	637a      	str	r2, [r7, #52]	; 0x34
 800a32a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a330:	e841 2300 	strex	r3, r2, [r1]
 800a334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e5      	bne.n	800a308 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3308      	adds	r3, #8
 800a342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	613b      	str	r3, [r7, #16]
   return(result);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a352:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	3308      	adds	r3, #8
 800a35a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a35c:	623a      	str	r2, [r7, #32]
 800a35e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a360:	69f9      	ldr	r1, [r7, #28]
 800a362:	6a3a      	ldr	r2, [r7, #32]
 800a364:	e841 2300 	strex	r3, r2, [r1]
 800a368:	61bb      	str	r3, [r7, #24]
   return(result);
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e5      	bne.n	800a33c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3758      	adds	r7, #88	; 0x58
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	0800a4d9 	.word	0x0800a4d9
 800a380:	0800a601 	.word	0x0800a601
 800a384:	0800a63f 	.word	0x0800a63f

0800a388 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a388:	b480      	push	{r7}
 800a38a:	b08f      	sub	sp, #60	; 0x3c
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a3a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3b0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e6      	bne.n	800a390 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a3d8:	633b      	str	r3, [r7, #48]	; 0x30
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3308      	adds	r3, #8
 800a3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e2:	61ba      	str	r2, [r7, #24]
 800a3e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e6:	6979      	ldr	r1, [r7, #20]
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	e841 2300 	strex	r3, r2, [r1]
 800a3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1e5      	bne.n	800a3c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a3fe:	bf00      	nop
 800a400:	373c      	adds	r7, #60	; 0x3c
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
	...

0800a40c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b095      	sub	sp, #84	; 0x54
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41c:	e853 3f00 	ldrex	r3, [r3]
 800a420:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a432:	643b      	str	r3, [r7, #64]	; 0x40
 800a434:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e6      	bne.n	800a414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3308      	adds	r3, #8
 800a44c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	61fb      	str	r3, [r7, #28]
   return(result);
 800a456:	69fa      	ldr	r2, [r7, #28]
 800a458:	4b1e      	ldr	r3, [pc, #120]	; (800a4d4 <UART_EndRxTransfer+0xc8>)
 800a45a:	4013      	ands	r3, r2
 800a45c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3308      	adds	r3, #8
 800a464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a466:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a46c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e5      	bne.n	800a446 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d118      	bne.n	800a4b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	e853 3f00 	ldrex	r3, [r3]
 800a48e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f023 0310 	bic.w	r3, r3, #16
 800a496:	647b      	str	r3, [r7, #68]	; 0x44
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	461a      	mov	r2, r3
 800a49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4a0:	61bb      	str	r3, [r7, #24]
 800a4a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a4:	6979      	ldr	r1, [r7, #20]
 800a4a6:	69ba      	ldr	r2, [r7, #24]
 800a4a8:	e841 2300 	strex	r3, r2, [r1]
 800a4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1e6      	bne.n	800a482 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2220      	movs	r2, #32
 800a4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a4c8:	bf00      	nop
 800a4ca:	3754      	adds	r7, #84	; 0x54
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	effffffe 	.word	0xeffffffe

0800a4d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b09c      	sub	sp, #112	; 0x70
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ee:	d071      	beq.n	800a5d4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a4f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a50c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	461a      	mov	r2, r3
 800a514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a516:	65bb      	str	r3, [r7, #88]	; 0x58
 800a518:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a51c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a51e:	e841 2300 	strex	r3, r2, [r1]
 800a522:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1e6      	bne.n	800a4f8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a52a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3308      	adds	r3, #8
 800a530:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53c:	f023 0301 	bic.w	r3, r3, #1
 800a540:	667b      	str	r3, [r7, #100]	; 0x64
 800a542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3308      	adds	r3, #8
 800a548:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a54a:	647a      	str	r2, [r7, #68]	; 0x44
 800a54c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a552:	e841 2300 	strex	r3, r2, [r1]
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1e5      	bne.n	800a52a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a55e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	3308      	adds	r3, #8
 800a564:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	e853 3f00 	ldrex	r3, [r3]
 800a56c:	623b      	str	r3, [r7, #32]
   return(result);
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a574:	663b      	str	r3, [r7, #96]	; 0x60
 800a576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3308      	adds	r3, #8
 800a57c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a57e:	633a      	str	r2, [r7, #48]	; 0x30
 800a580:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a586:	e841 2300 	strex	r3, r2, [r1]
 800a58a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1e5      	bne.n	800a55e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a594:	2220      	movs	r2, #32
 800a596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a59a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a59c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d118      	bne.n	800a5d4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	e853 3f00 	ldrex	r3, [r3]
 800a5ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f023 0310 	bic.w	r3, r3, #16
 800a5b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5c0:	61fb      	str	r3, [r7, #28]
 800a5c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c4:	69b9      	ldr	r1, [r7, #24]
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	e841 2300 	strex	r3, r2, [r1]
 800a5cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1e6      	bne.n	800a5a2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d107      	bne.n	800a5f2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5ec:	f7f6 f80c 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5f0:	e002      	b.n	800a5f8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a5f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5f4:	f7fe fde4 	bl	80091c0 <HAL_UART_RxCpltCallback>
}
 800a5f8:	bf00      	nop
 800a5fa:	3770      	adds	r7, #112	; 0x70
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2201      	movs	r2, #1
 800a612:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d109      	bne.n	800a630 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a622:	085b      	lsrs	r3, r3, #1
 800a624:	b29b      	uxth	r3, r3
 800a626:	4619      	mov	r1, r3
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7f5 ffed 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a62e:	e002      	b.n	800a636 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7fe fdcf 	bl	80091d4 <HAL_UART_RxHalfCpltCallback>
}
 800a636:	bf00      	nop
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b086      	sub	sp, #24
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a666:	2b80      	cmp	r3, #128	; 0x80
 800a668:	d109      	bne.n	800a67e <UART_DMAError+0x40>
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b21      	cmp	r3, #33	; 0x21
 800a66e:	d106      	bne.n	800a67e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2200      	movs	r2, #0
 800a674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a678:	6978      	ldr	r0, [r7, #20]
 800a67a:	f7ff fe85 	bl	800a388 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a688:	2b40      	cmp	r3, #64	; 0x40
 800a68a:	d109      	bne.n	800a6a0 <UART_DMAError+0x62>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2b22      	cmp	r3, #34	; 0x22
 800a690:	d106      	bne.n	800a6a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2200      	movs	r2, #0
 800a696:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a69a:	6978      	ldr	r0, [r7, #20]
 800a69c:	f7ff feb6 	bl	800a40c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6a6:	f043 0210 	orr.w	r2, r3, #16
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6b0:	6978      	ldr	r0, [r7, #20]
 800a6b2:	f7fe fd99 	bl	80091e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6b6:	bf00      	nop
 800a6b8:	3718      	adds	r7, #24
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7fe fd83 	bl	80091e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6e2:	bf00      	nop
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b088      	sub	sp, #32
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	e853 3f00 	ldrex	r3, [r3]
 800a6fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a706:	61fb      	str	r3, [r7, #28]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	461a      	mov	r2, r3
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	61bb      	str	r3, [r7, #24]
 800a712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a714:	6979      	ldr	r1, [r7, #20]
 800a716:	69ba      	ldr	r2, [r7, #24]
 800a718:	e841 2300 	strex	r3, r2, [r1]
 800a71c:	613b      	str	r3, [r7, #16]
   return(result);
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1e6      	bne.n	800a6f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2220      	movs	r2, #32
 800a728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7fe fd3a 	bl	80091ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a738:	bf00      	nop
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d101      	bne.n	800a792 <HAL_UARTEx_DisableFifoMode+0x16>
 800a78e:	2302      	movs	r3, #2
 800a790:	e027      	b.n	800a7e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2224      	movs	r2, #36	; 0x24
 800a79e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f022 0201 	bic.w	r2, r2, #1
 800a7b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a802:	2302      	movs	r3, #2
 800a804:	e02d      	b.n	800a862 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2224      	movs	r2, #36	; 0x24
 800a812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f022 0201 	bic.w	r2, r2, #1
 800a82c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	430a      	orrs	r2, r1
 800a840:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f8a4 	bl	800a990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2220      	movs	r2, #32
 800a854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d101      	bne.n	800a882 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a87e:	2302      	movs	r3, #2
 800a880:	e02d      	b.n	800a8de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2224      	movs	r2, #36	; 0x24
 800a88e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f022 0201 	bic.w	r2, r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f866 	bl	800a990 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b08c      	sub	sp, #48	; 0x30
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8fa:	2b20      	cmp	r3, #32
 800a8fc:	d142      	bne.n	800a984 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a904:	88fb      	ldrh	r3, [r7, #6]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e03b      	b.n	800a986 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2201      	movs	r2, #1
 800a912:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a91a:	88fb      	ldrh	r3, [r7, #6]
 800a91c:	461a      	mov	r2, r3
 800a91e:	68b9      	ldr	r1, [r7, #8]
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7ff fc8b 	bl	800a23c <UART_Start_Receive_DMA>
 800a926:	4603      	mov	r3, r0
 800a928:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a92c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a930:	2b00      	cmp	r3, #0
 800a932:	d124      	bne.n	800a97e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d11d      	bne.n	800a978 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2210      	movs	r2, #16
 800a942:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	617b      	str	r3, [r7, #20]
   return(result);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f043 0310 	orr.w	r3, r3, #16
 800a958:	62bb      	str	r3, [r7, #40]	; 0x28
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	627b      	str	r3, [r7, #36]	; 0x24
 800a964:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	6a39      	ldr	r1, [r7, #32]
 800a968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a96a:	e841 2300 	strex	r3, r2, [r1]
 800a96e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1e6      	bne.n	800a944 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a976:	e002      	b.n	800a97e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a97e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a982:	e000      	b.n	800a986 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a984:	2302      	movs	r3, #2
  }
}
 800a986:	4618      	mov	r0, r3
 800a988:	3730      	adds	r7, #48	; 0x30
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d108      	bne.n	800a9b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a9b0:	e031      	b.n	800aa16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a9b2:	2310      	movs	r3, #16
 800a9b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9b6:	2310      	movs	r3, #16
 800a9b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	0e5b      	lsrs	r3, r3, #25
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 0307 	and.w	r3, r3, #7
 800a9c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	0f5b      	lsrs	r3, r3, #29
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f003 0307 	and.w	r3, r3, #7
 800a9d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	7b3a      	ldrb	r2, [r7, #12]
 800a9de:	4911      	ldr	r1, [pc, #68]	; (800aa24 <UARTEx_SetNbDataToProcess+0x94>)
 800a9e0:	5c8a      	ldrb	r2, [r1, r2]
 800a9e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9e6:	7b3a      	ldrb	r2, [r7, #12]
 800a9e8:	490f      	ldr	r1, [pc, #60]	; (800aa28 <UARTEx_SetNbDataToProcess+0x98>)
 800a9ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	7b7a      	ldrb	r2, [r7, #13]
 800a9fc:	4909      	ldr	r1, [pc, #36]	; (800aa24 <UARTEx_SetNbDataToProcess+0x94>)
 800a9fe:	5c8a      	ldrb	r2, [r1, r2]
 800aa00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa04:	7b7a      	ldrb	r2, [r7, #13]
 800aa06:	4908      	ldr	r1, [pc, #32]	; (800aa28 <UARTEx_SetNbDataToProcess+0x98>)
 800aa08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	0800aacc 	.word	0x0800aacc
 800aa28:	0800aad4 	.word	0x0800aad4

0800aa2c <memset>:
 800aa2c:	4402      	add	r2, r0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d100      	bne.n	800aa36 <memset+0xa>
 800aa34:	4770      	bx	lr
 800aa36:	f803 1b01 	strb.w	r1, [r3], #1
 800aa3a:	e7f9      	b.n	800aa30 <memset+0x4>

0800aa3c <__libc_init_array>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	4d0d      	ldr	r5, [pc, #52]	; (800aa74 <__libc_init_array+0x38>)
 800aa40:	4c0d      	ldr	r4, [pc, #52]	; (800aa78 <__libc_init_array+0x3c>)
 800aa42:	1b64      	subs	r4, r4, r5
 800aa44:	10a4      	asrs	r4, r4, #2
 800aa46:	2600      	movs	r6, #0
 800aa48:	42a6      	cmp	r6, r4
 800aa4a:	d109      	bne.n	800aa60 <__libc_init_array+0x24>
 800aa4c:	4d0b      	ldr	r5, [pc, #44]	; (800aa7c <__libc_init_array+0x40>)
 800aa4e:	4c0c      	ldr	r4, [pc, #48]	; (800aa80 <__libc_init_array+0x44>)
 800aa50:	f000 f818 	bl	800aa84 <_init>
 800aa54:	1b64      	subs	r4, r4, r5
 800aa56:	10a4      	asrs	r4, r4, #2
 800aa58:	2600      	movs	r6, #0
 800aa5a:	42a6      	cmp	r6, r4
 800aa5c:	d105      	bne.n	800aa6a <__libc_init_array+0x2e>
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa64:	4798      	blx	r3
 800aa66:	3601      	adds	r6, #1
 800aa68:	e7ee      	b.n	800aa48 <__libc_init_array+0xc>
 800aa6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa6e:	4798      	blx	r3
 800aa70:	3601      	adds	r6, #1
 800aa72:	e7f2      	b.n	800aa5a <__libc_init_array+0x1e>
 800aa74:	0800aae4 	.word	0x0800aae4
 800aa78:	0800aae4 	.word	0x0800aae4
 800aa7c:	0800aae4 	.word	0x0800aae4
 800aa80:	0800aae8 	.word	0x0800aae8

0800aa84 <_init>:
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa86:	bf00      	nop
 800aa88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8a:	bc08      	pop	{r3}
 800aa8c:	469e      	mov	lr, r3
 800aa8e:	4770      	bx	lr

0800aa90 <_fini>:
 800aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa92:	bf00      	nop
 800aa94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa96:	bc08      	pop	{r3}
 800aa98:	469e      	mov	lr, r3
 800aa9a:	4770      	bx	lr
