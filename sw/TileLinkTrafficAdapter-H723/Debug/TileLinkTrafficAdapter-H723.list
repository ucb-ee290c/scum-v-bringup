
TileLinkTrafficAdapter-H723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9a8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ac74  0800ac74  0001ac74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800acb4  0800acb4  0001acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800acbc  0800acbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800acc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d0  24000018  0800acd8  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240004e8  0800acd8  000204e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016a90  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002946  00000000  00000000  00036b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000010f8  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d4c  00000000  00000000  0003a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000339a3  00000000  00000000  0003b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018602  00000000  00000000  0006ec47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014d0d3  00000000  00000000  00087249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004838  00000000  00000000  001d431c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000075  00000000  00000000  001d8b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000018 	.word	0x24000018
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800ac5c 	.word	0x0800ac5c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400001c 	.word	0x2400001c
 8000308:	0800ac5c 	.word	0x0800ac5c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_UARTEx_RxEventCallback>:
AppState app_state = APP_STATE_INVALID;

GPIO_PinState tl_in_ready_prev_state = GPIO_PIN_RESET;
GPIO_PinState tl_in_ready_state = GPIO_PIN_RESET;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
  if (app_state != APP_STATE_IDLE) {
 8000614:	4b2d      	ldr	r3, [pc, #180]	; (80006cc <HAL_UARTEx_RxEventCallback+0xc4>)
 8000616:	f993 3000 	ldrsb.w	r3, [r3]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d151      	bne.n	80006c2 <HAL_UARTEx_RxEventCallback+0xba>
    return;
  }

  if (huart == &huart3) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <HAL_UARTEx_RxEventCallback+0xc8>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d147      	bne.n	80006b6 <HAL_UARTEx_RxEventCallback+0xae>
    // Zero out the entire frame to prevent stale data from previous transactions.
    memset(&tl.tx_frame, 0, sizeof(TileLinkFrame));
 8000626:	f44f 7290 	mov.w	r2, #288	; 0x120
 800062a:	2100      	movs	r1, #0
 800062c:	4829      	ldr	r0, [pc, #164]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 800062e:	f00a fadb 	bl	800abe8 <memset>
    // Unpack the incoming packet byte-by-byte to avoid struct padding/alignment issues.
    uint32_t address;
    uint64_t data;

    // Use memcpy from the serial buffer into local, correctly-sized variables.
    memcpy(&address, serial_rx_buffer + 4, sizeof(uint32_t));
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <HAL_UARTEx_RxEventCallback+0xd0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	617b      	str	r3, [r7, #20]
    memcpy(&data,    serial_rx_buffer + 8, sizeof(uint64_t));
 8000638:	4928      	ldr	r1, [pc, #160]	; (80006dc <HAL_UARTEx_RxEventCallback+0xd4>)
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2208      	movs	r2, #8
 8000640:	4618      	mov	r0, r3
 8000642:	f00a fafd 	bl	800ac40 <memcpy>

    // Now, assign the unpacked values to the struct members.
    // The C compiler will handle placing them correctly in the padded struct.
    tl.tx_frame.chanid   = serial_rx_buffer[0];
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 800064c:	701a      	strb	r2, [r3, #0]
    tl.tx_frame.opcode   = serial_rx_buffer[1] & 0b111;
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 800065a:	705a      	strb	r2, [r3, #1]
    tl.tx_frame.param    = (serial_rx_buffer[1] >> 4) & 0b111;
 800065c:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 800065e:	785b      	ldrb	r3, [r3, #1]
 8000660:	091b      	lsrs	r3, r3, #4
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 800066c:	709a      	strb	r2, [r3, #2]
    tl.tx_frame.corrupt  = (serial_rx_buffer[1] >> 7) & 0b1;
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	09db      	lsrs	r3, r3, #7
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 8000678:	761a      	strb	r2, [r3, #24]
    tl.tx_frame.size     = serial_rx_buffer[2];
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 800067c:	789a      	ldrb	r2, [r3, #2]
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 8000680:	70da      	strb	r2, [r3, #3]
    tl.tx_frame.tl_union = serial_rx_buffer[3];
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8000684:	78db      	ldrb	r3, [r3, #3]
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 800068a:	835a      	strh	r2, [r3, #26]
    tl.tx_frame.address  = address; // This is now a 64-bit value, as the struct expects
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	2200      	movs	r2, #0
 8000690:	461c      	mov	r4, r3
 8000692:	4615      	mov	r5, r2
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 8000696:	e9c3 4502 	strd	r4, r5, [r3, #8]
    tl.tx_frame.data     = data;
 800069a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800069e:	490d      	ldr	r1, [pc, #52]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 80006a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    
    // Hardcode fields not sent from the host
    tl.tx_frame.source   = 0;
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	711a      	strb	r2, [r3, #4]
    tl.tx_frame.last     = 1;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <HAL_UARTEx_RxEventCallback+0xcc>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	771a      	strb	r2, [r3, #28]

    app_state = APP_STATE_FRAME_PENDING;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_UARTEx_RxEventCallback+0xc4>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 80006b6:	2220      	movs	r2, #32
 80006b8:	4909      	ldr	r1, [pc, #36]	; (80006e0 <HAL_UARTEx_RxEventCallback+0xd8>)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <HAL_UARTEx_RxEventCallback+0xc8>)
 80006bc:	f00a f9f1 	bl	800aaa2 <HAL_UARTEx_ReceiveToIdle_DMA>
 80006c0:	e000      	b.n	80006c4 <HAL_UARTEx_RxEventCallback+0xbc>
    return;
 80006c2:	bf00      	nop
}
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000000 	.word	0x24000000
 80006d0:	24000360 	.word	0x24000360
 80006d4:	24000038 	.word	0x24000038
 80006d8:	24000294 	.word	0x24000294
 80006dc:	24000298 	.word	0x24000298
 80006e0:	24000290 	.word	0x24000290

080006e4 <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006e8:	2100      	movs	r1, #0
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <APP_init+0x20>)
 80006ec:	f007 f900 	bl	80078f0 <HAL_TIM_PWM_Start>
  app_state = APP_STATE_IDLE;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <APP_init+0x24>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, serial_rx_buffer, 32);
 80006f6:	2220      	movs	r2, #32
 80006f8:	4904      	ldr	r1, [pc, #16]	; (800070c <APP_init+0x28>)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <APP_init+0x2c>)
 80006fc:	f00a f9d1 	bl	800aaa2 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	24000314 	.word	0x24000314
 8000708:	24000000 	.word	0x24000000
 800070c:	24000290 	.word	0x24000290
 8000710:	24000360 	.word	0x24000360

08000714 <APP_main>:


void APP_main() {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  // Poll the TL clock.
  GPIO_PinState tl_clk_state = HAL_GPIO_ReadPin(TL_CLK_GPIO_Port, TL_CLK_Pin);
 800071a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071e:	4841      	ldr	r0, [pc, #260]	; (8000824 <APP_main+0x110>)
 8000720:	f004 fa9a 	bl	8004c58 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]


  // Process TL transactions on the positive clock edge.
  if (tl_clk_state == GPIO_PIN_SET && tl_clk_prev_state == GPIO_PIN_RESET) {
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d118      	bne.n	8000760 <APP_main+0x4c>
 800072e:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <APP_main+0x114>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d114      	bne.n	8000760 <APP_main+0x4c>
    tl_in_ready_state = HAL_GPIO_ReadPin(TL_IN_READY_GPIO_Port, TL_IN_READY_Pin);
 8000736:	2102      	movs	r1, #2
 8000738:	483c      	ldr	r0, [pc, #240]	; (800082c <APP_main+0x118>)
 800073a:	f004 fa8d 	bl	8004c58 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	461a      	mov	r2, r3
 8000742:	4b3b      	ldr	r3, [pc, #236]	; (8000830 <APP_main+0x11c>)
 8000744:	701a      	strb	r2, [r3, #0]
    
    // Pass the current IN_READY state to the controller, not the previous cycle's state.
    tl.tl_in_ready_prev_state = (uint16_t)tl_in_ready_state;
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <APP_main+0x11c>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b39      	ldr	r3, [pc, #228]	; (8000834 <APP_main+0x120>)
 800074e:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
    TL_update(&tl);
 8000752:	4838      	ldr	r0, [pc, #224]	; (8000834 <APP_main+0x120>)
 8000754:	f000 fd24 	bl	80011a0 <TL_update>
    tl_in_ready_prev_state = tl_in_ready_state;
 8000758:	4b35      	ldr	r3, [pc, #212]	; (8000830 <APP_main+0x11c>)
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <APP_main+0x124>)
 800075e:	701a      	strb	r2, [r3, #0]
  }

  if (tl_clk_state != tl_clk_prev_state) {
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <APP_main+0x114>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	79fa      	ldrb	r2, [r7, #7]
 8000766:	429a      	cmp	r2, r3
 8000768:	d002      	beq.n	8000770 <APP_main+0x5c>
    tl_clk_prev_state = tl_clk_state;
 800076a:	4a2f      	ldr	r2, [pc, #188]	; (8000828 <APP_main+0x114>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	7013      	strb	r3, [r2, #0]
  }

  // Process any pending TL frames.
  switch (app_state) {
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <APP_main+0x128>)
 8000772:	f993 3000 	ldrsb.w	r3, [r3]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d002      	beq.n	8000780 <APP_main+0x6c>
 800077a:	2b02      	cmp	r3, #2
 800077c:	d007      	beq.n	800078e <APP_main+0x7a>
      }
      break;
    }
    case APP_STATE_IDLE:
    default: {
      break;
 800077e:	e04c      	b.n	800081a <APP_main+0x106>
      TL_transmit(&tl);
 8000780:	482c      	ldr	r0, [pc, #176]	; (8000834 <APP_main+0x120>)
 8000782:	f001 f877 	bl	8001874 <TL_transmit>
      app_state = APP_STATE_WAITING_FOR_RX;
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <APP_main+0x128>)
 8000788:	2202      	movs	r2, #2
 800078a:	701a      	strb	r2, [r3, #0]
      break;
 800078c:	e045      	b.n	800081a <APP_main+0x106>
      if (tl.rx_finished) {
 800078e:	4b29      	ldr	r3, [pc, #164]	; (8000834 <APP_main+0x120>)
 8000790:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 8000794:	2b00      	cmp	r3, #0
 8000796:	d03f      	beq.n	8000818 <APP_main+0x104>
        TL_deserialize(&tl.rx_frame);
 8000798:	4829      	ldr	r0, [pc, #164]	; (8000840 <APP_main+0x12c>)
 800079a:	f000 feaf 	bl	80014fc <TL_deserialize>
        *(serial_tx_buffer) = tl.rx_frame.chanid;
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <APP_main+0x120>)
 80007a0:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <APP_main+0x130>)
 80007a6:	701a      	strb	r2, [r3, #0]
        *(serial_tx_buffer + 1) = (tl.rx_frame.corrupt << 7) | (tl.rx_frame.param << 4) | tl.rx_frame.opcode;
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <APP_main+0x120>)
 80007aa:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80007ae:	01db      	lsls	r3, r3, #7
 80007b0:	b25a      	sxtb	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <APP_main+0x120>)
 80007b4:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	b25b      	sxtb	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b25a      	sxtb	r2, r3
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <APP_main+0x120>)
 80007c2:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <APP_main+0x130>)
 80007d0:	705a      	strb	r2, [r3, #1]
        *(serial_tx_buffer + 2) = tl.rx_frame.size;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <APP_main+0x120>)
 80007d4:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <APP_main+0x130>)
 80007da:	709a      	strb	r2, [r3, #2]
        *(serial_tx_buffer + 3) = tl.rx_frame.tl_union;
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <APP_main+0x120>)
 80007de:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <APP_main+0x130>)
 80007e6:	70da      	strb	r2, [r3, #3]
        uint32_t address_32 = (uint32_t)tl.rx_frame.address;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <APP_main+0x120>)
 80007ea:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 80007ee:	4613      	mov	r3, r2
 80007f0:	603b      	str	r3, [r7, #0]
        memcpy(serial_tx_buffer + 4, &address_32, sizeof(address_32));
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <APP_main+0x134>)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	6013      	str	r3, [r2, #0]
        memcpy(serial_tx_buffer + 8, &tl.rx_frame.data, sizeof(tl.rx_frame.data));
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <APP_main+0x138>)
 80007fa:	2208      	movs	r2, #8
 80007fc:	4914      	ldr	r1, [pc, #80]	; (8000850 <APP_main+0x13c>)
 80007fe:	4618      	mov	r0, r3
 8000800:	f00a fa1e 	bl	800ac40 <memcpy>
        HAL_UART_Transmit(&huart3, serial_tx_buffer, 16, 1000);
 8000804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000808:	2210      	movs	r2, #16
 800080a:	490e      	ldr	r1, [pc, #56]	; (8000844 <APP_main+0x130>)
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <APP_main+0x140>)
 800080e:	f008 f963 	bl	8008ad8 <HAL_UART_Transmit>
        app_state = APP_STATE_IDLE;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <APP_main+0x128>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
      break;
 8000818:	bf00      	nop
    }
  }
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	58020c00 	.word	0x58020c00
 8000828:	24000310 	.word	0x24000310
 800082c:	58020400 	.word	0x58020400
 8000830:	24000312 	.word	0x24000312
 8000834:	24000038 	.word	0x24000038
 8000838:	24000311 	.word	0x24000311
 800083c:	24000000 	.word	0x24000000
 8000840:	24000158 	.word	0x24000158
 8000844:	240002d0 	.word	0x240002d0
 8000848:	240002d4 	.word	0x240002d4
 800084c:	240002d8 	.word	0x240002d8
 8000850:	24000168 	.word	0x24000168
 8000854:	24000360 	.word	0x24000360

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f001 f87a 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f80e 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f000 f99e 	bl	8000ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000868:	f000 f974 	bl	8000b54 <MX_DMA_Init>
  MX_TIM1_Init();
 800086c:	f000 f878 	bl	8000960 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000870:	f000 f922 	bl	8000ab8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000874:	f7ff ff36 	bl	80006e4 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	APP_main();
 8000878:	f7ff ff4c 	bl	8000714 <APP_main>
 800087c:	e7fc      	b.n	8000878 <main+0x20>
	...

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09c      	sub	sp, #112	; 0x70
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	224c      	movs	r2, #76	; 0x4c
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f00a f9aa 	bl	800abe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2220      	movs	r2, #32
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f00a f9a4 	bl	800abe8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008a0:	2002      	movs	r0, #2
 80008a2:	f004 fa0b 	bl	8004cbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <SystemClock_Config+0xdc>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a2b      	ldr	r2, [pc, #172]	; (800095c <SystemClock_Config+0xdc>)
 80008b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b29      	ldr	r3, [pc, #164]	; (800095c <SystemClock_Config+0xdc>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c2:	bf00      	nop
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <SystemClock_Config+0xdc>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d0:	d1f8      	bne.n	80008c4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d2:	2302      	movs	r3, #2
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e2:	2300      	movs	r3, #0
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e6:	2304      	movs	r3, #4
 80008e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 80008ea:	231f      	movs	r3, #31
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008fa:	230c      	movs	r3, #12
 80008fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008fe:	2300      	movs	r3, #0
 8000900:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000902:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000906:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fa0f 	bl	8004d30 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000918:	f000 fa2e 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	233f      	movs	r3, #63	; 0x3f
 800091e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2303      	movs	r3, #3
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000928:	2308      	movs	r3, #8
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2103      	movs	r1, #3
 8000942:	4618      	mov	r0, r3
 8000944:	f004 fdce 	bl	80054e4 <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800094e:	f000 fa13 	bl	8000d78 <Error_Handler>
  }
}
 8000952:	bf00      	nop
 8000954:	3770      	adds	r7, #112	; 0x70
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	58024800 	.word	0x58024800

08000960 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	; 0x70
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000980:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2234      	movs	r2, #52	; 0x34
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f00a f924 	bl	800abe8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a0:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009a2:	4a44      	ldr	r2, [pc, #272]	; (8000ab4 <MX_TIM1_Init+0x154>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009a6:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	4b3d      	ldr	r3, [pc, #244]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c0:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009cc:	4838      	ldr	r0, [pc, #224]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009ce:	f006 fed7 	bl	8007780 <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 f9ce 	bl	8000d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009e6:	4619      	mov	r1, r3
 80009e8:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009ea:	f007 f9b1 	bl	8007d50 <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009f4:	f000 f9c0 	bl	8000d78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009f8:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <MX_TIM1_Init+0x150>)
 80009fa:	f006 ff18 	bl	800782e <HAL_TIM_PWM_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a04:	f000 f9b8 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <MX_TIM1_Init+0x150>)
 8000a1c:	f007 fed0 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a26:	f000 f9a7 	bl	8000d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2a:	2360      	movs	r3, #96	; 0x60
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a32:	2300      	movs	r3, #0
 8000a34:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <MX_TIM1_Init+0x150>)
 8000a50:	f007 f86a 	bl	8007b28 <HAL_TIM_PWM_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a5a:	f000 f98d 	bl	8000d78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM1_Init+0x150>)
 8000a94:	f007 ff30 	bl	80088f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000a9e:	f000 f96b 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM1_Init+0x150>)
 8000aa4:	f000 f9aa 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3770      	adds	r7, #112	; 0x70
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	24000314 	.word	0x24000314
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <MX_USART3_UART_Init+0x94>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ac4:	4a22      	ldr	r2, [pc, #136]	; (8000b50 <MX_USART3_UART_Init+0x98>)
 8000ac6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000adc:	220c      	movs	r2, #12
 8000ade:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b00:	f007 ff9a 	bl	8008a38 <HAL_UART_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000b0a:	f000 f935 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b12:	f009 ff4a 	bl	800a9aa <HAL_UARTEx_SetTxFifoThreshold>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000b1c:	f000 f92c 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	4809      	ldr	r0, [pc, #36]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b24:	f009 ff7f 	bl	800aa26 <HAL_UARTEx_SetRxFifoThreshold>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000b2e:	f000 f923 	bl	8000d78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b34:	f009 ff00 	bl	800a938 <HAL_UARTEx_DisableFifoMode>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000b3e:	f000 f91b 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	24000360 	.word	0x24000360
 8000b4c:	40004800 	.word	0x40004800
 8000b50:	001e8480 	.word	0x001e8480

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_DMA_Init+0x4c>)
 8000b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b60:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <MX_DMA_Init+0x4c>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_DMA_Init+0x4c>)
 8000b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2010      	movs	r0, #16
 8000b7e:	f001 f856 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b82:	2010      	movs	r0, #16
 8000b84:	f001 f86d 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2011      	movs	r0, #17
 8000b8e:	f001 f84e 	bl	8001c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b92:	2011      	movs	r0, #17
 8000b94:	f001 f865 	bl	8001c62 <HAL_NVIC_EnableIRQ>

}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58024400 	.word	0x58024400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a67      	ldr	r2, [pc, #412]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b65      	ldr	r3, [pc, #404]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd8:	4b61      	ldr	r3, [pc, #388]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4a60      	ldr	r2, [pc, #384]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000be0:	f043 0320 	orr.w	r3, r3, #32
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4b5d      	ldr	r3, [pc, #372]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0320 	and.w	r3, r3, #32
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a58      	ldr	r2, [pc, #352]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b52      	ldr	r3, [pc, #328]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a51      	ldr	r2, [pc, #324]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b4e      	ldr	r3, [pc, #312]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c32:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a49      	ldr	r2, [pc, #292]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f003 0310 	and.w	r3, r3, #16
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	4b43      	ldr	r3, [pc, #268]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	4a42      	ldr	r2, [pc, #264]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c60:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <MX_GPIO_Init+0x1bc>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	483b      	ldr	r0, [pc, #236]	; (8000d64 <MX_GPIO_Init+0x1c0>)
 8000c76:	f004 f807 	bl	8004c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	483a      	ldr	r0, [pc, #232]	; (8000d68 <MX_GPIO_Init+0x1c4>)
 8000c80:	f004 f802 	bl	8004c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2108      	movs	r1, #8
 8000c88:	4838      	ldr	r0, [pc, #224]	; (8000d6c <MX_GPIO_Init+0x1c8>)
 8000c8a:	f003 fffd 	bl	8004c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2101      	movs	r1, #1
 8000c92:	4837      	ldr	r0, [pc, #220]	; (8000d70 <MX_GPIO_Init+0x1cc>)
 8000c94:	f003 fff8 	bl	8004c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 TL_OUT_VALID_Pin TL_OUT_DATA_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|TL_OUT_VALID_Pin|TL_OUT_DATA_Pin;
 8000c98:	f242 0309 	movw	r3, #8201	; 0x2009
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	482e      	ldr	r0, [pc, #184]	; (8000d68 <MX_GPIO_Init+0x1c4>)
 8000cae:	f003 fe2b 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_DATA_Pin */
  GPIO_InitStruct.Pin = TL_IN_DATA_Pin;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_DATA_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4826      	ldr	r0, [pc, #152]	; (8000d64 <MX_GPIO_Init+0x1c0>)
 8000ccc:	f003 fe1c 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_VALID_Pin */
  GPIO_InitStruct.Pin = TL_IN_VALID_Pin;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_IN_VALID_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4820      	ldr	r0, [pc, #128]	; (8000d68 <MX_GPIO_Init+0x1c4>)
 8000ce8:	f003 fe0e 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_OUT_READY_Pin */
  GPIO_InitStruct.Pin = TL_OUT_READY_Pin;
 8000cec:	2308      	movs	r3, #8
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TL_OUT_READY_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	481a      	ldr	r0, [pc, #104]	; (8000d6c <MX_GPIO_Init+0x1c8>)
 8000d04:	f003 fe00 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_GPIO_Init+0x1cc>)
 8000d20:	f003 fdf2 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_IN_READY_Pin */
  GPIO_InitStruct.Pin = TL_IN_READY_Pin;
 8000d24:	2302      	movs	r3, #2
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_IN_READY_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <MX_GPIO_Init+0x1cc>)
 8000d38:	f003 fde6 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_CLK_Pin */
  GPIO_InitStruct.Pin = TL_CLK_Pin;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TL_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <MX_GPIO_Init+0x1d0>)
 8000d52:	f003 fdd9 	bl	8004908 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	; 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58021400 	.word	0x58021400
 8000d68:	58020800 	.word	0x58020800
 8000d6c:	58020000 	.word	0x58020000
 8000d70:	58020400 	.word	0x58020400
 8000d74:	58020c00 	.word	0x58020c00

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_MspInit+0x30>)
 8000d8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d90:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x30>)
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x30>)
 8000d9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	58024400 	.word	0x58024400

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10e      	bne.n	8000de8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_TIM_Base_MspInit+0x40>)
 8000dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_TIM_Base_MspInit+0x40>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_TIM_Base_MspInit+0x40>)
 8000ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40010000 	.word	0x40010000
 8000df8:	58024400 	.word	0x58024400

08000dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_TIM_MspPostInit+0x6c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d11f      	bne.n	8000e5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_TIM_MspPostInit+0x70>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <HAL_TIM_MspPostInit+0x70>)
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_TIM_MspPostInit+0x70>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_TIM_MspPostInit+0x74>)
 8000e5a:	f003 fd55 	bl	8004908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40010000 	.word	0x40010000
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	58021000 	.word	0x58021000

08000e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0b8      	sub	sp, #224	; 0xe0
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	22b8      	movs	r2, #184	; 0xb8
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f009 fea7 	bl	800abe8 <memset>
  if(huart->Instance==USART3)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a59      	ldr	r2, [pc, #356]	; (8001004 <HAL_UART_MspInit+0x190>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	f040 80aa 	bne.w	8000ffa <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea6:	f04f 0202 	mov.w	r2, #2
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f004 fe9d 	bl	8005bfc <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000ec8:	f7ff ff56 	bl	8000d78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <HAL_UART_MspInit+0x194>)
 8000ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ed2:	4a4d      	ldr	r2, [pc, #308]	; (8001008 <HAL_UART_MspInit+0x194>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <HAL_UART_MspInit+0x194>)
 8000ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <HAL_UART_MspInit+0x194>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a45      	ldr	r2, [pc, #276]	; (8001008 <HAL_UART_MspInit+0x194>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <HAL_UART_MspInit+0x194>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f22:	2307      	movs	r3, #7
 8000f24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4837      	ldr	r0, [pc, #220]	; (800100c <HAL_UART_MspInit+0x198>)
 8000f30:	f003 fcea 	bl	8004908 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8000f34:	4b36      	ldr	r3, [pc, #216]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f36:	4a37      	ldr	r2, [pc, #220]	; (8001014 <HAL_UART_MspInit+0x1a0>)
 8000f38:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f3c:	222d      	movs	r2, #45	; 0x2d
 8000f3e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f40:	4b33      	ldr	r3, [pc, #204]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4c:	4b30      	ldr	r3, [pc, #192]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f52:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f72:	4827      	ldr	r0, [pc, #156]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f74:	f000 fe90 	bl	8001c98 <HAL_DMA_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000f7e:	f7ff fefb 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a22      	ldr	r2, [pc, #136]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f8a:	4a21      	ldr	r2, [pc, #132]	; (8001010 <HAL_UART_MspInit+0x19c>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream6;
 8000f90:	4b21      	ldr	r3, [pc, #132]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <HAL_UART_MspInit+0x1a8>)
 8000f94:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000f98:	222e      	movs	r2, #46	; 0x2e
 8000f9a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000f9e:	2240      	movs	r2, #64	; 0x40
 8000fa0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fae:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000fd0:	f000 fe62 	bl	8001c98 <HAL_DMA_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000fda:	f7ff fecd 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000fe2:	67da      	str	r2, [r3, #124]	; 0x7c
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <HAL_UART_MspInit+0x1a4>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2027      	movs	r0, #39	; 0x27
 8000ff0:	f000 fe1d 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ff4:	2027      	movs	r0, #39	; 0x27
 8000ff6:	f000 fe34 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	37e0      	adds	r7, #224	; 0xe0
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40004800 	.word	0x40004800
 8001008:	58024400 	.word	0x58024400
 800100c:	58020c00 	.word	0x58020c00
 8001010:	240003f4 	.word	0x240003f4
 8001014:	40020088 	.word	0x40020088
 8001018:	2400046c 	.word	0x2400046c
 800101c:	400200a0 	.word	0x400200a0

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 fce4 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <DMA1_Stream5_IRQHandler+0x10>)
 800107a:	f002 f933 	bl	80032e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	240003f4 	.word	0x240003f4

08001088 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <DMA1_Stream6_IRQHandler+0x10>)
 800108e:	f002 f929 	bl	80032e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2400046c 	.word	0x2400046c

0800109c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <USART3_IRQHandler+0x10>)
 80010a2:	f007 fda7 	bl	8008bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	24000360 	.word	0x24000360

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <SystemInit+0xd0>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a31      	ldr	r2, [pc, #196]	; (8001180 <SystemInit+0xd0>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010c4:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <SystemInit+0xd4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	d807      	bhi.n	80010e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <SystemInit+0xd4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 030f 	bic.w	r3, r3, #15
 80010d8:	4a2a      	ldr	r2, [pc, #168]	; (8001184 <SystemInit+0xd4>)
 80010da:	f043 0307 	orr.w	r3, r3, #7
 80010de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <SystemInit+0xd8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a28      	ldr	r2, [pc, #160]	; (8001188 <SystemInit+0xd8>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <SystemInit+0xd8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <SystemInit+0xd8>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4924      	ldr	r1, [pc, #144]	; (8001188 <SystemInit+0xd8>)
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <SystemInit+0xdc>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <SystemInit+0xd4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d007      	beq.n	800111a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <SystemInit+0xd4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f023 030f 	bic.w	r3, r3, #15
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <SystemInit+0xd4>)
 8001114:	f043 0307 	orr.w	r3, r3, #7
 8001118:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <SystemInit+0xd8>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <SystemInit+0xd8>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <SystemInit+0xd8>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <SystemInit+0xd8>)
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <SystemInit+0xe0>)
 8001130:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <SystemInit+0xd8>)
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <SystemInit+0xe4>)
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <SystemInit+0xd8>)
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <SystemInit+0xe8>)
 800113c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <SystemInit+0xd8>)
 8001140:	2200      	movs	r2, #0
 8001142:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <SystemInit+0xd8>)
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <SystemInit+0xe8>)
 8001148:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <SystemInit+0xd8>)
 800114c:	2200      	movs	r2, #0
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <SystemInit+0xd8>)
 8001152:	4a11      	ldr	r2, [pc, #68]	; (8001198 <SystemInit+0xe8>)
 8001154:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <SystemInit+0xd8>)
 8001158:	2200      	movs	r2, #0
 800115a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <SystemInit+0xd8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <SystemInit+0xd8>)
 8001162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001166:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <SystemInit+0xd8>)
 800116a:	2200      	movs	r2, #0
 800116c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <SystemInit+0xec>)
 8001170:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001174:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	52002000 	.word	0x52002000
 8001188:	58024400 	.word	0x58024400
 800118c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001190:	02020200 	.word	0x02020200
 8001194:	01ff0000 	.word	0x01ff0000
 8001198:	01010280 	.word	0x01010280
 800119c:	52004000 	.word	0x52004000

080011a0 <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d03f      	beq.n	8001232 <TL_update+0x92>
    // Check if receiver is ready before sending the current bit
    if (tl->tl_in_ready_prev_state == 1) {
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d178      	bne.n	80012ae <TL_update+0x10e>
      // Send the current bit (no setup cycle - start with real data immediately)
      HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8b3 3242 	ldrh.w	r3, [r3, #578]	; 0x242
 80011c2:	461a      	mov	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	7f5b      	ldrb	r3, [r3, #29]
 80011ca:	461a      	mov	r2, r3
 80011cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d0:	4839      	ldr	r0, [pc, #228]	; (80012b8 <TL_update+0x118>)
 80011d2:	f003 fd59 	bl	8004c88 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2104      	movs	r1, #4
 80011da:	4838      	ldr	r0, [pc, #224]	; (80012bc <TL_update+0x11c>)
 80011dc:	f003 fd54 	bl	8004c88 <HAL_GPIO_WritePin>

      // Increment offset after sending the bit
      tl->tx_bit_offset += 1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8b3 3242 	ldrh.w	r3, [r3, #578]	; 0x242
 80011e6:	3301      	adds	r3, #1
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242

      // Check if we've sent all bits - but keep VALID high for one more cycle
      if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f8b3 3242 	ldrh.w	r3, [r3, #578]	; 0x242
 80011f6:	2ba4      	cmp	r3, #164	; 0xa4
 80011f8:	d108      	bne.n	800120c <TL_update+0x6c>
        // Don't drop VALID yet - FPGA needs one full cycle to capture the last bit
        tl->tx_bit_offset++; // Go to 165 to mark "termination cycle"
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8b3 3242 	ldrh.w	r3, [r3, #578]	; 0x242
 8001200:	3301      	adds	r3, #1
 8001202:	b29a      	uxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
        tl->rx_finished = 1;
      }
    }
  }
}
 800120a:	e050      	b.n	80012ae <TL_update+0x10e>
      } else if (tl->tx_bit_offset > TL_SERDES_TOTAL_SIZE) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8b3 3242 	ldrh.w	r3, [r3, #578]	; 0x242
 8001212:	2ba4      	cmp	r3, #164	; 0xa4
 8001214:	d94b      	bls.n	80012ae <TL_update+0x10e>
        HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2104      	movs	r1, #4
 800121a:	4828      	ldr	r0, [pc, #160]	; (80012bc <TL_update+0x11c>)
 800121c:	f003 fd34 	bl	8004c88 <HAL_GPIO_WritePin>
        tl->tx_pending = 0;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
        tl->tx_finished = 1;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
}
 8001230:	e03d      	b.n	80012ae <TL_update+0x10e>
  else if (tl->rx_pending) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f8b3 3252 	ldrh.w	r3, [r3, #594]	; 0x252
 8001238:	2b00      	cmp	r3, #0
 800123a:	d038      	beq.n	80012ae <TL_update+0x10e>
    if (tl->rx_finished) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f8b3 3250 	ldrh.w	r3, [r3, #592]	; 0x250
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <TL_update+0xb8>
      HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	481d      	ldr	r0, [pc, #116]	; (80012c0 <TL_update+0x120>)
 800124c:	f003 fd1c 	bl	8004c88 <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
    HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 1);
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	4818      	ldr	r0, [pc, #96]	; (80012c0 <TL_update+0x120>)
 800125e:	f003 fd13 	bl	8004c88 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(TL_OUT_VALID_GPIO_Port, TL_OUT_VALID_Pin) == GPIO_PIN_SET) {
 8001262:	2101      	movs	r1, #1
 8001264:	4815      	ldr	r0, [pc, #84]	; (80012bc <TL_update+0x11c>)
 8001266:	f003 fcf7 	bl	8004c58 <HAL_GPIO_ReadPin>
 800126a:	4603      	mov	r3, r0
 800126c:	2b01      	cmp	r3, #1
 800126e:	d11e      	bne.n	80012ae <TL_update+0x10e>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_OUT_DATA_GPIO_Port, TL_OUT_DATA_Pin);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 8001276:	461c      	mov	r4, r3
 8001278:	2108      	movs	r1, #8
 800127a:	4810      	ldr	r0, [pc, #64]	; (80012bc <TL_update+0x11c>)
 800127c:	f003 fcec 	bl	8004c58 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4423      	add	r3, r4
 8001288:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
      tl->rx_bit_offset += 1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 8001292:	3301      	adds	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8b3 324e 	ldrh.w	r3, [r3, #590]	; 0x24e
 80012a2:	2ba4      	cmp	r3, #164	; 0xa4
 80012a4:	d103      	bne.n	80012ae <TL_update+0x10e>
        tl->rx_finished = 1;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}
 80012b6:	bf00      	nop
 80012b8:	58021400 	.word	0x58021400
 80012bc:	58020800 	.word	0x58020800
 80012c0:	58020000 	.word	0x58020000

080012c4 <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80012cc:	2100      	movs	r1, #0
 80012ce:	83f9      	strh	r1, [r7, #30]
 80012d0:	e011      	b.n	80012f6 <TL_serialize+0x32>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->last >> i) & 0b1;
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	7f09      	ldrb	r1, [r1, #28]
 80012d6:	4608      	mov	r0, r1
 80012d8:	8bf9      	ldrh	r1, [r7, #30]
 80012da:	fa40 f101 	asr.w	r1, r0, r1
 80012de:	b2c8      	uxtb	r0, r1
 80012e0:	8bf9      	ldrh	r1, [r7, #30]
 80012e2:	f000 0001 	and.w	r0, r0, #1
 80012e6:	b2c6      	uxtb	r6, r0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4401      	add	r1, r0
 80012ec:	4630      	mov	r0, r6
 80012ee:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80012f0:	8bf9      	ldrh	r1, [r7, #30]
 80012f2:	3101      	adds	r1, #1
 80012f4:	83f9      	strh	r1, [r7, #30]
 80012f6:	8bf9      	ldrh	r1, [r7, #30]
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d0ea      	beq.n	80012d2 <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_UNION_SIZE; i+=1) {
 80012fc:	2100      	movs	r1, #0
 80012fe:	83b9      	strh	r1, [r7, #28]
 8001300:	e012      	b.n	8001328 <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_UNION_OFFSET] = (frame->tl_union >> i) & 0b1;
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	8b49      	ldrh	r1, [r1, #26]
 8001306:	4608      	mov	r0, r1
 8001308:	8bb9      	ldrh	r1, [r7, #28]
 800130a:	fa40 f101 	asr.w	r1, r0, r1
 800130e:	b2c8      	uxtb	r0, r1
 8001310:	8bb9      	ldrh	r1, [r7, #28]
 8001312:	3101      	adds	r1, #1
 8001314:	f000 0001 	and.w	r0, r0, #1
 8001318:	b2c6      	uxtb	r6, r0
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	4401      	add	r1, r0
 800131e:	4630      	mov	r0, r6
 8001320:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_UNION_SIZE; i+=1) {
 8001322:	8bb9      	ldrh	r1, [r7, #28]
 8001324:	3101      	adds	r1, #1
 8001326:	83b9      	strh	r1, [r7, #28]
 8001328:	8bb9      	ldrh	r1, [r7, #28]
 800132a:	2908      	cmp	r1, #8
 800132c:	d9e9      	bls.n	8001302 <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800132e:	2100      	movs	r1, #0
 8001330:	8379      	strh	r1, [r7, #26]
 8001332:	e012      	b.n	800135a <TL_serialize+0x96>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->corrupt >> i) & 0b1;
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	7e09      	ldrb	r1, [r1, #24]
 8001338:	4608      	mov	r0, r1
 800133a:	8b79      	ldrh	r1, [r7, #26]
 800133c:	fa40 f101 	asr.w	r1, r0, r1
 8001340:	b2c8      	uxtb	r0, r1
 8001342:	8b79      	ldrh	r1, [r7, #26]
 8001344:	310a      	adds	r1, #10
 8001346:	f000 0001 	and.w	r0, r0, #1
 800134a:	b2c6      	uxtb	r6, r0
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	4401      	add	r1, r0
 8001350:	4630      	mov	r0, r6
 8001352:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001354:	8b79      	ldrh	r1, [r7, #26]
 8001356:	3101      	adds	r1, #1
 8001358:	8379      	strh	r1, [r7, #26]
 800135a:	8b79      	ldrh	r1, [r7, #26]
 800135c:	2900      	cmp	r1, #0
 800135e:	d0e9      	beq.n	8001334 <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001360:	2100      	movs	r1, #0
 8001362:	8339      	strh	r1, [r7, #24]
 8001364:	e020      	b.n	80013a8 <TL_serialize+0xe4>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->data >> i) & 0b1;
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800136c:	8b3e      	ldrh	r6, [r7, #24]
 800136e:	f1c6 0e20 	rsb	lr, r6, #32
 8001372:	f1a6 0c20 	sub.w	ip, r6, #32
 8001376:	fa20 f406 	lsr.w	r4, r0, r6
 800137a:	fa01 fe0e 	lsl.w	lr, r1, lr
 800137e:	ea44 040e 	orr.w	r4, r4, lr
 8001382:	fa21 fc0c 	lsr.w	ip, r1, ip
 8001386:	ea44 040c 	orr.w	r4, r4, ip
 800138a:	fa21 f506 	lsr.w	r5, r1, r6
 800138e:	b2e0      	uxtb	r0, r4
 8001390:	8b39      	ldrh	r1, [r7, #24]
 8001392:	310b      	adds	r1, #11
 8001394:	f000 0001 	and.w	r0, r0, #1
 8001398:	b2c6      	uxtb	r6, r0
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	4401      	add	r1, r0
 800139e:	4630      	mov	r0, r6
 80013a0:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80013a2:	8b39      	ldrh	r1, [r7, #24]
 80013a4:	3101      	adds	r1, #1
 80013a6:	8339      	strh	r1, [r7, #24]
 80013a8:	8b39      	ldrh	r1, [r7, #24]
 80013aa:	293f      	cmp	r1, #63	; 0x3f
 80013ac:	d9db      	bls.n	8001366 <TL_serialize+0xa2>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80013ae:	2100      	movs	r1, #0
 80013b0:	82f9      	strh	r1, [r7, #22]
 80013b2:	e01e      	b.n	80013f2 <TL_serialize+0x12e>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->address >> i) & 0b1;
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80013ba:	8afc      	ldrh	r4, [r7, #22]
 80013bc:	f1c4 0620 	rsb	r6, r4, #32
 80013c0:	f1a4 0520 	sub.w	r5, r4, #32
 80013c4:	fa20 f204 	lsr.w	r2, r0, r4
 80013c8:	fa01 f606 	lsl.w	r6, r1, r6
 80013cc:	4332      	orrs	r2, r6
 80013ce:	fa21 f505 	lsr.w	r5, r1, r5
 80013d2:	432a      	orrs	r2, r5
 80013d4:	fa21 f304 	lsr.w	r3, r1, r4
 80013d8:	b2d0      	uxtb	r0, r2
 80013da:	8af9      	ldrh	r1, [r7, #22]
 80013dc:	314b      	adds	r1, #75	; 0x4b
 80013de:	f000 0001 	and.w	r0, r0, #1
 80013e2:	b2c4      	uxtb	r4, r0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	4401      	add	r1, r0
 80013e8:	4620      	mov	r0, r4
 80013ea:	7748      	strb	r0, [r1, #29]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80013ec:	8af9      	ldrh	r1, [r7, #22]
 80013ee:	3101      	adds	r1, #1
 80013f0:	82f9      	strh	r1, [r7, #22]
 80013f2:	8af9      	ldrh	r1, [r7, #22]
 80013f4:	293f      	cmp	r1, #63	; 0x3f
 80013f6:	d9dd      	bls.n	80013b4 <TL_serialize+0xf0>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	82bb      	strh	r3, [r7, #20]
 80013fc:	e012      	b.n	8001424 <TL_serialize+0x160>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->source >> i) & 0b1;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	461a      	mov	r2, r3
 8001404:	8abb      	ldrh	r3, [r7, #20]
 8001406:	fa42 f303 	asr.w	r3, r2, r3
 800140a:	b2da      	uxtb	r2, r3
 800140c:	8abb      	ldrh	r3, [r7, #20]
 800140e:	338b      	adds	r3, #139	; 0x8b
 8001410:	f002 0201 	and.w	r2, r2, #1
 8001414:	b2d1      	uxtb	r1, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	460a      	mov	r2, r1
 800141c:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 800141e:	8abb      	ldrh	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	82bb      	strh	r3, [r7, #20]
 8001424:	8abb      	ldrh	r3, [r7, #20]
 8001426:	2b07      	cmp	r3, #7
 8001428:	d9e9      	bls.n	80013fe <TL_serialize+0x13a>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800142a:	2300      	movs	r3, #0
 800142c:	827b      	strh	r3, [r7, #18]
 800142e:	e012      	b.n	8001456 <TL_serialize+0x192>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->size >> i) & 0b1;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	78db      	ldrb	r3, [r3, #3]
 8001434:	461a      	mov	r2, r3
 8001436:	8a7b      	ldrh	r3, [r7, #18]
 8001438:	fa42 f303 	asr.w	r3, r2, r3
 800143c:	b2da      	uxtb	r2, r3
 800143e:	8a7b      	ldrh	r3, [r7, #18]
 8001440:	3393      	adds	r3, #147	; 0x93
 8001442:	f002 0201 	and.w	r2, r2, #1
 8001446:	b2d1      	uxtb	r1, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	460a      	mov	r2, r1
 800144e:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001450:	8a7b      	ldrh	r3, [r7, #18]
 8001452:	3301      	adds	r3, #1
 8001454:	827b      	strh	r3, [r7, #18]
 8001456:	8a7b      	ldrh	r3, [r7, #18]
 8001458:	2b07      	cmp	r3, #7
 800145a:	d9e9      	bls.n	8001430 <TL_serialize+0x16c>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800145c:	2300      	movs	r3, #0
 800145e:	823b      	strh	r3, [r7, #16]
 8001460:	e012      	b.n	8001488 <TL_serialize+0x1c4>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->param >> i) & 0b1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	789b      	ldrb	r3, [r3, #2]
 8001466:	461a      	mov	r2, r3
 8001468:	8a3b      	ldrh	r3, [r7, #16]
 800146a:	fa42 f303 	asr.w	r3, r2, r3
 800146e:	b2da      	uxtb	r2, r3
 8001470:	8a3b      	ldrh	r3, [r7, #16]
 8001472:	339b      	adds	r3, #155	; 0x9b
 8001474:	f002 0201 	and.w	r2, r2, #1
 8001478:	b2d1      	uxtb	r1, r2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	460a      	mov	r2, r1
 8001480:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001482:	8a3b      	ldrh	r3, [r7, #16]
 8001484:	3301      	adds	r3, #1
 8001486:	823b      	strh	r3, [r7, #16]
 8001488:	8a3b      	ldrh	r3, [r7, #16]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d9e9      	bls.n	8001462 <TL_serialize+0x19e>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800148e:	2300      	movs	r3, #0
 8001490:	81fb      	strh	r3, [r7, #14]
 8001492:	e012      	b.n	80014ba <TL_serialize+0x1f6>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->opcode >> i) & 0b1;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	785b      	ldrb	r3, [r3, #1]
 8001498:	461a      	mov	r2, r3
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	fa42 f303 	asr.w	r3, r2, r3
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	339e      	adds	r3, #158	; 0x9e
 80014a6:	f002 0201 	and.w	r2, r2, #1
 80014aa:	b2d1      	uxtb	r1, r2
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	3301      	adds	r3, #1
 80014b8:	81fb      	strh	r3, [r7, #14]
 80014ba:	89fb      	ldrh	r3, [r7, #14]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d9e9      	bls.n	8001494 <TL_serialize+0x1d0>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	81bb      	strh	r3, [r7, #12]
 80014c4:	e012      	b.n	80014ec <TL_serialize+0x228>
    frame->buffer[i+TL_SERDES_CHANID_OFFSET] = (frame->chanid >> i) & 0b1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	fa42 f303 	asr.w	r3, r2, r3
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	89bb      	ldrh	r3, [r7, #12]
 80014d6:	33a1      	adds	r3, #161	; 0xa1
 80014d8:	f002 0201 	and.w	r2, r2, #1
 80014dc:	b2d1      	uxtb	r1, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	460a      	mov	r2, r1
 80014e4:	775a      	strb	r2, [r3, #29]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80014e6:	89bb      	ldrh	r3, [r7, #12]
 80014e8:	3301      	adds	r3, #1
 80014ea:	81bb      	strh	r3, [r7, #12]
 80014ec:	89bb      	ldrh	r3, [r7, #12]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d9e9      	bls.n	80014c6 <TL_serialize+0x202>
  }
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	3724      	adds	r7, #36	; 0x24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014fc <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 80014fc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001500:	b095      	sub	sp, #84	; 0x54
 8001502:	af00      	add	r7, sp, #0
 8001504:	6378      	str	r0, [r7, #52]	; 0x34
  frame->chanid = 0;
 8001506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001508:	2300      	movs	r3, #0
 800150a:	7013      	strb	r3, [r2, #0]
  frame->opcode = 0;
 800150c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800150e:	2300      	movs	r3, #0
 8001510:	7053      	strb	r3, [r2, #1]
  frame->param = 0;
 8001512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001514:	2300      	movs	r3, #0
 8001516:	7093      	strb	r3, [r2, #2]
  frame->size = 0;
 8001518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800151a:	2300      	movs	r3, #0
 800151c:	70d3      	strb	r3, [r2, #3]
  frame->source = 0;
 800151e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001520:	2300      	movs	r3, #0
 8001522:	7113      	strb	r3, [r2, #4]
  frame->address = 0;
 8001524:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  frame->data = 0;
 8001532:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  frame->corrupt = 0;
 8001540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001542:	2300      	movs	r3, #0
 8001544:	7613      	strb	r3, [r2, #24]
  frame->tl_union = 0;
 8001546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001548:	2300      	movs	r3, #0
 800154a:	8353      	strh	r3, [r2, #26]
  frame->last = 0;
 800154c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800154e:	2300      	movs	r3, #0
 8001550:	7713      	strb	r3, [r2, #28]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001552:	2300      	movs	r3, #0
 8001554:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001558:	e018      	b.n	800158c <TL_deserialize+0x90>
    frame->last |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 800155a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155c:	7f1b      	ldrb	r3, [r3, #28]
 800155e:	b259      	sxtb	r1, r3
 8001560:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001566:	4413      	add	r3, r2
 8001568:	7f5b      	ldrb	r3, [r3, #29]
 800156a:	f003 0201 	and.w	r2, r3, #1
 800156e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	b25b      	sxtb	r3, r3
 8001578:	430b      	orrs	r3, r1
 800157a:	b25b      	sxtb	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001580:	7713      	strb	r3, [r2, #28]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001582:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001586:	3301      	adds	r3, #1
 8001588:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800158c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0e2      	beq.n	800155a <TL_deserialize+0x5e>
  }
  for (uint16_t i=0; i<TL_SERDES_UNION_SIZE; i+=1) {
 8001594:	2300      	movs	r3, #0
 8001596:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800159a:	e019      	b.n	80015d0 <TL_deserialize+0xd4>
    frame->tl_union |= ((frame->buffer[i+TL_SERDES_UNION_OFFSET] & 0b1) << i);
 800159c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159e:	8b5b      	ldrh	r3, [r3, #26]
 80015a0:	b219      	sxth	r1, r3
 80015a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015aa:	4413      	add	r3, r2
 80015ac:	7f5b      	ldrb	r3, [r3, #29]
 80015ae:	f003 0201 	and.w	r2, r3, #1
 80015b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	430b      	orrs	r3, r1
 80015be:	b21b      	sxth	r3, r3
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015c4:	8353      	strh	r3, [r2, #26]
  for (uint16_t i=0; i<TL_SERDES_UNION_SIZE; i+=1) {
 80015c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015ca:	3301      	adds	r3, #1
 80015cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80015d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d9e1      	bls.n	800159c <TL_deserialize+0xa0>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80015d8:	2300      	movs	r3, #0
 80015da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80015de:	e01a      	b.n	8001616 <TL_deserialize+0x11a>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	7e1b      	ldrb	r3, [r3, #24]
 80015e4:	b259      	sxtb	r1, r3
 80015e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015ea:	f103 020a 	add.w	r2, r3, #10
 80015ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f0:	4413      	add	r3, r2
 80015f2:	7f5b      	ldrb	r3, [r3, #29]
 80015f4:	f003 0201 	and.w	r2, r3, #1
 80015f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	b25b      	sxtb	r3, r3
 8001602:	430b      	orrs	r3, r1
 8001604:	b25b      	sxtb	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800160a:	7613      	strb	r3, [r2, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800160c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001610:	3301      	adds	r3, #1
 8001612:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001616:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0e0      	beq.n	80015e0 <TL_deserialize+0xe4>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800161e:	2300      	movs	r3, #0
 8001620:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001624:	e039      	b.n	800169a <TL_deserialize+0x19e>
    frame->data |= ((uint64_t)(frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 8001626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001628:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800162c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001630:	f103 020b 	add.w	r2, r3, #11
 8001634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001636:	4413      	add	r3, r2
 8001638:	7f5b      	ldrb	r3, [r3, #29]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2200      	movs	r2, #0
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	627a      	str	r2, [r7, #36]	; 0x24
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164e:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8001652:	f1a1 0320 	sub.w	r3, r1, #32
 8001656:	f1c1 0220 	rsb	r2, r1, #32
 800165a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800165c:	fa00 fb01 	lsl.w	fp, r0, r1
 8001660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001662:	fa00 f303 	lsl.w	r3, r0, r3
 8001666:	ea4b 0b03 	orr.w	fp, fp, r3
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	fa23 f202 	lsr.w	r2, r3, r2
 8001670:	ea4b 0b02 	orr.w	fp, fp, r2
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	fa03 fa01 	lsl.w	sl, r3, r1
 800167a:	ea44 030a 	orr.w	r3, r4, sl
 800167e:	61bb      	str	r3, [r7, #24]
 8001680:	ea45 030b 	orr.w	r3, r5, fp
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800168c:	e9c3 1204 	strd	r1, r2, [r3, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001690:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001694:	3301      	adds	r3, #1
 8001696:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800169a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800169e:	2b3f      	cmp	r3, #63	; 0x3f
 80016a0:	d9c1      	bls.n	8001626 <TL_deserialize+0x12a>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80016a8:	e03a      	b.n	8001720 <TL_deserialize+0x224>
    frame->address |= ((uint64_t)(frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 80016aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016b4:	334b      	adds	r3, #75	; 0x4b
 80016b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016b8:	4413      	add	r3, r2
 80016ba:	7f5b      	ldrb	r3, [r3, #29]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2200      	movs	r2, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	617a      	str	r2, [r7, #20]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016d4:	f1a3 0420 	sub.w	r4, r3, #32
 80016d8:	f1c3 0220 	rsb	r2, r3, #32
 80016dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016e0:	465d      	mov	r5, fp
 80016e2:	fa05 f903 	lsl.w	r9, r5, r3
 80016e6:	4655      	mov	r5, sl
 80016e8:	fa05 f404 	lsl.w	r4, r5, r4
 80016ec:	ea49 0904 	orr.w	r9, r9, r4
 80016f0:	4654      	mov	r4, sl
 80016f2:	fa24 f202 	lsr.w	r2, r4, r2
 80016f6:	ea49 0902 	orr.w	r9, r9, r2
 80016fa:	4652      	mov	r2, sl
 80016fc:	fa02 f803 	lsl.w	r8, r2, r3
 8001700:	ea40 0308 	orr.w	r3, r0, r8
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	ea41 0309 	orr.w	r3, r1, r9
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001712:	e9c3 1202 	strd	r1, r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001716:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800171a:	3301      	adds	r3, #1
 800171c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001720:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001724:	2b3f      	cmp	r3, #63	; 0x3f
 8001726:	d9c0      	bls.n	80016aa <TL_deserialize+0x1ae>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001728:	2300      	movs	r3, #0
 800172a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800172e:	e019      	b.n	8001764 <TL_deserialize+0x268>
    frame->source |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8001730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001732:	791b      	ldrb	r3, [r3, #4]
 8001734:	b25a      	sxtb	r2, r3
 8001736:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800173a:	338b      	adds	r3, #139	; 0x8b
 800173c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800173e:	440b      	add	r3, r1
 8001740:	7f5b      	ldrb	r3, [r3, #29]
 8001742:	f003 0101 	and.w	r1, r3, #1
 8001746:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b25b      	sxtb	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001758:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 800175a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800175e:	3301      	adds	r3, #1
 8001760:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001764:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001768:	2b07      	cmp	r3, #7
 800176a:	d9e1      	bls.n	8001730 <TL_deserialize+0x234>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800176c:	2300      	movs	r3, #0
 800176e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001772:	e019      	b.n	80017a8 <TL_deserialize+0x2ac>
    frame->size |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 8001774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001776:	78db      	ldrb	r3, [r3, #3]
 8001778:	b25a      	sxtb	r2, r3
 800177a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800177e:	3393      	adds	r3, #147	; 0x93
 8001780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001782:	440b      	add	r3, r1
 8001784:	7f5b      	ldrb	r3, [r3, #29]
 8001786:	f003 0101 	and.w	r1, r3, #1
 800178a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	b25b      	sxtb	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	b25b      	sxtb	r3, r3
 8001798:	b2da      	uxtb	r2, r3
 800179a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179c:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800179e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80017a2:	3301      	adds	r3, #1
 80017a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80017a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80017ac:	2b07      	cmp	r3, #7
 80017ae:	d9e1      	bls.n	8001774 <TL_deserialize+0x278>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80017b6:	e019      	b.n	80017ec <TL_deserialize+0x2f0>
    frame->param |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	789b      	ldrb	r3, [r3, #2]
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017c2:	339b      	adds	r3, #155	; 0x9b
 80017c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017c6:	440b      	add	r3, r1
 80017c8:	7f5b      	ldrb	r3, [r3, #29]
 80017ca:	f003 0101 	and.w	r1, r3, #1
 80017ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e0:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80017e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017e6:	3301      	adds	r3, #1
 80017e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80017ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d9e1      	bls.n	80017b8 <TL_deserialize+0x2bc>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80017f8:	e015      	b.n	8001826 <TL_deserialize+0x32a>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 80017fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	b25a      	sxtb	r2, r3
 8001800:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001802:	339e      	adds	r3, #158	; 0x9e
 8001804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001806:	440b      	add	r3, r1
 8001808:	7f5b      	ldrb	r3, [r3, #29]
 800180a:	f003 0101 	and.w	r1, r3, #1
 800180e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	b25b      	sxtb	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	b2da      	uxtb	r2, r3
 800181c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181e:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001820:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001822:	3301      	adds	r3, #1
 8001824:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001826:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001828:	2b02      	cmp	r3, #2
 800182a:	d9e6      	bls.n	80017fa <TL_deserialize+0x2fe>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800182c:	2300      	movs	r3, #0
 800182e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001830:	e015      	b.n	800185e <TL_deserialize+0x362>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_CHANID_OFFSET] & 0b1) << i);
 8001832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b25a      	sxtb	r2, r3
 8001838:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800183a:	33a1      	adds	r3, #161	; 0xa1
 800183c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800183e:	440b      	add	r3, r1
 8001840:	7f5b      	ldrb	r3, [r3, #29]
 8001842:	f003 0101 	and.w	r1, r3, #1
 8001846:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	b25b      	sxtb	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b25b      	sxtb	r3, r3
 8001852:	b2da      	uxtb	r2, r3
 8001854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001856:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001858:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800185a:	3301      	adds	r3, #1
 800185c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800185e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001860:	2b02      	cmp	r3, #2
 8001862:	d9e6      	bls.n	8001832 <TL_deserialize+0x336>
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3754      	adds	r7, #84	; 0x54
 800186a:	46bd      	mov	sp, r7
 800186c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001870:	4770      	bx	lr
	...

08001874 <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fd20 	bl	80012c4 <TL_serialize>

  // Ensure clean start: explicitly set signals to known state
  HAL_GPIO_WritePin(TL_IN_VALID_GPIO_Port, TL_IN_VALID_Pin, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2104      	movs	r1, #4
 8001888:	481a      	ldr	r0, [pc, #104]	; (80018f4 <TL_transmit+0x80>)
 800188a:	f003 f9fd 	bl	8004c88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TL_IN_DATA_GPIO_Port, TL_IN_DATA_Pin, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001894:	4818      	ldr	r0, [pc, #96]	; (80018f8 <TL_transmit+0x84>)
 8001896:	f003 f9f7 	bl	8004c88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TL_OUT_READY_GPIO_Port, TL_OUT_READY_Pin, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2108      	movs	r1, #8
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <TL_transmit+0x88>)
 80018a0:	f003 f9f2 	bl	8004c88 <HAL_GPIO_WritePin>

  // reset state
  tl->tx_entry = 0;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->tx_bit_offset = 0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_bit_offset = 0;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
  tl->tx_finished = 0;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
  tl->rx_finished = 0;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
  tl->tx_timeout_counter = 0;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
  tl->tx_timed_out = 0;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a

  // enable TX RX
  tl->rx_pending = 1;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
  tl->tx_pending = 1;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	58020800 	.word	0x58020800
 80018f8:	58021400 	.word	0x58021400
 80018fc:	58020000 	.word	0x58020000

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001904:	f7ff fbd4 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190a:	490d      	ldr	r1, [pc, #52]	; (8001940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001920:	4c0a      	ldr	r4, [pc, #40]	; (800194c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192e:	f009 f963 	bl	800abf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7fe ff91 	bl	8000858 <main>
  bx  lr
 8001936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800193c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001940:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001944:	0800acc4 	.word	0x0800acc4
  ldr r2, =_sbss
 8001948:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 800194c:	240004e8 	.word	0x240004e8

08001950 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC3_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195a:	2003      	movs	r0, #3
 800195c:	f000 f95c 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001960:	f003 ff76 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 8001964:	4602      	mov	r2, r0
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_Init+0x68>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	4913      	ldr	r1, [pc, #76]	; (80019c0 <HAL_Init+0x6c>)
 8001972:	5ccb      	ldrb	r3, [r1, r3]
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_Init+0x68>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_Init+0x6c>)
 8001988:	5cd3      	ldrb	r3, [r2, r3]
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_Init+0x70>)
 8001996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001998:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_Init+0x74>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199e:	200f      	movs	r0, #15
 80019a0:	f000 f814 	bl	80019cc <HAL_InitTick>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e002      	b.n	80019b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019ae:	f7ff f9e9 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	58024400 	.word	0x58024400
 80019c0:	0800ac74 	.word	0x0800ac74
 80019c4:	24000008 	.word	0x24000008
 80019c8:	24000004 	.word	0x24000004

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_InitTick+0x60>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e021      	b.n	8001a24 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_InitTick+0x64>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_InitTick+0x60>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f941 	bl	8001c7e <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 f90b 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_InitTick+0x68>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	24000010 	.word	0x24000010
 8001a30:	24000004 	.word	0x24000004
 8001a34:	2400000c 	.word	0x2400000c

08001a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x20>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x24>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_IncTick+0x24>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	24000010 	.word	0x24000010
 8001a5c:	240004e4 	.word	0x240004e4

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	240004e4 	.word	0x240004e4

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00
 8001abc:	05fa0000 	.word	0x05fa0000

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4907      	ldr	r1, [pc, #28]	; (8001b14 <__NVIC_EnableIRQ+0x38>)
 8001af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	88fb      	ldrh	r3, [r7, #6]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f7ff ff8e 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff29 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff40 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff90 	bl	8001b6c <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5f 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff33 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa4 	bl	8001bd4 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fede 	bl	8001a60 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e312      	b.n	80022d6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a66      	ldr	r2, [pc, #408]	; (8001e50 <HAL_DMA_Init+0x1b8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d04a      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a65      	ldr	r2, [pc, #404]	; (8001e54 <HAL_DMA_Init+0x1bc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d045      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a63      	ldr	r2, [pc, #396]	; (8001e58 <HAL_DMA_Init+0x1c0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d040      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a62      	ldr	r2, [pc, #392]	; (8001e5c <HAL_DMA_Init+0x1c4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d03b      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a60      	ldr	r2, [pc, #384]	; (8001e60 <HAL_DMA_Init+0x1c8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d036      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a5f      	ldr	r2, [pc, #380]	; (8001e64 <HAL_DMA_Init+0x1cc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d031      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a5d      	ldr	r2, [pc, #372]	; (8001e68 <HAL_DMA_Init+0x1d0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02c      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5c      	ldr	r2, [pc, #368]	; (8001e6c <HAL_DMA_Init+0x1d4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d027      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a5a      	ldr	r2, [pc, #360]	; (8001e70 <HAL_DMA_Init+0x1d8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d022      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a59      	ldr	r2, [pc, #356]	; (8001e74 <HAL_DMA_Init+0x1dc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d01d      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a57      	ldr	r2, [pc, #348]	; (8001e78 <HAL_DMA_Init+0x1e0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d018      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a56      	ldr	r2, [pc, #344]	; (8001e7c <HAL_DMA_Init+0x1e4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a54      	ldr	r2, [pc, #336]	; (8001e80 <HAL_DMA_Init+0x1e8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a53      	ldr	r2, [pc, #332]	; (8001e84 <HAL_DMA_Init+0x1ec>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d009      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a51      	ldr	r2, [pc, #324]	; (8001e88 <HAL_DMA_Init+0x1f0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_DMA_Init+0xb8>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a50      	ldr	r2, [pc, #320]	; (8001e8c <HAL_DMA_Init+0x1f4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_DMA_Init+0xbc>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_DMA_Init+0xbe>
 8001d54:	2300      	movs	r3, #0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 813c 	beq.w	8001fd4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a37      	ldr	r2, [pc, #220]	; (8001e50 <HAL_DMA_Init+0x1b8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d04a      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a36      	ldr	r2, [pc, #216]	; (8001e54 <HAL_DMA_Init+0x1bc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d045      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <HAL_DMA_Init+0x1c0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d040      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a33      	ldr	r2, [pc, #204]	; (8001e5c <HAL_DMA_Init+0x1c4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d03b      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a31      	ldr	r2, [pc, #196]	; (8001e60 <HAL_DMA_Init+0x1c8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d036      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a30      	ldr	r2, [pc, #192]	; (8001e64 <HAL_DMA_Init+0x1cc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d031      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <HAL_DMA_Init+0x1d0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02c      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_DMA_Init+0x1d4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d027      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2b      	ldr	r2, [pc, #172]	; (8001e70 <HAL_DMA_Init+0x1d8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d022      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a2a      	ldr	r2, [pc, #168]	; (8001e74 <HAL_DMA_Init+0x1dc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d01d      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <HAL_DMA_Init+0x1e0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d018      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_DMA_Init+0x1e4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d013      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a25      	ldr	r2, [pc, #148]	; (8001e80 <HAL_DMA_Init+0x1e8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00e      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <HAL_DMA_Init+0x1ec>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d009      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_DMA_Init+0x1f0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d004      	beq.n	8001e0c <HAL_DMA_Init+0x174>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_DMA_Init+0x1f4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d108      	bne.n	8001e1e <HAL_DMA_Init+0x186>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e007      	b.n	8001e2e <HAL_DMA_Init+0x196>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e2e:	e02f      	b.n	8001e90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e30:	f7ff fe16 	bl	8001a60 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d928      	bls.n	8001e90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2203      	movs	r2, #3
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e242      	b.n	80022d6 <HAL_DMA_Init+0x63e>
 8001e50:	40020010 	.word	0x40020010
 8001e54:	40020028 	.word	0x40020028
 8001e58:	40020040 	.word	0x40020040
 8001e5c:	40020058 	.word	0x40020058
 8001e60:	40020070 	.word	0x40020070
 8001e64:	40020088 	.word	0x40020088
 8001e68:	400200a0 	.word	0x400200a0
 8001e6c:	400200b8 	.word	0x400200b8
 8001e70:	40020410 	.word	0x40020410
 8001e74:	40020428 	.word	0x40020428
 8001e78:	40020440 	.word	0x40020440
 8001e7c:	40020458 	.word	0x40020458
 8001e80:	40020470 	.word	0x40020470
 8001e84:	40020488 	.word	0x40020488
 8001e88:	400204a0 	.word	0x400204a0
 8001e8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1c8      	bne.n	8001e30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4b83      	ldr	r3, [pc, #524]	; (80020b8 <HAL_DMA_Init+0x420>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001eb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ece:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d107      	bne.n	8001ef4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	4313      	orrs	r3, r2
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b28      	cmp	r3, #40	; 0x28
 8001efa:	d903      	bls.n	8001f04 <HAL_DMA_Init+0x26c>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b2e      	cmp	r3, #46	; 0x2e
 8001f02:	d91f      	bls.n	8001f44 <HAL_DMA_Init+0x2ac>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b3e      	cmp	r3, #62	; 0x3e
 8001f0a:	d903      	bls.n	8001f14 <HAL_DMA_Init+0x27c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b42      	cmp	r3, #66	; 0x42
 8001f12:	d917      	bls.n	8001f44 <HAL_DMA_Init+0x2ac>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b46      	cmp	r3, #70	; 0x46
 8001f1a:	d903      	bls.n	8001f24 <HAL_DMA_Init+0x28c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b48      	cmp	r3, #72	; 0x48
 8001f22:	d90f      	bls.n	8001f44 <HAL_DMA_Init+0x2ac>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b4e      	cmp	r3, #78	; 0x4e
 8001f2a:	d903      	bls.n	8001f34 <HAL_DMA_Init+0x29c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b52      	cmp	r3, #82	; 0x52
 8001f32:	d907      	bls.n	8001f44 <HAL_DMA_Init+0x2ac>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b73      	cmp	r3, #115	; 0x73
 8001f3a:	d905      	bls.n	8001f48 <HAL_DMA_Init+0x2b0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b77      	cmp	r3, #119	; 0x77
 8001f42:	d801      	bhi.n	8001f48 <HAL_DMA_Init+0x2b0>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_DMA_Init+0x2b2>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f54:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f023 0307 	bic.w	r3, r3, #7
 8001f6c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d117      	bne.n	8001fb0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00e      	beq.n	8001fb0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f002 fb2e 	bl	80045f4 <DMA_CheckFifoParam>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2240      	movs	r2, #64	; 0x40
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e192      	b.n	80022d6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f002 fa69 	bl	8004490 <DMA_CalcBaseAndBitshift>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	f003 031f 	and.w	r3, r3, #31
 8001fca:	223f      	movs	r2, #63	; 0x3f
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	e0c8      	b.n	8002166 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a38      	ldr	r2, [pc, #224]	; (80020bc <HAL_DMA_Init+0x424>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d022      	beq.n	8002024 <HAL_DMA_Init+0x38c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a37      	ldr	r2, [pc, #220]	; (80020c0 <HAL_DMA_Init+0x428>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d01d      	beq.n	8002024 <HAL_DMA_Init+0x38c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a35      	ldr	r2, [pc, #212]	; (80020c4 <HAL_DMA_Init+0x42c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d018      	beq.n	8002024 <HAL_DMA_Init+0x38c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <HAL_DMA_Init+0x430>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d013      	beq.n	8002024 <HAL_DMA_Init+0x38c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a32      	ldr	r2, [pc, #200]	; (80020cc <HAL_DMA_Init+0x434>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00e      	beq.n	8002024 <HAL_DMA_Init+0x38c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <HAL_DMA_Init+0x438>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d009      	beq.n	8002024 <HAL_DMA_Init+0x38c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2f      	ldr	r2, [pc, #188]	; (80020d4 <HAL_DMA_Init+0x43c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d004      	beq.n	8002024 <HAL_DMA_Init+0x38c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2e      	ldr	r2, [pc, #184]	; (80020d8 <HAL_DMA_Init+0x440>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_DMA_Init+0x390>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_DMA_Init+0x392>
 8002028:	2300      	movs	r3, #0
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8092 	beq.w	8002154 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a21      	ldr	r2, [pc, #132]	; (80020bc <HAL_DMA_Init+0x424>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d021      	beq.n	800207e <HAL_DMA_Init+0x3e6>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <HAL_DMA_Init+0x428>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d01c      	beq.n	800207e <HAL_DMA_Init+0x3e6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <HAL_DMA_Init+0x42c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d017      	beq.n	800207e <HAL_DMA_Init+0x3e6>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <HAL_DMA_Init+0x430>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d012      	beq.n	800207e <HAL_DMA_Init+0x3e6>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <HAL_DMA_Init+0x434>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_DMA_Init+0x3e6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <HAL_DMA_Init+0x438>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d008      	beq.n	800207e <HAL_DMA_Init+0x3e6>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a18      	ldr	r2, [pc, #96]	; (80020d4 <HAL_DMA_Init+0x43c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d003      	beq.n	800207e <HAL_DMA_Init+0x3e6>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_DMA_Init+0x440>)
 800207c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_DMA_Init+0x444>)
 800209a:	4013      	ands	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d01c      	beq.n	80020e0 <HAL_DMA_Init+0x448>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b80      	cmp	r3, #128	; 0x80
 80020ac:	d102      	bne.n	80020b4 <HAL_DMA_Init+0x41c>
 80020ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020b2:	e016      	b.n	80020e2 <HAL_DMA_Init+0x44a>
 80020b4:	2300      	movs	r3, #0
 80020b6:	e014      	b.n	80020e2 <HAL_DMA_Init+0x44a>
 80020b8:	fe10803f 	.word	0xfe10803f
 80020bc:	58025408 	.word	0x58025408
 80020c0:	5802541c 	.word	0x5802541c
 80020c4:	58025430 	.word	0x58025430
 80020c8:	58025444 	.word	0x58025444
 80020cc:	58025458 	.word	0x58025458
 80020d0:	5802546c 	.word	0x5802546c
 80020d4:	58025480 	.word	0x58025480
 80020d8:	58025494 	.word	0x58025494
 80020dc:	fffe000f 	.word	0xfffe000f
 80020e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68d2      	ldr	r2, [r2, #12]
 80020e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002100:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002108:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002110:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b6e      	ldr	r3, [pc, #440]	; (80022e0 <HAL_DMA_Init+0x648>)
 8002128:	4413      	add	r3, r2
 800212a:	4a6e      	ldr	r2, [pc, #440]	; (80022e4 <HAL_DMA_Init+0x64c>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	009a      	lsls	r2, r3, #2
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f002 f9a9 	bl	8004490 <DMA_CalcBaseAndBitshift>
 800213e:	4603      	mov	r3, r0
 8002140:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2201      	movs	r2, #1
 800214c:	409a      	lsls	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	e008      	b.n	8002166 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2203      	movs	r2, #3
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0b7      	b.n	80022d6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5f      	ldr	r2, [pc, #380]	; (80022e8 <HAL_DMA_Init+0x650>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d072      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a5d      	ldr	r2, [pc, #372]	; (80022ec <HAL_DMA_Init+0x654>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d06d      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a5c      	ldr	r2, [pc, #368]	; (80022f0 <HAL_DMA_Init+0x658>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d068      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a5a      	ldr	r2, [pc, #360]	; (80022f4 <HAL_DMA_Init+0x65c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d063      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a59      	ldr	r2, [pc, #356]	; (80022f8 <HAL_DMA_Init+0x660>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d05e      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_DMA_Init+0x664>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d059      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_DMA_Init+0x668>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d054      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a54      	ldr	r2, [pc, #336]	; (8002304 <HAL_DMA_Init+0x66c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d04f      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a53      	ldr	r2, [pc, #332]	; (8002308 <HAL_DMA_Init+0x670>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d04a      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_DMA_Init+0x674>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d045      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a50      	ldr	r2, [pc, #320]	; (8002310 <HAL_DMA_Init+0x678>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d040      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a4e      	ldr	r2, [pc, #312]	; (8002314 <HAL_DMA_Init+0x67c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d03b      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a4d      	ldr	r2, [pc, #308]	; (8002318 <HAL_DMA_Init+0x680>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d036      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a4b      	ldr	r2, [pc, #300]	; (800231c <HAL_DMA_Init+0x684>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d031      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a4a      	ldr	r2, [pc, #296]	; (8002320 <HAL_DMA_Init+0x688>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d02c      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a48      	ldr	r2, [pc, #288]	; (8002324 <HAL_DMA_Init+0x68c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d027      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a47      	ldr	r2, [pc, #284]	; (8002328 <HAL_DMA_Init+0x690>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d022      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a45      	ldr	r2, [pc, #276]	; (800232c <HAL_DMA_Init+0x694>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01d      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a44      	ldr	r2, [pc, #272]	; (8002330 <HAL_DMA_Init+0x698>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d018      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a42      	ldr	r2, [pc, #264]	; (8002334 <HAL_DMA_Init+0x69c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a41      	ldr	r2, [pc, #260]	; (8002338 <HAL_DMA_Init+0x6a0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00e      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3f      	ldr	r2, [pc, #252]	; (800233c <HAL_DMA_Init+0x6a4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a3e      	ldr	r2, [pc, #248]	; (8002340 <HAL_DMA_Init+0x6a8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_DMA_Init+0x5be>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3c      	ldr	r2, [pc, #240]	; (8002344 <HAL_DMA_Init+0x6ac>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_DMA_Init+0x5c2>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_DMA_Init+0x5c4>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d032      	beq.n	80022c6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f002 fa43 	bl	80046ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d102      	bne.n	8002274 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002288:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_DMA_Init+0x61c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d80c      	bhi.n	80022b4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f002 fac0 	bl	8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	e008      	b.n	80022c6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	a7fdabf8 	.word	0xa7fdabf8
 80022e4:	cccccccd 	.word	0xcccccccd
 80022e8:	40020010 	.word	0x40020010
 80022ec:	40020028 	.word	0x40020028
 80022f0:	40020040 	.word	0x40020040
 80022f4:	40020058 	.word	0x40020058
 80022f8:	40020070 	.word	0x40020070
 80022fc:	40020088 	.word	0x40020088
 8002300:	400200a0 	.word	0x400200a0
 8002304:	400200b8 	.word	0x400200b8
 8002308:	40020410 	.word	0x40020410
 800230c:	40020428 	.word	0x40020428
 8002310:	40020440 	.word	0x40020440
 8002314:	40020458 	.word	0x40020458
 8002318:	40020470 	.word	0x40020470
 800231c:	40020488 	.word	0x40020488
 8002320:	400204a0 	.word	0x400204a0
 8002324:	400204b8 	.word	0x400204b8
 8002328:	58025408 	.word	0x58025408
 800232c:	5802541c 	.word	0x5802541c
 8002330:	58025430 	.word	0x58025430
 8002334:	58025444 	.word	0x58025444
 8002338:	58025458 	.word	0x58025458
 800233c:	5802546c 	.word	0x5802546c
 8002340:	58025480 	.word	0x58025480
 8002344:	58025494 	.word	0x58025494

08002348 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e226      	b.n	80027b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_DMA_Start_IT+0x2a>
 800236e:	2302      	movs	r3, #2
 8002370:	e21f      	b.n	80027b2 <HAL_DMA_Start_IT+0x46a>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	f040 820a 	bne.w	800279c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a68      	ldr	r2, [pc, #416]	; (800253c <HAL_DMA_Start_IT+0x1f4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d04a      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a66      	ldr	r2, [pc, #408]	; (8002540 <HAL_DMA_Start_IT+0x1f8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d045      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a65      	ldr	r2, [pc, #404]	; (8002544 <HAL_DMA_Start_IT+0x1fc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d040      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a63      	ldr	r2, [pc, #396]	; (8002548 <HAL_DMA_Start_IT+0x200>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d03b      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a62      	ldr	r2, [pc, #392]	; (800254c <HAL_DMA_Start_IT+0x204>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d036      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a60      	ldr	r2, [pc, #384]	; (8002550 <HAL_DMA_Start_IT+0x208>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d031      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a5f      	ldr	r2, [pc, #380]	; (8002554 <HAL_DMA_Start_IT+0x20c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d02c      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a5d      	ldr	r2, [pc, #372]	; (8002558 <HAL_DMA_Start_IT+0x210>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d027      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a5c      	ldr	r2, [pc, #368]	; (800255c <HAL_DMA_Start_IT+0x214>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d022      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <HAL_DMA_Start_IT+0x218>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01d      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a59      	ldr	r2, [pc, #356]	; (8002564 <HAL_DMA_Start_IT+0x21c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d018      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a57      	ldr	r2, [pc, #348]	; (8002568 <HAL_DMA_Start_IT+0x220>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a56      	ldr	r2, [pc, #344]	; (800256c <HAL_DMA_Start_IT+0x224>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00e      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a54      	ldr	r2, [pc, #336]	; (8002570 <HAL_DMA_Start_IT+0x228>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a53      	ldr	r2, [pc, #332]	; (8002574 <HAL_DMA_Start_IT+0x22c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d004      	beq.n	8002436 <HAL_DMA_Start_IT+0xee>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a51      	ldr	r2, [pc, #324]	; (8002578 <HAL_DMA_Start_IT+0x230>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d108      	bne.n	8002448 <HAL_DMA_Start_IT+0x100>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0201 	bic.w	r2, r2, #1
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e007      	b.n	8002458 <HAL_DMA_Start_IT+0x110>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f001 fe6a 	bl	8004138 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a34      	ldr	r2, [pc, #208]	; (800253c <HAL_DMA_Start_IT+0x1f4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d04a      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a33      	ldr	r2, [pc, #204]	; (8002540 <HAL_DMA_Start_IT+0x1f8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d045      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a31      	ldr	r2, [pc, #196]	; (8002544 <HAL_DMA_Start_IT+0x1fc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d040      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a30      	ldr	r2, [pc, #192]	; (8002548 <HAL_DMA_Start_IT+0x200>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d03b      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <HAL_DMA_Start_IT+0x204>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d036      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2d      	ldr	r2, [pc, #180]	; (8002550 <HAL_DMA_Start_IT+0x208>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d031      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2b      	ldr	r2, [pc, #172]	; (8002554 <HAL_DMA_Start_IT+0x20c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d02c      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <HAL_DMA_Start_IT+0x210>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d027      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a28      	ldr	r2, [pc, #160]	; (800255c <HAL_DMA_Start_IT+0x214>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d022      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a27      	ldr	r2, [pc, #156]	; (8002560 <HAL_DMA_Start_IT+0x218>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d01d      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a25      	ldr	r2, [pc, #148]	; (8002564 <HAL_DMA_Start_IT+0x21c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d018      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a24      	ldr	r2, [pc, #144]	; (8002568 <HAL_DMA_Start_IT+0x220>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a22      	ldr	r2, [pc, #136]	; (800256c <HAL_DMA_Start_IT+0x224>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00e      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_DMA_Start_IT+0x228>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <HAL_DMA_Start_IT+0x22c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_DMA_Start_IT+0x1bc>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_DMA_Start_IT+0x230>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_DMA_Start_IT+0x1c0>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_DMA_Start_IT+0x1c2>
 8002508:	2300      	movs	r3, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d036      	beq.n	800257c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 021e 	bic.w	r2, r3, #30
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0216 	orr.w	r2, r2, #22
 8002520:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d03e      	beq.n	80025a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0208 	orr.w	r2, r2, #8
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e035      	b.n	80025a8 <HAL_DMA_Start_IT+0x260>
 800253c:	40020010 	.word	0x40020010
 8002540:	40020028 	.word	0x40020028
 8002544:	40020040 	.word	0x40020040
 8002548:	40020058 	.word	0x40020058
 800254c:	40020070 	.word	0x40020070
 8002550:	40020088 	.word	0x40020088
 8002554:	400200a0 	.word	0x400200a0
 8002558:	400200b8 	.word	0x400200b8
 800255c:	40020410 	.word	0x40020410
 8002560:	40020428 	.word	0x40020428
 8002564:	40020440 	.word	0x40020440
 8002568:	40020458 	.word	0x40020458
 800256c:	40020470 	.word	0x40020470
 8002570:	40020488 	.word	0x40020488
 8002574:	400204a0 	.word	0x400204a0
 8002578:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 020e 	bic.w	r2, r3, #14
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 020a 	orr.w	r2, r2, #10
 800258e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0204 	orr.w	r2, r2, #4
 80025a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a83      	ldr	r2, [pc, #524]	; (80027bc <HAL_DMA_Start_IT+0x474>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d072      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a82      	ldr	r2, [pc, #520]	; (80027c0 <HAL_DMA_Start_IT+0x478>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d06d      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a80      	ldr	r2, [pc, #512]	; (80027c4 <HAL_DMA_Start_IT+0x47c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d068      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7f      	ldr	r2, [pc, #508]	; (80027c8 <HAL_DMA_Start_IT+0x480>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d063      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a7d      	ldr	r2, [pc, #500]	; (80027cc <HAL_DMA_Start_IT+0x484>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d05e      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a7c      	ldr	r2, [pc, #496]	; (80027d0 <HAL_DMA_Start_IT+0x488>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d059      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7a      	ldr	r2, [pc, #488]	; (80027d4 <HAL_DMA_Start_IT+0x48c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d054      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a79      	ldr	r2, [pc, #484]	; (80027d8 <HAL_DMA_Start_IT+0x490>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d04f      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a77      	ldr	r2, [pc, #476]	; (80027dc <HAL_DMA_Start_IT+0x494>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d04a      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a76      	ldr	r2, [pc, #472]	; (80027e0 <HAL_DMA_Start_IT+0x498>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d045      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a74      	ldr	r2, [pc, #464]	; (80027e4 <HAL_DMA_Start_IT+0x49c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d040      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a73      	ldr	r2, [pc, #460]	; (80027e8 <HAL_DMA_Start_IT+0x4a0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03b      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a71      	ldr	r2, [pc, #452]	; (80027ec <HAL_DMA_Start_IT+0x4a4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d036      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a70      	ldr	r2, [pc, #448]	; (80027f0 <HAL_DMA_Start_IT+0x4a8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d031      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6e      	ldr	r2, [pc, #440]	; (80027f4 <HAL_DMA_Start_IT+0x4ac>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02c      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a6d      	ldr	r2, [pc, #436]	; (80027f8 <HAL_DMA_Start_IT+0x4b0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d027      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6b      	ldr	r2, [pc, #428]	; (80027fc <HAL_DMA_Start_IT+0x4b4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6a      	ldr	r2, [pc, #424]	; (8002800 <HAL_DMA_Start_IT+0x4b8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01d      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a68      	ldr	r2, [pc, #416]	; (8002804 <HAL_DMA_Start_IT+0x4bc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a67      	ldr	r2, [pc, #412]	; (8002808 <HAL_DMA_Start_IT+0x4c0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a65      	ldr	r2, [pc, #404]	; (800280c <HAL_DMA_Start_IT+0x4c4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a64      	ldr	r2, [pc, #400]	; (8002810 <HAL_DMA_Start_IT+0x4c8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a62      	ldr	r2, [pc, #392]	; (8002814 <HAL_DMA_Start_IT+0x4cc>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_DMA_Start_IT+0x350>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a61      	ldr	r2, [pc, #388]	; (8002818 <HAL_DMA_Start_IT+0x4d0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_DMA_Start_IT+0x354>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_DMA_Start_IT+0x356>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01a      	beq.n	80026d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a37      	ldr	r2, [pc, #220]	; (80027bc <HAL_DMA_Start_IT+0x474>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d04a      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a36      	ldr	r2, [pc, #216]	; (80027c0 <HAL_DMA_Start_IT+0x478>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d045      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a34      	ldr	r2, [pc, #208]	; (80027c4 <HAL_DMA_Start_IT+0x47c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d040      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <HAL_DMA_Start_IT+0x480>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d03b      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a31      	ldr	r2, [pc, #196]	; (80027cc <HAL_DMA_Start_IT+0x484>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d036      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a30      	ldr	r2, [pc, #192]	; (80027d0 <HAL_DMA_Start_IT+0x488>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d031      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a2e      	ldr	r2, [pc, #184]	; (80027d4 <HAL_DMA_Start_IT+0x48c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02c      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a2d      	ldr	r2, [pc, #180]	; (80027d8 <HAL_DMA_Start_IT+0x490>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d027      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <HAL_DMA_Start_IT+0x494>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d022      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <HAL_DMA_Start_IT+0x498>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d01d      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_DMA_Start_IT+0x49c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d018      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <HAL_DMA_Start_IT+0x4a0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <HAL_DMA_Start_IT+0x4a4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00e      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <HAL_DMA_Start_IT+0x4a8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_DMA_Start_IT+0x4ac>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_DMA_Start_IT+0x430>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <HAL_DMA_Start_IT+0x4b0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <HAL_DMA_Start_IT+0x442>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e012      	b.n	80027b0 <HAL_DMA_Start_IT+0x468>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e009      	b.n	80027b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40020010 	.word	0x40020010
 80027c0:	40020028 	.word	0x40020028
 80027c4:	40020040 	.word	0x40020040
 80027c8:	40020058 	.word	0x40020058
 80027cc:	40020070 	.word	0x40020070
 80027d0:	40020088 	.word	0x40020088
 80027d4:	400200a0 	.word	0x400200a0
 80027d8:	400200b8 	.word	0x400200b8
 80027dc:	40020410 	.word	0x40020410
 80027e0:	40020428 	.word	0x40020428
 80027e4:	40020440 	.word	0x40020440
 80027e8:	40020458 	.word	0x40020458
 80027ec:	40020470 	.word	0x40020470
 80027f0:	40020488 	.word	0x40020488
 80027f4:	400204a0 	.word	0x400204a0
 80027f8:	400204b8 	.word	0x400204b8
 80027fc:	58025408 	.word	0x58025408
 8002800:	5802541c 	.word	0x5802541c
 8002804:	58025430 	.word	0x58025430
 8002808:	58025444 	.word	0x58025444
 800280c:	58025458 	.word	0x58025458
 8002810:	5802546c 	.word	0x5802546c
 8002814:	58025480 	.word	0x58025480
 8002818:	58025494 	.word	0x58025494

0800281c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff f91c 	bl	8001a60 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e2dc      	b.n	8002dee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d008      	beq.n	8002852 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e2cd      	b.n	8002dee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a76      	ldr	r2, [pc, #472]	; (8002a30 <HAL_DMA_Abort+0x214>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d04a      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a74      	ldr	r2, [pc, #464]	; (8002a34 <HAL_DMA_Abort+0x218>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d045      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a73      	ldr	r2, [pc, #460]	; (8002a38 <HAL_DMA_Abort+0x21c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d040      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a71      	ldr	r2, [pc, #452]	; (8002a3c <HAL_DMA_Abort+0x220>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d03b      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a70      	ldr	r2, [pc, #448]	; (8002a40 <HAL_DMA_Abort+0x224>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d036      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <HAL_DMA_Abort+0x228>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d031      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6d      	ldr	r2, [pc, #436]	; (8002a48 <HAL_DMA_Abort+0x22c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d02c      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6b      	ldr	r2, [pc, #428]	; (8002a4c <HAL_DMA_Abort+0x230>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d027      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6a      	ldr	r2, [pc, #424]	; (8002a50 <HAL_DMA_Abort+0x234>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <HAL_DMA_Abort+0x238>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01d      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a67      	ldr	r2, [pc, #412]	; (8002a58 <HAL_DMA_Abort+0x23c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d018      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <HAL_DMA_Abort+0x240>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a64      	ldr	r2, [pc, #400]	; (8002a60 <HAL_DMA_Abort+0x244>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a62      	ldr	r2, [pc, #392]	; (8002a64 <HAL_DMA_Abort+0x248>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a61      	ldr	r2, [pc, #388]	; (8002a68 <HAL_DMA_Abort+0x24c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_DMA_Abort+0xd6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a5f      	ldr	r2, [pc, #380]	; (8002a6c <HAL_DMA_Abort+0x250>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_DMA_Abort+0xda>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_DMA_Abort+0xdc>
 80028f6:	2300      	movs	r3, #0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 021e 	bic.w	r2, r2, #30
 800290a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800291a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e00a      	b.n	800293a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 020e 	bic.w	r2, r2, #14
 8002932:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3c      	ldr	r2, [pc, #240]	; (8002a30 <HAL_DMA_Abort+0x214>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d072      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a3a      	ldr	r2, [pc, #232]	; (8002a34 <HAL_DMA_Abort+0x218>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d06d      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a39      	ldr	r2, [pc, #228]	; (8002a38 <HAL_DMA_Abort+0x21c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d068      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a37      	ldr	r2, [pc, #220]	; (8002a3c <HAL_DMA_Abort+0x220>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d063      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a36      	ldr	r2, [pc, #216]	; (8002a40 <HAL_DMA_Abort+0x224>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d05e      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a34      	ldr	r2, [pc, #208]	; (8002a44 <HAL_DMA_Abort+0x228>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d059      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a33      	ldr	r2, [pc, #204]	; (8002a48 <HAL_DMA_Abort+0x22c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d054      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a31      	ldr	r2, [pc, #196]	; (8002a4c <HAL_DMA_Abort+0x230>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d04f      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_DMA_Abort+0x234>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d04a      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2e      	ldr	r2, [pc, #184]	; (8002a54 <HAL_DMA_Abort+0x238>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d045      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2d      	ldr	r2, [pc, #180]	; (8002a58 <HAL_DMA_Abort+0x23c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d040      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2b      	ldr	r2, [pc, #172]	; (8002a5c <HAL_DMA_Abort+0x240>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d03b      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <HAL_DMA_Abort+0x244>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d036      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_DMA_Abort+0x248>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d031      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <HAL_DMA_Abort+0x24c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d02c      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <HAL_DMA_Abort+0x250>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d027      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <HAL_DMA_Abort+0x254>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d022      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_DMA_Abort+0x258>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01d      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_DMA_Abort+0x25c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d018      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_DMA_Abort+0x260>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <HAL_DMA_Abort+0x264>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1c      	ldr	r2, [pc, #112]	; (8002a84 <HAL_DMA_Abort+0x268>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_DMA_Abort+0x26c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_DMA_Abort+0x20e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_DMA_Abort+0x270>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d132      	bne.n	8002a90 <HAL_DMA_Abort+0x274>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e031      	b.n	8002a92 <HAL_DMA_Abort+0x276>
 8002a2e:	bf00      	nop
 8002a30:	40020010 	.word	0x40020010
 8002a34:	40020028 	.word	0x40020028
 8002a38:	40020040 	.word	0x40020040
 8002a3c:	40020058 	.word	0x40020058
 8002a40:	40020070 	.word	0x40020070
 8002a44:	40020088 	.word	0x40020088
 8002a48:	400200a0 	.word	0x400200a0
 8002a4c:	400200b8 	.word	0x400200b8
 8002a50:	40020410 	.word	0x40020410
 8002a54:	40020428 	.word	0x40020428
 8002a58:	40020440 	.word	0x40020440
 8002a5c:	40020458 	.word	0x40020458
 8002a60:	40020470 	.word	0x40020470
 8002a64:	40020488 	.word	0x40020488
 8002a68:	400204a0 	.word	0x400204a0
 8002a6c:	400204b8 	.word	0x400204b8
 8002a70:	58025408 	.word	0x58025408
 8002a74:	5802541c 	.word	0x5802541c
 8002a78:	58025430 	.word	0x58025430
 8002a7c:	58025444 	.word	0x58025444
 8002a80:	58025458 	.word	0x58025458
 8002a84:	5802546c 	.word	0x5802546c
 8002a88:	58025480 	.word	0x58025480
 8002a8c:	58025494 	.word	0x58025494
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6d      	ldr	r2, [pc, #436]	; (8002c60 <HAL_DMA_Abort+0x444>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d04a      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a6b      	ldr	r2, [pc, #428]	; (8002c64 <HAL_DMA_Abort+0x448>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d045      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a6a      	ldr	r2, [pc, #424]	; (8002c68 <HAL_DMA_Abort+0x44c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d040      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a68      	ldr	r2, [pc, #416]	; (8002c6c <HAL_DMA_Abort+0x450>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d03b      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a67      	ldr	r2, [pc, #412]	; (8002c70 <HAL_DMA_Abort+0x454>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d036      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a65      	ldr	r2, [pc, #404]	; (8002c74 <HAL_DMA_Abort+0x458>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d031      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a64      	ldr	r2, [pc, #400]	; (8002c78 <HAL_DMA_Abort+0x45c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d02c      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a62      	ldr	r2, [pc, #392]	; (8002c7c <HAL_DMA_Abort+0x460>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d027      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a61      	ldr	r2, [pc, #388]	; (8002c80 <HAL_DMA_Abort+0x464>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d022      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a5f      	ldr	r2, [pc, #380]	; (8002c84 <HAL_DMA_Abort+0x468>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01d      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5e      	ldr	r2, [pc, #376]	; (8002c88 <HAL_DMA_Abort+0x46c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d018      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5c      	ldr	r2, [pc, #368]	; (8002c8c <HAL_DMA_Abort+0x470>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a5b      	ldr	r2, [pc, #364]	; (8002c90 <HAL_DMA_Abort+0x474>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00e      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a59      	ldr	r2, [pc, #356]	; (8002c94 <HAL_DMA_Abort+0x478>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d009      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a58      	ldr	r2, [pc, #352]	; (8002c98 <HAL_DMA_Abort+0x47c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_DMA_Abort+0x32a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a56      	ldr	r2, [pc, #344]	; (8002c9c <HAL_DMA_Abort+0x480>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d108      	bne.n	8002b58 <HAL_DMA_Abort+0x33c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e007      	b.n	8002b68 <HAL_DMA_Abort+0x34c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b68:	e013      	b.n	8002b92 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b6a:	f7fe ff79 	bl	8001a60 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b05      	cmp	r3, #5
 8002b76:	d90c      	bls.n	8002b92 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2203      	movs	r2, #3
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e12d      	b.n	8002dee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1e5      	bne.n	8002b6a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2f      	ldr	r2, [pc, #188]	; (8002c60 <HAL_DMA_Abort+0x444>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d04a      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_DMA_Abort+0x448>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d045      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2c      	ldr	r2, [pc, #176]	; (8002c68 <HAL_DMA_Abort+0x44c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d040      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	; (8002c6c <HAL_DMA_Abort+0x450>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d03b      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <HAL_DMA_Abort+0x454>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d036      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_DMA_Abort+0x458>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d031      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <HAL_DMA_Abort+0x45c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d02c      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <HAL_DMA_Abort+0x460>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d027      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_DMA_Abort+0x464>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d022      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_DMA_Abort+0x468>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01d      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a20      	ldr	r2, [pc, #128]	; (8002c88 <HAL_DMA_Abort+0x46c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d018      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_DMA_Abort+0x470>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <HAL_DMA_Abort+0x474>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00e      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_DMA_Abort+0x478>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d009      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <HAL_DMA_Abort+0x47c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_DMA_Abort+0x422>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_DMA_Abort+0x480>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_DMA_Abort+0x426>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_DMA_Abort+0x428>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d02b      	beq.n	8002ca0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	223f      	movs	r2, #63	; 0x3f
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	e02a      	b.n	8002cb6 <HAL_DMA_Abort+0x49a>
 8002c60:	40020010 	.word	0x40020010
 8002c64:	40020028 	.word	0x40020028
 8002c68:	40020040 	.word	0x40020040
 8002c6c:	40020058 	.word	0x40020058
 8002c70:	40020070 	.word	0x40020070
 8002c74:	40020088 	.word	0x40020088
 8002c78:	400200a0 	.word	0x400200a0
 8002c7c:	400200b8 	.word	0x400200b8
 8002c80:	40020410 	.word	0x40020410
 8002c84:	40020428 	.word	0x40020428
 8002c88:	40020440 	.word	0x40020440
 8002c8c:	40020458 	.word	0x40020458
 8002c90:	40020470 	.word	0x40020470
 8002c94:	40020488 	.word	0x40020488
 8002c98:	400204a0 	.word	0x400204a0
 8002c9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	2201      	movs	r2, #1
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <HAL_DMA_Abort+0x5dc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d072      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a4d      	ldr	r2, [pc, #308]	; (8002dfc <HAL_DMA_Abort+0x5e0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d06d      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a4c      	ldr	r2, [pc, #304]	; (8002e00 <HAL_DMA_Abort+0x5e4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d068      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	; (8002e04 <HAL_DMA_Abort+0x5e8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d063      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <HAL_DMA_Abort+0x5ec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d05e      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a47      	ldr	r2, [pc, #284]	; (8002e0c <HAL_DMA_Abort+0x5f0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d059      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a46      	ldr	r2, [pc, #280]	; (8002e10 <HAL_DMA_Abort+0x5f4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d054      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a44      	ldr	r2, [pc, #272]	; (8002e14 <HAL_DMA_Abort+0x5f8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d04f      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a43      	ldr	r2, [pc, #268]	; (8002e18 <HAL_DMA_Abort+0x5fc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d04a      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a41      	ldr	r2, [pc, #260]	; (8002e1c <HAL_DMA_Abort+0x600>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d045      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a40      	ldr	r2, [pc, #256]	; (8002e20 <HAL_DMA_Abort+0x604>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d040      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a3e      	ldr	r2, [pc, #248]	; (8002e24 <HAL_DMA_Abort+0x608>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d03b      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <HAL_DMA_Abort+0x60c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d036      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a3b      	ldr	r2, [pc, #236]	; (8002e2c <HAL_DMA_Abort+0x610>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d031      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a3a      	ldr	r2, [pc, #232]	; (8002e30 <HAL_DMA_Abort+0x614>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d02c      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <HAL_DMA_Abort+0x618>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d027      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a37      	ldr	r2, [pc, #220]	; (8002e38 <HAL_DMA_Abort+0x61c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a35      	ldr	r2, [pc, #212]	; (8002e3c <HAL_DMA_Abort+0x620>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01d      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a34      	ldr	r2, [pc, #208]	; (8002e40 <HAL_DMA_Abort+0x624>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d018      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a32      	ldr	r2, [pc, #200]	; (8002e44 <HAL_DMA_Abort+0x628>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a31      	ldr	r2, [pc, #196]	; (8002e48 <HAL_DMA_Abort+0x62c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <HAL_DMA_Abort+0x630>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d009      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2e      	ldr	r2, [pc, #184]	; (8002e50 <HAL_DMA_Abort+0x634>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_DMA_Abort+0x58a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a2c      	ldr	r2, [pc, #176]	; (8002e54 <HAL_DMA_Abort+0x638>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d101      	bne.n	8002daa <HAL_DMA_Abort+0x58e>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_DMA_Abort+0x590>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d015      	beq.n	8002ddc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002db8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dda:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40020010 	.word	0x40020010
 8002dfc:	40020028 	.word	0x40020028
 8002e00:	40020040 	.word	0x40020040
 8002e04:	40020058 	.word	0x40020058
 8002e08:	40020070 	.word	0x40020070
 8002e0c:	40020088 	.word	0x40020088
 8002e10:	400200a0 	.word	0x400200a0
 8002e14:	400200b8 	.word	0x400200b8
 8002e18:	40020410 	.word	0x40020410
 8002e1c:	40020428 	.word	0x40020428
 8002e20:	40020440 	.word	0x40020440
 8002e24:	40020458 	.word	0x40020458
 8002e28:	40020470 	.word	0x40020470
 8002e2c:	40020488 	.word	0x40020488
 8002e30:	400204a0 	.word	0x400204a0
 8002e34:	400204b8 	.word	0x400204b8
 8002e38:	58025408 	.word	0x58025408
 8002e3c:	5802541c 	.word	0x5802541c
 8002e40:	58025430 	.word	0x58025430
 8002e44:	58025444 	.word	0x58025444
 8002e48:	58025458 	.word	0x58025458
 8002e4c:	5802546c 	.word	0x5802546c
 8002e50:	58025480 	.word	0x58025480
 8002e54:	58025494 	.word	0x58025494

08002e58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e237      	b.n	80032da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d004      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e22c      	b.n	80032da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5c      	ldr	r2, [pc, #368]	; (8002ff8 <HAL_DMA_Abort_IT+0x1a0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d04a      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a5b      	ldr	r2, [pc, #364]	; (8002ffc <HAL_DMA_Abort_IT+0x1a4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d045      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a59      	ldr	r2, [pc, #356]	; (8003000 <HAL_DMA_Abort_IT+0x1a8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d040      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a58      	ldr	r2, [pc, #352]	; (8003004 <HAL_DMA_Abort_IT+0x1ac>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d03b      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a56      	ldr	r2, [pc, #344]	; (8003008 <HAL_DMA_Abort_IT+0x1b0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d036      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a55      	ldr	r2, [pc, #340]	; (800300c <HAL_DMA_Abort_IT+0x1b4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d031      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a53      	ldr	r2, [pc, #332]	; (8003010 <HAL_DMA_Abort_IT+0x1b8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d02c      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a52      	ldr	r2, [pc, #328]	; (8003014 <HAL_DMA_Abort_IT+0x1bc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d027      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_DMA_Abort_IT+0x1c0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d022      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a4f      	ldr	r2, [pc, #316]	; (800301c <HAL_DMA_Abort_IT+0x1c4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d01d      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a4d      	ldr	r2, [pc, #308]	; (8003020 <HAL_DMA_Abort_IT+0x1c8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d018      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a4c      	ldr	r2, [pc, #304]	; (8003024 <HAL_DMA_Abort_IT+0x1cc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a4a      	ldr	r2, [pc, #296]	; (8003028 <HAL_DMA_Abort_IT+0x1d0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a49      	ldr	r2, [pc, #292]	; (800302c <HAL_DMA_Abort_IT+0x1d4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a47      	ldr	r2, [pc, #284]	; (8003030 <HAL_DMA_Abort_IT+0x1d8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_DMA_Abort_IT+0xc8>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a46      	ldr	r2, [pc, #280]	; (8003034 <HAL_DMA_Abort_IT+0x1dc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_DMA_Abort_IT+0xcc>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <HAL_DMA_Abort_IT+0xce>
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8086 	beq.w	8003038 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2f      	ldr	r2, [pc, #188]	; (8002ff8 <HAL_DMA_Abort_IT+0x1a0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d04a      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2e      	ldr	r2, [pc, #184]	; (8002ffc <HAL_DMA_Abort_IT+0x1a4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d045      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2c      	ldr	r2, [pc, #176]	; (8003000 <HAL_DMA_Abort_IT+0x1a8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d040      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <HAL_DMA_Abort_IT+0x1ac>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d03b      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a29      	ldr	r2, [pc, #164]	; (8003008 <HAL_DMA_Abort_IT+0x1b0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d036      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a28      	ldr	r2, [pc, #160]	; (800300c <HAL_DMA_Abort_IT+0x1b4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d031      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <HAL_DMA_Abort_IT+0x1b8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02c      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a25      	ldr	r2, [pc, #148]	; (8003014 <HAL_DMA_Abort_IT+0x1bc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d027      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <HAL_DMA_Abort_IT+0x1c0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d022      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_DMA_Abort_IT+0x1c4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d01d      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a20      	ldr	r2, [pc, #128]	; (8003020 <HAL_DMA_Abort_IT+0x1c8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d018      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1f      	ldr	r2, [pc, #124]	; (8003024 <HAL_DMA_Abort_IT+0x1cc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d013      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_DMA_Abort_IT+0x1d0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00e      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_DMA_Abort_IT+0x1d4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <HAL_DMA_Abort_IT+0x1d8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x17c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_DMA_Abort_IT+0x1dc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d108      	bne.n	8002fe6 <HAL_DMA_Abort_IT+0x18e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e178      	b.n	80032d8 <HAL_DMA_Abort_IT+0x480>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e16f      	b.n	80032d8 <HAL_DMA_Abort_IT+0x480>
 8002ff8:	40020010 	.word	0x40020010
 8002ffc:	40020028 	.word	0x40020028
 8003000:	40020040 	.word	0x40020040
 8003004:	40020058 	.word	0x40020058
 8003008:	40020070 	.word	0x40020070
 800300c:	40020088 	.word	0x40020088
 8003010:	400200a0 	.word	0x400200a0
 8003014:	400200b8 	.word	0x400200b8
 8003018:	40020410 	.word	0x40020410
 800301c:	40020428 	.word	0x40020428
 8003020:	40020440 	.word	0x40020440
 8003024:	40020458 	.word	0x40020458
 8003028:	40020470 	.word	0x40020470
 800302c:	40020488 	.word	0x40020488
 8003030:	400204a0 	.word	0x400204a0
 8003034:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 020e 	bic.w	r2, r2, #14
 8003046:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a6c      	ldr	r2, [pc, #432]	; (8003200 <HAL_DMA_Abort_IT+0x3a8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d04a      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6b      	ldr	r2, [pc, #428]	; (8003204 <HAL_DMA_Abort_IT+0x3ac>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d045      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a69      	ldr	r2, [pc, #420]	; (8003208 <HAL_DMA_Abort_IT+0x3b0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d040      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a68      	ldr	r2, [pc, #416]	; (800320c <HAL_DMA_Abort_IT+0x3b4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d03b      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a66      	ldr	r2, [pc, #408]	; (8003210 <HAL_DMA_Abort_IT+0x3b8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d036      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a65      	ldr	r2, [pc, #404]	; (8003214 <HAL_DMA_Abort_IT+0x3bc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d031      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a63      	ldr	r2, [pc, #396]	; (8003218 <HAL_DMA_Abort_IT+0x3c0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d02c      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a62      	ldr	r2, [pc, #392]	; (800321c <HAL_DMA_Abort_IT+0x3c4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d027      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a60      	ldr	r2, [pc, #384]	; (8003220 <HAL_DMA_Abort_IT+0x3c8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d022      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a5f      	ldr	r2, [pc, #380]	; (8003224 <HAL_DMA_Abort_IT+0x3cc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d01d      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a5d      	ldr	r2, [pc, #372]	; (8003228 <HAL_DMA_Abort_IT+0x3d0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d018      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a5c      	ldr	r2, [pc, #368]	; (800322c <HAL_DMA_Abort_IT+0x3d4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a5a      	ldr	r2, [pc, #360]	; (8003230 <HAL_DMA_Abort_IT+0x3d8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00e      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a59      	ldr	r2, [pc, #356]	; (8003234 <HAL_DMA_Abort_IT+0x3dc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a57      	ldr	r2, [pc, #348]	; (8003238 <HAL_DMA_Abort_IT+0x3e0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x290>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a56      	ldr	r2, [pc, #344]	; (800323c <HAL_DMA_Abort_IT+0x3e4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d108      	bne.n	80030fa <HAL_DMA_Abort_IT+0x2a2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e007      	b.n	800310a <HAL_DMA_Abort_IT+0x2b2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <HAL_DMA_Abort_IT+0x3a8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d072      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <HAL_DMA_Abort_IT+0x3ac>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d06d      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a39      	ldr	r2, [pc, #228]	; (8003208 <HAL_DMA_Abort_IT+0x3b0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d068      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a37      	ldr	r2, [pc, #220]	; (800320c <HAL_DMA_Abort_IT+0x3b4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d063      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a36      	ldr	r2, [pc, #216]	; (8003210 <HAL_DMA_Abort_IT+0x3b8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d05e      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a34      	ldr	r2, [pc, #208]	; (8003214 <HAL_DMA_Abort_IT+0x3bc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d059      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a33      	ldr	r2, [pc, #204]	; (8003218 <HAL_DMA_Abort_IT+0x3c0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d054      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a31      	ldr	r2, [pc, #196]	; (800321c <HAL_DMA_Abort_IT+0x3c4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d04f      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a30      	ldr	r2, [pc, #192]	; (8003220 <HAL_DMA_Abort_IT+0x3c8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d04a      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a2e      	ldr	r2, [pc, #184]	; (8003224 <HAL_DMA_Abort_IT+0x3cc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d045      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2d      	ldr	r2, [pc, #180]	; (8003228 <HAL_DMA_Abort_IT+0x3d0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d040      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a2b      	ldr	r2, [pc, #172]	; (800322c <HAL_DMA_Abort_IT+0x3d4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d03b      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2a      	ldr	r2, [pc, #168]	; (8003230 <HAL_DMA_Abort_IT+0x3d8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d036      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a28      	ldr	r2, [pc, #160]	; (8003234 <HAL_DMA_Abort_IT+0x3dc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d031      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a27      	ldr	r2, [pc, #156]	; (8003238 <HAL_DMA_Abort_IT+0x3e0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d02c      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a25      	ldr	r2, [pc, #148]	; (800323c <HAL_DMA_Abort_IT+0x3e4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d027      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a24      	ldr	r2, [pc, #144]	; (8003240 <HAL_DMA_Abort_IT+0x3e8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d022      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a22      	ldr	r2, [pc, #136]	; (8003244 <HAL_DMA_Abort_IT+0x3ec>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a21      	ldr	r2, [pc, #132]	; (8003248 <HAL_DMA_Abort_IT+0x3f0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d018      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a1f      	ldr	r2, [pc, #124]	; (800324c <HAL_DMA_Abort_IT+0x3f4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <HAL_DMA_Abort_IT+0x3f8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <HAL_DMA_Abort_IT+0x3fc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_DMA_Abort_IT+0x400>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_DMA_Abort_IT+0x3a2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a19      	ldr	r2, [pc, #100]	; (800325c <HAL_DMA_Abort_IT+0x404>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d132      	bne.n	8003260 <HAL_DMA_Abort_IT+0x408>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e031      	b.n	8003262 <HAL_DMA_Abort_IT+0x40a>
 80031fe:	bf00      	nop
 8003200:	40020010 	.word	0x40020010
 8003204:	40020028 	.word	0x40020028
 8003208:	40020040 	.word	0x40020040
 800320c:	40020058 	.word	0x40020058
 8003210:	40020070 	.word	0x40020070
 8003214:	40020088 	.word	0x40020088
 8003218:	400200a0 	.word	0x400200a0
 800321c:	400200b8 	.word	0x400200b8
 8003220:	40020410 	.word	0x40020410
 8003224:	40020428 	.word	0x40020428
 8003228:	40020440 	.word	0x40020440
 800322c:	40020458 	.word	0x40020458
 8003230:	40020470 	.word	0x40020470
 8003234:	40020488 	.word	0x40020488
 8003238:	400204a0 	.word	0x400204a0
 800323c:	400204b8 	.word	0x400204b8
 8003240:	58025408 	.word	0x58025408
 8003244:	5802541c 	.word	0x5802541c
 8003248:	58025430 	.word	0x58025430
 800324c:	58025444 	.word	0x58025444
 8003250:	58025458 	.word	0x58025458
 8003254:	5802546c 	.word	0x5802546c
 8003258:	58025480 	.word	0x58025480
 800325c:	58025494 	.word	0x58025494
 8003260:	2300      	movs	r3, #0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d028      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003274:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2201      	movs	r2, #1
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003294:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop

080032e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032f0:	4b67      	ldr	r3, [pc, #412]	; (8003490 <HAL_DMA_IRQHandler+0x1ac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a67      	ldr	r2, [pc, #412]	; (8003494 <HAL_DMA_IRQHandler+0x1b0>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a5f      	ldr	r2, [pc, #380]	; (8003498 <HAL_DMA_IRQHandler+0x1b4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d04a      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a5d      	ldr	r2, [pc, #372]	; (800349c <HAL_DMA_IRQHandler+0x1b8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d045      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5c      	ldr	r2, [pc, #368]	; (80034a0 <HAL_DMA_IRQHandler+0x1bc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d040      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a5a      	ldr	r2, [pc, #360]	; (80034a4 <HAL_DMA_IRQHandler+0x1c0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d03b      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a59      	ldr	r2, [pc, #356]	; (80034a8 <HAL_DMA_IRQHandler+0x1c4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d036      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a57      	ldr	r2, [pc, #348]	; (80034ac <HAL_DMA_IRQHandler+0x1c8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d031      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a56      	ldr	r2, [pc, #344]	; (80034b0 <HAL_DMA_IRQHandler+0x1cc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d02c      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a54      	ldr	r2, [pc, #336]	; (80034b4 <HAL_DMA_IRQHandler+0x1d0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d027      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a53      	ldr	r2, [pc, #332]	; (80034b8 <HAL_DMA_IRQHandler+0x1d4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d022      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a51      	ldr	r2, [pc, #324]	; (80034bc <HAL_DMA_IRQHandler+0x1d8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01d      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a50      	ldr	r2, [pc, #320]	; (80034c0 <HAL_DMA_IRQHandler+0x1dc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d018      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a4e      	ldr	r2, [pc, #312]	; (80034c4 <HAL_DMA_IRQHandler+0x1e0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4d      	ldr	r2, [pc, #308]	; (80034c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <HAL_DMA_IRQHandler+0x1e8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a4a      	ldr	r2, [pc, #296]	; (80034d0 <HAL_DMA_IRQHandler+0x1ec>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xd2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a48      	ldr	r2, [pc, #288]	; (80034d4 <HAL_DMA_IRQHandler+0x1f0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_DMA_IRQHandler+0xd6>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_DMA_IRQHandler+0xd8>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 842b 	beq.w	8003c18 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	2208      	movs	r2, #8
 80033cc:	409a      	lsls	r2, r3
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80a2 	beq.w	800351c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2e      	ldr	r2, [pc, #184]	; (8003498 <HAL_DMA_IRQHandler+0x1b4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d04a      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2d      	ldr	r2, [pc, #180]	; (800349c <HAL_DMA_IRQHandler+0x1b8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d045      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <HAL_DMA_IRQHandler+0x1bc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d040      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2a      	ldr	r2, [pc, #168]	; (80034a4 <HAL_DMA_IRQHandler+0x1c0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d03b      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <HAL_DMA_IRQHandler+0x1c4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d036      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a27      	ldr	r2, [pc, #156]	; (80034ac <HAL_DMA_IRQHandler+0x1c8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d031      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_DMA_IRQHandler+0x1cc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d02c      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <HAL_DMA_IRQHandler+0x1d0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d027      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <HAL_DMA_IRQHandler+0x1d4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d022      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a21      	ldr	r2, [pc, #132]	; (80034bc <HAL_DMA_IRQHandler+0x1d8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d01d      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_DMA_IRQHandler+0x1dc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d018      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <HAL_DMA_IRQHandler+0x1e0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_DMA_IRQHandler+0x1e8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_DMA_IRQHandler+0x1ec>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_DMA_IRQHandler+0x194>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_DMA_IRQHandler+0x1f0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d12f      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x1f4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	bf14      	ite	ne
 8003486:	2301      	movne	r3, #1
 8003488:	2300      	moveq	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e02e      	b.n	80034ec <HAL_DMA_IRQHandler+0x208>
 800348e:	bf00      	nop
 8003490:	24000004 	.word	0x24000004
 8003494:	1b4e81b5 	.word	0x1b4e81b5
 8003498:	40020010 	.word	0x40020010
 800349c:	40020028 	.word	0x40020028
 80034a0:	40020040 	.word	0x40020040
 80034a4:	40020058 	.word	0x40020058
 80034a8:	40020070 	.word	0x40020070
 80034ac:	40020088 	.word	0x40020088
 80034b0:	400200a0 	.word	0x400200a0
 80034b4:	400200b8 	.word	0x400200b8
 80034b8:	40020410 	.word	0x40020410
 80034bc:	40020428 	.word	0x40020428
 80034c0:	40020440 	.word	0x40020440
 80034c4:	40020458 	.word	0x40020458
 80034c8:	40020470 	.word	0x40020470
 80034cc:	40020488 	.word	0x40020488
 80034d0:	400204a0 	.word	0x400204a0
 80034d4:	400204b8 	.word	0x400204b8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d015      	beq.n	800351c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2208      	movs	r2, #8
 800350a:	409a      	lsls	r2, r3
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d06e      	beq.n	8003610 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a69      	ldr	r2, [pc, #420]	; (80036dc <HAL_DMA_IRQHandler+0x3f8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d04a      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a67      	ldr	r2, [pc, #412]	; (80036e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d045      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a66      	ldr	r2, [pc, #408]	; (80036e4 <HAL_DMA_IRQHandler+0x400>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d040      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a64      	ldr	r2, [pc, #400]	; (80036e8 <HAL_DMA_IRQHandler+0x404>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d03b      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a63      	ldr	r2, [pc, #396]	; (80036ec <HAL_DMA_IRQHandler+0x408>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d036      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a61      	ldr	r2, [pc, #388]	; (80036f0 <HAL_DMA_IRQHandler+0x40c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d031      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a60      	ldr	r2, [pc, #384]	; (80036f4 <HAL_DMA_IRQHandler+0x410>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d02c      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a5e      	ldr	r2, [pc, #376]	; (80036f8 <HAL_DMA_IRQHandler+0x414>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d027      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5d      	ldr	r2, [pc, #372]	; (80036fc <HAL_DMA_IRQHandler+0x418>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5b      	ldr	r2, [pc, #364]	; (8003700 <HAL_DMA_IRQHandler+0x41c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01d      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5a      	ldr	r2, [pc, #360]	; (8003704 <HAL_DMA_IRQHandler+0x420>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d018      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a58      	ldr	r2, [pc, #352]	; (8003708 <HAL_DMA_IRQHandler+0x424>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d013      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a57      	ldr	r2, [pc, #348]	; (800370c <HAL_DMA_IRQHandler+0x428>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00e      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a55      	ldr	r2, [pc, #340]	; (8003710 <HAL_DMA_IRQHandler+0x42c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a54      	ldr	r2, [pc, #336]	; (8003714 <HAL_DMA_IRQHandler+0x430>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x2ee>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a52      	ldr	r2, [pc, #328]	; (8003718 <HAL_DMA_IRQHandler+0x434>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10a      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x304>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e003      	b.n	80035f0 <HAL_DMA_IRQHandler+0x30c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00d      	beq.n	8003610 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	2201      	movs	r2, #1
 80035fe:	409a      	lsls	r2, r3
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	f043 0202 	orr.w	r2, r3, #2
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	2204      	movs	r2, #4
 800361a:	409a      	lsls	r2, r3
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 808f 	beq.w	8003744 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2c      	ldr	r2, [pc, #176]	; (80036dc <HAL_DMA_IRQHandler+0x3f8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d04a      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <HAL_DMA_IRQHandler+0x3fc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d045      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <HAL_DMA_IRQHandler+0x400>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d040      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <HAL_DMA_IRQHandler+0x404>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d03b      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a26      	ldr	r2, [pc, #152]	; (80036ec <HAL_DMA_IRQHandler+0x408>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d036      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <HAL_DMA_IRQHandler+0x40c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d031      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <HAL_DMA_IRQHandler+0x410>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d02c      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <HAL_DMA_IRQHandler+0x414>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d027      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a20      	ldr	r2, [pc, #128]	; (80036fc <HAL_DMA_IRQHandler+0x418>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <HAL_DMA_IRQHandler+0x41c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d01d      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_DMA_IRQHandler+0x420>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d018      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_DMA_IRQHandler+0x424>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1a      	ldr	r2, [pc, #104]	; (800370c <HAL_DMA_IRQHandler+0x428>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_DMA_IRQHandler+0x42c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <HAL_DMA_IRQHandler+0x430>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x3e2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_DMA_IRQHandler+0x434>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d12a      	bne.n	800371c <HAL_DMA_IRQHandler+0x438>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf14      	ite	ne
 80036d4:	2301      	movne	r3, #1
 80036d6:	2300      	moveq	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	e023      	b.n	8003724 <HAL_DMA_IRQHandler+0x440>
 80036dc:	40020010 	.word	0x40020010
 80036e0:	40020028 	.word	0x40020028
 80036e4:	40020040 	.word	0x40020040
 80036e8:	40020058 	.word	0x40020058
 80036ec:	40020070 	.word	0x40020070
 80036f0:	40020088 	.word	0x40020088
 80036f4:	400200a0 	.word	0x400200a0
 80036f8:	400200b8 	.word	0x400200b8
 80036fc:	40020410 	.word	0x40020410
 8003700:	40020428 	.word	0x40020428
 8003704:	40020440 	.word	0x40020440
 8003708:	40020458 	.word	0x40020458
 800370c:	40020470 	.word	0x40020470
 8003710:	40020488 	.word	0x40020488
 8003714:	400204a0 	.word	0x400204a0
 8003718:	400204b8 	.word	0x400204b8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2204      	movs	r2, #4
 8003732:	409a      	lsls	r2, r3
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	2210      	movs	r2, #16
 800374e:	409a      	lsls	r2, r3
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a6 	beq.w	80038a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a85      	ldr	r2, [pc, #532]	; (8003974 <HAL_DMA_IRQHandler+0x690>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d04a      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a83      	ldr	r2, [pc, #524]	; (8003978 <HAL_DMA_IRQHandler+0x694>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d045      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a82      	ldr	r2, [pc, #520]	; (800397c <HAL_DMA_IRQHandler+0x698>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d040      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a80      	ldr	r2, [pc, #512]	; (8003980 <HAL_DMA_IRQHandler+0x69c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d03b      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a7f      	ldr	r2, [pc, #508]	; (8003984 <HAL_DMA_IRQHandler+0x6a0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d036      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a7d      	ldr	r2, [pc, #500]	; (8003988 <HAL_DMA_IRQHandler+0x6a4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d031      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a7c      	ldr	r2, [pc, #496]	; (800398c <HAL_DMA_IRQHandler+0x6a8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d02c      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a7a      	ldr	r2, [pc, #488]	; (8003990 <HAL_DMA_IRQHandler+0x6ac>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d027      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a79      	ldr	r2, [pc, #484]	; (8003994 <HAL_DMA_IRQHandler+0x6b0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d022      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a77      	ldr	r2, [pc, #476]	; (8003998 <HAL_DMA_IRQHandler+0x6b4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01d      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a76      	ldr	r2, [pc, #472]	; (800399c <HAL_DMA_IRQHandler+0x6b8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d018      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a74      	ldr	r2, [pc, #464]	; (80039a0 <HAL_DMA_IRQHandler+0x6bc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a73      	ldr	r2, [pc, #460]	; (80039a4 <HAL_DMA_IRQHandler+0x6c0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a71      	ldr	r2, [pc, #452]	; (80039a8 <HAL_DMA_IRQHandler+0x6c4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d009      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a70      	ldr	r2, [pc, #448]	; (80039ac <HAL_DMA_IRQHandler+0x6c8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_DMA_IRQHandler+0x516>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6e      	ldr	r2, [pc, #440]	; (80039b0 <HAL_DMA_IRQHandler+0x6cc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10a      	bne.n	8003810 <HAL_DMA_IRQHandler+0x52c>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf14      	ite	ne
 8003808:	2301      	movne	r3, #1
 800380a:	2300      	moveq	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e009      	b.n	8003824 <HAL_DMA_IRQHandler+0x540>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf14      	ite	ne
 800381e:	2301      	movne	r3, #1
 8003820:	2300      	moveq	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d03e      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2210      	movs	r2, #16
 8003832:	409a      	lsls	r2, r3
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d018      	beq.n	8003878 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d108      	bne.n	8003866 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d024      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
 8003864:	e01f      	b.n	80038a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01b      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4798      	blx	r3
 8003876:	e016      	b.n	80038a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0208 	bic.w	r2, r2, #8
 8003894:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2220      	movs	r2, #32
 80038b0:	409a      	lsls	r2, r3
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8110 	beq.w	8003adc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a2c      	ldr	r2, [pc, #176]	; (8003974 <HAL_DMA_IRQHandler+0x690>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d04a      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2b      	ldr	r2, [pc, #172]	; (8003978 <HAL_DMA_IRQHandler+0x694>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d045      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a29      	ldr	r2, [pc, #164]	; (800397c <HAL_DMA_IRQHandler+0x698>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d040      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a28      	ldr	r2, [pc, #160]	; (8003980 <HAL_DMA_IRQHandler+0x69c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d03b      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a26      	ldr	r2, [pc, #152]	; (8003984 <HAL_DMA_IRQHandler+0x6a0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d036      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a25      	ldr	r2, [pc, #148]	; (8003988 <HAL_DMA_IRQHandler+0x6a4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d031      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a23      	ldr	r2, [pc, #140]	; (800398c <HAL_DMA_IRQHandler+0x6a8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d02c      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a22      	ldr	r2, [pc, #136]	; (8003990 <HAL_DMA_IRQHandler+0x6ac>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d027      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a20      	ldr	r2, [pc, #128]	; (8003994 <HAL_DMA_IRQHandler+0x6b0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d022      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_DMA_IRQHandler+0x6b4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d01d      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_DMA_IRQHandler+0x6b8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d018      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <HAL_DMA_IRQHandler+0x6bc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <HAL_DMA_IRQHandler+0x6c0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00e      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <HAL_DMA_IRQHandler+0x6c4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_DMA_IRQHandler+0x6c8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_DMA_IRQHandler+0x678>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <HAL_DMA_IRQHandler+0x6cc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d12b      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x6d0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0310 	and.w	r3, r3, #16
 8003966:	2b00      	cmp	r3, #0
 8003968:	bf14      	ite	ne
 800396a:	2301      	movne	r3, #1
 800396c:	2300      	moveq	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	e02a      	b.n	80039c8 <HAL_DMA_IRQHandler+0x6e4>
 8003972:	bf00      	nop
 8003974:	40020010 	.word	0x40020010
 8003978:	40020028 	.word	0x40020028
 800397c:	40020040 	.word	0x40020040
 8003980:	40020058 	.word	0x40020058
 8003984:	40020070 	.word	0x40020070
 8003988:	40020088 	.word	0x40020088
 800398c:	400200a0 	.word	0x400200a0
 8003990:	400200b8 	.word	0x400200b8
 8003994:	40020410 	.word	0x40020410
 8003998:	40020428 	.word	0x40020428
 800399c:	40020440 	.word	0x40020440
 80039a0:	40020458 	.word	0x40020458
 80039a4:	40020470 	.word	0x40020470
 80039a8:	40020488 	.word	0x40020488
 80039ac:	400204a0 	.word	0x400204a0
 80039b0:	400204b8 	.word	0x400204b8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf14      	ite	ne
 80039c2:	2301      	movne	r3, #1
 80039c4:	2300      	moveq	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8087 	beq.w	8003adc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2220      	movs	r2, #32
 80039d8:	409a      	lsls	r2, r3
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d139      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0216 	bic.w	r2, r2, #22
 80039f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a08:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <HAL_DMA_IRQHandler+0x736>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0208 	bic.w	r2, r2, #8
 8003a28:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	223f      	movs	r2, #63	; 0x3f
 8003a34:	409a      	lsls	r2, r3
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 834a 	beq.w	80040e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
          }
          return;
 8003a5c:	e344      	b.n	80040e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d018      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d02c      	beq.n	8003adc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	4798      	blx	r3
 8003a8a:	e027      	b.n	8003adc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d023      	beq.n	8003adc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
 8003a9c:	e01e      	b.n	8003adc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10f      	bne.n	8003acc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0210 	bic.w	r2, r2, #16
 8003aba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8306 	beq.w	80040f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8088 	beq.w	8003c04 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2204      	movs	r2, #4
 8003af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a7a      	ldr	r2, [pc, #488]	; (8003cec <HAL_DMA_IRQHandler+0xa08>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d04a      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a79      	ldr	r2, [pc, #484]	; (8003cf0 <HAL_DMA_IRQHandler+0xa0c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d045      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a77      	ldr	r2, [pc, #476]	; (8003cf4 <HAL_DMA_IRQHandler+0xa10>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d040      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a76      	ldr	r2, [pc, #472]	; (8003cf8 <HAL_DMA_IRQHandler+0xa14>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d03b      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a74      	ldr	r2, [pc, #464]	; (8003cfc <HAL_DMA_IRQHandler+0xa18>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d036      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a73      	ldr	r2, [pc, #460]	; (8003d00 <HAL_DMA_IRQHandler+0xa1c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d031      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a71      	ldr	r2, [pc, #452]	; (8003d04 <HAL_DMA_IRQHandler+0xa20>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02c      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a70      	ldr	r2, [pc, #448]	; (8003d08 <HAL_DMA_IRQHandler+0xa24>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d027      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a6e      	ldr	r2, [pc, #440]	; (8003d0c <HAL_DMA_IRQHandler+0xa28>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d022      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6d      	ldr	r2, [pc, #436]	; (8003d10 <HAL_DMA_IRQHandler+0xa2c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d01d      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a6b      	ldr	r2, [pc, #428]	; (8003d14 <HAL_DMA_IRQHandler+0xa30>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d018      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6a      	ldr	r2, [pc, #424]	; (8003d18 <HAL_DMA_IRQHandler+0xa34>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d013      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a68      	ldr	r2, [pc, #416]	; (8003d1c <HAL_DMA_IRQHandler+0xa38>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a67      	ldr	r2, [pc, #412]	; (8003d20 <HAL_DMA_IRQHandler+0xa3c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d009      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a65      	ldr	r2, [pc, #404]	; (8003d24 <HAL_DMA_IRQHandler+0xa40>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x8b8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a64      	ldr	r2, [pc, #400]	; (8003d28 <HAL_DMA_IRQHandler+0xa44>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d108      	bne.n	8003bae <HAL_DMA_IRQHandler+0x8ca>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e007      	b.n	8003bbe <HAL_DMA_IRQHandler+0x8da>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0201 	bic.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d307      	bcc.n	8003bda <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f2      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x8da>
 8003bd8:	e000      	b.n	8003bdc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003bda:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003bf2:	e003      	b.n	8003bfc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8272 	beq.w	80040f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
 8003c16:	e26c      	b.n	80040f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a43      	ldr	r2, [pc, #268]	; (8003d2c <HAL_DMA_IRQHandler+0xa48>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d022      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x984>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a42      	ldr	r2, [pc, #264]	; (8003d30 <HAL_DMA_IRQHandler+0xa4c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d01d      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x984>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <HAL_DMA_IRQHandler+0xa50>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d018      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x984>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a3f      	ldr	r2, [pc, #252]	; (8003d38 <HAL_DMA_IRQHandler+0xa54>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x984>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <HAL_DMA_IRQHandler+0xa58>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00e      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x984>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <HAL_DMA_IRQHandler+0xa5c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x984>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a3a      	ldr	r2, [pc, #232]	; (8003d44 <HAL_DMA_IRQHandler+0xa60>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x984>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a39      	ldr	r2, [pc, #228]	; (8003d48 <HAL_DMA_IRQHandler+0xa64>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x988>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_DMA_IRQHandler+0x98a>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 823f 	beq.w	80040f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2204      	movs	r2, #4
 8003c86:	409a      	lsls	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80cd 	beq.w	8003e2c <HAL_DMA_IRQHandler+0xb48>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80c7 	beq.w	8003e2c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d049      	beq.n	8003d4c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8210 	beq.w	80040ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd4:	e20a      	b.n	80040ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8206 	beq.w	80040ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce8:	e200      	b.n	80040ec <HAL_DMA_IRQHandler+0xe08>
 8003cea:	bf00      	nop
 8003cec:	40020010 	.word	0x40020010
 8003cf0:	40020028 	.word	0x40020028
 8003cf4:	40020040 	.word	0x40020040
 8003cf8:	40020058 	.word	0x40020058
 8003cfc:	40020070 	.word	0x40020070
 8003d00:	40020088 	.word	0x40020088
 8003d04:	400200a0 	.word	0x400200a0
 8003d08:	400200b8 	.word	0x400200b8
 8003d0c:	40020410 	.word	0x40020410
 8003d10:	40020428 	.word	0x40020428
 8003d14:	40020440 	.word	0x40020440
 8003d18:	40020458 	.word	0x40020458
 8003d1c:	40020470 	.word	0x40020470
 8003d20:	40020488 	.word	0x40020488
 8003d24:	400204a0 	.word	0x400204a0
 8003d28:	400204b8 	.word	0x400204b8
 8003d2c:	58025408 	.word	0x58025408
 8003d30:	5802541c 	.word	0x5802541c
 8003d34:	58025430 	.word	0x58025430
 8003d38:	58025444 	.word	0x58025444
 8003d3c:	58025458 	.word	0x58025458
 8003d40:	5802546c 	.word	0x5802546c
 8003d44:	58025480 	.word	0x58025480
 8003d48:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d160      	bne.n	8003e18 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a7f      	ldr	r2, [pc, #508]	; (8003f58 <HAL_DMA_IRQHandler+0xc74>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d04a      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a7d      	ldr	r2, [pc, #500]	; (8003f5c <HAL_DMA_IRQHandler+0xc78>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d045      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7c      	ldr	r2, [pc, #496]	; (8003f60 <HAL_DMA_IRQHandler+0xc7c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d040      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a7a      	ldr	r2, [pc, #488]	; (8003f64 <HAL_DMA_IRQHandler+0xc80>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d03b      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a79      	ldr	r2, [pc, #484]	; (8003f68 <HAL_DMA_IRQHandler+0xc84>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d036      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a77      	ldr	r2, [pc, #476]	; (8003f6c <HAL_DMA_IRQHandler+0xc88>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d031      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a76      	ldr	r2, [pc, #472]	; (8003f70 <HAL_DMA_IRQHandler+0xc8c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d02c      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a74      	ldr	r2, [pc, #464]	; (8003f74 <HAL_DMA_IRQHandler+0xc90>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d027      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a73      	ldr	r2, [pc, #460]	; (8003f78 <HAL_DMA_IRQHandler+0xc94>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d022      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a71      	ldr	r2, [pc, #452]	; (8003f7c <HAL_DMA_IRQHandler+0xc98>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d01d      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a70      	ldr	r2, [pc, #448]	; (8003f80 <HAL_DMA_IRQHandler+0xc9c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d018      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6e      	ldr	r2, [pc, #440]	; (8003f84 <HAL_DMA_IRQHandler+0xca0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d013      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a6d      	ldr	r2, [pc, #436]	; (8003f88 <HAL_DMA_IRQHandler+0xca4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6b      	ldr	r2, [pc, #428]	; (8003f8c <HAL_DMA_IRQHandler+0xca8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a6a      	ldr	r2, [pc, #424]	; (8003f90 <HAL_DMA_IRQHandler+0xcac>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xb12>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a68      	ldr	r2, [pc, #416]	; (8003f94 <HAL_DMA_IRQHandler+0xcb0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d108      	bne.n	8003e08 <HAL_DMA_IRQHandler+0xb24>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0208 	bic.w	r2, r2, #8
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e007      	b.n	8003e18 <HAL_DMA_IRQHandler+0xb34>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0204 	bic.w	r2, r2, #4
 8003e16:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8165 	beq.w	80040ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e2a:	e15f      	b.n	80040ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2202      	movs	r2, #2
 8003e36:	409a      	lsls	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80c5 	beq.w	8003fcc <HAL_DMA_IRQHandler+0xce8>
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80bf 	beq.w	8003fcc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2202      	movs	r2, #2
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d018      	beq.n	8003e9a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 813a 	beq.w	80040f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e84:	e134      	b.n	80040f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8130 	beq.w	80040f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e98:	e12a      	b.n	80040f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 8089 	bne.w	8003fb8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2b      	ldr	r2, [pc, #172]	; (8003f58 <HAL_DMA_IRQHandler+0xc74>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d04a      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a29      	ldr	r2, [pc, #164]	; (8003f5c <HAL_DMA_IRQHandler+0xc78>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d045      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a28      	ldr	r2, [pc, #160]	; (8003f60 <HAL_DMA_IRQHandler+0xc7c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d040      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a26      	ldr	r2, [pc, #152]	; (8003f64 <HAL_DMA_IRQHandler+0xc80>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d03b      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a25      	ldr	r2, [pc, #148]	; (8003f68 <HAL_DMA_IRQHandler+0xc84>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d036      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <HAL_DMA_IRQHandler+0xc88>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d031      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <HAL_DMA_IRQHandler+0xc8c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d02c      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <HAL_DMA_IRQHandler+0xc90>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d027      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <HAL_DMA_IRQHandler+0xc94>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d022      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_DMA_IRQHandler+0xc98>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01d      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <HAL_DMA_IRQHandler+0xc9c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <HAL_DMA_IRQHandler+0xca0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <HAL_DMA_IRQHandler+0xca4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a17      	ldr	r2, [pc, #92]	; (8003f8c <HAL_DMA_IRQHandler+0xca8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a16      	ldr	r2, [pc, #88]	; (8003f90 <HAL_DMA_IRQHandler+0xcac>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xc62>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <HAL_DMA_IRQHandler+0xcb0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d128      	bne.n	8003f98 <HAL_DMA_IRQHandler+0xcb4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0214 	bic.w	r2, r2, #20
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e027      	b.n	8003fa8 <HAL_DMA_IRQHandler+0xcc4>
 8003f58:	40020010 	.word	0x40020010
 8003f5c:	40020028 	.word	0x40020028
 8003f60:	40020040 	.word	0x40020040
 8003f64:	40020058 	.word	0x40020058
 8003f68:	40020070 	.word	0x40020070
 8003f6c:	40020088 	.word	0x40020088
 8003f70:	400200a0 	.word	0x400200a0
 8003f74:	400200b8 	.word	0x400200b8
 8003f78:	40020410 	.word	0x40020410
 8003f7c:	40020428 	.word	0x40020428
 8003f80:	40020440 	.word	0x40020440
 8003f84:	40020458 	.word	0x40020458
 8003f88:	40020470 	.word	0x40020470
 8003f8c:	40020488 	.word	0x40020488
 8003f90:	400204a0 	.word	0x400204a0
 8003f94:	400204b8 	.word	0x400204b8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 020a 	bic.w	r2, r2, #10
 8003fa6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8097 	beq.w	80040f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fca:	e091      	b.n	80040f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8088 	beq.w	80040f2 <HAL_DMA_IRQHandler+0xe0e>
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8082 	beq.w	80040f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a41      	ldr	r2, [pc, #260]	; (80040f8 <HAL_DMA_IRQHandler+0xe14>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d04a      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3f      	ldr	r2, [pc, #252]	; (80040fc <HAL_DMA_IRQHandler+0xe18>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d045      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a3e      	ldr	r2, [pc, #248]	; (8004100 <HAL_DMA_IRQHandler+0xe1c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d040      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a3c      	ldr	r2, [pc, #240]	; (8004104 <HAL_DMA_IRQHandler+0xe20>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d03b      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a3b      	ldr	r2, [pc, #236]	; (8004108 <HAL_DMA_IRQHandler+0xe24>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d036      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a39      	ldr	r2, [pc, #228]	; (800410c <HAL_DMA_IRQHandler+0xe28>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d031      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a38      	ldr	r2, [pc, #224]	; (8004110 <HAL_DMA_IRQHandler+0xe2c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d02c      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a36      	ldr	r2, [pc, #216]	; (8004114 <HAL_DMA_IRQHandler+0xe30>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d027      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a35      	ldr	r2, [pc, #212]	; (8004118 <HAL_DMA_IRQHandler+0xe34>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d022      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a33      	ldr	r2, [pc, #204]	; (800411c <HAL_DMA_IRQHandler+0xe38>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01d      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a32      	ldr	r2, [pc, #200]	; (8004120 <HAL_DMA_IRQHandler+0xe3c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d018      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a30      	ldr	r2, [pc, #192]	; (8004124 <HAL_DMA_IRQHandler+0xe40>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2f      	ldr	r2, [pc, #188]	; (8004128 <HAL_DMA_IRQHandler+0xe44>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2d      	ldr	r2, [pc, #180]	; (800412c <HAL_DMA_IRQHandler+0xe48>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <HAL_DMA_IRQHandler+0xe4c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_DMA_IRQHandler+0xdaa>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <HAL_DMA_IRQHandler+0xe50>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d108      	bne.n	80040a0 <HAL_DMA_IRQHandler+0xdbc>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 021c 	bic.w	r2, r2, #28
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e007      	b.n	80040b0 <HAL_DMA_IRQHandler+0xdcc>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 020e 	bic.w	r2, r2, #14
 80040ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	2201      	movs	r2, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
 80040e6:	e004      	b.n	80040f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80040e8:	bf00      	nop
 80040ea:	e002      	b.n	80040f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040f2:	3728      	adds	r7, #40	; 0x28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8

08004138 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7f      	ldr	r2, [pc, #508]	; (8004354 <DMA_SetConfig+0x21c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d072      	beq.n	8004242 <DMA_SetConfig+0x10a>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a7d      	ldr	r2, [pc, #500]	; (8004358 <DMA_SetConfig+0x220>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d06d      	beq.n	8004242 <DMA_SetConfig+0x10a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a7c      	ldr	r2, [pc, #496]	; (800435c <DMA_SetConfig+0x224>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d068      	beq.n	8004242 <DMA_SetConfig+0x10a>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7a      	ldr	r2, [pc, #488]	; (8004360 <DMA_SetConfig+0x228>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d063      	beq.n	8004242 <DMA_SetConfig+0x10a>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a79      	ldr	r2, [pc, #484]	; (8004364 <DMA_SetConfig+0x22c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d05e      	beq.n	8004242 <DMA_SetConfig+0x10a>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a77      	ldr	r2, [pc, #476]	; (8004368 <DMA_SetConfig+0x230>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d059      	beq.n	8004242 <DMA_SetConfig+0x10a>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a76      	ldr	r2, [pc, #472]	; (800436c <DMA_SetConfig+0x234>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d054      	beq.n	8004242 <DMA_SetConfig+0x10a>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a74      	ldr	r2, [pc, #464]	; (8004370 <DMA_SetConfig+0x238>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d04f      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a73      	ldr	r2, [pc, #460]	; (8004374 <DMA_SetConfig+0x23c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d04a      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a71      	ldr	r2, [pc, #452]	; (8004378 <DMA_SetConfig+0x240>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d045      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a70      	ldr	r2, [pc, #448]	; (800437c <DMA_SetConfig+0x244>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d040      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a6e      	ldr	r2, [pc, #440]	; (8004380 <DMA_SetConfig+0x248>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d03b      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a6d      	ldr	r2, [pc, #436]	; (8004384 <DMA_SetConfig+0x24c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d036      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6b      	ldr	r2, [pc, #428]	; (8004388 <DMA_SetConfig+0x250>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d031      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6a      	ldr	r2, [pc, #424]	; (800438c <DMA_SetConfig+0x254>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d02c      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a68      	ldr	r2, [pc, #416]	; (8004390 <DMA_SetConfig+0x258>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d027      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a67      	ldr	r2, [pc, #412]	; (8004394 <DMA_SetConfig+0x25c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d022      	beq.n	8004242 <DMA_SetConfig+0x10a>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a65      	ldr	r2, [pc, #404]	; (8004398 <DMA_SetConfig+0x260>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d01d      	beq.n	8004242 <DMA_SetConfig+0x10a>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a64      	ldr	r2, [pc, #400]	; (800439c <DMA_SetConfig+0x264>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d018      	beq.n	8004242 <DMA_SetConfig+0x10a>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a62      	ldr	r2, [pc, #392]	; (80043a0 <DMA_SetConfig+0x268>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <DMA_SetConfig+0x10a>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a61      	ldr	r2, [pc, #388]	; (80043a4 <DMA_SetConfig+0x26c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00e      	beq.n	8004242 <DMA_SetConfig+0x10a>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a5f      	ldr	r2, [pc, #380]	; (80043a8 <DMA_SetConfig+0x270>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d009      	beq.n	8004242 <DMA_SetConfig+0x10a>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a5e      	ldr	r2, [pc, #376]	; (80043ac <DMA_SetConfig+0x274>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <DMA_SetConfig+0x10a>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a5c      	ldr	r2, [pc, #368]	; (80043b0 <DMA_SetConfig+0x278>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <DMA_SetConfig+0x10e>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <DMA_SetConfig+0x110>
 8004246:	2300      	movs	r3, #0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00d      	beq.n	8004268 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004254:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004266:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a39      	ldr	r2, [pc, #228]	; (8004354 <DMA_SetConfig+0x21c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d04a      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a38      	ldr	r2, [pc, #224]	; (8004358 <DMA_SetConfig+0x220>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d045      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a36      	ldr	r2, [pc, #216]	; (800435c <DMA_SetConfig+0x224>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d040      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a35      	ldr	r2, [pc, #212]	; (8004360 <DMA_SetConfig+0x228>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d03b      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a33      	ldr	r2, [pc, #204]	; (8004364 <DMA_SetConfig+0x22c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d036      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a32      	ldr	r2, [pc, #200]	; (8004368 <DMA_SetConfig+0x230>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d031      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a30      	ldr	r2, [pc, #192]	; (800436c <DMA_SetConfig+0x234>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d02c      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a2f      	ldr	r2, [pc, #188]	; (8004370 <DMA_SetConfig+0x238>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d027      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a2d      	ldr	r2, [pc, #180]	; (8004374 <DMA_SetConfig+0x23c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d022      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2c      	ldr	r2, [pc, #176]	; (8004378 <DMA_SetConfig+0x240>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d01d      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2a      	ldr	r2, [pc, #168]	; (800437c <DMA_SetConfig+0x244>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d018      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a29      	ldr	r2, [pc, #164]	; (8004380 <DMA_SetConfig+0x248>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a27      	ldr	r2, [pc, #156]	; (8004384 <DMA_SetConfig+0x24c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a26      	ldr	r2, [pc, #152]	; (8004388 <DMA_SetConfig+0x250>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a24      	ldr	r2, [pc, #144]	; (800438c <DMA_SetConfig+0x254>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <DMA_SetConfig+0x1d0>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a23      	ldr	r2, [pc, #140]	; (8004390 <DMA_SetConfig+0x258>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <DMA_SetConfig+0x1d4>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <DMA_SetConfig+0x1d6>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d059      	beq.n	80043c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	223f      	movs	r2, #63	; 0x3f
 800431c:	409a      	lsls	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004330:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d138      	bne.n	80043b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004352:	e086      	b.n	8004462 <DMA_SetConfig+0x32a>
 8004354:	40020010 	.word	0x40020010
 8004358:	40020028 	.word	0x40020028
 800435c:	40020040 	.word	0x40020040
 8004360:	40020058 	.word	0x40020058
 8004364:	40020070 	.word	0x40020070
 8004368:	40020088 	.word	0x40020088
 800436c:	400200a0 	.word	0x400200a0
 8004370:	400200b8 	.word	0x400200b8
 8004374:	40020410 	.word	0x40020410
 8004378:	40020428 	.word	0x40020428
 800437c:	40020440 	.word	0x40020440
 8004380:	40020458 	.word	0x40020458
 8004384:	40020470 	.word	0x40020470
 8004388:	40020488 	.word	0x40020488
 800438c:	400204a0 	.word	0x400204a0
 8004390:	400204b8 	.word	0x400204b8
 8004394:	58025408 	.word	0x58025408
 8004398:	5802541c 	.word	0x5802541c
 800439c:	58025430 	.word	0x58025430
 80043a0:	58025444 	.word	0x58025444
 80043a4:	58025458 	.word	0x58025458
 80043a8:	5802546c 	.word	0x5802546c
 80043ac:	58025480 	.word	0x58025480
 80043b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
}
 80043c4:	e04d      	b.n	8004462 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a29      	ldr	r2, [pc, #164]	; (8004470 <DMA_SetConfig+0x338>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d022      	beq.n	8004416 <DMA_SetConfig+0x2de>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a27      	ldr	r2, [pc, #156]	; (8004474 <DMA_SetConfig+0x33c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01d      	beq.n	8004416 <DMA_SetConfig+0x2de>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a26      	ldr	r2, [pc, #152]	; (8004478 <DMA_SetConfig+0x340>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d018      	beq.n	8004416 <DMA_SetConfig+0x2de>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a24      	ldr	r2, [pc, #144]	; (800447c <DMA_SetConfig+0x344>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <DMA_SetConfig+0x2de>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a23      	ldr	r2, [pc, #140]	; (8004480 <DMA_SetConfig+0x348>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00e      	beq.n	8004416 <DMA_SetConfig+0x2de>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a21      	ldr	r2, [pc, #132]	; (8004484 <DMA_SetConfig+0x34c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d009      	beq.n	8004416 <DMA_SetConfig+0x2de>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a20      	ldr	r2, [pc, #128]	; (8004488 <DMA_SetConfig+0x350>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <DMA_SetConfig+0x2de>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1e      	ldr	r2, [pc, #120]	; (800448c <DMA_SetConfig+0x354>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <DMA_SetConfig+0x2e2>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <DMA_SetConfig+0x2e4>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2201      	movs	r2, #1
 800442a:	409a      	lsls	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	d108      	bne.n	8004452 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	60da      	str	r2, [r3, #12]
}
 8004450:	e007      	b.n	8004462 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	60da      	str	r2, [r3, #12]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	58025408 	.word	0x58025408
 8004474:	5802541c 	.word	0x5802541c
 8004478:	58025430 	.word	0x58025430
 800447c:	58025444 	.word	0x58025444
 8004480:	58025458 	.word	0x58025458
 8004484:	5802546c 	.word	0x5802546c
 8004488:	58025480 	.word	0x58025480
 800448c:	58025494 	.word	0x58025494

08004490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a42      	ldr	r2, [pc, #264]	; (80045a8 <DMA_CalcBaseAndBitshift+0x118>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d04a      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a41      	ldr	r2, [pc, #260]	; (80045ac <DMA_CalcBaseAndBitshift+0x11c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d045      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a3f      	ldr	r2, [pc, #252]	; (80045b0 <DMA_CalcBaseAndBitshift+0x120>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d040      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a3e      	ldr	r2, [pc, #248]	; (80045b4 <DMA_CalcBaseAndBitshift+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d03b      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a3c      	ldr	r2, [pc, #240]	; (80045b8 <DMA_CalcBaseAndBitshift+0x128>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d036      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a3b      	ldr	r2, [pc, #236]	; (80045bc <DMA_CalcBaseAndBitshift+0x12c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d031      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a39      	ldr	r2, [pc, #228]	; (80045c0 <DMA_CalcBaseAndBitshift+0x130>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d02c      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a38      	ldr	r2, [pc, #224]	; (80045c4 <DMA_CalcBaseAndBitshift+0x134>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d027      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a36      	ldr	r2, [pc, #216]	; (80045c8 <DMA_CalcBaseAndBitshift+0x138>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d022      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a35      	ldr	r2, [pc, #212]	; (80045cc <DMA_CalcBaseAndBitshift+0x13c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d01d      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a33      	ldr	r2, [pc, #204]	; (80045d0 <DMA_CalcBaseAndBitshift+0x140>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d018      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a32      	ldr	r2, [pc, #200]	; (80045d4 <DMA_CalcBaseAndBitshift+0x144>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a30      	ldr	r2, [pc, #192]	; (80045d8 <DMA_CalcBaseAndBitshift+0x148>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00e      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a2f      	ldr	r2, [pc, #188]	; (80045dc <DMA_CalcBaseAndBitshift+0x14c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d009      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a2d      	ldr	r2, [pc, #180]	; (80045e0 <DMA_CalcBaseAndBitshift+0x150>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <DMA_CalcBaseAndBitshift+0xa8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <DMA_CalcBaseAndBitshift+0x154>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <DMA_CalcBaseAndBitshift+0xac>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <DMA_CalcBaseAndBitshift+0xae>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d024      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	3b10      	subs	r3, #16
 800454a:	4a27      	ldr	r2, [pc, #156]	; (80045e8 <DMA_CalcBaseAndBitshift+0x158>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	4a24      	ldr	r2, [pc, #144]	; (80045ec <DMA_CalcBaseAndBitshift+0x15c>)
 800455c:	5cd3      	ldrb	r3, [r2, r3]
 800455e:	461a      	mov	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d908      	bls.n	800457c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	4b1f      	ldr	r3, [pc, #124]	; (80045f0 <DMA_CalcBaseAndBitshift+0x160>)
 8004572:	4013      	ands	r3, r2
 8004574:	1d1a      	adds	r2, r3, #4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	659a      	str	r2, [r3, #88]	; 0x58
 800457a:	e00d      	b.n	8004598 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	461a      	mov	r2, r3
 8004582:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <DMA_CalcBaseAndBitshift+0x160>)
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6593      	str	r3, [r2, #88]	; 0x58
 800458a:	e005      	b.n	8004598 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40020010 	.word	0x40020010
 80045ac:	40020028 	.word	0x40020028
 80045b0:	40020040 	.word	0x40020040
 80045b4:	40020058 	.word	0x40020058
 80045b8:	40020070 	.word	0x40020070
 80045bc:	40020088 	.word	0x40020088
 80045c0:	400200a0 	.word	0x400200a0
 80045c4:	400200b8 	.word	0x400200b8
 80045c8:	40020410 	.word	0x40020410
 80045cc:	40020428 	.word	0x40020428
 80045d0:	40020440 	.word	0x40020440
 80045d4:	40020458 	.word	0x40020458
 80045d8:	40020470 	.word	0x40020470
 80045dc:	40020488 	.word	0x40020488
 80045e0:	400204a0 	.word	0x400204a0
 80045e4:	400204b8 	.word	0x400204b8
 80045e8:	aaaaaaab 	.word	0xaaaaaaab
 80045ec:	0800ac84 	.word	0x0800ac84
 80045f0:	fffffc00 	.word	0xfffffc00

080045f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d120      	bne.n	800464a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	2b03      	cmp	r3, #3
 800460e:	d858      	bhi.n	80046c2 <DMA_CheckFifoParam+0xce>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <DMA_CheckFifoParam+0x24>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	08004629 	.word	0x08004629
 800461c:	0800463b 	.word	0x0800463b
 8004620:	08004629 	.word	0x08004629
 8004624:	080046c3 	.word	0x080046c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d048      	beq.n	80046c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004638:	e045      	b.n	80046c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004642:	d142      	bne.n	80046ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004648:	e03f      	b.n	80046ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004652:	d123      	bne.n	800469c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004658:	2b03      	cmp	r3, #3
 800465a:	d838      	bhi.n	80046ce <DMA_CheckFifoParam+0xda>
 800465c:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <DMA_CheckFifoParam+0x70>)
 800465e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004662:	bf00      	nop
 8004664:	08004675 	.word	0x08004675
 8004668:	0800467b 	.word	0x0800467b
 800466c:	08004675 	.word	0x08004675
 8004670:	0800468d 	.word	0x0800468d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
        break;
 8004678:	e030      	b.n	80046dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d025      	beq.n	80046d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800468a:	e022      	b.n	80046d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004694:	d11f      	bne.n	80046d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800469a:	e01c      	b.n	80046d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d902      	bls.n	80046aa <DMA_CheckFifoParam+0xb6>
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d003      	beq.n	80046b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80046a8:	e018      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
        break;
 80046ae:	e015      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00e      	beq.n	80046da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
    break;
 80046c0:	e00b      	b.n	80046da <DMA_CheckFifoParam+0xe6>
        break;
 80046c2:	bf00      	nop
 80046c4:	e00a      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
        break;
 80046c6:	bf00      	nop
 80046c8:	e008      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
        break;
 80046ca:	bf00      	nop
 80046cc:	e006      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
        break;
 80046ce:	bf00      	nop
 80046d0:	e004      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
        break;
 80046d2:	bf00      	nop
 80046d4:	e002      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
        break;
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <DMA_CheckFifoParam+0xe8>
    break;
 80046da:	bf00      	nop
    }
  }

  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop

080046ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a38      	ldr	r2, [pc, #224]	; (80047e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d022      	beq.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a36      	ldr	r2, [pc, #216]	; (80047e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01d      	beq.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a35      	ldr	r2, [pc, #212]	; (80047e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d018      	beq.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a33      	ldr	r2, [pc, #204]	; (80047ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a32      	ldr	r2, [pc, #200]	; (80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a30      	ldr	r2, [pc, #192]	; (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2f      	ldr	r2, [pc, #188]	; (80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a2d      	ldr	r2, [pc, #180]	; (80047fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d101      	bne.n	800474e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01a      	beq.n	800478a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	3b08      	subs	r3, #8
 800475c:	4a28      	ldr	r2, [pc, #160]	; (8004800 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4b26      	ldr	r3, [pc, #152]	; (8004804 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	461a      	mov	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a24      	ldr	r2, [pc, #144]	; (8004808 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004778:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2201      	movs	r2, #1
 8004782:	409a      	lsls	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004788:	e024      	b.n	80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	3b10      	subs	r3, #16
 8004792:	4a1e      	ldr	r2, [pc, #120]	; (800480c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4a1c      	ldr	r2, [pc, #112]	; (8004810 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d806      	bhi.n	80047b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d902      	bls.n	80047b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3308      	adds	r3, #8
 80047b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4b18      	ldr	r3, [pc, #96]	; (8004818 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	461a      	mov	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a16      	ldr	r2, [pc, #88]	; (800481c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80047c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	2201      	movs	r2, #1
 80047ce:	409a      	lsls	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	58025408 	.word	0x58025408
 80047e4:	5802541c 	.word	0x5802541c
 80047e8:	58025430 	.word	0x58025430
 80047ec:	58025444 	.word	0x58025444
 80047f0:	58025458 	.word	0x58025458
 80047f4:	5802546c 	.word	0x5802546c
 80047f8:	58025480 	.word	0x58025480
 80047fc:	58025494 	.word	0x58025494
 8004800:	cccccccd 	.word	0xcccccccd
 8004804:	16009600 	.word	0x16009600
 8004808:	58025880 	.word	0x58025880
 800480c:	aaaaaaab 	.word	0xaaaaaaab
 8004810:	400204b8 	.word	0x400204b8
 8004814:	4002040f 	.word	0x4002040f
 8004818:	10008200 	.word	0x10008200
 800481c:	40020880 	.word	0x40020880

08004820 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04a      	beq.n	80048cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d847      	bhi.n	80048cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a25      	ldr	r2, [pc, #148]	; (80048d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d022      	beq.n	800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a24      	ldr	r2, [pc, #144]	; (80048dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d01d      	beq.n	800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004890:	2300      	movs	r3, #0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	461a      	mov	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a15      	ldr	r2, [pc, #84]	; (80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80048a8:	671a      	str	r2, [r3, #112]	; 0x70
 80048aa:	e009      	b.n	80048c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	461a      	mov	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a11      	ldr	r2, [pc, #68]	; (8004904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80048be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	2201      	movs	r2, #1
 80048c6:	409a      	lsls	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	58025408 	.word	0x58025408
 80048dc:	5802541c 	.word	0x5802541c
 80048e0:	58025430 	.word	0x58025430
 80048e4:	58025444 	.word	0x58025444
 80048e8:	58025458 	.word	0x58025458
 80048ec:	5802546c 	.word	0x5802546c
 80048f0:	58025480 	.word	0x58025480
 80048f4:	58025494 	.word	0x58025494
 80048f8:	1600963f 	.word	0x1600963f
 80048fc:	58025940 	.word	0x58025940
 8004900:	1000823f 	.word	0x1000823f
 8004904:	40020940 	.word	0x40020940

08004908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004908:	b480      	push	{r7}
 800490a:	b089      	sub	sp, #36	; 0x24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004916:	4b86      	ldr	r3, [pc, #536]	; (8004b30 <HAL_GPIO_Init+0x228>)
 8004918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800491a:	e18c      	b.n	8004c36 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2101      	movs	r1, #1
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 817e 	beq.w	8004c30 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d005      	beq.n	800494c <HAL_GPIO_Init+0x44>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d130      	bne.n	80049ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2203      	movs	r2, #3
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4313      	orrs	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004982:	2201      	movs	r2, #1
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43db      	mvns	r3, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4013      	ands	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	091b      	lsrs	r3, r3, #4
 8004998:	f003 0201 	and.w	r2, r3, #1
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d017      	beq.n	80049ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	2203      	movs	r2, #3
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d123      	bne.n	8004a3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	08da      	lsrs	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3208      	adds	r2, #8
 80049fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	220f      	movs	r2, #15
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	08da      	lsrs	r2, r3, #3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3208      	adds	r2, #8
 8004a38:	69b9      	ldr	r1, [r7, #24]
 8004a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	2203      	movs	r2, #3
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4013      	ands	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 0203 	and.w	r2, r3, #3
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80d8 	beq.w	8004c30 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a80:	4b2c      	ldr	r3, [pc, #176]	; (8004b34 <HAL_GPIO_Init+0x22c>)
 8004a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a86:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <HAL_GPIO_Init+0x22c>)
 8004a88:	f043 0302 	orr.w	r3, r3, #2
 8004a8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004a90:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <HAL_GPIO_Init+0x22c>)
 8004a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a9e:	4a26      	ldr	r2, [pc, #152]	; (8004b38 <HAL_GPIO_Init+0x230>)
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	089b      	lsrs	r3, r3, #2
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	220f      	movs	r2, #15
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43db      	mvns	r3, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <HAL_GPIO_Init+0x234>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d04a      	beq.n	8004b60 <HAL_GPIO_Init+0x258>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <HAL_GPIO_Init+0x238>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d02b      	beq.n	8004b2a <HAL_GPIO_Init+0x222>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <HAL_GPIO_Init+0x23c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d025      	beq.n	8004b26 <HAL_GPIO_Init+0x21e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_GPIO_Init+0x240>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01f      	beq.n	8004b22 <HAL_GPIO_Init+0x21a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <HAL_GPIO_Init+0x244>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d019      	beq.n	8004b1e <HAL_GPIO_Init+0x216>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a18      	ldr	r2, [pc, #96]	; (8004b50 <HAL_GPIO_Init+0x248>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <HAL_GPIO_Init+0x212>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <HAL_GPIO_Init+0x24c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00d      	beq.n	8004b16 <HAL_GPIO_Init+0x20e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <HAL_GPIO_Init+0x250>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <HAL_GPIO_Init+0x20a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <HAL_GPIO_Init+0x254>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <HAL_GPIO_Init+0x206>
 8004b0a:	2309      	movs	r3, #9
 8004b0c:	e029      	b.n	8004b62 <HAL_GPIO_Init+0x25a>
 8004b0e:	230a      	movs	r3, #10
 8004b10:	e027      	b.n	8004b62 <HAL_GPIO_Init+0x25a>
 8004b12:	2307      	movs	r3, #7
 8004b14:	e025      	b.n	8004b62 <HAL_GPIO_Init+0x25a>
 8004b16:	2306      	movs	r3, #6
 8004b18:	e023      	b.n	8004b62 <HAL_GPIO_Init+0x25a>
 8004b1a:	2305      	movs	r3, #5
 8004b1c:	e021      	b.n	8004b62 <HAL_GPIO_Init+0x25a>
 8004b1e:	2304      	movs	r3, #4
 8004b20:	e01f      	b.n	8004b62 <HAL_GPIO_Init+0x25a>
 8004b22:	2303      	movs	r3, #3
 8004b24:	e01d      	b.n	8004b62 <HAL_GPIO_Init+0x25a>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e01b      	b.n	8004b62 <HAL_GPIO_Init+0x25a>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e019      	b.n	8004b62 <HAL_GPIO_Init+0x25a>
 8004b2e:	bf00      	nop
 8004b30:	58000080 	.word	0x58000080
 8004b34:	58024400 	.word	0x58024400
 8004b38:	58000400 	.word	0x58000400
 8004b3c:	58020000 	.word	0x58020000
 8004b40:	58020400 	.word	0x58020400
 8004b44:	58020800 	.word	0x58020800
 8004b48:	58020c00 	.word	0x58020c00
 8004b4c:	58021000 	.word	0x58021000
 8004b50:	58021400 	.word	0x58021400
 8004b54:	58021800 	.word	0x58021800
 8004b58:	58021c00 	.word	0x58021c00
 8004b5c:	58022400 	.word	0x58022400
 8004b60:	2300      	movs	r3, #0
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	f002 0203 	and.w	r2, r2, #3
 8004b68:	0092      	lsls	r2, r2, #2
 8004b6a:	4093      	lsls	r3, r2
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b72:	4938      	ldr	r1, [pc, #224]	; (8004c54 <HAL_GPIO_Init+0x34c>)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	089b      	lsrs	r3, r3, #2
 8004b78:	3302      	adds	r3, #2
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4013      	ands	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	3301      	adds	r3, #1
 8004c34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f47f ae6b 	bne.w	800491c <HAL_GPIO_Init+0x14>
  }
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	3724      	adds	r7, #36	; 0x24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	58000400 	.word	0x58000400

08004c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
 8004c74:	e001      	b.n	8004c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	807b      	strh	r3, [r7, #2]
 8004c94:	4613      	mov	r3, r2
 8004c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c98:	787b      	ldrb	r3, [r7, #1]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c9e:	887a      	ldrh	r2, [r7, #2]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ca4:	e003      	b.n	8004cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ca6:	887b      	ldrh	r3, [r7, #2]
 8004ca8:	041a      	lsls	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	619a      	str	r2, [r3, #24]
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004cc4:	4b19      	ldr	r3, [pc, #100]	; (8004d2c <HAL_PWREx_ConfigSupply+0x70>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d00a      	beq.n	8004ce6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004cd0:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <HAL_PWREx_ConfigSupply+0x70>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d001      	beq.n	8004ce2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e01f      	b.n	8004d22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e01d      	b.n	8004d22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ce6:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <HAL_PWREx_ConfigSupply+0x70>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f023 0207 	bic.w	r2, r3, #7
 8004cee:	490f      	ldr	r1, [pc, #60]	; (8004d2c <HAL_PWREx_ConfigSupply+0x70>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004cf6:	f7fc feb3 	bl	8001a60 <HAL_GetTick>
 8004cfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004cfc:	e009      	b.n	8004d12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004cfe:	f7fc feaf 	bl	8001a60 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d0c:	d901      	bls.n	8004d12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e007      	b.n	8004d22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_PWREx_ConfigSupply+0x70>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1e:	d1ee      	bne.n	8004cfe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	58024800 	.word	0x58024800

08004d30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08c      	sub	sp, #48	; 0x30
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e3c8      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8087 	beq.w	8004e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d50:	4b88      	ldr	r3, [pc, #544]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d5a:	4b86      	ldr	r3, [pc, #536]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d007      	beq.n	8004d76 <HAL_RCC_OscConfig+0x46>
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b18      	cmp	r3, #24
 8004d6a:	d110      	bne.n	8004d8e <HAL_RCC_OscConfig+0x5e>
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d10b      	bne.n	8004d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d76:	4b7f      	ldr	r3, [pc, #508]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d06c      	beq.n	8004e5c <HAL_RCC_OscConfig+0x12c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d168      	bne.n	8004e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e3a2      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_OscConfig+0x76>
 8004d98:	4b76      	ldr	r3, [pc, #472]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a75      	ldr	r2, [pc, #468]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	e02e      	b.n	8004e04 <HAL_RCC_OscConfig+0xd4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x98>
 8004dae:	4b71      	ldr	r3, [pc, #452]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a70      	ldr	r2, [pc, #448]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b6e      	ldr	r3, [pc, #440]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6d      	ldr	r2, [pc, #436]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc4:	6013      	str	r3, [r2, #0]
 8004dc6:	e01d      	b.n	8004e04 <HAL_RCC_OscConfig+0xd4>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0xbc>
 8004dd2:	4b68      	ldr	r3, [pc, #416]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a67      	ldr	r2, [pc, #412]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	4b65      	ldr	r3, [pc, #404]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a64      	ldr	r2, [pc, #400]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e00b      	b.n	8004e04 <HAL_RCC_OscConfig+0xd4>
 8004dec:	4b61      	ldr	r3, [pc, #388]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a60      	ldr	r2, [pc, #384]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	4b5e      	ldr	r3, [pc, #376]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5d      	ldr	r2, [pc, #372]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d013      	beq.n	8004e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0c:	f7fc fe28 	bl	8001a60 <HAL_GetTick>
 8004e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e14:	f7fc fe24 	bl	8001a60 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e356      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e26:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0xe4>
 8004e32:	e014      	b.n	8004e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fc fe14 	bl	8001a60 <HAL_GetTick>
 8004e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e3c:	f7fc fe10 	bl	8001a60 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	; 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e342      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x10c>
 8004e5a:	e000      	b.n	8004e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 808c 	beq.w	8004f84 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6c:	4b41      	ldr	r3, [pc, #260]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e76:	4b3f      	ldr	r3, [pc, #252]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_RCC_OscConfig+0x162>
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	2b18      	cmp	r3, #24
 8004e86:	d137      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x1c8>
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d132      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e92:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_RCC_OscConfig+0x17a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e314      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004eaa:	4b32      	ldr	r3, [pc, #200]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 0219 	bic.w	r2, r3, #25
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	492f      	ldr	r1, [pc, #188]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fc fdd0 	bl	8001a60 <HAL_GetTick>
 8004ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec4:	f7fc fdcc 	bl	8001a60 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e2fe      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee2:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	4920      	ldr	r1, [pc, #128]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ef6:	e045      	b.n	8004f84 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d026      	beq.n	8004f4e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f00:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f023 0219 	bic.w	r2, r3, #25
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4919      	ldr	r1, [pc, #100]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fc fda5 	bl	8001a60 <HAL_GetTick>
 8004f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f1a:	f7fc fda1 	bl	8001a60 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e2d3      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f2c:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f38:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	061b      	lsls	r3, r3, #24
 8004f46:	490b      	ldr	r1, [pc, #44]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
 8004f4c:	e01a      	b.n	8004f84 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a08      	ldr	r2, [pc, #32]	; (8004f74 <HAL_RCC_OscConfig+0x244>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fc fd81 	bl	8001a60 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f62:	f7fc fd7d 	bl	8001a60 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d903      	bls.n	8004f78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e2af      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
 8004f74:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f78:	4b96      	ldr	r3, [pc, #600]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1ee      	bne.n	8004f62 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d06a      	beq.n	8005066 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f90:	4b90      	ldr	r3, [pc, #576]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f98:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f9a:	4b8e      	ldr	r3, [pc, #568]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d007      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x286>
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b18      	cmp	r3, #24
 8004faa:	d11b      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2b4>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d116      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fb6:	4b87      	ldr	r3, [pc, #540]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_RCC_OscConfig+0x29e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	2b80      	cmp	r3, #128	; 0x80
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e282      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fce:	4b81      	ldr	r3, [pc, #516]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	061b      	lsls	r3, r3, #24
 8004fdc:	497d      	ldr	r1, [pc, #500]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fe2:	e040      	b.n	8005066 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d023      	beq.n	8005034 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fec:	4b79      	ldr	r3, [pc, #484]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a78      	ldr	r2, [pc, #480]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8004ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff8:	f7fc fd32 	bl	8001a60 <HAL_GetTick>
 8004ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005000:	f7fc fd2e 	bl	8001a60 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e260      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005012:	4b70      	ldr	r3, [pc, #448]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800501e:	4b6d      	ldr	r3, [pc, #436]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	061b      	lsls	r3, r3, #24
 800502c:	4969      	ldr	r1, [pc, #420]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	60cb      	str	r3, [r1, #12]
 8005032:	e018      	b.n	8005066 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005034:	4b67      	ldr	r3, [pc, #412]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a66      	ldr	r2, [pc, #408]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fc fd0e 	bl	8001a60 <HAL_GetTick>
 8005044:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005048:	f7fc fd0a 	bl	8001a60 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e23c      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800505a:	4b5e      	ldr	r3, [pc, #376]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d036      	beq.n	80050e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d019      	beq.n	80050ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507a:	4b56      	ldr	r3, [pc, #344]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 800507c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507e:	4a55      	ldr	r2, [pc, #340]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005086:	f7fc fceb 	bl	8001a60 <HAL_GetTick>
 800508a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508e:	f7fc fce7 	bl	8001a60 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e219      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050a0:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80050a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x35e>
 80050ac:	e018      	b.n	80050e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ae:	4b49      	ldr	r3, [pc, #292]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80050b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b2:	4a48      	ldr	r2, [pc, #288]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ba:	f7fc fcd1 	bl	8001a60 <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c2:	f7fc fccd 	bl	8001a60 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e1ff      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050d4:	4b3f      	ldr	r3, [pc, #252]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80050d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f0      	bne.n	80050c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d036      	beq.n	800515a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d019      	beq.n	8005128 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050f4:	4b37      	ldr	r3, [pc, #220]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a36      	ldr	r2, [pc, #216]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80050fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005100:	f7fc fcae 	bl	8001a60 <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005108:	f7fc fcaa 	bl	8001a60 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e1dc      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800511a:	4b2e      	ldr	r3, [pc, #184]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0x3d8>
 8005126:	e018      	b.n	800515a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005128:	4b2a      	ldr	r3, [pc, #168]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a29      	ldr	r2, [pc, #164]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 800512e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005132:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005134:	f7fc fc94 	bl	8001a60 <HAL_GetTick>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800513c:	f7fc fc90 	bl	8001a60 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e1c2      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800514e:	4b21      	ldr	r3, [pc, #132]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 8086 	beq.w	8005274 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <HAL_RCC_OscConfig+0x4a8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <HAL_RCC_OscConfig+0x4a8>)
 800516e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005174:	f7fc fc74 	bl	8001a60 <HAL_GetTick>
 8005178:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517c:	f7fc fc70 	bl	8001a60 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e1a2      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800518e:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <HAL_RCC_OscConfig+0x4a8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d106      	bne.n	80051b0 <HAL_RCC_OscConfig+0x480>
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	4a0b      	ldr	r2, [pc, #44]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	6713      	str	r3, [r2, #112]	; 0x70
 80051ae:	e032      	b.n	8005216 <HAL_RCC_OscConfig+0x4e6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d111      	bne.n	80051dc <HAL_RCC_OscConfig+0x4ac>
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051bc:	4a05      	ldr	r2, [pc, #20]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80051be:	f023 0301 	bic.w	r3, r3, #1
 80051c2:	6713      	str	r3, [r2, #112]	; 0x70
 80051c4:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	4a02      	ldr	r2, [pc, #8]	; (80051d4 <HAL_RCC_OscConfig+0x4a4>)
 80051ca:	f023 0304 	bic.w	r3, r3, #4
 80051ce:	6713      	str	r3, [r2, #112]	; 0x70
 80051d0:	e021      	b.n	8005216 <HAL_RCC_OscConfig+0x4e6>
 80051d2:	bf00      	nop
 80051d4:	58024400 	.word	0x58024400
 80051d8:	58024800 	.word	0x58024800
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b05      	cmp	r3, #5
 80051e2:	d10c      	bne.n	80051fe <HAL_RCC_OscConfig+0x4ce>
 80051e4:	4b83      	ldr	r3, [pc, #524]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e8:	4a82      	ldr	r2, [pc, #520]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80051ea:	f043 0304 	orr.w	r3, r3, #4
 80051ee:	6713      	str	r3, [r2, #112]	; 0x70
 80051f0:	4b80      	ldr	r3, [pc, #512]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	4a7f      	ldr	r2, [pc, #508]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	6713      	str	r3, [r2, #112]	; 0x70
 80051fc:	e00b      	b.n	8005216 <HAL_RCC_OscConfig+0x4e6>
 80051fe:	4b7d      	ldr	r3, [pc, #500]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	4a7c      	ldr	r2, [pc, #496]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	6713      	str	r3, [r2, #112]	; 0x70
 800520a:	4b7a      	ldr	r3, [pc, #488]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	4a79      	ldr	r2, [pc, #484]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005210:	f023 0304 	bic.w	r3, r3, #4
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d015      	beq.n	800524a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521e:	f7fc fc1f 	bl	8001a60 <HAL_GetTick>
 8005222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005224:	e00a      	b.n	800523c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005226:	f7fc fc1b 	bl	8001a60 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	f241 3288 	movw	r2, #5000	; 0x1388
 8005234:	4293      	cmp	r3, r2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e14b      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800523c:	4b6d      	ldr	r3, [pc, #436]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0ee      	beq.n	8005226 <HAL_RCC_OscConfig+0x4f6>
 8005248:	e014      	b.n	8005274 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524a:	f7fc fc09 	bl	8001a60 <HAL_GetTick>
 800524e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005250:	e00a      	b.n	8005268 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005252:	f7fc fc05 	bl	8001a60 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e135      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005268:	4b62      	ldr	r3, [pc, #392]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1ee      	bne.n	8005252 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 812a 	beq.w	80054d2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800527e:	4b5d      	ldr	r3, [pc, #372]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005286:	2b18      	cmp	r3, #24
 8005288:	f000 80ba 	beq.w	8005400 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	2b02      	cmp	r3, #2
 8005292:	f040 8095 	bne.w	80053c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005296:	4b57      	ldr	r3, [pc, #348]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a56      	ldr	r2, [pc, #344]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800529c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fc fbdd 	bl	8001a60 <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052aa:	f7fc fbd9 	bl	8001a60 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e10b      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052bc:	4b4d      	ldr	r3, [pc, #308]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052c8:	4b4a      	ldr	r3, [pc, #296]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80052ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052cc:	4b4a      	ldr	r3, [pc, #296]	; (80053f8 <HAL_RCC_OscConfig+0x6c8>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052d8:	0112      	lsls	r2, r2, #4
 80052da:	430a      	orrs	r2, r1
 80052dc:	4945      	ldr	r1, [pc, #276]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	628b      	str	r3, [r1, #40]	; 0x28
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e6:	3b01      	subs	r3, #1
 80052e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	3b01      	subs	r3, #1
 80052f2:	025b      	lsls	r3, r3, #9
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	3b01      	subs	r3, #1
 80052fe:	041b      	lsls	r3, r3, #16
 8005300:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530a:	3b01      	subs	r3, #1
 800530c:	061b      	lsls	r3, r3, #24
 800530e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005312:	4938      	ldr	r1, [pc, #224]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005314:	4313      	orrs	r3, r2
 8005316:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005318:	4b36      	ldr	r3, [pc, #216]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	4a35      	ldr	r2, [pc, #212]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005324:	4b33      	ldr	r3, [pc, #204]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005328:	4b34      	ldr	r3, [pc, #208]	; (80053fc <HAL_RCC_OscConfig+0x6cc>)
 800532a:	4013      	ands	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005330:	00d2      	lsls	r2, r2, #3
 8005332:	4930      	ldr	r1, [pc, #192]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005334:	4313      	orrs	r3, r2
 8005336:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005338:	4b2e      	ldr	r3, [pc, #184]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	f023 020c 	bic.w	r2, r3, #12
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	492b      	ldr	r1, [pc, #172]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005346:	4313      	orrs	r3, r2
 8005348:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800534a:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	f023 0202 	bic.w	r2, r3, #2
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005356:	4927      	ldr	r1, [pc, #156]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005358:	4313      	orrs	r3, r2
 800535a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800535c:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005368:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	4a21      	ldr	r2, [pc, #132]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800536e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005374:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800537a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800537e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005380:	4b1c      	ldr	r3, [pc, #112]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	4a1b      	ldr	r2, [pc, #108]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800538c:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 8005392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fc fb62 	bl	8001a60 <HAL_GetTick>
 800539c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fc fb5e 	bl	8001a60 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e090      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0f0      	beq.n	80053a0 <HAL_RCC_OscConfig+0x670>
 80053be:	e088      	b.n	80054d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a0b      	ldr	r2, [pc, #44]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80053c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fc fb48 	bl	8001a60 <HAL_GetTick>
 80053d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d4:	f7fc fb44 	bl	8001a60 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e076      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053e6:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_RCC_OscConfig+0x6c4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1f0      	bne.n	80053d4 <HAL_RCC_OscConfig+0x6a4>
 80053f2:	e06e      	b.n	80054d2 <HAL_RCC_OscConfig+0x7a2>
 80053f4:	58024400 	.word	0x58024400
 80053f8:	fffffc0c 	.word	0xfffffc0c
 80053fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005400:	4b36      	ldr	r3, [pc, #216]	; (80054dc <HAL_RCC_OscConfig+0x7ac>)
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005406:	4b35      	ldr	r3, [pc, #212]	; (80054dc <HAL_RCC_OscConfig+0x7ac>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b01      	cmp	r3, #1
 8005412:	d031      	beq.n	8005478 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f003 0203 	and.w	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541e:	429a      	cmp	r2, r3
 8005420:	d12a      	bne.n	8005478 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	091b      	lsrs	r3, r3, #4
 8005426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d122      	bne.n	8005478 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d11a      	bne.n	8005478 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	0a5b      	lsrs	r3, r3, #9
 8005446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d111      	bne.n	8005478 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	0c1b      	lsrs	r3, r3, #16
 8005458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d108      	bne.n	8005478 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	0e1b      	lsrs	r3, r3, #24
 800546a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d001      	beq.n	800547c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e02b      	b.n	80054d4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800547c:	4b17      	ldr	r3, [pc, #92]	; (80054dc <HAL_RCC_OscConfig+0x7ac>)
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005480:	08db      	lsrs	r3, r3, #3
 8005482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005486:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	429a      	cmp	r2, r3
 8005490:	d01f      	beq.n	80054d2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_RCC_OscConfig+0x7ac>)
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	4a11      	ldr	r2, [pc, #68]	; (80054dc <HAL_RCC_OscConfig+0x7ac>)
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800549e:	f7fc fadf 	bl	8001a60 <HAL_GetTick>
 80054a2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054a4:	bf00      	nop
 80054a6:	f7fc fadb 	bl	8001a60 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d0f9      	beq.n	80054a6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054b2:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <HAL_RCC_OscConfig+0x7ac>)
 80054b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <HAL_RCC_OscConfig+0x7b0>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054be:	00d2      	lsls	r2, r2, #3
 80054c0:	4906      	ldr	r1, [pc, #24]	; (80054dc <HAL_RCC_OscConfig+0x7ac>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_RCC_OscConfig+0x7ac>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	4a04      	ldr	r2, [pc, #16]	; (80054dc <HAL_RCC_OscConfig+0x7ac>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3730      	adds	r7, #48	; 0x30
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	58024400 	.word	0x58024400
 80054e0:	ffff0007 	.word	0xffff0007

080054e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e19c      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054f8:	4b8a      	ldr	r3, [pc, #552]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d910      	bls.n	8005528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005506:	4b87      	ldr	r3, [pc, #540]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 020f 	bic.w	r2, r3, #15
 800550e:	4985      	ldr	r1, [pc, #532]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b83      	ldr	r3, [pc, #524]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e184      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d010      	beq.n	8005556 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	4b7b      	ldr	r3, [pc, #492]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005540:	429a      	cmp	r2, r3
 8005542:	d908      	bls.n	8005556 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005544:	4b78      	ldr	r3, [pc, #480]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	4975      	ldr	r1, [pc, #468]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005552:	4313      	orrs	r3, r2
 8005554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d010      	beq.n	8005584 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	4b70      	ldr	r3, [pc, #448]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800556e:	429a      	cmp	r2, r3
 8005570:	d908      	bls.n	8005584 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005572:	4b6d      	ldr	r3, [pc, #436]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	496a      	ldr	r1, [pc, #424]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005580:	4313      	orrs	r3, r2
 8005582:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d010      	beq.n	80055b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	4b64      	ldr	r3, [pc, #400]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800559c:	429a      	cmp	r2, r3
 800559e:	d908      	bls.n	80055b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055a0:	4b61      	ldr	r3, [pc, #388]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	495e      	ldr	r1, [pc, #376]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d010      	beq.n	80055e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	4b59      	ldr	r3, [pc, #356]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d908      	bls.n	80055e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055ce:	4b56      	ldr	r3, [pc, #344]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	4953      	ldr	r1, [pc, #332]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	4b4d      	ldr	r3, [pc, #308]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d908      	bls.n	800560e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fc:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f023 020f 	bic.w	r2, r3, #15
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4947      	ldr	r1, [pc, #284]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 800560a:	4313      	orrs	r3, r2
 800560c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d055      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800561a:	4b43      	ldr	r3, [pc, #268]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	4940      	ldr	r1, [pc, #256]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005628:	4313      	orrs	r3, r2
 800562a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d107      	bne.n	8005644 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005634:	4b3c      	ldr	r3, [pc, #240]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d121      	bne.n	8005684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e0f6      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d107      	bne.n	800565c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d115      	bne.n	8005684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0ea      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d107      	bne.n	8005674 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005664:	4b30      	ldr	r3, [pc, #192]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0de      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005674:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0d6      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005684:	4b28      	ldr	r3, [pc, #160]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f023 0207 	bic.w	r2, r3, #7
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4925      	ldr	r1, [pc, #148]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 8005692:	4313      	orrs	r3, r2
 8005694:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005696:	f7fc f9e3 	bl	8001a60 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569c:	e00a      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569e:	f7fc f9df 	bl	8001a60 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e0be      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b4:	4b1c      	ldr	r3, [pc, #112]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d1eb      	bne.n	800569e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d010      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	4b14      	ldr	r3, [pc, #80]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	429a      	cmp	r2, r3
 80056e0:	d208      	bcs.n	80056f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e2:	4b11      	ldr	r3, [pc, #68]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f023 020f 	bic.w	r2, r3, #15
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	490e      	ldr	r1, [pc, #56]	; (8005728 <HAL_RCC_ClockConfig+0x244>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d214      	bcs.n	800572c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 020f 	bic.w	r2, r3, #15
 800570a:	4906      	ldr	r1, [pc, #24]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b04      	ldr	r3, [pc, #16]	; (8005724 <HAL_RCC_ClockConfig+0x240>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d005      	beq.n	800572c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e086      	b.n	8005832 <HAL_RCC_ClockConfig+0x34e>
 8005724:	52002000 	.word	0x52002000
 8005728:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	4b3f      	ldr	r3, [pc, #252]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005744:	429a      	cmp	r2, r3
 8005746:	d208      	bcs.n	800575a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005748:	4b3c      	ldr	r3, [pc, #240]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	4939      	ldr	r1, [pc, #228]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 8005756:	4313      	orrs	r3, r2
 8005758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d010      	beq.n	8005788 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695a      	ldr	r2, [r3, #20]
 800576a:	4b34      	ldr	r3, [pc, #208]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005772:	429a      	cmp	r2, r3
 8005774:	d208      	bcs.n	8005788 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005776:	4b31      	ldr	r3, [pc, #196]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	492e      	ldr	r1, [pc, #184]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 8005784:	4313      	orrs	r3, r2
 8005786:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	d010      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	4b28      	ldr	r3, [pc, #160]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d208      	bcs.n	80057b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057a4:	4b25      	ldr	r3, [pc, #148]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	4922      	ldr	r1, [pc, #136]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d010      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	4b1d      	ldr	r3, [pc, #116]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d208      	bcs.n	80057e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057d2:	4b1a      	ldr	r3, [pc, #104]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	4917      	ldr	r1, [pc, #92]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057e4:	f000 f834 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b14      	ldr	r3, [pc, #80]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	4912      	ldr	r1, [pc, #72]	; (8005840 <HAL_RCC_ClockConfig+0x35c>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005800:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005802:	4b0e      	ldr	r3, [pc, #56]	; (800583c <HAL_RCC_ClockConfig+0x358>)
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	4a0d      	ldr	r2, [pc, #52]	; (8005840 <HAL_RCC_ClockConfig+0x35c>)
 800580c:	5cd3      	ldrb	r3, [r2, r3]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <HAL_RCC_ClockConfig+0x360>)
 800581a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800581c:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <HAL_RCC_ClockConfig+0x364>)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <HAL_RCC_ClockConfig+0x368>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fc f8d0 	bl	80019cc <HAL_InitTick>
 800582c:	4603      	mov	r3, r0
 800582e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	58024400 	.word	0x58024400
 8005840:	0800ac74 	.word	0x0800ac74
 8005844:	24000008 	.word	0x24000008
 8005848:	24000004 	.word	0x24000004
 800584c:	2400000c 	.word	0x2400000c

08005850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	; 0x24
 8005854:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005856:	4bb3      	ldr	r3, [pc, #716]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800585e:	2b18      	cmp	r3, #24
 8005860:	f200 8155 	bhi.w	8005b0e <HAL_RCC_GetSysClockFreq+0x2be>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	080058d1 	.word	0x080058d1
 8005870:	08005b0f 	.word	0x08005b0f
 8005874:	08005b0f 	.word	0x08005b0f
 8005878:	08005b0f 	.word	0x08005b0f
 800587c:	08005b0f 	.word	0x08005b0f
 8005880:	08005b0f 	.word	0x08005b0f
 8005884:	08005b0f 	.word	0x08005b0f
 8005888:	08005b0f 	.word	0x08005b0f
 800588c:	080058f7 	.word	0x080058f7
 8005890:	08005b0f 	.word	0x08005b0f
 8005894:	08005b0f 	.word	0x08005b0f
 8005898:	08005b0f 	.word	0x08005b0f
 800589c:	08005b0f 	.word	0x08005b0f
 80058a0:	08005b0f 	.word	0x08005b0f
 80058a4:	08005b0f 	.word	0x08005b0f
 80058a8:	08005b0f 	.word	0x08005b0f
 80058ac:	080058fd 	.word	0x080058fd
 80058b0:	08005b0f 	.word	0x08005b0f
 80058b4:	08005b0f 	.word	0x08005b0f
 80058b8:	08005b0f 	.word	0x08005b0f
 80058bc:	08005b0f 	.word	0x08005b0f
 80058c0:	08005b0f 	.word	0x08005b0f
 80058c4:	08005b0f 	.word	0x08005b0f
 80058c8:	08005b0f 	.word	0x08005b0f
 80058cc:	08005903 	.word	0x08005903
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d0:	4b94      	ldr	r3, [pc, #592]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058dc:	4b91      	ldr	r3, [pc, #580]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	08db      	lsrs	r3, r3, #3
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	4a90      	ldr	r2, [pc, #576]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80058ee:	e111      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80058f0:	4b8d      	ldr	r3, [pc, #564]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058f2:	61bb      	str	r3, [r7, #24]
      break;
 80058f4:	e10e      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80058f6:	4b8d      	ldr	r3, [pc, #564]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80058f8:	61bb      	str	r3, [r7, #24]
      break;
 80058fa:	e10b      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80058fc:	4b8c      	ldr	r3, [pc, #560]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80058fe:	61bb      	str	r3, [r7, #24]
      break;
 8005900:	e108      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005902:	4b88      	ldr	r3, [pc, #544]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800590c:	4b85      	ldr	r3, [pc, #532]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005916:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005918:	4b82      	ldr	r3, [pc, #520]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005922:	4b80      	ldr	r3, [pc, #512]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005926:	08db      	lsrs	r3, r3, #3
 8005928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80e1 	beq.w	8005b08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b02      	cmp	r3, #2
 800594a:	f000 8083 	beq.w	8005a54 <HAL_RCC_GetSysClockFreq+0x204>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b02      	cmp	r3, #2
 8005952:	f200 80a1 	bhi.w	8005a98 <HAL_RCC_GetSysClockFreq+0x248>
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_RCC_GetSysClockFreq+0x114>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d056      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005962:	e099      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005964:	4b6f      	ldr	r3, [pc, #444]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d02d      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005970:	4b6c      	ldr	r3, [pc, #432]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	08db      	lsrs	r3, r3, #3
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	4a6b      	ldr	r2, [pc, #428]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
 8005980:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	ee07 3a90 	vmov	s15, r3
 8005988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599a:	4b62      	ldr	r3, [pc, #392]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059ca:	e087      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b38 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059de:	4b51      	ldr	r3, [pc, #324]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80059f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a0e:	e065      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a22:	4b40      	ldr	r3, [pc, #256]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a52:	e043      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a96:	e021      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aaa:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005abe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ada:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	0a5b      	lsrs	r3, r3, #9
 8005ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	ee07 3a90 	vmov	s15, r3
 8005af0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b00:	ee17 3a90 	vmov	r3, s15
 8005b04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b06:	e005      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
      break;
 8005b0c:	e002      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b10:	61bb      	str	r3, [r7, #24]
      break;
 8005b12:	bf00      	nop
  }

  return sysclockfreq;
 8005b14:	69bb      	ldr	r3, [r7, #24]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3724      	adds	r7, #36	; 0x24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
 8005b28:	03d09000 	.word	0x03d09000
 8005b2c:	003d0900 	.word	0x003d0900
 8005b30:	017d7840 	.word	0x017d7840
 8005b34:	46000000 	.word	0x46000000
 8005b38:	4c742400 	.word	0x4c742400
 8005b3c:	4a742400 	.word	0x4a742400
 8005b40:	4bbebc20 	.word	0x4bbebc20

08005b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b4a:	f7ff fe81 	bl	8005850 <HAL_RCC_GetSysClockFreq>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	490f      	ldr	r1, [pc, #60]	; (8005b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b5c:	5ccb      	ldrb	r3, [r1, r3]
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	fa22 f303 	lsr.w	r3, r2, r3
 8005b66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b72:	5cd3      	ldrb	r3, [r2, r3]
 8005b74:	f003 031f 	and.w	r3, r3, #31
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7e:	4a07      	ldr	r2, [pc, #28]	; (8005b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b82:	4a07      	ldr	r2, [pc, #28]	; (8005ba0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	58024400 	.word	0x58024400
 8005b98:	0800ac74 	.word	0x0800ac74
 8005b9c:	24000008 	.word	0x24000008
 8005ba0:	24000004 	.word	0x24000004

08005ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ba8:	f7ff ffcc 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	4904      	ldr	r1, [pc, #16]	; (8005bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bba:	5ccb      	ldrb	r3, [r1, r3]
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	0800ac74 	.word	0x0800ac74

08005bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005bd4:	f7ff ffb6 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	4904      	ldr	r1, [pc, #16]	; (8005bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005be6:	5ccb      	ldrb	r3, [r1, r3]
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	0800ac74 	.word	0x0800ac74

08005bfc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c00:	b0c6      	sub	sp, #280	; 0x118
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005c20:	2500      	movs	r5, #0
 8005c22:	ea54 0305 	orrs.w	r3, r4, r5
 8005c26:	d049      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c32:	d02f      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c38:	d828      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c3e:	d01a      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c44:	d822      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c4e:	d007      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c50:	e01c      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c52:	4bab      	ldr	r3, [pc, #684]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	4aaa      	ldr	r2, [pc, #680]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c5e:	e01a      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c64:	3308      	adds	r3, #8
 8005c66:	2102      	movs	r1, #2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f001 fc25 	bl	80074b8 <RCCEx_PLL2_Config>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c74:	e00f      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7a:	3328      	adds	r3, #40	; 0x28
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 fccc 	bl	800761c <RCCEx_PLL3_Config>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c8a:	e004      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c92:	e000      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c9e:	4b98      	ldr	r3, [pc, #608]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cac:	4a94      	ldr	r2, [pc, #592]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	6513      	str	r3, [r2, #80]	; 0x50
 8005cb2:	e003      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005cc8:	f04f 0900 	mov.w	r9, #0
 8005ccc:	ea58 0309 	orrs.w	r3, r8, r9
 8005cd0:	d047      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d82a      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005cdc:	a201      	add	r2, pc, #4	; (adr r2, 8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005cf9 	.word	0x08005cf9
 8005ce8:	08005d07 	.word	0x08005d07
 8005cec:	08005d1d 	.word	0x08005d1d
 8005cf0:	08005d3b 	.word	0x08005d3b
 8005cf4:	08005d3b 	.word	0x08005d3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf8:	4b81      	ldr	r3, [pc, #516]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4a80      	ldr	r2, [pc, #512]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d04:	e01a      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 fbd2 	bl	80074b8 <RCCEx_PLL2_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d1a:	e00f      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d20:	3328      	adds	r3, #40	; 0x28
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 fc79 	bl	800761c <RCCEx_PLL3_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d30:	e004      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d38:	e000      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d44:	4b6e      	ldr	r3, [pc, #440]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	f023 0107 	bic.w	r1, r3, #7
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d52:	4a6b      	ldr	r2, [pc, #428]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d54:	430b      	orrs	r3, r1
 8005d56:	6513      	str	r3, [r2, #80]	; 0x50
 8005d58:	e003      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005d6e:	f04f 0b00 	mov.w	fp, #0
 8005d72:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d76:	d05b      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d80:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005d84:	d03b      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005d86:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005d8a:	d834      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d90:	d037      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d96:	d82e      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d9c:	d033      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005d9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005da2:	d828      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005da8:	d01a      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dae:	d822      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005db4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db8:	d007      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005dba:	e01c      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dbc:	4b50      	ldr	r3, [pc, #320]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	4a4f      	ldr	r2, [pc, #316]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dc8:	e01e      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dce:	3308      	adds	r3, #8
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 fb70 	bl	80074b8 <RCCEx_PLL2_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005dde:	e013      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de4:	3328      	adds	r3, #40	; 0x28
 8005de6:	2100      	movs	r1, #0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f001 fc17 	bl	800761c <RCCEx_PLL3_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005df4:	e008      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005dfc:	e004      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005dfe:	bf00      	nop
 8005e00:	e002      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e10:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e14:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e20:	4a37      	ldr	r2, [pc, #220]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e22:	430b      	orrs	r3, r1
 8005e24:	6593      	str	r3, [r2, #88]	; 0x58
 8005e26:	e003      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e40:	2300      	movs	r3, #0
 8005e42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	d05d      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e58:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005e5c:	d03b      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005e5e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005e62:	d834      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e68:	d037      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e6e:	d82e      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e74:	d033      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005e76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e7a:	d828      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e80:	d01a      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e86:	d822      	bhi.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e90:	d007      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e92:	e01c      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e94:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	4a19      	ldr	r2, [pc, #100]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ea0:	e01e      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 fb04 	bl	80074b8 <RCCEx_PLL2_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005eb6:	e013      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebc:	3328      	adds	r3, #40	; 0x28
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fbab 	bl	800761c <RCCEx_PLL3_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ed4:	e004      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ed6:	bf00      	nop
 8005ed8:	e002      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10d      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ee8:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ef8:	4a01      	ldr	r2, [pc, #4]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005efa:	430b      	orrs	r3, r1
 8005efc:	6593      	str	r3, [r2, #88]	; 0x58
 8005efe:	e005      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005f18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f22:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	d03a      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f32:	2b30      	cmp	r3, #48	; 0x30
 8005f34:	d01f      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005f36:	2b30      	cmp	r3, #48	; 0x30
 8005f38:	d819      	bhi.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d00c      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d815      	bhi.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d019      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d111      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f4a:	4baa      	ldr	r3, [pc, #680]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	4aa9      	ldr	r2, [pc, #676]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f56:	e011      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	2102      	movs	r1, #2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 faa9 	bl	80074b8 <RCCEx_PLL2_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f6c:	e006      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f74:	e002      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f84:	4b9b      	ldr	r3, [pc, #620]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f88:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f92:	4a98      	ldr	r2, [pc, #608]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f94:	430b      	orrs	r3, r1
 8005f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f98:	e003      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fb8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	d051      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fcc:	d035      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd2:	d82e      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fd8:	d031      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005fda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fde:	d828      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe4:	d01a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fea:	d822      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff4:	d007      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005ff6:	e01c      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff8:	4b7e      	ldr	r3, [pc, #504]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	4a7d      	ldr	r2, [pc, #500]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006004:	e01c      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600a:	3308      	adds	r3, #8
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fa52 	bl	80074b8 <RCCEx_PLL2_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800601a:	e011      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006020:	3328      	adds	r3, #40	; 0x28
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f001 faf9 	bl	800761c <RCCEx_PLL3_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006030:	e006      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006038:	e002      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800603a:	bf00      	nop
 800603c:	e000      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800603e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006048:	4b6a      	ldr	r3, [pc, #424]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006056:	4a67      	ldr	r2, [pc, #412]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006058:	430b      	orrs	r3, r1
 800605a:	6513      	str	r3, [r2, #80]	; 0x50
 800605c:	e003      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006062:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006072:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006076:	2300      	movs	r3, #0
 8006078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800607c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006080:	460b      	mov	r3, r1
 8006082:	4313      	orrs	r3, r2
 8006084:	d053      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800608a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006090:	d033      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006096:	d82c      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800609c:	d02f      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800609e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060a2:	d826      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060a8:	d02b      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80060aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060ae:	d820      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060b4:	d012      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80060b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ba:	d81a      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d022      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80060c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c4:	d115      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ca:	3308      	adds	r3, #8
 80060cc:	2101      	movs	r1, #1
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 f9f2 	bl	80074b8 <RCCEx_PLL2_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060da:	e015      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e0:	3328      	adds	r3, #40	; 0x28
 80060e2:	2101      	movs	r1, #1
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 fa99 	bl	800761c <RCCEx_PLL3_Config>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060f0:	e00a      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060f8:	e006      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060fa:	bf00      	nop
 80060fc:	e004      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80060fe:	bf00      	nop
 8006100:	e002      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006102:	bf00      	nop
 8006104:	e000      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006108:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006110:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006114:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611e:	4a35      	ldr	r2, [pc, #212]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006120:	430b      	orrs	r3, r1
 8006122:	6513      	str	r3, [r2, #80]	; 0x50
 8006124:	e003      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006126:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800612a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800612e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800613a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800613e:	2300      	movs	r3, #0
 8006140:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006144:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006148:	460b      	mov	r3, r1
 800614a:	4313      	orrs	r3, r2
 800614c:	d058      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800615a:	d033      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800615c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006160:	d82c      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006166:	d02f      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616c:	d826      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800616e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006172:	d02b      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006174:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006178:	d820      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800617a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800617e:	d012      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006184:	d81a      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d022      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800618a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800618e:	d115      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006194:	3308      	adds	r3, #8
 8006196:	2101      	movs	r1, #1
 8006198:	4618      	mov	r0, r3
 800619a:	f001 f98d 	bl	80074b8 <RCCEx_PLL2_Config>
 800619e:	4603      	mov	r3, r0
 80061a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061a4:	e015      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061aa:	3328      	adds	r3, #40	; 0x28
 80061ac:	2101      	movs	r1, #1
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 fa34 	bl	800761c <RCCEx_PLL3_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061ba:	e00a      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061c2:	e006      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061c4:	bf00      	nop
 80061c6:	e004      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061c8:	bf00      	nop
 80061ca:	e002      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061cc:	bf00      	nop
 80061ce:	e000      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10e      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061da:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80061e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061ea:	4a02      	ldr	r2, [pc, #8]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6593      	str	r3, [r2, #88]	; 0x58
 80061f0:	e006      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80061f2:	bf00      	nop
 80061f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800620c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006210:	2300      	movs	r3, #0
 8006212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006216:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800621a:	460b      	mov	r3, r1
 800621c:	4313      	orrs	r3, r2
 800621e:	d037      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800622a:	d00e      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800622c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006230:	d816      	bhi.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d018      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800623a:	d111      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623c:	4bc4      	ldr	r3, [pc, #784]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4ac3      	ldr	r2, [pc, #780]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006248:	e00f      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624e:	3308      	adds	r3, #8
 8006250:	2101      	movs	r1, #1
 8006252:	4618      	mov	r0, r3
 8006254:	f001 f930 	bl	80074b8 <RCCEx_PLL2_Config>
 8006258:	4603      	mov	r3, r0
 800625a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800625e:	e004      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006266:	e000      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006272:	4bb7      	ldr	r3, [pc, #732]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006276:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006280:	4ab3      	ldr	r2, [pc, #716]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006282:	430b      	orrs	r3, r1
 8006284:	6513      	str	r3, [r2, #80]	; 0x50
 8006286:	e003      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800628c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800629c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062a0:	2300      	movs	r3, #0
 80062a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80062aa:	460b      	mov	r3, r1
 80062ac:	4313      	orrs	r3, r2
 80062ae:	d039      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80062b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d81c      	bhi.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062fd 	.word	0x080062fd
 80062c4:	080062d1 	.word	0x080062d1
 80062c8:	080062df 	.word	0x080062df
 80062cc:	080062fd 	.word	0x080062fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d0:	4b9f      	ldr	r3, [pc, #636]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4a9e      	ldr	r2, [pc, #632]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062dc:	e00f      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e2:	3308      	adds	r3, #8
 80062e4:	2102      	movs	r1, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 f8e6 	bl	80074b8 <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062f2:	e004      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80062fa:	e000      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80062fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006306:	4b92      	ldr	r3, [pc, #584]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630a:	f023 0103 	bic.w	r1, r3, #3
 800630e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006314:	4a8e      	ldr	r2, [pc, #568]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006316:	430b      	orrs	r3, r1
 8006318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800631a:	e003      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006320:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006334:	2300      	movs	r3, #0
 8006336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800633a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800633e:	460b      	mov	r3, r1
 8006340:	4313      	orrs	r3, r2
 8006342:	f000 8099 	beq.w	8006478 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006346:	4b83      	ldr	r3, [pc, #524]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a82      	ldr	r2, [pc, #520]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800634c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006350:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006352:	f7fb fb85 	bl	8001a60 <HAL_GetTick>
 8006356:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800635a:	e00b      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800635c:	f7fb fb80 	bl	8001a60 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b64      	cmp	r3, #100	; 0x64
 800636a:	d903      	bls.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006372:	e005      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006374:	4b77      	ldr	r3, [pc, #476]	; (8006554 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0ed      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006380:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006384:	2b00      	cmp	r3, #0
 8006386:	d173      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006388:	4b71      	ldr	r3, [pc, #452]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800638a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006390:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006394:	4053      	eors	r3, r2
 8006396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639a:	2b00      	cmp	r3, #0
 800639c:	d015      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800639e:	4b6c      	ldr	r3, [pc, #432]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063aa:	4b69      	ldr	r3, [pc, #420]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	4a68      	ldr	r2, [pc, #416]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063b6:	4b66      	ldr	r3, [pc, #408]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ba:	4a65      	ldr	r2, [pc, #404]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063c2:	4a63      	ldr	r2, [pc, #396]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d6:	d118      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fb fb42 	bl	8001a60 <HAL_GetTick>
 80063dc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063e0:	e00d      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e2:	f7fb fb3d 	bl	8001a60 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063ec:	1ad2      	subs	r2, r2, r3
 80063ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d903      	bls.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80063fc:	e005      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063fe:	4b54      	ldr	r3, [pc, #336]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0eb      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800640a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800640e:	2b00      	cmp	r3, #0
 8006410:	d129      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006416:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800641a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006422:	d10e      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006424:	4b4a      	ldr	r3, [pc, #296]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006434:	091a      	lsrs	r2, r3, #4
 8006436:	4b48      	ldr	r3, [pc, #288]	; (8006558 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006438:	4013      	ands	r3, r2
 800643a:	4a45      	ldr	r2, [pc, #276]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800643c:	430b      	orrs	r3, r1
 800643e:	6113      	str	r3, [r2, #16]
 8006440:	e005      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006442:	4b43      	ldr	r3, [pc, #268]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	4a42      	ldr	r2, [pc, #264]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006448:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800644c:	6113      	str	r3, [r2, #16]
 800644e:	4b40      	ldr	r3, [pc, #256]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006450:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006456:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800645a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800645e:	4a3c      	ldr	r2, [pc, #240]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006460:	430b      	orrs	r3, r1
 8006462:	6713      	str	r3, [r2, #112]	; 0x70
 8006464:	e008      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006466:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800646a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800646e:	e003      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006474:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f002 0301 	and.w	r3, r2, #1
 8006484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800648e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006492:	460b      	mov	r3, r1
 8006494:	4313      	orrs	r3, r2
 8006496:	f000 808f 	beq.w	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064a0:	2b28      	cmp	r3, #40	; 0x28
 80064a2:	d871      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80064a4:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	08006591 	.word	0x08006591
 80064b0:	08006589 	.word	0x08006589
 80064b4:	08006589 	.word	0x08006589
 80064b8:	08006589 	.word	0x08006589
 80064bc:	08006589 	.word	0x08006589
 80064c0:	08006589 	.word	0x08006589
 80064c4:	08006589 	.word	0x08006589
 80064c8:	08006589 	.word	0x08006589
 80064cc:	0800655d 	.word	0x0800655d
 80064d0:	08006589 	.word	0x08006589
 80064d4:	08006589 	.word	0x08006589
 80064d8:	08006589 	.word	0x08006589
 80064dc:	08006589 	.word	0x08006589
 80064e0:	08006589 	.word	0x08006589
 80064e4:	08006589 	.word	0x08006589
 80064e8:	08006589 	.word	0x08006589
 80064ec:	08006573 	.word	0x08006573
 80064f0:	08006589 	.word	0x08006589
 80064f4:	08006589 	.word	0x08006589
 80064f8:	08006589 	.word	0x08006589
 80064fc:	08006589 	.word	0x08006589
 8006500:	08006589 	.word	0x08006589
 8006504:	08006589 	.word	0x08006589
 8006508:	08006589 	.word	0x08006589
 800650c:	08006591 	.word	0x08006591
 8006510:	08006589 	.word	0x08006589
 8006514:	08006589 	.word	0x08006589
 8006518:	08006589 	.word	0x08006589
 800651c:	08006589 	.word	0x08006589
 8006520:	08006589 	.word	0x08006589
 8006524:	08006589 	.word	0x08006589
 8006528:	08006589 	.word	0x08006589
 800652c:	08006591 	.word	0x08006591
 8006530:	08006589 	.word	0x08006589
 8006534:	08006589 	.word	0x08006589
 8006538:	08006589 	.word	0x08006589
 800653c:	08006589 	.word	0x08006589
 8006540:	08006589 	.word	0x08006589
 8006544:	08006589 	.word	0x08006589
 8006548:	08006589 	.word	0x08006589
 800654c:	08006591 	.word	0x08006591
 8006550:	58024400 	.word	0x58024400
 8006554:	58024800 	.word	0x58024800
 8006558:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	3308      	adds	r3, #8
 8006562:	2101      	movs	r1, #1
 8006564:	4618      	mov	r0, r3
 8006566:	f000 ffa7 	bl	80074b8 <RCCEx_PLL2_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006570:	e00f      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006576:	3328      	adds	r3, #40	; 0x28
 8006578:	2101      	movs	r1, #1
 800657a:	4618      	mov	r0, r3
 800657c:	f001 f84e 	bl	800761c <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006586:	e004      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800658e:	e000      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006592:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800659a:	4bbf      	ldr	r3, [pc, #764]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800659c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80065a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a8:	4abb      	ldr	r2, [pc, #748]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065aa:	430b      	orrs	r3, r1
 80065ac:	6553      	str	r3, [r2, #84]	; 0x54
 80065ae:	e003      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f002 0302 	and.w	r3, r2, #2
 80065c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065c8:	2300      	movs	r3, #0
 80065ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4313      	orrs	r3, r2
 80065d6:	d041      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065de:	2b05      	cmp	r3, #5
 80065e0:	d824      	bhi.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80065e2:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	08006635 	.word	0x08006635
 80065ec:	08006601 	.word	0x08006601
 80065f0:	08006617 	.word	0x08006617
 80065f4:	08006635 	.word	0x08006635
 80065f8:	08006635 	.word	0x08006635
 80065fc:	08006635 	.word	0x08006635
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006604:	3308      	adds	r3, #8
 8006606:	2101      	movs	r1, #1
 8006608:	4618      	mov	r0, r3
 800660a:	f000 ff55 	bl	80074b8 <RCCEx_PLL2_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006614:	e00f      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661a:	3328      	adds	r3, #40	; 0x28
 800661c:	2101      	movs	r1, #1
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fffc 	bl	800761c <RCCEx_PLL3_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800662a:	e004      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006632:	e000      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006636:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800663e:	4b96      	ldr	r3, [pc, #600]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f023 0107 	bic.w	r1, r3, #7
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800664c:	4a92      	ldr	r2, [pc, #584]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800664e:	430b      	orrs	r3, r1
 8006650:	6553      	str	r3, [r2, #84]	; 0x54
 8006652:	e003      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006654:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006658:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f002 0304 	and.w	r3, r2, #4
 8006668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800666c:	2300      	movs	r3, #0
 800666e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006672:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006676:	460b      	mov	r3, r1
 8006678:	4313      	orrs	r3, r2
 800667a:	d044      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006684:	2b05      	cmp	r3, #5
 8006686:	d825      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006688:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066dd 	.word	0x080066dd
 8006694:	080066a9 	.word	0x080066a9
 8006698:	080066bf 	.word	0x080066bf
 800669c:	080066dd 	.word	0x080066dd
 80066a0:	080066dd 	.word	0x080066dd
 80066a4:	080066dd 	.word	0x080066dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ac:	3308      	adds	r3, #8
 80066ae:	2101      	movs	r1, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 ff01 	bl	80074b8 <RCCEx_PLL2_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066bc:	e00f      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c2:	3328      	adds	r3, #40	; 0x28
 80066c4:	2101      	movs	r1, #1
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 ffa8 	bl	800761c <RCCEx_PLL3_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066d2:	e004      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80066dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066e6:	4b6c      	ldr	r3, [pc, #432]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ea:	f023 0107 	bic.w	r1, r3, #7
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f6:	4a68      	ldr	r2, [pc, #416]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6593      	str	r3, [r2, #88]	; 0x58
 80066fc:	e003      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006702:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f002 0320 	and.w	r3, r2, #32
 8006712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006716:	2300      	movs	r3, #0
 8006718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800671c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006720:	460b      	mov	r3, r1
 8006722:	4313      	orrs	r3, r2
 8006724:	d055      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006732:	d033      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006738:	d82c      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800673a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673e:	d02f      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006744:	d826      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006746:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800674a:	d02b      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800674c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006750:	d820      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006756:	d012      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800675c:	d81a      	bhi.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d022      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006766:	d115      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800676c:	3308      	adds	r3, #8
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fea1 	bl	80074b8 <RCCEx_PLL2_Config>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800677c:	e015      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800677e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006782:	3328      	adds	r3, #40	; 0x28
 8006784:	2102      	movs	r1, #2
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ff48 	bl	800761c <RCCEx_PLL3_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006792:	e00a      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800679a:	e006      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800679c:	bf00      	nop
 800679e:	e004      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067a0:	bf00      	nop
 80067a2:	e002      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067a4:	bf00      	nop
 80067a6:	e000      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80067a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10b      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067b2:	4b39      	ldr	r3, [pc, #228]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80067ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067c2:	4a35      	ldr	r2, [pc, #212]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6553      	str	r3, [r2, #84]	; 0x54
 80067c8:	e003      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80067de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067e2:	2300      	movs	r3, #0
 80067e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067e8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80067ec:	460b      	mov	r3, r1
 80067ee:	4313      	orrs	r3, r2
 80067f0:	d058      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80067f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80067fe:	d033      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006800:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006804:	d82c      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680a:	d02f      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d826      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006816:	d02b      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800681c:	d820      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800681e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006822:	d012      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006828:	d81a      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d022      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800682e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006832:	d115      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006838:	3308      	adds	r3, #8
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fe3b 	bl	80074b8 <RCCEx_PLL2_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006848:	e015      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800684e:	3328      	adds	r3, #40	; 0x28
 8006850:	2102      	movs	r1, #2
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fee2 	bl	800761c <RCCEx_PLL3_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800685e:	e00a      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006866:	e006      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006868:	bf00      	nop
 800686a:	e004      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800686c:	bf00      	nop
 800686e:	e002      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006870:	bf00      	nop
 8006872:	e000      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006876:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10e      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800687e:	4b06      	ldr	r3, [pc, #24]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006882:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800688e:	4a02      	ldr	r2, [pc, #8]	; (8006898 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006890:	430b      	orrs	r3, r1
 8006892:	6593      	str	r3, [r2, #88]	; 0x58
 8006894:	e006      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006896:	bf00      	nop
 8006898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80068b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068b4:	2300      	movs	r3, #0
 80068b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80068be:	460b      	mov	r3, r1
 80068c0:	4313      	orrs	r3, r2
 80068c2:	d055      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068d0:	d033      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80068d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068d6:	d82c      	bhi.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068dc:	d02f      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80068de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e2:	d826      	bhi.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068e8:	d02b      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80068ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068ee:	d820      	bhi.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068f4:	d012      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80068f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fa:	d81a      	bhi.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d022      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006904:	d115      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690a:	3308      	adds	r3, #8
 800690c:	2100      	movs	r1, #0
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fdd2 	bl	80074b8 <RCCEx_PLL2_Config>
 8006914:	4603      	mov	r3, r0
 8006916:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800691a:	e015      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006920:	3328      	adds	r3, #40	; 0x28
 8006922:	2102      	movs	r1, #2
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fe79 	bl	800761c <RCCEx_PLL3_Config>
 800692a:	4603      	mov	r3, r0
 800692c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006930:	e00a      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006938:	e006      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800693a:	bf00      	nop
 800693c:	e004      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800693e:	bf00      	nop
 8006940:	e002      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006942:	bf00      	nop
 8006944:	e000      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006948:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006950:	4ba0      	ldr	r3, [pc, #640]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006954:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006960:	4a9c      	ldr	r2, [pc, #624]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006962:	430b      	orrs	r3, r1
 8006964:	6593      	str	r3, [r2, #88]	; 0x58
 8006966:	e003      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800696c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f002 0308 	and.w	r3, r2, #8
 800697c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006980:	2300      	movs	r3, #0
 8006982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006986:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800698a:	460b      	mov	r3, r1
 800698c:	4313      	orrs	r3, r2
 800698e:	d01e      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699c:	d10c      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a2:	3328      	adds	r3, #40	; 0x28
 80069a4:	2102      	movs	r1, #2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fe38 	bl	800761c <RCCEx_PLL3_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80069b8:	4b86      	ldr	r3, [pc, #536]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069c8:	4a82      	ldr	r2, [pc, #520]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ca:	430b      	orrs	r3, r1
 80069cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f002 0310 	and.w	r3, r2, #16
 80069da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069de:	2300      	movs	r3, #0
 80069e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d01e      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069fa:	d10c      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a00:	3328      	adds	r3, #40	; 0x28
 8006a02:	2102      	movs	r1, #2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fe09 	bl	800761c <RCCEx_PLL3_Config>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a16:	4b6f      	ldr	r3, [pc, #444]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a26:	4a6b      	ldr	r2, [pc, #428]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006a38:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a3e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006a42:	460b      	mov	r3, r1
 8006a44:	4313      	orrs	r3, r2
 8006a46:	d03e      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a54:	d022      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a5a:	d81b      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a64:	d00b      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006a66:	e015      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fd21 	bl	80074b8 <RCCEx_PLL2_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a7c:	e00f      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a82:	3328      	adds	r3, #40	; 0x28
 8006a84:	2102      	movs	r1, #2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fdc8 	bl	800761c <RCCEx_PLL3_Config>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006a92:	e004      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a9a:	e000      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10b      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006aa6:	4b4b      	ldr	r3, [pc, #300]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aaa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ab6:	4a47      	ldr	r2, [pc, #284]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ab8:	430b      	orrs	r3, r1
 8006aba:	6593      	str	r3, [r2, #88]	; 0x58
 8006abc:	e003      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006abe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ac2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006ad2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	677b      	str	r3, [r7, #116]	; 0x74
 8006ad8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006adc:	460b      	mov	r3, r1
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	d03b      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aee:	d01f      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006af0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006af4:	d818      	bhi.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afa:	d003      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b00:	d007      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006b02:	e011      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b04:	4b33      	ldr	r3, [pc, #204]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	4a32      	ldr	r2, [pc, #200]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b10:	e00f      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	3328      	adds	r3, #40	; 0x28
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fd7e 	bl	800761c <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b26:	e004      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b2e:	e000      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b3a:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b4a:	4a22      	ldr	r2, [pc, #136]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6553      	str	r3, [r2, #84]	; 0x54
 8006b50:	e003      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b56:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b68:	2300      	movs	r3, #0
 8006b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b6c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006b70:	460b      	mov	r3, r1
 8006b72:	4313      	orrs	r3, r2
 8006b74:	d034      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b84:	d007      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006b86:	e011      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b88:	4b12      	ldr	r3, [pc, #72]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	4a11      	ldr	r2, [pc, #68]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b94:	e00e      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	2102      	movs	r1, #2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fc8a 	bl	80074b8 <RCCEx_PLL2_Config>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006baa:	e003      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10d      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bca:	4a02      	ldr	r2, [pc, #8]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bd0:	e006      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006bd2:	bf00      	nop
 8006bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006bec:	663b      	str	r3, [r7, #96]	; 0x60
 8006bee:	2300      	movs	r3, #0
 8006bf0:	667b      	str	r3, [r7, #100]	; 0x64
 8006bf2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	d00c      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c00:	3328      	adds	r3, #40	; 0x28
 8006c02:	2102      	movs	r1, #2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fd09 	bl	800761c <RCCEx_PLL3_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c24:	2300      	movs	r3, #0
 8006c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c28:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	d036      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c3c:	d018      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c42:	d811      	bhi.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c48:	d014      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c4e:	d80b      	bhi.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d011      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c58:	d106      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c5a:	4bb7      	ldr	r3, [pc, #732]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5e:	4ab6      	ldr	r2, [pc, #728]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c66:	e008      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c6e:	e004      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c70:	bf00      	nop
 8006c72:	e002      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c74:	bf00      	nop
 8006c76:	e000      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c82:	4bad      	ldr	r3, [pc, #692]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c90:	4aa9      	ldr	r2, [pc, #676]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c92:	430b      	orrs	r3, r1
 8006c94:	6553      	str	r3, [r2, #84]	; 0x54
 8006c96:	e003      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006cac:	653b      	str	r3, [r7, #80]	; 0x50
 8006cae:	2300      	movs	r3, #0
 8006cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8006cb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	d009      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cbc:	4b9e      	ldr	r3, [pc, #632]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cca:	4a9b      	ldr	r2, [pc, #620]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cde:	2300      	movs	r3, #0
 8006ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ce2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006cec:	4b92      	ldr	r3, [pc, #584]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfa:	4a8f      	ldr	r2, [pc, #572]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006d0e:	2300      	movs	r3, #0
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
 8006d12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006d16:	460b      	mov	r3, r1
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	d00e      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d1c:	4b86      	ldr	r3, [pc, #536]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	4a85      	ldr	r2, [pc, #532]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d26:	6113      	str	r3, [r2, #16]
 8006d28:	4b83      	ldr	r3, [pc, #524]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d2a:	6919      	ldr	r1, [r3, #16]
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d34:	4a80      	ldr	r2, [pc, #512]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d36:	430b      	orrs	r3, r1
 8006d38:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d48:	2300      	movs	r3, #0
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d009      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d56:	4b78      	ldr	r3, [pc, #480]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d64:	4a74      	ldr	r2, [pc, #464]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d66:	430b      	orrs	r3, r1
 8006d68:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006d76:	633b      	str	r3, [r7, #48]	; 0x30
 8006d78:	2300      	movs	r3, #0
 8006d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006d80:	460b      	mov	r3, r1
 8006d82:	4313      	orrs	r3, r2
 8006d84:	d00a      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d86:	4b6c      	ldr	r3, [pc, #432]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d96:	4a68      	ldr	r2, [pc, #416]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	2100      	movs	r1, #0
 8006da6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006db2:	460b      	mov	r3, r1
 8006db4:	4313      	orrs	r3, r2
 8006db6:	d011      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fb79 	bl	80074b8 <RCCEx_PLL2_Config>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006dcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	2100      	movs	r1, #0
 8006de6:	6239      	str	r1, [r7, #32]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
 8006dee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006df2:	460b      	mov	r3, r1
 8006df4:	4313      	orrs	r3, r2
 8006df6:	d011      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	2101      	movs	r1, #1
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fb59 	bl	80074b8 <RCCEx_PLL2_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	2100      	movs	r1, #0
 8006e26:	61b9      	str	r1, [r7, #24]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e32:	460b      	mov	r3, r1
 8006e34:	4313      	orrs	r3, r2
 8006e36:	d011      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	2102      	movs	r1, #2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fb39 	bl	80074b8 <RCCEx_PLL2_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	2100      	movs	r1, #0
 8006e66:	6139      	str	r1, [r7, #16]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006e72:	460b      	mov	r3, r1
 8006e74:	4313      	orrs	r3, r2
 8006e76:	d011      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	3328      	adds	r3, #40	; 0x28
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fbcb 	bl	800761c <RCCEx_PLL3_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	f003 0310 	and.w	r3, r3, #16
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	d011      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebc:	3328      	adds	r3, #40	; 0x28
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fbab 	bl	800761c <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ed8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	6039      	str	r1, [r7, #0]
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	607b      	str	r3, [r7, #4]
 8006eee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	d011      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efc:	3328      	adds	r3, #40	; 0x28
 8006efe:	2102      	movs	r1, #2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fb8b 	bl	800761c <RCCEx_PLL3_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006f1c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e000      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006f30:	46bd      	mov	sp, r7
 8006f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f36:	bf00      	nop
 8006f38:	58024400 	.word	0x58024400

08006f3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f40:	f7fe fe00 	bl	8005b44 <HAL_RCC_GetHCLKFreq>
 8006f44:	4602      	mov	r2, r0
 8006f46:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	091b      	lsrs	r3, r3, #4
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	4904      	ldr	r1, [pc, #16]	; (8006f64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f52:	5ccb      	ldrb	r3, [r1, r3]
 8006f54:	f003 031f 	and.w	r3, r3, #31
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	58024400 	.word	0x58024400
 8006f64:	0800ac74 	.word	0x0800ac74

08006f68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b089      	sub	sp, #36	; 0x24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f70:	4ba1      	ldr	r3, [pc, #644]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	f003 0303 	and.w	r3, r3, #3
 8006f78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f7a:	4b9f      	ldr	r3, [pc, #636]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	0b1b      	lsrs	r3, r3, #12
 8006f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f86:	4b9c      	ldr	r3, [pc, #624]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	091b      	lsrs	r3, r3, #4
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f92:	4b99      	ldr	r3, [pc, #612]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f96:	08db      	lsrs	r3, r3, #3
 8006f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	fb02 f303 	mul.w	r3, r2, r3
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 8111 	beq.w	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	f000 8083 	beq.w	80070c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	f200 80a1 	bhi.w	8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d056      	beq.n	8007080 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006fd2:	e099      	b.n	8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd4:	4b88      	ldr	r3, [pc, #544]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d02d      	beq.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fe0:	4b85      	ldr	r3, [pc, #532]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	08db      	lsrs	r3, r3, #3
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	4a84      	ldr	r2, [pc, #528]	; (80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b7b      	ldr	r3, [pc, #492]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800703a:	e087      	b.n	800714c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800704a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704e:	4b6a      	ldr	r3, [pc, #424]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007062:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800707e:	e065      	b.n	800714c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800708e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007092:	4b59      	ldr	r3, [pc, #356]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070c2:	e043      	b.n	800714c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800720c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d6:	4b48      	ldr	r3, [pc, #288]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007106:	e021      	b.n	800714c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711a:	4b37      	ldr	r3, [pc, #220]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712a:	ed97 6a03 	vldr	s12, [r7, #12]
 800712e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007200 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800714a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800714c:	4b2a      	ldr	r3, [pc, #168]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	0a5b      	lsrs	r3, r3, #9
 8007152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007166:	edd7 6a07 	vldr	s13, [r7, #28]
 800716a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007172:	ee17 2a90 	vmov	r2, s15
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800717a:	4b1f      	ldr	r3, [pc, #124]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007194:	edd7 6a07 	vldr	s13, [r7, #28]
 8007198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a0:	ee17 2a90 	vmov	r2, s15
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80071a8:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	0e1b      	lsrs	r3, r3, #24
 80071ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ce:	ee17 2a90 	vmov	r2, s15
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071d6:	e008      	b.n	80071ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	609a      	str	r2, [r3, #8]
}
 80071ea:	bf00      	nop
 80071ec:	3724      	adds	r7, #36	; 0x24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	58024400 	.word	0x58024400
 80071fc:	03d09000 	.word	0x03d09000
 8007200:	46000000 	.word	0x46000000
 8007204:	4c742400 	.word	0x4c742400
 8007208:	4a742400 	.word	0x4a742400
 800720c:	4bbebc20 	.word	0x4bbebc20

08007210 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007210:	b480      	push	{r7}
 8007212:	b089      	sub	sp, #36	; 0x24
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007218:	4ba1      	ldr	r3, [pc, #644]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	f003 0303 	and.w	r3, r3, #3
 8007220:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007222:	4b9f      	ldr	r3, [pc, #636]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	0d1b      	lsrs	r3, r3, #20
 8007228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800722c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800722e:	4b9c      	ldr	r3, [pc, #624]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800723a:	4b99      	ldr	r3, [pc, #612]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	08db      	lsrs	r3, r3, #3
 8007240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	fb02 f303 	mul.w	r3, r2, r3
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8111 	beq.w	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b02      	cmp	r3, #2
 8007262:	f000 8083 	beq.w	800736c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	2b02      	cmp	r3, #2
 800726a:	f200 80a1 	bhi.w	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d056      	beq.n	8007328 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800727a:	e099      	b.n	80073b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800727c:	4b88      	ldr	r3, [pc, #544]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b00      	cmp	r3, #0
 8007286:	d02d      	beq.n	80072e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007288:	4b85      	ldr	r3, [pc, #532]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	08db      	lsrs	r3, r3, #3
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	4a84      	ldr	r2, [pc, #528]	; (80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	ee07 3a90 	vmov	s15, r3
 80072a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b7b      	ldr	r3, [pc, #492]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072e2:	e087      	b.n	80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072f6:	4b6a      	ldr	r3, [pc, #424]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007306:	ed97 6a03 	vldr	s12, [r7, #12]
 800730a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800730e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800731a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800731e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007326:	e065      	b.n	80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733a:	4b59      	ldr	r3, [pc, #356]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734a:	ed97 6a03 	vldr	s12, [r7, #12]
 800734e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800735e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800736a:	e043      	b.n	80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800737a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800737e:	4b48      	ldr	r3, [pc, #288]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800738e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007392:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800739e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ae:	e021      	b.n	80073f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c2:	4b37      	ldr	r3, [pc, #220]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80073f4:	4b2a      	ldr	r3, [pc, #168]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	0a5b      	lsrs	r3, r3, #9
 80073fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800740a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800741a:	ee17 2a90 	vmov	r2, s15
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007422:	4b1f      	ldr	r3, [pc, #124]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	0c1b      	lsrs	r3, r3, #16
 8007428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007438:	ee37 7a87 	vadd.f32	s14, s15, s14
 800743c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007448:	ee17 2a90 	vmov	r2, s15
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007450:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	0e1b      	lsrs	r3, r3, #24
 8007456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800746a:	edd7 6a07 	vldr	s13, [r7, #28]
 800746e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007476:	ee17 2a90 	vmov	r2, s15
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800747e:	e008      	b.n	8007492 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	609a      	str	r2, [r3, #8]
}
 8007492:	bf00      	nop
 8007494:	3724      	adds	r7, #36	; 0x24
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	58024400 	.word	0x58024400
 80074a4:	03d09000 	.word	0x03d09000
 80074a8:	46000000 	.word	0x46000000
 80074ac:	4c742400 	.word	0x4c742400
 80074b0:	4a742400 	.word	0x4a742400
 80074b4:	4bbebc20 	.word	0x4bbebc20

080074b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074c6:	4b53      	ldr	r3, [pc, #332]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d101      	bne.n	80074d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e099      	b.n	800760a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074d6:	4b4f      	ldr	r3, [pc, #316]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a4e      	ldr	r2, [pc, #312]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80074dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e2:	f7fa fabd 	bl	8001a60 <HAL_GetTick>
 80074e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074e8:	e008      	b.n	80074fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074ea:	f7fa fab9 	bl	8001a60 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d901      	bls.n	80074fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e086      	b.n	800760a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074fc:	4b45      	ldr	r3, [pc, #276]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1f0      	bne.n	80074ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007508:	4b42      	ldr	r3, [pc, #264]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	031b      	lsls	r3, r3, #12
 8007516:	493f      	ldr	r1, [pc, #252]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 8007518:	4313      	orrs	r3, r2
 800751a:	628b      	str	r3, [r1, #40]	; 0x28
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	3b01      	subs	r3, #1
 8007522:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	3b01      	subs	r3, #1
 800752c:	025b      	lsls	r3, r3, #9
 800752e:	b29b      	uxth	r3, r3
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	3b01      	subs	r3, #1
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	3b01      	subs	r3, #1
 8007546:	061b      	lsls	r3, r3, #24
 8007548:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800754c:	4931      	ldr	r1, [pc, #196]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 800754e:	4313      	orrs	r3, r2
 8007550:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007552:	4b30      	ldr	r3, [pc, #192]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	492d      	ldr	r1, [pc, #180]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 8007560:	4313      	orrs	r3, r2
 8007562:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007564:	4b2b      	ldr	r3, [pc, #172]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	f023 0220 	bic.w	r2, r3, #32
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	4928      	ldr	r1, [pc, #160]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 8007572:	4313      	orrs	r3, r2
 8007574:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007576:	4b27      	ldr	r3, [pc, #156]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	4a26      	ldr	r2, [pc, #152]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 800757c:	f023 0310 	bic.w	r3, r3, #16
 8007580:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007582:	4b24      	ldr	r3, [pc, #144]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 8007584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007586:	4b24      	ldr	r3, [pc, #144]	; (8007618 <RCCEx_PLL2_Config+0x160>)
 8007588:	4013      	ands	r3, r2
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	69d2      	ldr	r2, [r2, #28]
 800758e:	00d2      	lsls	r2, r2, #3
 8007590:	4920      	ldr	r1, [pc, #128]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007596:	4b1f      	ldr	r3, [pc, #124]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	4a1e      	ldr	r2, [pc, #120]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 800759c:	f043 0310 	orr.w	r3, r3, #16
 80075a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d106      	bne.n	80075b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80075a8:	4b1a      	ldr	r3, [pc, #104]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	4a19      	ldr	r2, [pc, #100]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80075ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075b4:	e00f      	b.n	80075d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d106      	bne.n	80075ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80075bc:	4b15      	ldr	r3, [pc, #84]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	4a14      	ldr	r2, [pc, #80]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80075c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075c8:	e005      	b.n	80075d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075ca:	4b12      	ldr	r3, [pc, #72]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	4a11      	ldr	r2, [pc, #68]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80075d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075d6:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a0e      	ldr	r2, [pc, #56]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80075dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e2:	f7fa fa3d 	bl	8001a60 <HAL_GetTick>
 80075e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075e8:	e008      	b.n	80075fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075ea:	f7fa fa39 	bl	8001a60 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d901      	bls.n	80075fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e006      	b.n	800760a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075fc:	4b05      	ldr	r3, [pc, #20]	; (8007614 <RCCEx_PLL2_Config+0x15c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0f0      	beq.n	80075ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	58024400 	.word	0x58024400
 8007618:	ffff0007 	.word	0xffff0007

0800761c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800762a:	4b53      	ldr	r3, [pc, #332]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b03      	cmp	r3, #3
 8007634:	d101      	bne.n	800763a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e099      	b.n	800776e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800763a:	4b4f      	ldr	r3, [pc, #316]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a4e      	ldr	r2, [pc, #312]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007646:	f7fa fa0b 	bl	8001a60 <HAL_GetTick>
 800764a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800764c:	e008      	b.n	8007660 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800764e:	f7fa fa07 	bl	8001a60 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d901      	bls.n	8007660 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e086      	b.n	800776e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007660:	4b45      	ldr	r3, [pc, #276]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1f0      	bne.n	800764e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800766c:	4b42      	ldr	r3, [pc, #264]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	051b      	lsls	r3, r3, #20
 800767a:	493f      	ldr	r1, [pc, #252]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 800767c:	4313      	orrs	r3, r2
 800767e:	628b      	str	r3, [r1, #40]	; 0x28
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	3b01      	subs	r3, #1
 8007686:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	3b01      	subs	r3, #1
 8007690:	025b      	lsls	r3, r3, #9
 8007692:	b29b      	uxth	r3, r3
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	3b01      	subs	r3, #1
 800769c:	041b      	lsls	r3, r3, #16
 800769e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	061b      	lsls	r3, r3, #24
 80076ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076b0:	4931      	ldr	r1, [pc, #196]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80076b6:	4b30      	ldr	r3, [pc, #192]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	492d      	ldr	r1, [pc, #180]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076c8:	4b2b      	ldr	r3, [pc, #172]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	4928      	ldr	r1, [pc, #160]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076da:	4b27      	ldr	r3, [pc, #156]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	4a26      	ldr	r2, [pc, #152]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076e6:	4b24      	ldr	r3, [pc, #144]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ea:	4b24      	ldr	r3, [pc, #144]	; (800777c <RCCEx_PLL3_Config+0x160>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	69d2      	ldr	r2, [r2, #28]
 80076f2:	00d2      	lsls	r2, r2, #3
 80076f4:	4920      	ldr	r1, [pc, #128]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076fa:	4b1f      	ldr	r3, [pc, #124]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	4a1e      	ldr	r2, [pc, #120]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007704:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800770c:	4b1a      	ldr	r3, [pc, #104]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	4a19      	ldr	r2, [pc, #100]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007712:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007716:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007718:	e00f      	b.n	800773a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d106      	bne.n	800772e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007720:	4b15      	ldr	r3, [pc, #84]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	4a14      	ldr	r2, [pc, #80]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007726:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800772a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800772c:	e005      	b.n	800773a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800772e:	4b12      	ldr	r3, [pc, #72]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	4a11      	ldr	r2, [pc, #68]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007738:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800773a:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a0e      	ldr	r2, [pc, #56]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007746:	f7fa f98b 	bl	8001a60 <HAL_GetTick>
 800774a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800774c:	e008      	b.n	8007760 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800774e:	f7fa f987 	bl	8001a60 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e006      	b.n	800776e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007760:	4b05      	ldr	r3, [pc, #20]	; (8007778 <RCCEx_PLL3_Config+0x15c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0f0      	beq.n	800774e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	58024400 	.word	0x58024400
 800777c:	ffff0007 	.word	0xffff0007

08007780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e049      	b.n	8007826 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7f9 fb06 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f000 fbbe 	bl	8007f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e049      	b.n	80078d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d106      	bne.n	800785a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f841 	bl	80078dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2202      	movs	r2, #2
 800785e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3304      	adds	r3, #4
 800786a:	4619      	mov	r1, r3
 800786c:	4610      	mov	r0, r2
 800786e:	f000 fb67 	bl	8007f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d109      	bne.n	8007914 <HAL_TIM_PWM_Start+0x24>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	bf14      	ite	ne
 800790c:	2301      	movne	r3, #1
 800790e:	2300      	moveq	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	e03c      	b.n	800798e <HAL_TIM_PWM_Start+0x9e>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b04      	cmp	r3, #4
 8007918:	d109      	bne.n	800792e <HAL_TIM_PWM_Start+0x3e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b01      	cmp	r3, #1
 8007924:	bf14      	ite	ne
 8007926:	2301      	movne	r3, #1
 8007928:	2300      	moveq	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	e02f      	b.n	800798e <HAL_TIM_PWM_Start+0x9e>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b08      	cmp	r3, #8
 8007932:	d109      	bne.n	8007948 <HAL_TIM_PWM_Start+0x58>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b01      	cmp	r3, #1
 800793e:	bf14      	ite	ne
 8007940:	2301      	movne	r3, #1
 8007942:	2300      	moveq	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	e022      	b.n	800798e <HAL_TIM_PWM_Start+0x9e>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b0c      	cmp	r3, #12
 800794c:	d109      	bne.n	8007962 <HAL_TIM_PWM_Start+0x72>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b01      	cmp	r3, #1
 8007958:	bf14      	ite	ne
 800795a:	2301      	movne	r3, #1
 800795c:	2300      	moveq	r3, #0
 800795e:	b2db      	uxtb	r3, r3
 8007960:	e015      	b.n	800798e <HAL_TIM_PWM_Start+0x9e>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b10      	cmp	r3, #16
 8007966:	d109      	bne.n	800797c <HAL_TIM_PWM_Start+0x8c>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b01      	cmp	r3, #1
 8007972:	bf14      	ite	ne
 8007974:	2301      	movne	r3, #1
 8007976:	2300      	moveq	r3, #0
 8007978:	b2db      	uxtb	r3, r3
 800797a:	e008      	b.n	800798e <HAL_TIM_PWM_Start+0x9e>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	bf14      	ite	ne
 8007988:	2301      	movne	r3, #1
 800798a:	2300      	moveq	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e0ab      	b.n	8007aee <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <HAL_TIM_PWM_Start+0xb6>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079a4:	e023      	b.n	80079ee <HAL_TIM_PWM_Start+0xfe>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_PWM_Start+0xc6>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b4:	e01b      	b.n	80079ee <HAL_TIM_PWM_Start+0xfe>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d104      	bne.n	80079c6 <HAL_TIM_PWM_Start+0xd6>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079c4:	e013      	b.n	80079ee <HAL_TIM_PWM_Start+0xfe>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b0c      	cmp	r3, #12
 80079ca:	d104      	bne.n	80079d6 <HAL_TIM_PWM_Start+0xe6>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079d4:	e00b      	b.n	80079ee <HAL_TIM_PWM_Start+0xfe>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b10      	cmp	r3, #16
 80079da:	d104      	bne.n	80079e6 <HAL_TIM_PWM_Start+0xf6>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079e4:	e003      	b.n	80079ee <HAL_TIM_PWM_Start+0xfe>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2202      	movs	r2, #2
 80079ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2201      	movs	r2, #1
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 febc 	bl	8008774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a3d      	ldr	r2, [pc, #244]	; (8007af8 <HAL_TIM_PWM_Start+0x208>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <HAL_TIM_PWM_Start+0x13e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a3c      	ldr	r2, [pc, #240]	; (8007afc <HAL_TIM_PWM_Start+0x20c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00e      	beq.n	8007a2e <HAL_TIM_PWM_Start+0x13e>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a3a      	ldr	r2, [pc, #232]	; (8007b00 <HAL_TIM_PWM_Start+0x210>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d009      	beq.n	8007a2e <HAL_TIM_PWM_Start+0x13e>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a39      	ldr	r2, [pc, #228]	; (8007b04 <HAL_TIM_PWM_Start+0x214>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d004      	beq.n	8007a2e <HAL_TIM_PWM_Start+0x13e>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a37      	ldr	r2, [pc, #220]	; (8007b08 <HAL_TIM_PWM_Start+0x218>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d101      	bne.n	8007a32 <HAL_TIM_PWM_Start+0x142>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e000      	b.n	8007a34 <HAL_TIM_PWM_Start+0x144>
 8007a32:	2300      	movs	r3, #0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d007      	beq.n	8007a48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a2a      	ldr	r2, [pc, #168]	; (8007af8 <HAL_TIM_PWM_Start+0x208>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d02c      	beq.n	8007aac <HAL_TIM_PWM_Start+0x1bc>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a5a:	d027      	beq.n	8007aac <HAL_TIM_PWM_Start+0x1bc>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a2a      	ldr	r2, [pc, #168]	; (8007b0c <HAL_TIM_PWM_Start+0x21c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d022      	beq.n	8007aac <HAL_TIM_PWM_Start+0x1bc>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a29      	ldr	r2, [pc, #164]	; (8007b10 <HAL_TIM_PWM_Start+0x220>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d01d      	beq.n	8007aac <HAL_TIM_PWM_Start+0x1bc>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a27      	ldr	r2, [pc, #156]	; (8007b14 <HAL_TIM_PWM_Start+0x224>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d018      	beq.n	8007aac <HAL_TIM_PWM_Start+0x1bc>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1f      	ldr	r2, [pc, #124]	; (8007afc <HAL_TIM_PWM_Start+0x20c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <HAL_TIM_PWM_Start+0x1bc>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a23      	ldr	r2, [pc, #140]	; (8007b18 <HAL_TIM_PWM_Start+0x228>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00e      	beq.n	8007aac <HAL_TIM_PWM_Start+0x1bc>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1b      	ldr	r2, [pc, #108]	; (8007b00 <HAL_TIM_PWM_Start+0x210>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d009      	beq.n	8007aac <HAL_TIM_PWM_Start+0x1bc>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1f      	ldr	r2, [pc, #124]	; (8007b1c <HAL_TIM_PWM_Start+0x22c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <HAL_TIM_PWM_Start+0x1bc>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <HAL_TIM_PWM_Start+0x230>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d115      	bne.n	8007ad8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	4b1c      	ldr	r3, [pc, #112]	; (8007b24 <HAL_TIM_PWM_Start+0x234>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b06      	cmp	r3, #6
 8007abc:	d015      	beq.n	8007aea <HAL_TIM_PWM_Start+0x1fa>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac4:	d011      	beq.n	8007aea <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f042 0201 	orr.w	r2, r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad6:	e008      	b.n	8007aea <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0201 	orr.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e000      	b.n	8007aec <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	40010000 	.word	0x40010000
 8007afc:	40010400 	.word	0x40010400
 8007b00:	40014000 	.word	0x40014000
 8007b04:	40014400 	.word	0x40014400
 8007b08:	40014800 	.word	0x40014800
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00
 8007b18:	40001800 	.word	0x40001800
 8007b1c:	4000e000 	.word	0x4000e000
 8007b20:	4000e400 	.word	0x4000e400
 8007b24:	00010007 	.word	0x00010007

08007b28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e0ff      	b.n	8007d46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b14      	cmp	r3, #20
 8007b52:	f200 80f0 	bhi.w	8007d36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007bb1 	.word	0x08007bb1
 8007b60:	08007d37 	.word	0x08007d37
 8007b64:	08007d37 	.word	0x08007d37
 8007b68:	08007d37 	.word	0x08007d37
 8007b6c:	08007bf1 	.word	0x08007bf1
 8007b70:	08007d37 	.word	0x08007d37
 8007b74:	08007d37 	.word	0x08007d37
 8007b78:	08007d37 	.word	0x08007d37
 8007b7c:	08007c33 	.word	0x08007c33
 8007b80:	08007d37 	.word	0x08007d37
 8007b84:	08007d37 	.word	0x08007d37
 8007b88:	08007d37 	.word	0x08007d37
 8007b8c:	08007c73 	.word	0x08007c73
 8007b90:	08007d37 	.word	0x08007d37
 8007b94:	08007d37 	.word	0x08007d37
 8007b98:	08007d37 	.word	0x08007d37
 8007b9c:	08007cb5 	.word	0x08007cb5
 8007ba0:	08007d37 	.word	0x08007d37
 8007ba4:	08007d37 	.word	0x08007d37
 8007ba8:	08007d37 	.word	0x08007d37
 8007bac:	08007cf5 	.word	0x08007cf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fa68 	bl	800808c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f042 0208 	orr.w	r2, r2, #8
 8007bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0204 	bic.w	r2, r2, #4
 8007bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6999      	ldr	r1, [r3, #24]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	619a      	str	r2, [r3, #24]
      break;
 8007bee:	e0a5      	b.n	8007d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fad8 	bl	80081ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6999      	ldr	r1, [r3, #24]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	021a      	lsls	r2, r3, #8
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	619a      	str	r2, [r3, #24]
      break;
 8007c30:	e084      	b.n	8007d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fb41 	bl	80082c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69da      	ldr	r2, [r3, #28]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0208 	orr.w	r2, r2, #8
 8007c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69da      	ldr	r2, [r3, #28]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0204 	bic.w	r2, r2, #4
 8007c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69d9      	ldr	r1, [r3, #28]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	61da      	str	r2, [r3, #28]
      break;
 8007c70:	e064      	b.n	8007d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 fba9 	bl	80083d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69d9      	ldr	r1, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	021a      	lsls	r2, r3, #8
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	61da      	str	r2, [r3, #28]
      break;
 8007cb2:	e043      	b.n	8007d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fbf2 	bl	80084a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0208 	orr.w	r2, r2, #8
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0204 	bic.w	r2, r2, #4
 8007cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cf2:	e023      	b.n	8007d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fc36 	bl	800856c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	021a      	lsls	r2, r3, #8
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d34:	e002      	b.n	8007d3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop

08007d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_TIM_ConfigClockSource+0x1c>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e0dc      	b.n	8007f26 <HAL_TIM_ConfigClockSource+0x1d6>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	4b6a      	ldr	r3, [pc, #424]	; (8007f30 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007d88:	4013      	ands	r3, r2
 8007d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a64      	ldr	r2, [pc, #400]	; (8007f34 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	f000 80a9 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1aa>
 8007da8:	4a62      	ldr	r2, [pc, #392]	; (8007f34 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	f200 80ae 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007db0:	4a61      	ldr	r2, [pc, #388]	; (8007f38 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	f000 80a1 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1aa>
 8007db8:	4a5f      	ldr	r2, [pc, #380]	; (8007f38 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	f200 80a6 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007dc0:	4a5e      	ldr	r2, [pc, #376]	; (8007f3c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	f000 8099 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1aa>
 8007dc8:	4a5c      	ldr	r2, [pc, #368]	; (8007f3c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	f200 809e 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007dd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007dd4:	f000 8091 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1aa>
 8007dd8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ddc:	f200 8096 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de4:	f000 8089 	beq.w	8007efa <HAL_TIM_ConfigClockSource+0x1aa>
 8007de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dec:	f200 808e 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df4:	d03e      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0x124>
 8007df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfa:	f200 8087 	bhi.w	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e02:	f000 8086 	beq.w	8007f12 <HAL_TIM_ConfigClockSource+0x1c2>
 8007e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e0a:	d87f      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007e0c:	2b70      	cmp	r3, #112	; 0x70
 8007e0e:	d01a      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0xf6>
 8007e10:	2b70      	cmp	r3, #112	; 0x70
 8007e12:	d87b      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007e14:	2b60      	cmp	r3, #96	; 0x60
 8007e16:	d050      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0x16a>
 8007e18:	2b60      	cmp	r3, #96	; 0x60
 8007e1a:	d877      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007e1c:	2b50      	cmp	r3, #80	; 0x50
 8007e1e:	d03c      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x14a>
 8007e20:	2b50      	cmp	r3, #80	; 0x50
 8007e22:	d873      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	d058      	beq.n	8007eda <HAL_TIM_ConfigClockSource+0x18a>
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	d86f      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007e2c:	2b30      	cmp	r3, #48	; 0x30
 8007e2e:	d064      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x1aa>
 8007e30:	2b30      	cmp	r3, #48	; 0x30
 8007e32:	d86b      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d060      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x1aa>
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	d867      	bhi.n	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d05c      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x1aa>
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d05a      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x1aa>
 8007e44:	e062      	b.n	8007f0c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e56:	f000 fc6d 	bl	8008734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	609a      	str	r2, [r3, #8]
      break;
 8007e72:	e04f      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e84:	f000 fc56 	bl	8008734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e96:	609a      	str	r2, [r3, #8]
      break;
 8007e98:	e03c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f000 fbc6 	bl	8008638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2150      	movs	r1, #80	; 0x50
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fc20 	bl	80086f8 <TIM_ITRx_SetConfig>
      break;
 8007eb8:	e02c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f000 fbe5 	bl	8008696 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2160      	movs	r1, #96	; 0x60
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fc10 	bl	80086f8 <TIM_ITRx_SetConfig>
      break;
 8007ed8:	e01c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f000 fba6 	bl	8008638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2140      	movs	r1, #64	; 0x40
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 fc00 	bl	80086f8 <TIM_ITRx_SetConfig>
      break;
 8007ef8:	e00c      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4619      	mov	r1, r3
 8007f04:	4610      	mov	r0, r2
 8007f06:	f000 fbf7 	bl	80086f8 <TIM_ITRx_SetConfig>
      break;
 8007f0a:	e003      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f10:	e000      	b.n	8007f14 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	ffceff88 	.word	0xffceff88
 8007f34:	00100040 	.word	0x00100040
 8007f38:	00100030 	.word	0x00100030
 8007f3c:	00100020 	.word	0x00100020

08007f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a44      	ldr	r2, [pc, #272]	; (8008064 <TIM_Base_SetConfig+0x124>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d013      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f5e:	d00f      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a41      	ldr	r2, [pc, #260]	; (8008068 <TIM_Base_SetConfig+0x128>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00b      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a40      	ldr	r2, [pc, #256]	; (800806c <TIM_Base_SetConfig+0x12c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d007      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a3f      	ldr	r2, [pc, #252]	; (8008070 <TIM_Base_SetConfig+0x130>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d003      	beq.n	8007f80 <TIM_Base_SetConfig+0x40>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a3e      	ldr	r2, [pc, #248]	; (8008074 <TIM_Base_SetConfig+0x134>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d108      	bne.n	8007f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a33      	ldr	r2, [pc, #204]	; (8008064 <TIM_Base_SetConfig+0x124>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d027      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa0:	d023      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a30      	ldr	r2, [pc, #192]	; (8008068 <TIM_Base_SetConfig+0x128>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d01f      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a2f      	ldr	r2, [pc, #188]	; (800806c <TIM_Base_SetConfig+0x12c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d01b      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a2e      	ldr	r2, [pc, #184]	; (8008070 <TIM_Base_SetConfig+0x130>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d017      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a2d      	ldr	r2, [pc, #180]	; (8008074 <TIM_Base_SetConfig+0x134>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a2c      	ldr	r2, [pc, #176]	; (8008078 <TIM_Base_SetConfig+0x138>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d00f      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a2b      	ldr	r2, [pc, #172]	; (800807c <TIM_Base_SetConfig+0x13c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00b      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a2a      	ldr	r2, [pc, #168]	; (8008080 <TIM_Base_SetConfig+0x140>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d007      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a29      	ldr	r2, [pc, #164]	; (8008084 <TIM_Base_SetConfig+0x144>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d003      	beq.n	8007fea <TIM_Base_SetConfig+0xaa>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a28      	ldr	r2, [pc, #160]	; (8008088 <TIM_Base_SetConfig+0x148>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d108      	bne.n	8007ffc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a10      	ldr	r2, [pc, #64]	; (8008064 <TIM_Base_SetConfig+0x124>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d00f      	beq.n	8008048 <TIM_Base_SetConfig+0x108>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a12      	ldr	r2, [pc, #72]	; (8008074 <TIM_Base_SetConfig+0x134>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00b      	beq.n	8008048 <TIM_Base_SetConfig+0x108>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a11      	ldr	r2, [pc, #68]	; (8008078 <TIM_Base_SetConfig+0x138>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d007      	beq.n	8008048 <TIM_Base_SetConfig+0x108>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a10      	ldr	r2, [pc, #64]	; (800807c <TIM_Base_SetConfig+0x13c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_Base_SetConfig+0x108>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a0f      	ldr	r2, [pc, #60]	; (8008080 <TIM_Base_SetConfig+0x140>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d103      	bne.n	8008050 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	615a      	str	r2, [r3, #20]
}
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40010000 	.word	0x40010000
 8008068:	40000400 	.word	0x40000400
 800806c:	40000800 	.word	0x40000800
 8008070:	40000c00 	.word	0x40000c00
 8008074:	40010400 	.word	0x40010400
 8008078:	40014000 	.word	0x40014000
 800807c:	40014400 	.word	0x40014400
 8008080:	40014800 	.word	0x40014800
 8008084:	4000e000 	.word	0x4000e000
 8008088:	4000e400 	.word	0x4000e400

0800808c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f023 0201 	bic.w	r2, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4b37      	ldr	r3, [pc, #220]	; (8008194 <TIM_OC1_SetConfig+0x108>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f023 0302 	bic.w	r3, r3, #2
 80080d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a2d      	ldr	r2, [pc, #180]	; (8008198 <TIM_OC1_SetConfig+0x10c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00f      	beq.n	8008108 <TIM_OC1_SetConfig+0x7c>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a2c      	ldr	r2, [pc, #176]	; (800819c <TIM_OC1_SetConfig+0x110>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00b      	beq.n	8008108 <TIM_OC1_SetConfig+0x7c>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a2b      	ldr	r2, [pc, #172]	; (80081a0 <TIM_OC1_SetConfig+0x114>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d007      	beq.n	8008108 <TIM_OC1_SetConfig+0x7c>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a2a      	ldr	r2, [pc, #168]	; (80081a4 <TIM_OC1_SetConfig+0x118>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_OC1_SetConfig+0x7c>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a29      	ldr	r2, [pc, #164]	; (80081a8 <TIM_OC1_SetConfig+0x11c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d10c      	bne.n	8008122 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f023 0308 	bic.w	r3, r3, #8
 800810e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f023 0304 	bic.w	r3, r3, #4
 8008120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a1c      	ldr	r2, [pc, #112]	; (8008198 <TIM_OC1_SetConfig+0x10c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00f      	beq.n	800814a <TIM_OC1_SetConfig+0xbe>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a1b      	ldr	r2, [pc, #108]	; (800819c <TIM_OC1_SetConfig+0x110>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00b      	beq.n	800814a <TIM_OC1_SetConfig+0xbe>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a1a      	ldr	r2, [pc, #104]	; (80081a0 <TIM_OC1_SetConfig+0x114>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d007      	beq.n	800814a <TIM_OC1_SetConfig+0xbe>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a19      	ldr	r2, [pc, #100]	; (80081a4 <TIM_OC1_SetConfig+0x118>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d003      	beq.n	800814a <TIM_OC1_SetConfig+0xbe>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a18      	ldr	r2, [pc, #96]	; (80081a8 <TIM_OC1_SetConfig+0x11c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d111      	bne.n	800816e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	4313      	orrs	r3, r2
 8008162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4313      	orrs	r3, r2
 800816c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	621a      	str	r2, [r3, #32]
}
 8008188:	bf00      	nop
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	fffeff8f 	.word	0xfffeff8f
 8008198:	40010000 	.word	0x40010000
 800819c:	40010400 	.word	0x40010400
 80081a0:	40014000 	.word	0x40014000
 80081a4:	40014400 	.word	0x40014400
 80081a8:	40014800 	.word	0x40014800

080081ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	f023 0210 	bic.w	r2, r3, #16
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	4b34      	ldr	r3, [pc, #208]	; (80082a8 <TIM_OC2_SetConfig+0xfc>)
 80081d8:	4013      	ands	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f023 0320 	bic.w	r3, r3, #32
 80081f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a29      	ldr	r2, [pc, #164]	; (80082ac <TIM_OC2_SetConfig+0x100>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d003      	beq.n	8008214 <TIM_OC2_SetConfig+0x68>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a28      	ldr	r2, [pc, #160]	; (80082b0 <TIM_OC2_SetConfig+0x104>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d10d      	bne.n	8008230 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800821a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	011b      	lsls	r3, r3, #4
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	4313      	orrs	r3, r2
 8008226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800822e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a1e      	ldr	r2, [pc, #120]	; (80082ac <TIM_OC2_SetConfig+0x100>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00f      	beq.n	8008258 <TIM_OC2_SetConfig+0xac>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a1d      	ldr	r2, [pc, #116]	; (80082b0 <TIM_OC2_SetConfig+0x104>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00b      	beq.n	8008258 <TIM_OC2_SetConfig+0xac>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a1c      	ldr	r2, [pc, #112]	; (80082b4 <TIM_OC2_SetConfig+0x108>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d007      	beq.n	8008258 <TIM_OC2_SetConfig+0xac>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a1b      	ldr	r2, [pc, #108]	; (80082b8 <TIM_OC2_SetConfig+0x10c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d003      	beq.n	8008258 <TIM_OC2_SetConfig+0xac>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a1a      	ldr	r2, [pc, #104]	; (80082bc <TIM_OC2_SetConfig+0x110>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d113      	bne.n	8008280 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800825e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	621a      	str	r2, [r3, #32]
}
 800829a:	bf00      	nop
 800829c:	371c      	adds	r7, #28
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	feff8fff 	.word	0xfeff8fff
 80082ac:	40010000 	.word	0x40010000
 80082b0:	40010400 	.word	0x40010400
 80082b4:	40014000 	.word	0x40014000
 80082b8:	40014400 	.word	0x40014400
 80082bc:	40014800 	.word	0x40014800

080082c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4b33      	ldr	r3, [pc, #204]	; (80083b8 <TIM_OC3_SetConfig+0xf8>)
 80082ec:	4013      	ands	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f023 0303 	bic.w	r3, r3, #3
 80082f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008308:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	4313      	orrs	r3, r2
 8008314:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a28      	ldr	r2, [pc, #160]	; (80083bc <TIM_OC3_SetConfig+0xfc>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d003      	beq.n	8008326 <TIM_OC3_SetConfig+0x66>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a27      	ldr	r2, [pc, #156]	; (80083c0 <TIM_OC3_SetConfig+0x100>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d10d      	bne.n	8008342 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800832c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a1d      	ldr	r2, [pc, #116]	; (80083bc <TIM_OC3_SetConfig+0xfc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00f      	beq.n	800836a <TIM_OC3_SetConfig+0xaa>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a1c      	ldr	r2, [pc, #112]	; (80083c0 <TIM_OC3_SetConfig+0x100>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00b      	beq.n	800836a <TIM_OC3_SetConfig+0xaa>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a1b      	ldr	r2, [pc, #108]	; (80083c4 <TIM_OC3_SetConfig+0x104>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d007      	beq.n	800836a <TIM_OC3_SetConfig+0xaa>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a1a      	ldr	r2, [pc, #104]	; (80083c8 <TIM_OC3_SetConfig+0x108>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d003      	beq.n	800836a <TIM_OC3_SetConfig+0xaa>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a19      	ldr	r2, [pc, #100]	; (80083cc <TIM_OC3_SetConfig+0x10c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d113      	bne.n	8008392 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	011b      	lsls	r3, r3, #4
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	621a      	str	r2, [r3, #32]
}
 80083ac:	bf00      	nop
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	fffeff8f 	.word	0xfffeff8f
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40010400 	.word	0x40010400
 80083c4:	40014000 	.word	0x40014000
 80083c8:	40014400 	.word	0x40014400
 80083cc:	40014800 	.word	0x40014800

080083d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4b24      	ldr	r3, [pc, #144]	; (800848c <TIM_OC4_SetConfig+0xbc>)
 80083fc:	4013      	ands	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800841a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	031b      	lsls	r3, r3, #12
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a19      	ldr	r2, [pc, #100]	; (8008490 <TIM_OC4_SetConfig+0xc0>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00f      	beq.n	8008450 <TIM_OC4_SetConfig+0x80>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a18      	ldr	r2, [pc, #96]	; (8008494 <TIM_OC4_SetConfig+0xc4>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00b      	beq.n	8008450 <TIM_OC4_SetConfig+0x80>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a17      	ldr	r2, [pc, #92]	; (8008498 <TIM_OC4_SetConfig+0xc8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d007      	beq.n	8008450 <TIM_OC4_SetConfig+0x80>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a16      	ldr	r2, [pc, #88]	; (800849c <TIM_OC4_SetConfig+0xcc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d003      	beq.n	8008450 <TIM_OC4_SetConfig+0x80>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a15      	ldr	r2, [pc, #84]	; (80084a0 <TIM_OC4_SetConfig+0xd0>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d109      	bne.n	8008464 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	019b      	lsls	r3, r3, #6
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	4313      	orrs	r3, r2
 8008462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	621a      	str	r2, [r3, #32]
}
 800847e:	bf00      	nop
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	feff8fff 	.word	0xfeff8fff
 8008490:	40010000 	.word	0x40010000
 8008494:	40010400 	.word	0x40010400
 8008498:	40014000 	.word	0x40014000
 800849c:	40014400 	.word	0x40014400
 80084a0:	40014800 	.word	0x40014800

080084a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4b21      	ldr	r3, [pc, #132]	; (8008554 <TIM_OC5_SetConfig+0xb0>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	041b      	lsls	r3, r3, #16
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a18      	ldr	r2, [pc, #96]	; (8008558 <TIM_OC5_SetConfig+0xb4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d00f      	beq.n	800851a <TIM_OC5_SetConfig+0x76>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a17      	ldr	r2, [pc, #92]	; (800855c <TIM_OC5_SetConfig+0xb8>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00b      	beq.n	800851a <TIM_OC5_SetConfig+0x76>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a16      	ldr	r2, [pc, #88]	; (8008560 <TIM_OC5_SetConfig+0xbc>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d007      	beq.n	800851a <TIM_OC5_SetConfig+0x76>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a15      	ldr	r2, [pc, #84]	; (8008564 <TIM_OC5_SetConfig+0xc0>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d003      	beq.n	800851a <TIM_OC5_SetConfig+0x76>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a14      	ldr	r2, [pc, #80]	; (8008568 <TIM_OC5_SetConfig+0xc4>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d109      	bne.n	800852e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008520:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	621a      	str	r2, [r3, #32]
}
 8008548:	bf00      	nop
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	fffeff8f 	.word	0xfffeff8f
 8008558:	40010000 	.word	0x40010000
 800855c:	40010400 	.word	0x40010400
 8008560:	40014000 	.word	0x40014000
 8008564:	40014400 	.word	0x40014400
 8008568:	40014800 	.word	0x40014800

0800856c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4b22      	ldr	r3, [pc, #136]	; (8008620 <TIM_OC6_SetConfig+0xb4>)
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	051b      	lsls	r3, r3, #20
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a19      	ldr	r2, [pc, #100]	; (8008624 <TIM_OC6_SetConfig+0xb8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00f      	beq.n	80085e4 <TIM_OC6_SetConfig+0x78>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a18      	ldr	r2, [pc, #96]	; (8008628 <TIM_OC6_SetConfig+0xbc>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00b      	beq.n	80085e4 <TIM_OC6_SetConfig+0x78>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a17      	ldr	r2, [pc, #92]	; (800862c <TIM_OC6_SetConfig+0xc0>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d007      	beq.n	80085e4 <TIM_OC6_SetConfig+0x78>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a16      	ldr	r2, [pc, #88]	; (8008630 <TIM_OC6_SetConfig+0xc4>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_OC6_SetConfig+0x78>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a15      	ldr	r2, [pc, #84]	; (8008634 <TIM_OC6_SetConfig+0xc8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d109      	bne.n	80085f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	029b      	lsls	r3, r3, #10
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	621a      	str	r2, [r3, #32]
}
 8008612:	bf00      	nop
 8008614:	371c      	adds	r7, #28
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	feff8fff 	.word	0xfeff8fff
 8008624:	40010000 	.word	0x40010000
 8008628:	40010400 	.word	0x40010400
 800862c:	40014000 	.word	0x40014000
 8008630:	40014400 	.word	0x40014400
 8008634:	40014800 	.word	0x40014800

08008638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	f023 0201 	bic.w	r2, r3, #1
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	011b      	lsls	r3, r3, #4
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	4313      	orrs	r3, r2
 800866c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f023 030a 	bic.w	r3, r3, #10
 8008674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	621a      	str	r2, [r3, #32]
}
 800868a:	bf00      	nop
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008696:	b480      	push	{r7}
 8008698:	b087      	sub	sp, #28
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	f023 0210 	bic.w	r2, r3, #16
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	031b      	lsls	r3, r3, #12
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	621a      	str	r2, [r3, #32]
}
 80086ea:	bf00      	nop
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4b09      	ldr	r3, [pc, #36]	; (8008730 <TIM_ITRx_SetConfig+0x38>)
 800870c:	4013      	ands	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4313      	orrs	r3, r2
 8008716:	f043 0307 	orr.w	r3, r3, #7
 800871a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	609a      	str	r2, [r3, #8]
}
 8008722:	bf00      	nop
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	ffcfff8f 	.word	0xffcfff8f

08008734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800874e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	021a      	lsls	r2, r3, #8
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	431a      	orrs	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4313      	orrs	r3, r2
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	609a      	str	r2, [r3, #8]
}
 8008768:	bf00      	nop
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 031f 	and.w	r3, r3, #31
 8008786:	2201      	movs	r2, #1
 8008788:	fa02 f303 	lsl.w	r3, r2, r3
 800878c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a1a      	ldr	r2, [r3, #32]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	43db      	mvns	r3, r3
 8008796:	401a      	ands	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a1a      	ldr	r2, [r3, #32]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f003 031f 	and.w	r3, r3, #31
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	fa01 f303 	lsl.w	r3, r1, r3
 80087ac:	431a      	orrs	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	621a      	str	r2, [r3, #32]
}
 80087b2:	bf00      	nop
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e077      	b.n	80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a35      	ldr	r2, [pc, #212]	; (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d004      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a34      	ldr	r2, [pc, #208]	; (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d108      	bne.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008812:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008824:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a25      	ldr	r2, [pc, #148]	; (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d02c      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800884a:	d027      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a22      	ldr	r2, [pc, #136]	; (80088dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d022      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a21      	ldr	r2, [pc, #132]	; (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d01d      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a1f      	ldr	r2, [pc, #124]	; (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d018      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a1a      	ldr	r2, [pc, #104]	; (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d013      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a1b      	ldr	r2, [pc, #108]	; (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d00e      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a1a      	ldr	r2, [pc, #104]	; (80088ec <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d009      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a18      	ldr	r2, [pc, #96]	; (80088f0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d004      	beq.n	800889c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a17      	ldr	r2, [pc, #92]	; (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d10c      	bne.n	80088b6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	40010000 	.word	0x40010000
 80088d8:	40010400 	.word	0x40010400
 80088dc:	40000400 	.word	0x40000400
 80088e0:	40000800 	.word	0x40000800
 80088e4:	40000c00 	.word	0x40000c00
 80088e8:	40001800 	.word	0x40001800
 80088ec:	40014000 	.word	0x40014000
 80088f0:	4000e000 	.word	0x4000e000
 80088f4:	4000e400 	.word	0x4000e400

080088f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800890c:	2b01      	cmp	r3, #1
 800890e:	d101      	bne.n	8008914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008910:	2302      	movs	r3, #2
 8008912:	e087      	b.n	8008a24 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	4313      	orrs	r3, r2
 8008936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	041b      	lsls	r3, r3, #16
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a27      	ldr	r2, [pc, #156]	; (8008a30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a25      	ldr	r2, [pc, #148]	; (8008a34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d106      	bne.n	80089b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1e      	ldr	r2, [pc, #120]	; (8008a30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d004      	beq.n	80089c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d126      	bne.n	8008a12 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	051b      	lsls	r3, r3, #20
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a0e      	ldr	r2, [pc, #56]	; (8008a30 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d004      	beq.n	8008a04 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a0d      	ldr	r2, [pc, #52]	; (8008a34 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d106      	bne.n	8008a12 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	40010000 	.word	0x40010000
 8008a34:	40010400 	.word	0x40010400

08008a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e042      	b.n	8008ad0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7f8 fa09 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2224      	movs	r2, #36	; 0x24
 8008a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0201 	bic.w	r2, r2, #1
 8008a78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fc9c 	bl	80093b8 <UART_SetConfig>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e022      	b.n	8008ad0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f001 fafc 	bl	800a090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689a      	ldr	r2, [r3, #8]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0201 	orr.w	r2, r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f001 fb83 	bl	800a1d4 <UART_CheckIdleState>
 8008ace:	4603      	mov	r3, r0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aee:	2b20      	cmp	r3, #32
 8008af0:	d17b      	bne.n	8008bea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <HAL_UART_Transmit+0x26>
 8008af8:	88fb      	ldrh	r3, [r7, #6]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e074      	b.n	8008bec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2221      	movs	r2, #33	; 0x21
 8008b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b12:	f7f8 ffa5 	bl	8001a60 <HAL_GetTick>
 8008b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	88fa      	ldrh	r2, [r7, #6]
 8008b1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	88fa      	ldrh	r2, [r7, #6]
 8008b24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b30:	d108      	bne.n	8008b44 <HAL_UART_Transmit+0x6c>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	e003      	b.n	8008b4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b4c:	e030      	b.n	8008bb0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2200      	movs	r2, #0
 8008b56:	2180      	movs	r1, #128	; 0x80
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f001 fbe5 	bl	800a328 <UART_WaitOnFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d005      	beq.n	8008b70 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2220      	movs	r2, #32
 8008b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e03d      	b.n	8008bec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10b      	bne.n	8008b8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	3302      	adds	r3, #2
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	e007      	b.n	8008b9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	781a      	ldrb	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1c8      	bne.n	8008b4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2140      	movs	r1, #64	; 0x40
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f001 fbae 	bl	800a328 <UART_WaitOnFlagUntilTimeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d005      	beq.n	8008bde <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e006      	b.n	8008bec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e000      	b.n	8008bec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008bea:	2302      	movs	r3, #2
  }
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b0ba      	sub	sp, #232	; 0xe8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008c1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008c22:	4013      	ands	r3, r2
 8008c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d11b      	bne.n	8008c68 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c34:	f003 0320 	and.w	r3, r3, #32
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d015      	beq.n	8008c68 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c40:	f003 0320 	and.w	r3, r3, #32
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d105      	bne.n	8008c54 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d009      	beq.n	8008c68 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 8377 	beq.w	800934c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	4798      	blx	r3
      }
      return;
 8008c66:	e371      	b.n	800934c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 8123 	beq.w	8008eb8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c72:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008c76:	4b8d      	ldr	r3, [pc, #564]	; (8008eac <HAL_UART_IRQHandler+0x2b8>)
 8008c78:	4013      	ands	r3, r2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d106      	bne.n	8008c8c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008c82:	4b8b      	ldr	r3, [pc, #556]	; (8008eb0 <HAL_UART_IRQHandler+0x2bc>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 8116 	beq.w	8008eb8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d011      	beq.n	8008cbc <HAL_UART_IRQHandler+0xc8>
 8008c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb2:	f043 0201 	orr.w	r2, r3, #1
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d011      	beq.n	8008cec <HAL_UART_IRQHandler+0xf8>
 8008cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2202      	movs	r2, #2
 8008cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce2:	f043 0204 	orr.w	r2, r3, #4
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d011      	beq.n	8008d1c <HAL_UART_IRQHandler+0x128>
 8008cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00b      	beq.n	8008d1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2204      	movs	r2, #4
 8008d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d12:	f043 0202 	orr.w	r2, r3, #2
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d017      	beq.n	8008d58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d105      	bne.n	8008d40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008d38:	4b5c      	ldr	r3, [pc, #368]	; (8008eac <HAL_UART_IRQHandler+0x2b8>)
 8008d3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2208      	movs	r2, #8
 8008d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d4e:	f043 0208 	orr.w	r2, r3, #8
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d012      	beq.n	8008d8a <HAL_UART_IRQHandler+0x196>
 8008d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00c      	beq.n	8008d8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d80:	f043 0220 	orr.w	r2, r3, #32
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 82dd 	beq.w	8009350 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d013      	beq.n	8008dca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d105      	bne.n	8008dba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d007      	beq.n	8008dca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dde:	2b40      	cmp	r3, #64	; 0x40
 8008de0:	d005      	beq.n	8008dee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008de6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d054      	beq.n	8008e98 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f001 fbea 	bl	800a5c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d146      	bne.n	8008e90 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e10:	e853 3f00 	ldrex	r3, [r3]
 8008e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1d9      	bne.n	8008e02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d017      	beq.n	8008e88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e5e:	4a15      	ldr	r2, [pc, #84]	; (8008eb4 <HAL_UART_IRQHandler+0x2c0>)
 8008e60:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7f9 fff5 	bl	8002e58 <HAL_DMA_Abort_IT>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d019      	beq.n	8008ea8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008e82:	4610      	mov	r0, r2
 8008e84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e86:	e00f      	b.n	8008ea8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fa8b 	bl	80093a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8e:	e00b      	b.n	8008ea8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fa87 	bl	80093a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e96:	e007      	b.n	8008ea8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fa83 	bl	80093a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008ea6:	e253      	b.n	8009350 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea8:	bf00      	nop
    return;
 8008eaa:	e251      	b.n	8009350 <HAL_UART_IRQHandler+0x75c>
 8008eac:	10000001 	.word	0x10000001
 8008eb0:	04000120 	.word	0x04000120
 8008eb4:	0800a87b 	.word	0x0800a87b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	f040 81e7 	bne.w	8009290 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec6:	f003 0310 	and.w	r3, r3, #16
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 81e0 	beq.w	8009290 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 81d9 	beq.w	8009290 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2210      	movs	r2, #16
 8008ee4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef0:	2b40      	cmp	r3, #64	; 0x40
 8008ef2:	f040 8151 	bne.w	8009198 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a96      	ldr	r2, [pc, #600]	; (8009158 <HAL_UART_IRQHandler+0x564>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d068      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a93      	ldr	r2, [pc, #588]	; (800915c <HAL_UART_IRQHandler+0x568>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d061      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a91      	ldr	r2, [pc, #580]	; (8009160 <HAL_UART_IRQHandler+0x56c>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d05a      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a8e      	ldr	r2, [pc, #568]	; (8009164 <HAL_UART_IRQHandler+0x570>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d053      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a8c      	ldr	r2, [pc, #560]	; (8009168 <HAL_UART_IRQHandler+0x574>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d04c      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a89      	ldr	r2, [pc, #548]	; (800916c <HAL_UART_IRQHandler+0x578>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d045      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a87      	ldr	r2, [pc, #540]	; (8009170 <HAL_UART_IRQHandler+0x57c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d03e      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a84      	ldr	r2, [pc, #528]	; (8009174 <HAL_UART_IRQHandler+0x580>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d037      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a82      	ldr	r2, [pc, #520]	; (8009178 <HAL_UART_IRQHandler+0x584>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d030      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a7f      	ldr	r2, [pc, #508]	; (800917c <HAL_UART_IRQHandler+0x588>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d029      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a7d      	ldr	r2, [pc, #500]	; (8009180 <HAL_UART_IRQHandler+0x58c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d022      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a7a      	ldr	r2, [pc, #488]	; (8009184 <HAL_UART_IRQHandler+0x590>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d01b      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a78      	ldr	r2, [pc, #480]	; (8009188 <HAL_UART_IRQHandler+0x594>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d014      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a75      	ldr	r2, [pc, #468]	; (800918c <HAL_UART_IRQHandler+0x598>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d00d      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a73      	ldr	r2, [pc, #460]	; (8009190 <HAL_UART_IRQHandler+0x59c>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d006      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x3e2>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a70      	ldr	r2, [pc, #448]	; (8009194 <HAL_UART_IRQHandler+0x5a0>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d106      	bne.n	8008fe4 <HAL_UART_IRQHandler+0x3f0>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	e005      	b.n	8008ff0 <HAL_UART_IRQHandler+0x3fc>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 81ab 	beq.w	8009354 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009004:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009008:	429a      	cmp	r2, r3
 800900a:	f080 81a3 	bcs.w	8009354 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009014:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009024:	f000 8087 	beq.w	8009136 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800903c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009052:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009056:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800905e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009062:	e841 2300 	strex	r3, r2, [r1]
 8009066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800906a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1da      	bne.n	8009028 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009084:	f023 0301 	bic.w	r3, r3, #1
 8009088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3308      	adds	r3, #8
 8009092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009096:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800909a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800909e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e1      	bne.n	8009072 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3308      	adds	r3, #8
 80090ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80090d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80090d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e3      	bne.n	80090ae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009104:	f023 0310 	bic.w	r3, r3, #16
 8009108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	461a      	mov	r2, r3
 8009112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009116:	65bb      	str	r3, [r7, #88]	; 0x58
 8009118:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800911c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e4      	bne.n	80090f4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009130:	4618      	mov	r0, r3
 8009132:	f7f9 fb73 	bl	800281c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2202      	movs	r2, #2
 800913a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009148:	b29b      	uxth	r3, r3
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	b29b      	uxth	r3, r3
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7f7 fa59 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009156:	e0fd      	b.n	8009354 <HAL_UART_IRQHandler+0x760>
 8009158:	40020010 	.word	0x40020010
 800915c:	40020028 	.word	0x40020028
 8009160:	40020040 	.word	0x40020040
 8009164:	40020058 	.word	0x40020058
 8009168:	40020070 	.word	0x40020070
 800916c:	40020088 	.word	0x40020088
 8009170:	400200a0 	.word	0x400200a0
 8009174:	400200b8 	.word	0x400200b8
 8009178:	40020410 	.word	0x40020410
 800917c:	40020428 	.word	0x40020428
 8009180:	40020440 	.word	0x40020440
 8009184:	40020458 	.word	0x40020458
 8009188:	40020470 	.word	0x40020470
 800918c:	40020488 	.word	0x40020488
 8009190:	400204a0 	.word	0x400204a0
 8009194:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 80cf 	beq.w	8009358 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80091ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 80ca 	beq.w	8009358 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	461a      	mov	r2, r3
 80091e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091e6:	647b      	str	r3, [r7, #68]	; 0x44
 80091e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e4      	bne.n	80091c4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3308      	adds	r3, #8
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	623b      	str	r3, [r7, #32]
   return(result);
 800920a:	6a3a      	ldr	r2, [r7, #32]
 800920c:	4b55      	ldr	r3, [pc, #340]	; (8009364 <HAL_UART_IRQHandler+0x770>)
 800920e:	4013      	ands	r3, r2
 8009210:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3308      	adds	r3, #8
 800921a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800921e:	633a      	str	r2, [r7, #48]	; 0x30
 8009220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1e3      	bne.n	80091fa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2220      	movs	r2, #32
 8009236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	60fb      	str	r3, [r7, #12]
   return(result);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 0310 	bic.w	r3, r3, #16
 800925a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009268:	61fb      	str	r3, [r7, #28]
 800926a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	69b9      	ldr	r1, [r7, #24]
 800926e:	69fa      	ldr	r2, [r7, #28]
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	617b      	str	r3, [r7, #20]
   return(result);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e4      	bne.n	8009246 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7f7 f9bd 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800928e:	e063      	b.n	8009358 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00e      	beq.n	80092ba <HAL_UART_IRQHandler+0x6c6>
 800929c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d008      	beq.n	80092ba <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f001 fb22 	bl	800a8fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092b8:	e051      	b.n	800935e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80092ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d014      	beq.n	80092f0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80092c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d105      	bne.n	80092de <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80092d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d03a      	beq.n	800935c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
    }
    return;
 80092ee:	e035      	b.n	800935c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d009      	beq.n	8009310 <HAL_UART_IRQHandler+0x71c>
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	d003      	beq.n	8009310 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 facc 	bl	800a8a6 <UART_EndTransmit_IT>
    return;
 800930e:	e026      	b.n	800935e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d009      	beq.n	8009330 <HAL_UART_IRQHandler+0x73c>
 800931c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 fafb 	bl	800a924 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800932e:	e016      	b.n	800935e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d010      	beq.n	800935e <HAL_UART_IRQHandler+0x76a>
 800933c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009340:	2b00      	cmp	r3, #0
 8009342:	da0c      	bge.n	800935e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 fae3 	bl	800a910 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800934a:	e008      	b.n	800935e <HAL_UART_IRQHandler+0x76a>
      return;
 800934c:	bf00      	nop
 800934e:	e006      	b.n	800935e <HAL_UART_IRQHandler+0x76a>
    return;
 8009350:	bf00      	nop
 8009352:	e004      	b.n	800935e <HAL_UART_IRQHandler+0x76a>
      return;
 8009354:	bf00      	nop
 8009356:	e002      	b.n	800935e <HAL_UART_IRQHandler+0x76a>
      return;
 8009358:	bf00      	nop
 800935a:	e000      	b.n	800935e <HAL_UART_IRQHandler+0x76a>
    return;
 800935c:	bf00      	nop
  }
}
 800935e:	37e8      	adds	r7, #232	; 0xe8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	effffffe 	.word	0xeffffffe

08009368 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093bc:	b092      	sub	sp, #72	; 0x48
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	689a      	ldr	r2, [r3, #8]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	431a      	orrs	r2, r3
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	431a      	orrs	r2, r3
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	4313      	orrs	r3, r2
 80093de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	4bbe      	ldr	r3, [pc, #760]	; (80096e0 <UART_SetConfig+0x328>)
 80093e8:	4013      	ands	r3, r2
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	6812      	ldr	r2, [r2, #0]
 80093ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093f0:	430b      	orrs	r3, r1
 80093f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4ab3      	ldr	r2, [pc, #716]	; (80096e4 <UART_SetConfig+0x32c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d004      	beq.n	8009424 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	6a1b      	ldr	r3, [r3, #32]
 800941e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009420:	4313      	orrs	r3, r2
 8009422:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	4baf      	ldr	r3, [pc, #700]	; (80096e8 <UART_SetConfig+0x330>)
 800942c:	4013      	ands	r3, r2
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	6812      	ldr	r2, [r2, #0]
 8009432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009434:	430b      	orrs	r3, r1
 8009436:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943e:	f023 010f 	bic.w	r1, r3, #15
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	430a      	orrs	r2, r1
 800944c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4aa6      	ldr	r2, [pc, #664]	; (80096ec <UART_SetConfig+0x334>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d177      	bne.n	8009548 <UART_SetConfig+0x190>
 8009458:	4ba5      	ldr	r3, [pc, #660]	; (80096f0 <UART_SetConfig+0x338>)
 800945a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800945c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009460:	2b28      	cmp	r3, #40	; 0x28
 8009462:	d86d      	bhi.n	8009540 <UART_SetConfig+0x188>
 8009464:	a201      	add	r2, pc, #4	; (adr r2, 800946c <UART_SetConfig+0xb4>)
 8009466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946a:	bf00      	nop
 800946c:	08009511 	.word	0x08009511
 8009470:	08009541 	.word	0x08009541
 8009474:	08009541 	.word	0x08009541
 8009478:	08009541 	.word	0x08009541
 800947c:	08009541 	.word	0x08009541
 8009480:	08009541 	.word	0x08009541
 8009484:	08009541 	.word	0x08009541
 8009488:	08009541 	.word	0x08009541
 800948c:	08009519 	.word	0x08009519
 8009490:	08009541 	.word	0x08009541
 8009494:	08009541 	.word	0x08009541
 8009498:	08009541 	.word	0x08009541
 800949c:	08009541 	.word	0x08009541
 80094a0:	08009541 	.word	0x08009541
 80094a4:	08009541 	.word	0x08009541
 80094a8:	08009541 	.word	0x08009541
 80094ac:	08009521 	.word	0x08009521
 80094b0:	08009541 	.word	0x08009541
 80094b4:	08009541 	.word	0x08009541
 80094b8:	08009541 	.word	0x08009541
 80094bc:	08009541 	.word	0x08009541
 80094c0:	08009541 	.word	0x08009541
 80094c4:	08009541 	.word	0x08009541
 80094c8:	08009541 	.word	0x08009541
 80094cc:	08009529 	.word	0x08009529
 80094d0:	08009541 	.word	0x08009541
 80094d4:	08009541 	.word	0x08009541
 80094d8:	08009541 	.word	0x08009541
 80094dc:	08009541 	.word	0x08009541
 80094e0:	08009541 	.word	0x08009541
 80094e4:	08009541 	.word	0x08009541
 80094e8:	08009541 	.word	0x08009541
 80094ec:	08009531 	.word	0x08009531
 80094f0:	08009541 	.word	0x08009541
 80094f4:	08009541 	.word	0x08009541
 80094f8:	08009541 	.word	0x08009541
 80094fc:	08009541 	.word	0x08009541
 8009500:	08009541 	.word	0x08009541
 8009504:	08009541 	.word	0x08009541
 8009508:	08009541 	.word	0x08009541
 800950c:	08009539 	.word	0x08009539
 8009510:	2301      	movs	r3, #1
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009516:	e326      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009518:	2304      	movs	r3, #4
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951e:	e322      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009520:	2308      	movs	r3, #8
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009526:	e31e      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009528:	2310      	movs	r3, #16
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800952e:	e31a      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009530:	2320      	movs	r3, #32
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009536:	e316      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009538:	2340      	movs	r3, #64	; 0x40
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800953e:	e312      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009540:	2380      	movs	r3, #128	; 0x80
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009546:	e30e      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a69      	ldr	r2, [pc, #420]	; (80096f4 <UART_SetConfig+0x33c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d130      	bne.n	80095b4 <UART_SetConfig+0x1fc>
 8009552:	4b67      	ldr	r3, [pc, #412]	; (80096f0 <UART_SetConfig+0x338>)
 8009554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009556:	f003 0307 	and.w	r3, r3, #7
 800955a:	2b05      	cmp	r3, #5
 800955c:	d826      	bhi.n	80095ac <UART_SetConfig+0x1f4>
 800955e:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <UART_SetConfig+0x1ac>)
 8009560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009564:	0800957d 	.word	0x0800957d
 8009568:	08009585 	.word	0x08009585
 800956c:	0800958d 	.word	0x0800958d
 8009570:	08009595 	.word	0x08009595
 8009574:	0800959d 	.word	0x0800959d
 8009578:	080095a5 	.word	0x080095a5
 800957c:	2300      	movs	r3, #0
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009582:	e2f0      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009584:	2304      	movs	r3, #4
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958a:	e2ec      	b.n	8009b66 <UART_SetConfig+0x7ae>
 800958c:	2308      	movs	r3, #8
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009592:	e2e8      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009594:	2310      	movs	r3, #16
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800959a:	e2e4      	b.n	8009b66 <UART_SetConfig+0x7ae>
 800959c:	2320      	movs	r3, #32
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095a2:	e2e0      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80095a4:	2340      	movs	r3, #64	; 0x40
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095aa:	e2dc      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80095ac:	2380      	movs	r3, #128	; 0x80
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095b2:	e2d8      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a4f      	ldr	r2, [pc, #316]	; (80096f8 <UART_SetConfig+0x340>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d130      	bne.n	8009620 <UART_SetConfig+0x268>
 80095be:	4b4c      	ldr	r3, [pc, #304]	; (80096f0 <UART_SetConfig+0x338>)
 80095c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	2b05      	cmp	r3, #5
 80095c8:	d826      	bhi.n	8009618 <UART_SetConfig+0x260>
 80095ca:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <UART_SetConfig+0x218>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	080095e9 	.word	0x080095e9
 80095d4:	080095f1 	.word	0x080095f1
 80095d8:	080095f9 	.word	0x080095f9
 80095dc:	08009601 	.word	0x08009601
 80095e0:	08009609 	.word	0x08009609
 80095e4:	08009611 	.word	0x08009611
 80095e8:	2300      	movs	r3, #0
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ee:	e2ba      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80095f0:	2304      	movs	r3, #4
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f6:	e2b6      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80095f8:	2308      	movs	r3, #8
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fe:	e2b2      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009600:	2310      	movs	r3, #16
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009606:	e2ae      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009608:	2320      	movs	r3, #32
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800960e:	e2aa      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009610:	2340      	movs	r3, #64	; 0x40
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009616:	e2a6      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009618:	2380      	movs	r3, #128	; 0x80
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800961e:	e2a2      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a35      	ldr	r2, [pc, #212]	; (80096fc <UART_SetConfig+0x344>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d130      	bne.n	800968c <UART_SetConfig+0x2d4>
 800962a:	4b31      	ldr	r3, [pc, #196]	; (80096f0 <UART_SetConfig+0x338>)
 800962c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800962e:	f003 0307 	and.w	r3, r3, #7
 8009632:	2b05      	cmp	r3, #5
 8009634:	d826      	bhi.n	8009684 <UART_SetConfig+0x2cc>
 8009636:	a201      	add	r2, pc, #4	; (adr r2, 800963c <UART_SetConfig+0x284>)
 8009638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963c:	08009655 	.word	0x08009655
 8009640:	0800965d 	.word	0x0800965d
 8009644:	08009665 	.word	0x08009665
 8009648:	0800966d 	.word	0x0800966d
 800964c:	08009675 	.word	0x08009675
 8009650:	0800967d 	.word	0x0800967d
 8009654:	2300      	movs	r3, #0
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965a:	e284      	b.n	8009b66 <UART_SetConfig+0x7ae>
 800965c:	2304      	movs	r3, #4
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009662:	e280      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009664:	2308      	movs	r3, #8
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966a:	e27c      	b.n	8009b66 <UART_SetConfig+0x7ae>
 800966c:	2310      	movs	r3, #16
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009672:	e278      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009674:	2320      	movs	r3, #32
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967a:	e274      	b.n	8009b66 <UART_SetConfig+0x7ae>
 800967c:	2340      	movs	r3, #64	; 0x40
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009682:	e270      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009684:	2380      	movs	r3, #128	; 0x80
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968a:	e26c      	b.n	8009b66 <UART_SetConfig+0x7ae>
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a1b      	ldr	r2, [pc, #108]	; (8009700 <UART_SetConfig+0x348>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d142      	bne.n	800971c <UART_SetConfig+0x364>
 8009696:	4b16      	ldr	r3, [pc, #88]	; (80096f0 <UART_SetConfig+0x338>)
 8009698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	2b05      	cmp	r3, #5
 80096a0:	d838      	bhi.n	8009714 <UART_SetConfig+0x35c>
 80096a2:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <UART_SetConfig+0x2f0>)
 80096a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a8:	080096c1 	.word	0x080096c1
 80096ac:	080096c9 	.word	0x080096c9
 80096b0:	080096d1 	.word	0x080096d1
 80096b4:	080096d9 	.word	0x080096d9
 80096b8:	08009705 	.word	0x08009705
 80096bc:	0800970d 	.word	0x0800970d
 80096c0:	2300      	movs	r3, #0
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c6:	e24e      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80096c8:	2304      	movs	r3, #4
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ce:	e24a      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80096d0:	2308      	movs	r3, #8
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d6:	e246      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80096d8:	2310      	movs	r3, #16
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096de:	e242      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80096e0:	cfff69f3 	.word	0xcfff69f3
 80096e4:	58000c00 	.word	0x58000c00
 80096e8:	11fff4ff 	.word	0x11fff4ff
 80096ec:	40011000 	.word	0x40011000
 80096f0:	58024400 	.word	0x58024400
 80096f4:	40004400 	.word	0x40004400
 80096f8:	40004800 	.word	0x40004800
 80096fc:	40004c00 	.word	0x40004c00
 8009700:	40005000 	.word	0x40005000
 8009704:	2320      	movs	r3, #32
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970a:	e22c      	b.n	8009b66 <UART_SetConfig+0x7ae>
 800970c:	2340      	movs	r3, #64	; 0x40
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009712:	e228      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009714:	2380      	movs	r3, #128	; 0x80
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971a:	e224      	b.n	8009b66 <UART_SetConfig+0x7ae>
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4ab1      	ldr	r2, [pc, #708]	; (80099e8 <UART_SetConfig+0x630>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d176      	bne.n	8009814 <UART_SetConfig+0x45c>
 8009726:	4bb1      	ldr	r3, [pc, #708]	; (80099ec <UART_SetConfig+0x634>)
 8009728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800972e:	2b28      	cmp	r3, #40	; 0x28
 8009730:	d86c      	bhi.n	800980c <UART_SetConfig+0x454>
 8009732:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <UART_SetConfig+0x380>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	080097dd 	.word	0x080097dd
 800973c:	0800980d 	.word	0x0800980d
 8009740:	0800980d 	.word	0x0800980d
 8009744:	0800980d 	.word	0x0800980d
 8009748:	0800980d 	.word	0x0800980d
 800974c:	0800980d 	.word	0x0800980d
 8009750:	0800980d 	.word	0x0800980d
 8009754:	0800980d 	.word	0x0800980d
 8009758:	080097e5 	.word	0x080097e5
 800975c:	0800980d 	.word	0x0800980d
 8009760:	0800980d 	.word	0x0800980d
 8009764:	0800980d 	.word	0x0800980d
 8009768:	0800980d 	.word	0x0800980d
 800976c:	0800980d 	.word	0x0800980d
 8009770:	0800980d 	.word	0x0800980d
 8009774:	0800980d 	.word	0x0800980d
 8009778:	080097ed 	.word	0x080097ed
 800977c:	0800980d 	.word	0x0800980d
 8009780:	0800980d 	.word	0x0800980d
 8009784:	0800980d 	.word	0x0800980d
 8009788:	0800980d 	.word	0x0800980d
 800978c:	0800980d 	.word	0x0800980d
 8009790:	0800980d 	.word	0x0800980d
 8009794:	0800980d 	.word	0x0800980d
 8009798:	080097f5 	.word	0x080097f5
 800979c:	0800980d 	.word	0x0800980d
 80097a0:	0800980d 	.word	0x0800980d
 80097a4:	0800980d 	.word	0x0800980d
 80097a8:	0800980d 	.word	0x0800980d
 80097ac:	0800980d 	.word	0x0800980d
 80097b0:	0800980d 	.word	0x0800980d
 80097b4:	0800980d 	.word	0x0800980d
 80097b8:	080097fd 	.word	0x080097fd
 80097bc:	0800980d 	.word	0x0800980d
 80097c0:	0800980d 	.word	0x0800980d
 80097c4:	0800980d 	.word	0x0800980d
 80097c8:	0800980d 	.word	0x0800980d
 80097cc:	0800980d 	.word	0x0800980d
 80097d0:	0800980d 	.word	0x0800980d
 80097d4:	0800980d 	.word	0x0800980d
 80097d8:	08009805 	.word	0x08009805
 80097dc:	2301      	movs	r3, #1
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e2:	e1c0      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80097e4:	2304      	movs	r3, #4
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ea:	e1bc      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80097ec:	2308      	movs	r3, #8
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e1b8      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80097f4:	2310      	movs	r3, #16
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e1b4      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80097fc:	2320      	movs	r3, #32
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009802:	e1b0      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009804:	2340      	movs	r3, #64	; 0x40
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e1ac      	b.n	8009b66 <UART_SetConfig+0x7ae>
 800980c:	2380      	movs	r3, #128	; 0x80
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009812:	e1a8      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a75      	ldr	r2, [pc, #468]	; (80099f0 <UART_SetConfig+0x638>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d130      	bne.n	8009880 <UART_SetConfig+0x4c8>
 800981e:	4b73      	ldr	r3, [pc, #460]	; (80099ec <UART_SetConfig+0x634>)
 8009820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009822:	f003 0307 	and.w	r3, r3, #7
 8009826:	2b05      	cmp	r3, #5
 8009828:	d826      	bhi.n	8009878 <UART_SetConfig+0x4c0>
 800982a:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <UART_SetConfig+0x478>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	08009849 	.word	0x08009849
 8009834:	08009851 	.word	0x08009851
 8009838:	08009859 	.word	0x08009859
 800983c:	08009861 	.word	0x08009861
 8009840:	08009869 	.word	0x08009869
 8009844:	08009871 	.word	0x08009871
 8009848:	2300      	movs	r3, #0
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984e:	e18a      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009850:	2304      	movs	r3, #4
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009856:	e186      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009858:	2308      	movs	r3, #8
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e182      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009860:	2310      	movs	r3, #16
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009866:	e17e      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009868:	2320      	movs	r3, #32
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986e:	e17a      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009870:	2340      	movs	r3, #64	; 0x40
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009876:	e176      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009878:	2380      	movs	r3, #128	; 0x80
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800987e:	e172      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a5b      	ldr	r2, [pc, #364]	; (80099f4 <UART_SetConfig+0x63c>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d130      	bne.n	80098ec <UART_SetConfig+0x534>
 800988a:	4b58      	ldr	r3, [pc, #352]	; (80099ec <UART_SetConfig+0x634>)
 800988c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	2b05      	cmp	r3, #5
 8009894:	d826      	bhi.n	80098e4 <UART_SetConfig+0x52c>
 8009896:	a201      	add	r2, pc, #4	; (adr r2, 800989c <UART_SetConfig+0x4e4>)
 8009898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989c:	080098b5 	.word	0x080098b5
 80098a0:	080098bd 	.word	0x080098bd
 80098a4:	080098c5 	.word	0x080098c5
 80098a8:	080098cd 	.word	0x080098cd
 80098ac:	080098d5 	.word	0x080098d5
 80098b0:	080098dd 	.word	0x080098dd
 80098b4:	2300      	movs	r3, #0
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ba:	e154      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80098bc:	2304      	movs	r3, #4
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098c2:	e150      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80098c4:	2308      	movs	r3, #8
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ca:	e14c      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80098cc:	2310      	movs	r3, #16
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098d2:	e148      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80098d4:	2320      	movs	r3, #32
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098da:	e144      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80098dc:	2340      	movs	r3, #64	; 0x40
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098e2:	e140      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80098e4:	2380      	movs	r3, #128	; 0x80
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ea:	e13c      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a41      	ldr	r2, [pc, #260]	; (80099f8 <UART_SetConfig+0x640>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	f040 8082 	bne.w	80099fc <UART_SetConfig+0x644>
 80098f8:	4b3c      	ldr	r3, [pc, #240]	; (80099ec <UART_SetConfig+0x634>)
 80098fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009900:	2b28      	cmp	r3, #40	; 0x28
 8009902:	d86d      	bhi.n	80099e0 <UART_SetConfig+0x628>
 8009904:	a201      	add	r2, pc, #4	; (adr r2, 800990c <UART_SetConfig+0x554>)
 8009906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990a:	bf00      	nop
 800990c:	080099b1 	.word	0x080099b1
 8009910:	080099e1 	.word	0x080099e1
 8009914:	080099e1 	.word	0x080099e1
 8009918:	080099e1 	.word	0x080099e1
 800991c:	080099e1 	.word	0x080099e1
 8009920:	080099e1 	.word	0x080099e1
 8009924:	080099e1 	.word	0x080099e1
 8009928:	080099e1 	.word	0x080099e1
 800992c:	080099b9 	.word	0x080099b9
 8009930:	080099e1 	.word	0x080099e1
 8009934:	080099e1 	.word	0x080099e1
 8009938:	080099e1 	.word	0x080099e1
 800993c:	080099e1 	.word	0x080099e1
 8009940:	080099e1 	.word	0x080099e1
 8009944:	080099e1 	.word	0x080099e1
 8009948:	080099e1 	.word	0x080099e1
 800994c:	080099c1 	.word	0x080099c1
 8009950:	080099e1 	.word	0x080099e1
 8009954:	080099e1 	.word	0x080099e1
 8009958:	080099e1 	.word	0x080099e1
 800995c:	080099e1 	.word	0x080099e1
 8009960:	080099e1 	.word	0x080099e1
 8009964:	080099e1 	.word	0x080099e1
 8009968:	080099e1 	.word	0x080099e1
 800996c:	080099c9 	.word	0x080099c9
 8009970:	080099e1 	.word	0x080099e1
 8009974:	080099e1 	.word	0x080099e1
 8009978:	080099e1 	.word	0x080099e1
 800997c:	080099e1 	.word	0x080099e1
 8009980:	080099e1 	.word	0x080099e1
 8009984:	080099e1 	.word	0x080099e1
 8009988:	080099e1 	.word	0x080099e1
 800998c:	080099d1 	.word	0x080099d1
 8009990:	080099e1 	.word	0x080099e1
 8009994:	080099e1 	.word	0x080099e1
 8009998:	080099e1 	.word	0x080099e1
 800999c:	080099e1 	.word	0x080099e1
 80099a0:	080099e1 	.word	0x080099e1
 80099a4:	080099e1 	.word	0x080099e1
 80099a8:	080099e1 	.word	0x080099e1
 80099ac:	080099d9 	.word	0x080099d9
 80099b0:	2301      	movs	r3, #1
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b6:	e0d6      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80099b8:	2304      	movs	r3, #4
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099be:	e0d2      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80099c0:	2308      	movs	r3, #8
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e0ce      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80099c8:	2310      	movs	r3, #16
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ce:	e0ca      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80099d0:	2320      	movs	r3, #32
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d6:	e0c6      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80099d8:	2340      	movs	r3, #64	; 0x40
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099de:	e0c2      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80099e0:	2380      	movs	r3, #128	; 0x80
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e6:	e0be      	b.n	8009b66 <UART_SetConfig+0x7ae>
 80099e8:	40011400 	.word	0x40011400
 80099ec:	58024400 	.word	0x58024400
 80099f0:	40007800 	.word	0x40007800
 80099f4:	40007c00 	.word	0x40007c00
 80099f8:	40011800 	.word	0x40011800
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4aad      	ldr	r2, [pc, #692]	; (8009cb8 <UART_SetConfig+0x900>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d176      	bne.n	8009af4 <UART_SetConfig+0x73c>
 8009a06:	4bad      	ldr	r3, [pc, #692]	; (8009cbc <UART_SetConfig+0x904>)
 8009a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a0e:	2b28      	cmp	r3, #40	; 0x28
 8009a10:	d86c      	bhi.n	8009aec <UART_SetConfig+0x734>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <UART_SetConfig+0x660>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009abd 	.word	0x08009abd
 8009a1c:	08009aed 	.word	0x08009aed
 8009a20:	08009aed 	.word	0x08009aed
 8009a24:	08009aed 	.word	0x08009aed
 8009a28:	08009aed 	.word	0x08009aed
 8009a2c:	08009aed 	.word	0x08009aed
 8009a30:	08009aed 	.word	0x08009aed
 8009a34:	08009aed 	.word	0x08009aed
 8009a38:	08009ac5 	.word	0x08009ac5
 8009a3c:	08009aed 	.word	0x08009aed
 8009a40:	08009aed 	.word	0x08009aed
 8009a44:	08009aed 	.word	0x08009aed
 8009a48:	08009aed 	.word	0x08009aed
 8009a4c:	08009aed 	.word	0x08009aed
 8009a50:	08009aed 	.word	0x08009aed
 8009a54:	08009aed 	.word	0x08009aed
 8009a58:	08009acd 	.word	0x08009acd
 8009a5c:	08009aed 	.word	0x08009aed
 8009a60:	08009aed 	.word	0x08009aed
 8009a64:	08009aed 	.word	0x08009aed
 8009a68:	08009aed 	.word	0x08009aed
 8009a6c:	08009aed 	.word	0x08009aed
 8009a70:	08009aed 	.word	0x08009aed
 8009a74:	08009aed 	.word	0x08009aed
 8009a78:	08009ad5 	.word	0x08009ad5
 8009a7c:	08009aed 	.word	0x08009aed
 8009a80:	08009aed 	.word	0x08009aed
 8009a84:	08009aed 	.word	0x08009aed
 8009a88:	08009aed 	.word	0x08009aed
 8009a8c:	08009aed 	.word	0x08009aed
 8009a90:	08009aed 	.word	0x08009aed
 8009a94:	08009aed 	.word	0x08009aed
 8009a98:	08009add 	.word	0x08009add
 8009a9c:	08009aed 	.word	0x08009aed
 8009aa0:	08009aed 	.word	0x08009aed
 8009aa4:	08009aed 	.word	0x08009aed
 8009aa8:	08009aed 	.word	0x08009aed
 8009aac:	08009aed 	.word	0x08009aed
 8009ab0:	08009aed 	.word	0x08009aed
 8009ab4:	08009aed 	.word	0x08009aed
 8009ab8:	08009ae5 	.word	0x08009ae5
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac2:	e050      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aca:	e04c      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009acc:	2308      	movs	r3, #8
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e048      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009ad4:	2310      	movs	r3, #16
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e044      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009adc:	2320      	movs	r3, #32
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e040      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009ae4:	2340      	movs	r3, #64	; 0x40
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e03c      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009aec:	2380      	movs	r3, #128	; 0x80
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e038      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a71      	ldr	r2, [pc, #452]	; (8009cc0 <UART_SetConfig+0x908>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d130      	bne.n	8009b60 <UART_SetConfig+0x7a8>
 8009afe:	4b6f      	ldr	r3, [pc, #444]	; (8009cbc <UART_SetConfig+0x904>)
 8009b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	d826      	bhi.n	8009b58 <UART_SetConfig+0x7a0>
 8009b0a:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <UART_SetConfig+0x758>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009b29 	.word	0x08009b29
 8009b14:	08009b31 	.word	0x08009b31
 8009b18:	08009b39 	.word	0x08009b39
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b49 	.word	0x08009b49
 8009b24:	08009b51 	.word	0x08009b51
 8009b28:	2302      	movs	r3, #2
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2e:	e01a      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009b30:	2304      	movs	r3, #4
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b36:	e016      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009b38:	2308      	movs	r3, #8
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3e:	e012      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009b40:	2310      	movs	r3, #16
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b46:	e00e      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009b48:	2320      	movs	r3, #32
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4e:	e00a      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009b50:	2340      	movs	r3, #64	; 0x40
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b56:	e006      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009b58:	2380      	movs	r3, #128	; 0x80
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e002      	b.n	8009b66 <UART_SetConfig+0x7ae>
 8009b60:	2380      	movs	r3, #128	; 0x80
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a55      	ldr	r2, [pc, #340]	; (8009cc0 <UART_SetConfig+0x908>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	f040 80f8 	bne.w	8009d62 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	dc46      	bgt.n	8009c08 <UART_SetConfig+0x850>
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	db75      	blt.n	8009c6a <UART_SetConfig+0x8b2>
 8009b7e:	3b02      	subs	r3, #2
 8009b80:	2b1e      	cmp	r3, #30
 8009b82:	d872      	bhi.n	8009c6a <UART_SetConfig+0x8b2>
 8009b84:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <UART_SetConfig+0x7d4>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009c0f 	.word	0x08009c0f
 8009b90:	08009c6b 	.word	0x08009c6b
 8009b94:	08009c17 	.word	0x08009c17
 8009b98:	08009c6b 	.word	0x08009c6b
 8009b9c:	08009c6b 	.word	0x08009c6b
 8009ba0:	08009c6b 	.word	0x08009c6b
 8009ba4:	08009c27 	.word	0x08009c27
 8009ba8:	08009c6b 	.word	0x08009c6b
 8009bac:	08009c6b 	.word	0x08009c6b
 8009bb0:	08009c6b 	.word	0x08009c6b
 8009bb4:	08009c6b 	.word	0x08009c6b
 8009bb8:	08009c6b 	.word	0x08009c6b
 8009bbc:	08009c6b 	.word	0x08009c6b
 8009bc0:	08009c6b 	.word	0x08009c6b
 8009bc4:	08009c37 	.word	0x08009c37
 8009bc8:	08009c6b 	.word	0x08009c6b
 8009bcc:	08009c6b 	.word	0x08009c6b
 8009bd0:	08009c6b 	.word	0x08009c6b
 8009bd4:	08009c6b 	.word	0x08009c6b
 8009bd8:	08009c6b 	.word	0x08009c6b
 8009bdc:	08009c6b 	.word	0x08009c6b
 8009be0:	08009c6b 	.word	0x08009c6b
 8009be4:	08009c6b 	.word	0x08009c6b
 8009be8:	08009c6b 	.word	0x08009c6b
 8009bec:	08009c6b 	.word	0x08009c6b
 8009bf0:	08009c6b 	.word	0x08009c6b
 8009bf4:	08009c6b 	.word	0x08009c6b
 8009bf8:	08009c6b 	.word	0x08009c6b
 8009bfc:	08009c6b 	.word	0x08009c6b
 8009c00:	08009c6b 	.word	0x08009c6b
 8009c04:	08009c5d 	.word	0x08009c5d
 8009c08:	2b40      	cmp	r3, #64	; 0x40
 8009c0a:	d02a      	beq.n	8009c62 <UART_SetConfig+0x8aa>
 8009c0c:	e02d      	b.n	8009c6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009c0e:	f7fd f995 	bl	8006f3c <HAL_RCCEx_GetD3PCLK1Freq>
 8009c12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009c14:	e02f      	b.n	8009c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fd f9a4 	bl	8006f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c24:	e027      	b.n	8009c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c26:	f107 0318 	add.w	r3, r7, #24
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fd faf0 	bl	8007210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c34:	e01f      	b.n	8009c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c36:	4b21      	ldr	r3, [pc, #132]	; (8009cbc <UART_SetConfig+0x904>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f003 0320 	and.w	r3, r3, #32
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d009      	beq.n	8009c56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c42:	4b1e      	ldr	r3, [pc, #120]	; (8009cbc <UART_SetConfig+0x904>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	08db      	lsrs	r3, r3, #3
 8009c48:	f003 0303 	and.w	r3, r3, #3
 8009c4c:	4a1d      	ldr	r2, [pc, #116]	; (8009cc4 <UART_SetConfig+0x90c>)
 8009c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c54:	e00f      	b.n	8009c76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c56:	4b1b      	ldr	r3, [pc, #108]	; (8009cc4 <UART_SetConfig+0x90c>)
 8009c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c5a:	e00c      	b.n	8009c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c5c:	4b1a      	ldr	r3, [pc, #104]	; (8009cc8 <UART_SetConfig+0x910>)
 8009c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c60:	e009      	b.n	8009c76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c68:	e005      	b.n	8009c76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 81ee 	beq.w	800a05a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	4a12      	ldr	r2, [pc, #72]	; (8009ccc <UART_SetConfig+0x914>)
 8009c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c90:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	4613      	mov	r3, r2
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	4413      	add	r3, r2
 8009c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d305      	bcc.n	8009cae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d910      	bls.n	8009cd0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009cb4:	e1d1      	b.n	800a05a <UART_SetConfig+0xca2>
 8009cb6:	bf00      	nop
 8009cb8:	40011c00 	.word	0x40011c00
 8009cbc:	58024400 	.word	0x58024400
 8009cc0:	58000c00 	.word	0x58000c00
 8009cc4:	03d09000 	.word	0x03d09000
 8009cc8:	003d0900 	.word	0x003d0900
 8009ccc:	0800ac8c 	.word	0x0800ac8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	60bb      	str	r3, [r7, #8]
 8009cd6:	60fa      	str	r2, [r7, #12]
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cdc:	4ac0      	ldr	r2, [pc, #768]	; (8009fe0 <UART_SetConfig+0xc28>)
 8009cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	607a      	str	r2, [r7, #4]
 8009cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009cf2:	f7f6 fb0b 	bl	800030c <__aeabi_uldivmod>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	f04f 0200 	mov.w	r2, #0
 8009d02:	f04f 0300 	mov.w	r3, #0
 8009d06:	020b      	lsls	r3, r1, #8
 8009d08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d0c:	0202      	lsls	r2, r0, #8
 8009d0e:	6979      	ldr	r1, [r7, #20]
 8009d10:	6849      	ldr	r1, [r1, #4]
 8009d12:	0849      	lsrs	r1, r1, #1
 8009d14:	2000      	movs	r0, #0
 8009d16:	460c      	mov	r4, r1
 8009d18:	4605      	mov	r5, r0
 8009d1a:	eb12 0804 	adds.w	r8, r2, r4
 8009d1e:	eb43 0905 	adc.w	r9, r3, r5
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	469a      	mov	sl, r3
 8009d2a:	4693      	mov	fp, r2
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	465b      	mov	r3, fp
 8009d30:	4640      	mov	r0, r8
 8009d32:	4649      	mov	r1, r9
 8009d34:	f7f6 faea 	bl	800030c <__aeabi_uldivmod>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d46:	d308      	bcc.n	8009d5a <UART_SetConfig+0x9a2>
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d4e:	d204      	bcs.n	8009d5a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d56:	60da      	str	r2, [r3, #12]
 8009d58:	e17f      	b.n	800a05a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009d60:	e17b      	b.n	800a05a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d6a:	f040 80bd 	bne.w	8009ee8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009d6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d72:	2b20      	cmp	r3, #32
 8009d74:	dc48      	bgt.n	8009e08 <UART_SetConfig+0xa50>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	db7b      	blt.n	8009e72 <UART_SetConfig+0xaba>
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	d879      	bhi.n	8009e72 <UART_SetConfig+0xaba>
 8009d7e:	a201      	add	r2, pc, #4	; (adr r2, 8009d84 <UART_SetConfig+0x9cc>)
 8009d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d84:	08009e0f 	.word	0x08009e0f
 8009d88:	08009e17 	.word	0x08009e17
 8009d8c:	08009e73 	.word	0x08009e73
 8009d90:	08009e73 	.word	0x08009e73
 8009d94:	08009e1f 	.word	0x08009e1f
 8009d98:	08009e73 	.word	0x08009e73
 8009d9c:	08009e73 	.word	0x08009e73
 8009da0:	08009e73 	.word	0x08009e73
 8009da4:	08009e2f 	.word	0x08009e2f
 8009da8:	08009e73 	.word	0x08009e73
 8009dac:	08009e73 	.word	0x08009e73
 8009db0:	08009e73 	.word	0x08009e73
 8009db4:	08009e73 	.word	0x08009e73
 8009db8:	08009e73 	.word	0x08009e73
 8009dbc:	08009e73 	.word	0x08009e73
 8009dc0:	08009e73 	.word	0x08009e73
 8009dc4:	08009e3f 	.word	0x08009e3f
 8009dc8:	08009e73 	.word	0x08009e73
 8009dcc:	08009e73 	.word	0x08009e73
 8009dd0:	08009e73 	.word	0x08009e73
 8009dd4:	08009e73 	.word	0x08009e73
 8009dd8:	08009e73 	.word	0x08009e73
 8009ddc:	08009e73 	.word	0x08009e73
 8009de0:	08009e73 	.word	0x08009e73
 8009de4:	08009e73 	.word	0x08009e73
 8009de8:	08009e73 	.word	0x08009e73
 8009dec:	08009e73 	.word	0x08009e73
 8009df0:	08009e73 	.word	0x08009e73
 8009df4:	08009e73 	.word	0x08009e73
 8009df8:	08009e73 	.word	0x08009e73
 8009dfc:	08009e73 	.word	0x08009e73
 8009e00:	08009e73 	.word	0x08009e73
 8009e04:	08009e65 	.word	0x08009e65
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	d02e      	beq.n	8009e6a <UART_SetConfig+0xab2>
 8009e0c:	e031      	b.n	8009e72 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e0e:	f7fb fec9 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 8009e12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009e14:	e033      	b.n	8009e7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e16:	f7fb fedb 	bl	8005bd0 <HAL_RCC_GetPCLK2Freq>
 8009e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009e1c:	e02f      	b.n	8009e7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fd f8a0 	bl	8006f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e2c:	e027      	b.n	8009e7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e2e:	f107 0318 	add.w	r3, r7, #24
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fd f9ec 	bl	8007210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e3c:	e01f      	b.n	8009e7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e3e:	4b69      	ldr	r3, [pc, #420]	; (8009fe4 <UART_SetConfig+0xc2c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d009      	beq.n	8009e5e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e4a:	4b66      	ldr	r3, [pc, #408]	; (8009fe4 <UART_SetConfig+0xc2c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	08db      	lsrs	r3, r3, #3
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	4a64      	ldr	r2, [pc, #400]	; (8009fe8 <UART_SetConfig+0xc30>)
 8009e56:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e5c:	e00f      	b.n	8009e7e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009e5e:	4b62      	ldr	r3, [pc, #392]	; (8009fe8 <UART_SetConfig+0xc30>)
 8009e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e62:	e00c      	b.n	8009e7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e64:	4b61      	ldr	r3, [pc, #388]	; (8009fec <UART_SetConfig+0xc34>)
 8009e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e68:	e009      	b.n	8009e7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e70:	e005      	b.n	8009e7e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 80ea 	beq.w	800a05a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	4a55      	ldr	r2, [pc, #340]	; (8009fe0 <UART_SetConfig+0xc28>)
 8009e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e90:	461a      	mov	r2, r3
 8009e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e98:	005a      	lsls	r2, r3, #1
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	085b      	lsrs	r3, r3, #1
 8009ea0:	441a      	add	r2, r3
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eaa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	2b0f      	cmp	r3, #15
 8009eb0:	d916      	bls.n	8009ee0 <UART_SetConfig+0xb28>
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eb8:	d212      	bcs.n	8009ee0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	f023 030f 	bic.w	r3, r3, #15
 8009ec2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009edc:	60da      	str	r2, [r3, #12]
 8009ede:	e0bc      	b.n	800a05a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ee6:	e0b8      	b.n	800a05a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ee8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009eec:	2b20      	cmp	r3, #32
 8009eee:	dc4b      	bgt.n	8009f88 <UART_SetConfig+0xbd0>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f2c0 8087 	blt.w	800a004 <UART_SetConfig+0xc4c>
 8009ef6:	2b20      	cmp	r3, #32
 8009ef8:	f200 8084 	bhi.w	800a004 <UART_SetConfig+0xc4c>
 8009efc:	a201      	add	r2, pc, #4	; (adr r2, 8009f04 <UART_SetConfig+0xb4c>)
 8009efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f02:	bf00      	nop
 8009f04:	08009f8f 	.word	0x08009f8f
 8009f08:	08009f97 	.word	0x08009f97
 8009f0c:	0800a005 	.word	0x0800a005
 8009f10:	0800a005 	.word	0x0800a005
 8009f14:	08009f9f 	.word	0x08009f9f
 8009f18:	0800a005 	.word	0x0800a005
 8009f1c:	0800a005 	.word	0x0800a005
 8009f20:	0800a005 	.word	0x0800a005
 8009f24:	08009faf 	.word	0x08009faf
 8009f28:	0800a005 	.word	0x0800a005
 8009f2c:	0800a005 	.word	0x0800a005
 8009f30:	0800a005 	.word	0x0800a005
 8009f34:	0800a005 	.word	0x0800a005
 8009f38:	0800a005 	.word	0x0800a005
 8009f3c:	0800a005 	.word	0x0800a005
 8009f40:	0800a005 	.word	0x0800a005
 8009f44:	08009fbf 	.word	0x08009fbf
 8009f48:	0800a005 	.word	0x0800a005
 8009f4c:	0800a005 	.word	0x0800a005
 8009f50:	0800a005 	.word	0x0800a005
 8009f54:	0800a005 	.word	0x0800a005
 8009f58:	0800a005 	.word	0x0800a005
 8009f5c:	0800a005 	.word	0x0800a005
 8009f60:	0800a005 	.word	0x0800a005
 8009f64:	0800a005 	.word	0x0800a005
 8009f68:	0800a005 	.word	0x0800a005
 8009f6c:	0800a005 	.word	0x0800a005
 8009f70:	0800a005 	.word	0x0800a005
 8009f74:	0800a005 	.word	0x0800a005
 8009f78:	0800a005 	.word	0x0800a005
 8009f7c:	0800a005 	.word	0x0800a005
 8009f80:	0800a005 	.word	0x0800a005
 8009f84:	08009ff7 	.word	0x08009ff7
 8009f88:	2b40      	cmp	r3, #64	; 0x40
 8009f8a:	d037      	beq.n	8009ffc <UART_SetConfig+0xc44>
 8009f8c:	e03a      	b.n	800a004 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f8e:	f7fb fe09 	bl	8005ba4 <HAL_RCC_GetPCLK1Freq>
 8009f92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f94:	e03c      	b.n	800a010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f96:	f7fb fe1b 	bl	8005bd0 <HAL_RCC_GetPCLK2Freq>
 8009f9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f9c:	e038      	b.n	800a010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fc ffe0 	bl	8006f68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fac:	e030      	b.n	800a010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fae:	f107 0318 	add.w	r3, r7, #24
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fd f92c 	bl	8007210 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fbc:	e028      	b.n	800a010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fbe:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <UART_SetConfig+0xc2c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d012      	beq.n	8009ff0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <UART_SetConfig+0xc2c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	08db      	lsrs	r3, r3, #3
 8009fd0:	f003 0303 	and.w	r3, r3, #3
 8009fd4:	4a04      	ldr	r2, [pc, #16]	; (8009fe8 <UART_SetConfig+0xc30>)
 8009fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fdc:	e018      	b.n	800a010 <UART_SetConfig+0xc58>
 8009fde:	bf00      	nop
 8009fe0:	0800ac8c 	.word	0x0800ac8c
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	03d09000 	.word	0x03d09000
 8009fec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009ff0:	4b24      	ldr	r3, [pc, #144]	; (800a084 <UART_SetConfig+0xccc>)
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff4:	e00c      	b.n	800a010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ff6:	4b24      	ldr	r3, [pc, #144]	; (800a088 <UART_SetConfig+0xcd0>)
 8009ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ffa:	e009      	b.n	800a010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a000:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a002:	e005      	b.n	800a010 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a00e:	bf00      	nop
    }

    if (pclk != 0U)
 800a010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d021      	beq.n	800a05a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01a:	4a1c      	ldr	r2, [pc, #112]	; (800a08c <UART_SetConfig+0xcd4>)
 800a01c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a020:	461a      	mov	r2, r3
 800a022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a024:	fbb3 f2f2 	udiv	r2, r3, r2
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	085b      	lsrs	r3, r3, #1
 800a02e:	441a      	add	r2, r3
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	fbb2 f3f3 	udiv	r3, r2, r3
 800a038:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	2b0f      	cmp	r3, #15
 800a03e:	d909      	bls.n	800a054 <UART_SetConfig+0xc9c>
 800a040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a046:	d205      	bcs.n	800a054 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	60da      	str	r2, [r3, #12]
 800a052:	e002      	b.n	800a05a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	2201      	movs	r2, #1
 800a066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2200      	movs	r2, #0
 800a06e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	2200      	movs	r2, #0
 800a074:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a076:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3748      	adds	r7, #72	; 0x48
 800a07e:	46bd      	mov	sp, r7
 800a080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a084:	03d09000 	.word	0x03d09000
 800a088:	003d0900 	.word	0x003d0900
 800a08c:	0800ac8c 	.word	0x0800ac8c

0800a090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00a      	beq.n	800a0ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00a      	beq.n	800a0dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	430a      	orrs	r2, r1
 800a0da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e0:	f003 0304 	and.w	r3, r3, #4
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00a      	beq.n	800a0fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	430a      	orrs	r2, r1
 800a0fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00a      	beq.n	800a120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	430a      	orrs	r2, r1
 800a11e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a124:	f003 0310 	and.w	r3, r3, #16
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00a      	beq.n	800a142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a146:	f003 0320 	and.w	r3, r3, #32
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00a      	beq.n	800a164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	430a      	orrs	r2, r1
 800a162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d01a      	beq.n	800a1a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	430a      	orrs	r2, r1
 800a184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a18e:	d10a      	bne.n	800a1a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00a      	beq.n	800a1c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	605a      	str	r2, [r3, #4]
  }
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b098      	sub	sp, #96	; 0x60
 800a1d8:	af02      	add	r7, sp, #8
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1e4:	f7f7 fc3c 	bl	8001a60 <HAL_GetTick>
 800a1e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0308 	and.w	r3, r3, #8
 800a1f4:	2b08      	cmp	r3, #8
 800a1f6:	d12f      	bne.n	800a258 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a200:	2200      	movs	r2, #0
 800a202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 f88e 	bl	800a328 <UART_WaitOnFlagUntilTimeout>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d022      	beq.n	800a258 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21a:	e853 3f00 	ldrex	r3, [r3]
 800a21e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a226:	653b      	str	r3, [r7, #80]	; 0x50
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a230:	647b      	str	r3, [r7, #68]	; 0x44
 800a232:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a234:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a238:	e841 2300 	strex	r3, r2, [r1]
 800a23c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e6      	bne.n	800a212 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2220      	movs	r2, #32
 800a248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a254:	2303      	movs	r3, #3
 800a256:	e063      	b.n	800a320 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 0304 	and.w	r3, r3, #4
 800a262:	2b04      	cmp	r3, #4
 800a264:	d149      	bne.n	800a2fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a266:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a26e:	2200      	movs	r2, #0
 800a270:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f857 	bl	800a328 <UART_WaitOnFlagUntilTimeout>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d03c      	beq.n	800a2fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	623b      	str	r3, [r7, #32]
   return(result);
 800a28e:	6a3b      	ldr	r3, [r7, #32]
 800a290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a294:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a29e:	633b      	str	r3, [r7, #48]	; 0x30
 800a2a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2a6:	e841 2300 	strex	r3, r2, [r1]
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e6      	bne.n	800a280 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f023 0301 	bic.w	r3, r3, #1
 800a2c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2d2:	61fa      	str	r2, [r7, #28]
 800a2d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	69b9      	ldr	r1, [r7, #24]
 800a2d8:	69fa      	ldr	r2, [r7, #28]
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	617b      	str	r3, [r7, #20]
   return(result);
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e5      	bne.n	800a2b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e012      	b.n	800a320 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2220      	movs	r2, #32
 800a306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3758      	adds	r7, #88	; 0x58
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	603b      	str	r3, [r7, #0]
 800a334:	4613      	mov	r3, r2
 800a336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a338:	e049      	b.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a340:	d045      	beq.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a342:	f7f7 fb8d 	bl	8001a60 <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d302      	bcc.n	800a358 <UART_WaitOnFlagUntilTimeout+0x30>
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e048      	b.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f003 0304 	and.w	r3, r3, #4
 800a366:	2b00      	cmp	r3, #0
 800a368:	d031      	beq.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	69db      	ldr	r3, [r3, #28]
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	2b08      	cmp	r3, #8
 800a376:	d110      	bne.n	800a39a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2208      	movs	r2, #8
 800a37e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 f921 	bl	800a5c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2208      	movs	r2, #8
 800a38a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e029      	b.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3a8:	d111      	bne.n	800a3ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 f907 	bl	800a5c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e00f      	b.n	800a3ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	69da      	ldr	r2, [r3, #28]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	bf0c      	ite	eq
 800a3de:	2301      	moveq	r3, #1
 800a3e0:	2300      	movne	r3, #0
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	79fb      	ldrb	r3, [r7, #7]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d0a6      	beq.n	800a33a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
	...

0800a3f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b096      	sub	sp, #88	; 0x58
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	4613      	mov	r3, r2
 800a404:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	88fa      	ldrh	r2, [r7, #6]
 800a410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2222      	movs	r2, #34	; 0x22
 800a420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d02d      	beq.n	800a48a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a434:	4a40      	ldr	r2, [pc, #256]	; (800a538 <UART_Start_Receive_DMA+0x140>)
 800a436:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a43e:	4a3f      	ldr	r2, [pc, #252]	; (800a53c <UART_Start_Receive_DMA+0x144>)
 800a440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a448:	4a3d      	ldr	r2, [pc, #244]	; (800a540 <UART_Start_Receive_DMA+0x148>)
 800a44a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a452:	2200      	movs	r2, #0
 800a454:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3324      	adds	r3, #36	; 0x24
 800a462:	4619      	mov	r1, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a468:	461a      	mov	r2, r3
 800a46a:	88fb      	ldrh	r3, [r7, #6]
 800a46c:	f7f7 ff6c 	bl	8002348 <HAL_DMA_Start_IT>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2210      	movs	r2, #16
 800a47a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2220      	movs	r2, #32
 800a482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e051      	b.n	800a52e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d018      	beq.n	800a4c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49a:	e853 3f00 	ldrex	r3, [r3]
 800a49e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a4be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e6      	bne.n	800a492 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	e853 3f00 	ldrex	r3, [r3]
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	f043 0301 	orr.w	r3, r3, #1
 800a4da:	653b      	str	r3, [r7, #80]	; 0x50
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4e4:	637a      	str	r2, [r7, #52]	; 0x34
 800a4e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e5      	bne.n	800a4c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	613b      	str	r3, [r7, #16]
   return(result);
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a50e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3308      	adds	r3, #8
 800a516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a518:	623a      	str	r2, [r7, #32]
 800a51a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	69f9      	ldr	r1, [r7, #28]
 800a51e:	6a3a      	ldr	r2, [r7, #32]
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	61bb      	str	r3, [r7, #24]
   return(result);
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e5      	bne.n	800a4f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3758      	adds	r7, #88	; 0x58
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	0800a695 	.word	0x0800a695
 800a53c:	0800a7bd 	.word	0x0800a7bd
 800a540:	0800a7fb 	.word	0x0800a7fb

0800a544 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b08f      	sub	sp, #60	; 0x3c
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	61fb      	str	r3, [r7, #28]
   return(result);
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a560:	637b      	str	r3, [r7, #52]	; 0x34
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a56c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e6      	bne.n	800a54c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3308      	adds	r3, #8
 800a584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	e853 3f00 	ldrex	r3, [r3]
 800a58c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a594:	633b      	str	r3, [r7, #48]	; 0x30
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59e:	61ba      	str	r2, [r7, #24]
 800a5a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a2:	6979      	ldr	r1, [r7, #20]
 800a5a4:	69ba      	ldr	r2, [r7, #24]
 800a5a6:	e841 2300 	strex	r3, r2, [r1]
 800a5aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1e5      	bne.n	800a57e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a5ba:	bf00      	nop
 800a5bc:	373c      	adds	r7, #60	; 0x3c
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
	...

0800a5c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b095      	sub	sp, #84	; 0x54
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d8:	e853 3f00 	ldrex	r3, [r3]
 800a5dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ee:	643b      	str	r3, [r7, #64]	; 0x40
 800a5f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5f6:	e841 2300 	strex	r3, r2, [r1]
 800a5fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1e6      	bne.n	800a5d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3308      	adds	r3, #8
 800a608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60a:	6a3b      	ldr	r3, [r7, #32]
 800a60c:	e853 3f00 	ldrex	r3, [r3]
 800a610:	61fb      	str	r3, [r7, #28]
   return(result);
 800a612:	69fa      	ldr	r2, [r7, #28]
 800a614:	4b1e      	ldr	r3, [pc, #120]	; (800a690 <UART_EndRxTransfer+0xc8>)
 800a616:	4013      	ands	r3, r2
 800a618:	64bb      	str	r3, [r7, #72]	; 0x48
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3308      	adds	r3, #8
 800a620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a622:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a624:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62a:	e841 2300 	strex	r3, r2, [r1]
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1e5      	bne.n	800a602 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d118      	bne.n	800a670 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	e853 3f00 	ldrex	r3, [r3]
 800a64a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f023 0310 	bic.w	r3, r3, #16
 800a652:	647b      	str	r3, [r7, #68]	; 0x44
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a65c:	61bb      	str	r3, [r7, #24]
 800a65e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a660:	6979      	ldr	r1, [r7, #20]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	e841 2300 	strex	r3, r2, [r1]
 800a668:	613b      	str	r3, [r7, #16]
   return(result);
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1e6      	bne.n	800a63e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2220      	movs	r2, #32
 800a674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a684:	bf00      	nop
 800a686:	3754      	adds	r7, #84	; 0x54
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	effffffe 	.word	0xeffffffe

0800a694 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b09c      	sub	sp, #112	; 0x70
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6aa:	d071      	beq.n	800a790 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a6ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6bc:	e853 3f00 	ldrex	r3, [r3]
 800a6c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e6      	bne.n	800a6b4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f8:	f023 0301 	bic.w	r3, r3, #1
 800a6fc:	667b      	str	r3, [r7, #100]	; 0x64
 800a6fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3308      	adds	r3, #8
 800a704:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a706:	647a      	str	r2, [r7, #68]	; 0x44
 800a708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a70c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a70e:	e841 2300 	strex	r3, r2, [r1]
 800a712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e5      	bne.n	800a6e6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a71a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3308      	adds	r3, #8
 800a720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	623b      	str	r3, [r7, #32]
   return(result);
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a730:	663b      	str	r3, [r7, #96]	; 0x60
 800a732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3308      	adds	r3, #8
 800a738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a73a:	633a      	str	r2, [r7, #48]	; 0x30
 800a73c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e5      	bne.n	800a71a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a74e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a750:	2220      	movs	r2, #32
 800a752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d118      	bne.n	800a790 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a75e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f023 0310 	bic.w	r3, r3, #16
 800a772:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a77c:	61fb      	str	r3, [r7, #28]
 800a77e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	69b9      	ldr	r1, [r7, #24]
 800a782:	69fa      	ldr	r2, [r7, #28]
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	617b      	str	r3, [r7, #20]
   return(result);
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e6      	bne.n	800a75e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a792:	2200      	movs	r2, #0
 800a794:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d107      	bne.n	800a7ae <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7a8:	f7f5 ff2e 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7ac:	e002      	b.n	800a7b4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a7ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7b0:	f7fe fde4 	bl	800937c <HAL_UART_RxCpltCallback>
}
 800a7b4:	bf00      	nop
 800a7b6:	3770      	adds	r7, #112	; 0x70
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d109      	bne.n	800a7ec <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7de:	085b      	lsrs	r3, r3, #1
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f7f5 ff0f 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7ea:	e002      	b.n	800a7f2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f7fe fdcf 	bl	8009390 <HAL_UART_RxHalfCpltCallback>
}
 800a7f2:	bf00      	nop
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b086      	sub	sp, #24
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a806:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a816:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a822:	2b80      	cmp	r3, #128	; 0x80
 800a824:	d109      	bne.n	800a83a <UART_DMAError+0x40>
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	2b21      	cmp	r3, #33	; 0x21
 800a82a:	d106      	bne.n	800a83a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a834:	6978      	ldr	r0, [r7, #20]
 800a836:	f7ff fe85 	bl	800a544 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a844:	2b40      	cmp	r3, #64	; 0x40
 800a846:	d109      	bne.n	800a85c <UART_DMAError+0x62>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b22      	cmp	r3, #34	; 0x22
 800a84c:	d106      	bne.n	800a85c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2200      	movs	r2, #0
 800a852:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a856:	6978      	ldr	r0, [r7, #20]
 800a858:	f7ff feb6 	bl	800a5c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a862:	f043 0210 	orr.w	r2, r3, #16
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a86c:	6978      	ldr	r0, [r7, #20]
 800a86e:	f7fe fd99 	bl	80093a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a872:	bf00      	nop
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a886:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f7fe fd83 	bl	80093a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b088      	sub	sp, #32
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	e853 3f00 	ldrex	r3, [r3]
 800a8ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8c2:	61fb      	str	r3, [r7, #28]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	61bb      	str	r3, [r7, #24]
 800a8ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d0:	6979      	ldr	r1, [r7, #20]
 800a8d2:	69ba      	ldr	r2, [r7, #24]
 800a8d4:	e841 2300 	strex	r3, r2, [r1]
 800a8d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1e6      	bne.n	800a8ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7fe fd3a 	bl	8009368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8f4:	bf00      	nop
 800a8f6:	3720      	adds	r7, #32
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <HAL_UARTEx_DisableFifoMode+0x16>
 800a94a:	2302      	movs	r3, #2
 800a94c:	e027      	b.n	800a99e <HAL_UARTEx_DisableFifoMode+0x66>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2224      	movs	r2, #36	; 0x24
 800a95a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0201 	bic.w	r2, r2, #1
 800a974:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a97c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2220      	movs	r2, #32
 800a990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d101      	bne.n	800a9c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9be:	2302      	movs	r3, #2
 800a9c0:	e02d      	b.n	800aa1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2224      	movs	r2, #36	; 0x24
 800a9ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f022 0201 	bic.w	r2, r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f8a4 	bl	800ab4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d101      	bne.n	800aa3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e02d      	b.n	800aa9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2224      	movs	r2, #36	; 0x24
 800aa4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 0201 	bic.w	r2, r2, #1
 800aa64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f866 	bl	800ab4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b08c      	sub	sp, #48	; 0x30
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	4613      	mov	r3, r2
 800aaae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aab6:	2b20      	cmp	r3, #32
 800aab8:	d142      	bne.n	800ab40 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800aac0:	88fb      	ldrh	r3, [r7, #6]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e03b      	b.n	800ab42 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2201      	movs	r2, #1
 800aace:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800aad6:	88fb      	ldrh	r3, [r7, #6]
 800aad8:	461a      	mov	r2, r3
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7ff fc8b 	bl	800a3f8 <UART_Start_Receive_DMA>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800aae8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d124      	bne.n	800ab3a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d11d      	bne.n	800ab34 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2210      	movs	r2, #16
 800aafe:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	e853 3f00 	ldrex	r3, [r3]
 800ab0c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f043 0310 	orr.w	r3, r3, #16
 800ab14:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab20:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	6a39      	ldr	r1, [r7, #32]
 800ab24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab26:	e841 2300 	strex	r3, r2, [r1]
 800ab2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1e6      	bne.n	800ab00 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ab32:	e002      	b.n	800ab3a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ab3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab3e:	e000      	b.n	800ab42 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ab40:	2302      	movs	r3, #2
  }
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3730      	adds	r7, #48	; 0x30
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d108      	bne.n	800ab6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab6c:	e031      	b.n	800abd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab6e:	2310      	movs	r3, #16
 800ab70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab72:	2310      	movs	r3, #16
 800ab74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	0e5b      	lsrs	r3, r3, #25
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	f003 0307 	and.w	r3, r3, #7
 800ab84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	0f5b      	lsrs	r3, r3, #29
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f003 0307 	and.w	r3, r3, #7
 800ab94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
 800ab98:	7b3a      	ldrb	r2, [r7, #12]
 800ab9a:	4911      	ldr	r1, [pc, #68]	; (800abe0 <UARTEx_SetNbDataToProcess+0x94>)
 800ab9c:	5c8a      	ldrb	r2, [r1, r2]
 800ab9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aba2:	7b3a      	ldrb	r2, [r7, #12]
 800aba4:	490f      	ldr	r1, [pc, #60]	; (800abe4 <UARTEx_SetNbDataToProcess+0x98>)
 800aba6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aba8:	fb93 f3f2 	sdiv	r3, r3, r2
 800abac:	b29a      	uxth	r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abb4:	7bfb      	ldrb	r3, [r7, #15]
 800abb6:	7b7a      	ldrb	r2, [r7, #13]
 800abb8:	4909      	ldr	r1, [pc, #36]	; (800abe0 <UARTEx_SetNbDataToProcess+0x94>)
 800abba:	5c8a      	ldrb	r2, [r1, r2]
 800abbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800abc0:	7b7a      	ldrb	r2, [r7, #13]
 800abc2:	4908      	ldr	r1, [pc, #32]	; (800abe4 <UARTEx_SetNbDataToProcess+0x98>)
 800abc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800abca:	b29a      	uxth	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800abd2:	bf00      	nop
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	0800aca4 	.word	0x0800aca4
 800abe4:	0800acac 	.word	0x0800acac

0800abe8 <memset>:
 800abe8:	4402      	add	r2, r0
 800abea:	4603      	mov	r3, r0
 800abec:	4293      	cmp	r3, r2
 800abee:	d100      	bne.n	800abf2 <memset+0xa>
 800abf0:	4770      	bx	lr
 800abf2:	f803 1b01 	strb.w	r1, [r3], #1
 800abf6:	e7f9      	b.n	800abec <memset+0x4>

0800abf8 <__libc_init_array>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	4d0d      	ldr	r5, [pc, #52]	; (800ac30 <__libc_init_array+0x38>)
 800abfc:	4c0d      	ldr	r4, [pc, #52]	; (800ac34 <__libc_init_array+0x3c>)
 800abfe:	1b64      	subs	r4, r4, r5
 800ac00:	10a4      	asrs	r4, r4, #2
 800ac02:	2600      	movs	r6, #0
 800ac04:	42a6      	cmp	r6, r4
 800ac06:	d109      	bne.n	800ac1c <__libc_init_array+0x24>
 800ac08:	4d0b      	ldr	r5, [pc, #44]	; (800ac38 <__libc_init_array+0x40>)
 800ac0a:	4c0c      	ldr	r4, [pc, #48]	; (800ac3c <__libc_init_array+0x44>)
 800ac0c:	f000 f826 	bl	800ac5c <_init>
 800ac10:	1b64      	subs	r4, r4, r5
 800ac12:	10a4      	asrs	r4, r4, #2
 800ac14:	2600      	movs	r6, #0
 800ac16:	42a6      	cmp	r6, r4
 800ac18:	d105      	bne.n	800ac26 <__libc_init_array+0x2e>
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
 800ac1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac20:	4798      	blx	r3
 800ac22:	3601      	adds	r6, #1
 800ac24:	e7ee      	b.n	800ac04 <__libc_init_array+0xc>
 800ac26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac2a:	4798      	blx	r3
 800ac2c:	3601      	adds	r6, #1
 800ac2e:	e7f2      	b.n	800ac16 <__libc_init_array+0x1e>
 800ac30:	0800acbc 	.word	0x0800acbc
 800ac34:	0800acbc 	.word	0x0800acbc
 800ac38:	0800acbc 	.word	0x0800acbc
 800ac3c:	0800acc0 	.word	0x0800acc0

0800ac40 <memcpy>:
 800ac40:	440a      	add	r2, r1
 800ac42:	4291      	cmp	r1, r2
 800ac44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac48:	d100      	bne.n	800ac4c <memcpy+0xc>
 800ac4a:	4770      	bx	lr
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac56:	4291      	cmp	r1, r2
 800ac58:	d1f9      	bne.n	800ac4e <memcpy+0xe>
 800ac5a:	bd10      	pop	{r4, pc}

0800ac5c <_init>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	bf00      	nop
 800ac60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac62:	bc08      	pop	{r3}
 800ac64:	469e      	mov	lr, r3
 800ac66:	4770      	bx	lr

0800ac68 <_fini>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr
