
#include "main.h"


char str[512];


// Command functions
// Load and send <bytes> bytes of data from address <addr>
void ble_send(uint32_t addr, uint32_t bytes) {
  reg_write32(BASEBAND_ADDITIONAL_DATA, addr);
  reg_write32(BASEBAND_INST, BASEBAND_INSTRUCTION(BASEBAND_SEND, 0, bytes));
}

// Configure baseband constant <target> (from secondary instruction set) to value <value>
void ble_configure(uint8_t target, uint32_t value) {
  reg_write32(BASEBAND_ADDITIONAL_DATA, value);
  reg_write32(BASEBAND_INST, BASEBAND_INSTRUCTION(BASEBAND_CONFIG, target, 0));
}

// Try and receive data. Any found data will be stored at address <addr>
void ble_receive(uint32_t addr) {
  reg_write32(BASEBAND_ADDITIONAL_DATA, addr);
  reg_write32(BASEBAND_INST, BASEBAND_INSTRUCTION(BASEBAND_RECEIVE, 0, 0));
}

// Try and receive data. Any found data will be stored at address <addr>
void ble_receive_exit() {
  reg_write32(BASEBAND_INST, BASEBAND_INSTRUCTION(BASEBAND_RECEIVE_EXIT, 0, 0));
}

uint32_t baseband_status0() {
  return reg_read32(BASEBAND_STATUS0);
}

uint32_t baseband_status1() {
  return reg_read32(BASEBAND_STATUS1);
}

uint32_t baseband_status2() {
  return reg_read32(BASEBAND_STATUS2);
}

uint32_t baseband_status3() {
  return reg_read32(BASEBAND_STATUS3);
}

uint32_t baseband_status4() {
  return reg_read32(BASEBAND_STATUS4);
}

uint32_t baseband_rxerror_message() {
  return reg_read32(BASEBAND_RXERROR_MESSAGE);
}

uint32_t baseband_txerror_message() {
  return reg_read32(BASEBAND_TXERROR_MESSAGE);
}

uint32_t baseband_rxfinish_message() {
  return reg_read32(BASEBAND_RXFINISH_MESSAGE);
}

// LUT Control
#define LUT_LOFSK 0
#define LUT_LOCT 1
#define LUT_AGCI 2
#define LUT_AGCQ 3
#define LUT_DCOIFRONT 4
#define LUT_DCOQFRONT 5

#define LUT_COMMAND(lut, address, value) ((lut & 0xF) + ((address & 0x3F) << 4) + ((value & 0x3FFFFF) << 10))

void baseband_set_lut(uint8_t lut, uint8_t address, uint32_t value) {
  reg_write32(BASEBAND_LUT_CMD, LUT_COMMAND(lut, address, value));
}

// Function written for writing to tuning MMIO, but technically can be used for all MMIO although unchecked
// For partial write (4 bits), offset is used to shift data to correct position
void baseband_tuning_set(uint32_t addr, uint32_t data, uint32_t bit_size, uint32_t offset) {
  // For partial writes, need to read, mask, write-back
  if (bit_size == 4) {
    uint8_t temp = (reg_read8(addr) & ~(15 << offset)) | (data << offset);
    // Debug print
    // printf("%x\n", temp);
    reg_write8(addr, temp);
  } else if (bit_size <= 8) {
    reg_write8(addr, data);
  } else {
    reg_write16(addr, data);
  }
}

// Function that tests (send + check) the baseband debug command
void baseband_debug(uint32_t addr, size_t byte_size) {
  // Sending baseband DEBUG instruction
  reg_write32(BASEBAND_ADDITIONAL_DATA, addr);
  
  // INST = data, 1111 1111 
  reg_write32(BASEBAND_INST, BASEBAND_INSTRUCTION(BASEBAND_DEBUG, -1, byte_size));

  // TODO: Determine cycles to wait. Printing for now
  sprintf(str, "Sent DEBUG instruction with data at address %.8x. Waiting...\n", addr);
  HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);

  // Word-aligned address (word is 4 bytes, 32 bits)
  int mismatch = -1;
  int fail = 0;
  uint32_t res_addr = addr + ((byte_size & ~3) + ((byte_size % 4) > 0 ? 4 : 0)); 
  sprintf(str, "Output bytes at address %.8x: ", res_addr);
  HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);

  for (int i = 0; i < byte_size; i++) {
    sprintf(str, "%.2x ", (unsigned)*(unsigned char*)(res_addr + i));
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
    // Checking match
    if ((unsigned)*(unsigned char*)(addr + i) != (unsigned)*(unsigned char*)(res_addr + i)) {
      fail += 1;
      if (mismatch == -1) mismatch = i;
    }
  }
  if (fail) {
    sprintf(str, "FAILED TEST. %d bytes are mismatched in output. Index of first mismatch: %d\n", fail, mismatch);
  } else {
    sprintf(str, "PASSED TEST. All input bytes match output bytes.\n");
  }
  HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
}



typedef struct plic_context_control
{
  uint32_t priority_threshold;
  uint32_t claim_complete;
} plic_context_control_t __attribute__ ((aligned (0x1000)));


uint32_t *const plic_enables      =               (uint32_t* const) 0xc002000; // Context [0..15871], sources bitmap registers [0..31]
uint32_t *const plic_priorities   =               (uint32_t* const) 0xc000000; // priorities [0..1023]
plic_context_control_t *const plic_ctx_controls = (plic_context_control_t* const) 0xc200000; // Priority threshold & claim / complete for context [0..15871]

void plic_set_bit(uint32_t* const target, uint32_t index)
{
  uint32_t reg_index = index >> 5;
  uint32_t bit_index = index & 0x1F;
  *target |= (1 << bit_index);
}

void plic_enable_for_hart(uint32_t hart_id, uint32_t irq_id) {
  uint32_t* base = plic_enables + 32 * hart_id;
  plic_set_bit(base, irq_id);
}

void plic_set_priority(uint32_t irq_id, uint32_t priority) {
  plic_priorities[irq_id] = priority;
}

uint32_t plic_claim_irq(uint32_t hart_id) {
  return plic_ctx_controls[hart_id].claim_complete;
}

void plic_complete_irq(uint32_t hart_id, uint32_t irq_id){
  plic_ctx_controls[hart_id].claim_complete = irq_id;
}


int main() {
  HAL_init();

  UART_InitTypeDef UART_init_config;
  UART_init_config.baudrate = 10000;

  HAL_UART_init(UART0, &UART_init_config);
  HAL_GPIO_init(GPIOA, GPIO_PIN_0);

  // HAL_delay(2000);

  // plic_enable_for_hart(0, 9);
  // plic_enable_for_hart(0, 10);
  // plic_set_priority(9, 5); // Set all the priorities to 5 for now
  // plic_set_priority(10, 5);

  // uint8_t payload[]  = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  // reg_write32(BASEBAND_ADDITIONAL_DATA, 5);
  

  // HAL_CORE_enableIRQ(MachineExternal_IRQn);
  // HAL_CORE_enableInterrupt();
  
  // uint64_t target_tick = HAL_getTick() + (3000 * MTIME_FREQ);
  // HAL_CLINT_setMTimeCmp(target_tick);

  // HAL_CORE_enableIRQ(MachineTimer_IRQn);

  // uint32_t counter = 0;


  // for (uint32_t i = 0; i < 64; i +=1) {
  //   baseband_set_lut((uint8_t) LUT_LOCT, (uint8_t) i, (uint32_t) (i * 4));
  // }
  
  // uint32_t channel_index = 0;
  ////
  // Setup loopback 
  ////
  // It seems from the device tree, interrupts for baseband are 6, 7, 8, 9, 10


  // set tuning trim G0 0th bit 1
  SET_BITS(*(uint8_t *)BASEBAND_TRIM_G0, 0b1);


  HAL_CORE_enableIRQ(MachineExternal_IRQn);
  HAL_CORE_enableInterrupt();
  for (int i = 6; i < 11; i++)
  {
    plic_enable_for_hart(0, i);
    plic_set_priority(i, 5); // Set all the priorities to 5 for now
  }
  #define LOOPBACK_NONE     0x0
  #define LOOPBACK_BASEBAND 0x2
  #define LOOPBACK_MODEM    0x4 // This cannot be electrically functional
  
  uint8_t tx_data[]  = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  uint8_t byte_size = 8;

  uint32_t rx_data = tx_data + ((byte_size & ~3) + ((byte_size % 4) > 0 ? 4 : 0)); 

  sprintf(str, "preTX RX_DATA: %.8x \n", rx_data);
  HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
  for (int i = 0; i < byte_size; i++) {
    sprintf(str, "%.2x ", (unsigned)*(unsigned char*)(rx_data + i));
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
  }


  reg_write32(BASEBAND_ADDITIONAL_DATA, tx_data);
  reg_write32(BASEBAND_INST, BASEBAND_INSTRUCTION(BASEBAND_DEBUG, LOOPBACK_BASEBAND, byte_size));


  while (1) {

  // Data must be in format <header><data>. The header is 2 bytes, with the second byte representing the length of the of the following data.

    /*
    // Short sanity test
    uint8_t good_data_one[]  = {0x1, 0x4, 0x11, 0x22, 0x33, 0x44};
    // Spacing data for output
    volatile uint8_t random_spacing_one[sizeof(good_data_one)] = {0x0};

    // char good_data_two[] = "TEST DATA FOR BASEBAND!";
    // NOTE: Cannot use char, will have unecessary bytes in output. Need to use byte array!
    uint8_t good_data_two[]  = {0x1, 0x17, 0x54, 0x45, 0x53, 0x54, 0x20, 0x44, 0x41, 0x54, 0x41, 0x20, 0x46, 0x4f, 0x52, 0x20, 0x42, 0x41, 0x53, 0x45, 0x42, 0x41, 0x4e, 0x44, 0x21};
    volatile uint8_t random_spacing_two[sizeof(good_data_two)] = {0x0};

    uint8_t good_data_three[]  = {0x1, 0xC, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x20, 0x54, 0x45, 0x53, 0x54};
    volatile uint8_t random_spacing_three[sizeof(good_data_three)] = {0x0};
    */

    // No longer testing for this case - this is illegal instruction and should never happen (SW Enforced)
    // // The following data is malformed as the size byte in the header is "2", which is smaller than the actual data payload
    // uint8_t bad_data[]  = {0x1, 0x2, 0x54, 0x45, 0x53, 0x54, 0x20, 0x44, 0x41, 0x54, 0x41, 0x20, 0x46, 0x4f, 0x52, 0x20, 0x42, 0x41, 0x53, 0x45, 0x42, 0x41, 0x4e, 0x44, 0x21};
    // volatile uint8_t random_spacing_three[sizeof(bad_data)] = {0x0};
    


    // plic_set_priority_threshold(0, 1); // Set Hart 0 priority threshold to 1
    // clint_connect_interrupt(INT_CODE_MACHINE_EXTERNAL, &plic_handler);  
    // clint_machine_interrupt_enable(INT_CODE_MACHINE_EXTERNAL);
    
    // uint32_t res_addr = payload + ((byte_size & ~3) + ((byte_size % 4) > 0 ? 4 : 0)); 
    sprintf(str, "RES_ADDR: %.8x \n", rx_data);
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
    for (int i = 0; i < byte_size; i++) {
      sprintf(str, "%.2x ", (unsigned)*(unsigned char*)(rx_data + i));
      HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
    }


    // mstatus_enable_interrupt();
    /*

    sprintf(str, "The following DEBUG test should pass:\n");
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
    baseband_debug((uint32_t) good_data_one, 6);
    sprintf(str, "Done.\n");
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);

    sprintf(str, "The following DEBUG test should pass:\n");
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
    baseband_debug((uint32_t) good_data_two, 25);
    sprintf(str, "Done.\n");
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);

    sprintf(str, "The following DEBUG test should pass:\n");
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
    baseband_debug((uint32_t) good_data_three, 14);
    sprintf(str, "Done.\n");
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);
    */

    // No longer testing for this case - this is illegal instruction and should never happen (SW Enforced)
    // printf("The following DEBUG test should fail, and only the first 4 bytes should be non-zero (bad header size):\n");
    // baseband_debug((uint32_t) bad_data, sizeof(bad_data));
    // printf("Done.\n");

    // Add more tests if desired

    sprintf(str, "# end test #.\n");
    HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);




    
    // // change channel index
    // reg_write32(BASEBAND_INST, BASEBAND_INSTRUCTION(BASEBAND_CONFIG, BASEBAND_CONFIG_CHANNEL_INDEX, channel_index));


    // channel_index += 1;
    // if (channel_index >= 64) {
    //   channel_index = 0;
    // }

    // // if (counter % 100 == 0) {
    
    // //   uint32_t status0 = *((uint32_t *)BASEBAND_STATUS0);
    // //   uint32_t status1 = *((uint32_t *)BASEBAND_STATUS1);
    // //   uint32_t status2 = *((uint32_t *)BASEBAND_STATUS2);
    // //   uint32_t status3 = *((uint32_t *)BASEBAND_STATUS3);
    // //   uint32_t status4 = *((uint32_t *)BASEBAND_STATUS4);



    // char str[64];
    // sprintf(str, "chanid: %d  sending\n", channel_index);
    // HAL_UART_transmit(UART0, (uint8_t *)str, strlen(str), 0);

    // for (uint16_t i=0; i<200; i+=1) {
    //   ble_send((uint32_t) payload, sizeof(payload));
    // }

    // HAL_delay(10);

    // reg_write32(BASEBAND_ADDITIONAL_DATA, payload);
    // reg_write32(BASEBAND_INST, BASEBAND_INSTRUCTION(BASEBAND_SEND, 0, 25));
    HAL_delay(1000);
  }
}
