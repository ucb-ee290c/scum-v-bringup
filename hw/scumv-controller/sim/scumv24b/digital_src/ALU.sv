// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ALU(
  input  [3:0]  io_fn,	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:56:14]
  input  [31:0] io_in2,	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:56:14]
                io_in1,	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:56:14]
  output [31:0] io_out,	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:56:14]
                io_adder_out,	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:56:14]
  output        io_cmp_out	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:56:14]
);

  wire [31:0] in2_inv = {32{io_fn[3]}} ^ io_in2;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:43:29, :69:20]
  wire [31:0] in1_xor_in2 = io_in1 ^ in2_inv;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:69:20, :70:28]
  wire [31:0] _io_adder_out_T_3 = io_in1 + in2_inv + {31'h0, io_fn[3]};	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:43:29, :69:20, :71:36, :105:50]
  wire        slt = io_in1[31] == io_in2[31] ? _io_adder_out_T_3[31] : io_fn[1] ? io_in2[31] : io_in1[31];	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:45:35, :71:36, :75:{8,15,24,34,56}, :76:8]
  wire        _shout_T = io_fn == 4'h5;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:89:24]
  wire        _shout_T_1 = io_fn == 4'hB;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:89:50]
  wire [7:0]  _GEN = {{io_in1[11:8], io_in1[15:14]} & 6'h33, 2'h0} | {io_in1[15:12], io_in1[19:16]} & 8'h33;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:89:83]
  wire [18:0] _GEN_0 = {io_in1[5:4], io_in1[7:6], io_in1[9:8], _GEN, io_in1[19:18], io_in1[21:20], io_in1[23]} & 19'h55555;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:89:83]
  wire [31:0] shin = _shout_T | _shout_T_1 ? io_in1 : {io_in1[0], io_in1[1], io_in1[2], io_in1[3], io_in1[4], _GEN_0[18:15] | {io_in1[7:6], io_in1[9:8]} & 4'h5, _GEN_0[14:7] | _GEN & 8'h55, _GEN[1], _GEN_0[5] | io_in1[18], io_in1[19], io_in1[20], {_GEN_0[2:0], 1'h0} | {io_in1[23:22], io_in1[25:24]} & 4'h5, io_in1[25], io_in1[26], io_in1[27], io_in1[28], io_in1[29], io_in1[30], io_in1[31]};	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:89:{17,24,41,50,83}]
  wire [32:0] _shout_r_T_5 = $signed($signed({io_fn[3] & shin[31], shin}) >>> io_in2[4:0]);	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:43:29, :81:28, :89:17, :90:{21,41,47,70}]
  wire [7:0]  _GEN_1 = {{_shout_r_T_5[11:8], _shout_r_T_5[15:14]} & 6'h33, 2'h0} | {_shout_r_T_5[15:12], _shout_r_T_5[19:16]} & 8'h33;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:89:83, :90:{70,79}, :91:24]
  wire [18:0] _GEN_2 = {_shout_r_T_5[5:4], _shout_r_T_5[7:6], _shout_r_T_5[9:8], _GEN_1, _shout_r_T_5[19:18], _shout_r_T_5[21:20], _shout_r_T_5[23]} & 19'h55555;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:89:83, :90:70, :91:24]
  wire        _logic_T_4 = io_fn == 4'h6;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:102:51]
  assign io_out = io_fn == 4'h0 | io_fn == 4'hA ? _io_adder_out_T_3 : {31'h0, io_fn > 4'hB & slt} | (io_fn == 4'h4 | _logic_T_4 ? in1_xor_in2 : 32'h0) | (_logic_T_4 | io_fn == 4'h7 ? io_in1 & io_in2 : 32'h0) | (_shout_T | _shout_T_1 ? _shout_r_T_5[31:0] : 32'h0) | (io_fn == 4'h1 ? {_shout_r_T_5[0], _shout_r_T_5[1], _shout_r_T_5[2], _shout_r_T_5[3], _shout_r_T_5[4], _GEN_2[18:15] | {_shout_r_T_5[7:6], _shout_r_T_5[9:8]} & 4'h5, _GEN_2[14:7] | _GEN_1 & 8'h55, _GEN_1[1], _GEN_2[5] | _shout_r_T_5[18], _shout_r_T_5[19], _shout_r_T_5[20], {_GEN_2[2:0], 1'h0} | {_shout_r_T_5[23:22], _shout_r_T_5[25:24]} & 4'h5, _shout_r_T_5[25], _shout_r_T_5[26], _shout_r_T_5[27], _shout_r_T_5[28], _shout_r_T_5[29], _shout_r_T_5[30], _shout_r_T_5[31]} : 32'h0);	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:44:30, :70:28, :71:36, :75:8, :89:{24,50,83}, :90:{70,79}, :91:24, :92:{18,41}, :93:{18,25}, :102:{18,25,42,51}, :103:{18,41,50,75}, :105:{42,50,58}, :110:{16,23,40,49}]
  assign io_adder_out = _io_adder_out_T_3;	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:71:36]
  assign io_cmp_out = io_fn[0] ^ (io_fn[3] ? slt : in1_xor_in2 == 32'h0);	// @[generators/rocket-chip/src/main/scala/rocket/ALU.scala:43:29, :46:35, :70:28, :75:8, :77:{42,47,80}, :92:18]
endmodule

