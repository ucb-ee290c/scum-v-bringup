// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module CDR_1(
  input  clock,
         reset,
         io_in,	// @[generators/baseband/src/main/scala/modem/CDR.scala:7:14]
  output io_out_valid,	// @[generators/baseband/src/main/scala/modem/CDR.scala:7:14]
         io_out_bits	// @[generators/baseband/src/main/scala/modem/CDR.scala:7:14]
);

  wire [5:0]  _late_io_sum;	// @[generators/baseband/src/main/scala/modem/CDR.scala:17:23]
  wire [5:0]  _present_io_sum;	// @[generators/baseband/src/main/scala/modem/CDR.scala:16:23]
  wire [5:0]  _early_io_sum;	// @[generators/baseband/src/main/scala/modem/CDR.scala:15:23]
  reg  [17:0] window;	// @[generators/baseband/src/main/scala/modem/CDR.scala:12:19]
  reg  [4:0]  counter;	// @[generators/baseband/src/main/scala/modem/CDR.scala:24:24]
  wire        io_out_valid_0 = counter == 5'h0;	// @[generators/baseband/src/main/scala/modem/CDR.scala:24:24, :26:16]
  wire [5:0]  _GEN = $signed(_present_io_sum) < 6'sh0 ? 6'h0 - _present_io_sum : _present_io_sum;	// @[generators/baseband/src/main/scala/modem/CDR.scala:16:23, :29:26]
  wire [5:0]  _GEN_0 = $signed(_early_io_sum) < 6'sh0 ? 6'h0 - _early_io_sum : _early_io_sum;	// @[generators/baseband/src/main/scala/modem/CDR.scala:15:23, :29:{26,46}]
  wire [5:0]  _GEN_1 = $signed(_late_io_sum) < 6'sh0 ? 6'h0 - _late_io_sum : _late_io_sum;	// @[generators/baseband/src/main/scala/modem/CDR.scala:17:23, :29:26, :30:49]
  wire        _GEN_2 = $signed(_GEN) >= $signed(_GEN_0) & $signed(_GEN) >= $signed(_GEN_1);	// @[generators/baseband/src/main/scala/modem/CDR.scala:29:{26,30,46}, :30:{11,34,49}]
  wire        _GEN_3 = $signed(_GEN_0) > $signed(_GEN_1);	// @[generators/baseband/src/main/scala/modem/CDR.scala:29:46, :30:49, :33:33]
  always @(posedge clock) begin
    window <= {window[16:0], io_in};	// @[generators/baseband/src/main/scala/modem/CDR.scala:12:19, :13:10]
    if (reset)
      counter <= 5'hF;	// @[generators/baseband/src/main/scala/modem/CDR.scala:24:24]
    else if (io_out_valid_0)	// @[generators/baseband/src/main/scala/modem/CDR.scala:26:16]
      counter <= _GEN_2 ? 5'hF : _GEN_3 ? 5'h10 : 5'hE;	// @[generators/baseband/src/main/scala/modem/CDR.scala:24:24, :30:{11,55}, :32:15, :33:{33,52}, :35:15, :38:15]
    else	// @[generators/baseband/src/main/scala/modem/CDR.scala:26:16]
      counter <= counter - 5'h1;	// @[generators/baseband/src/main/scala/modem/CDR.scala:24:24, :43:24]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        window = _RANDOM[/*Zero width*/ 1'b0][17:0];	// @[generators/baseband/src/main/scala/modem/CDR.scala:12:19]
        counter = _RANDOM[/*Zero width*/ 1'b0][22:18];	// @[generators/baseband/src/main/scala/modem/CDR.scala:12:19, :24:24]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Integrator_3 early (	// @[generators/baseband/src/main/scala/modem/CDR.scala:15:23]
    .io_window (window[15:0]),	// @[generators/baseband/src/main/scala/modem/CDR.scala:12:19, :19:30]
    .io_sum    (_early_io_sum)
  );
  Integrator_3 present (	// @[generators/baseband/src/main/scala/modem/CDR.scala:16:23]
    .io_window (window[16:1]),	// @[generators/baseband/src/main/scala/modem/CDR.scala:12:19, :20:30]
    .io_sum    (_present_io_sum)
  );
  Integrator_3 late (	// @[generators/baseband/src/main/scala/modem/CDR.scala:17:23]
    .io_window (window[17:2]),	// @[generators/baseband/src/main/scala/modem/CDR.scala:12:19, :21:30]
    .io_sum    (_late_io_sum)
  );
  assign io_out_valid = io_out_valid_0;	// @[generators/baseband/src/main/scala/modem/CDR.scala:26:16]
  assign io_out_bits = _GEN_2 ? $signed(_present_io_sum) > -6'sh1 : _GEN_3 ? $signed(_early_io_sum) > -6'sh1 : $signed(_late_io_sum) > -6'sh1;	// @[generators/baseband/src/main/scala/modem/CDR.scala:15:23, :16:23, :17:23, :30:{11,55}, :31:{19,37}, :33:{33,52}, :34:{19,35}, :37:{19,34}]
endmodule

