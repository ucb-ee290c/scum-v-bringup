// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module DCOWrapper(
  input        clock,
               reset,
  input  [7:0] io_adcIn,	// @[generators/baseband/src/main/scala/modem/DCO.scala:46:14]
  output [4:0] io_dcoLUTIndex,	// @[generators/baseband/src/main/scala/modem/DCO.scala:46:14]
  input  [8:0] io_control_gain,	// @[generators/baseband/src/main/scala/modem/DCO.scala:46:14]
  input        io_control_reset,	// @[generators/baseband/src/main/scala/modem/DCO.scala:46:14]
               io_adc_clock	// @[generators/baseband/src/main/scala/modem/DCO.scala:46:14]
);

  wire       _idxQueue_io_deq_valid;	// @[generators/baseband/src/main/scala/modem/DCO.scala:70:24]
  wire [7:0] _idxQueue_io_deq_bits;	// @[generators/baseband/src/main/scala/modem/DCO.scala:70:24]
  wire       _controlQueue_io_deq_valid;	// @[generators/baseband/src/main/scala/modem/DCO.scala:56:28]
  wire [8:0] _controlQueue_io_deq_bits_gain;	// @[generators/baseband/src/main/scala/modem/DCO.scala:56:28]
  wire       _controlQueue_io_deq_bits_reset;	// @[generators/baseband/src/main/scala/modem/DCO.scala:56:28]
  wire [4:0] _dco_io_dcoLUTIndex;	// @[generators/baseband/src/main/scala/modem/DCO.scala:53:44]
  reg  [8:0] controlPrev_gain;	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28]
  reg        controlPrev_reset;	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28]
  reg  [8:0] dco_io_control_r_gain;	// @[generators/baseband/src/main/scala/modem/DCO.scala:67:30]
  reg        dco_io_control_r_reset;	// @[generators/baseband/src/main/scala/modem/DCO.scala:67:30]
  reg  [7:0] io_dcoLUTIndex_r;	// @[generators/baseband/src/main/scala/modem/DCO.scala:79:30]
  always @(posedge clock) begin
    controlPrev_gain <= io_control_gain;	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28]
    controlPrev_reset <= io_control_reset;	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28]
    if (_controlQueue_io_deq_valid) begin	// @[generators/baseband/src/main/scala/modem/DCO.scala:56:28]
      dco_io_control_r_gain <= _controlQueue_io_deq_bits_gain;	// @[generators/baseband/src/main/scala/modem/DCO.scala:56:28, :67:30]
      dco_io_control_r_reset <= _controlQueue_io_deq_bits_reset;	// @[generators/baseband/src/main/scala/modem/DCO.scala:56:28, :67:30]
    end
    if (_idxQueue_io_deq_valid)	// @[generators/baseband/src/main/scala/modem/DCO.scala:70:24]
      io_dcoLUTIndex_r <= _idxQueue_io_deq_bits;	// @[generators/baseband/src/main/scala/modem/DCO.scala:70:24, :79:30]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        controlPrev_gain = _RANDOM[/*Zero width*/ 1'b0][8:0];	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28]
        controlPrev_reset = _RANDOM[/*Zero width*/ 1'b0][9];	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28]
        dco_io_control_r_gain = _RANDOM[/*Zero width*/ 1'b0][18:10];	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28, :67:30]
        dco_io_control_r_reset = _RANDOM[/*Zero width*/ 1'b0][19];	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28, :67:30]
        io_dcoLUTIndex_r = _RANDOM[/*Zero width*/ 1'b0][27:20];	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28, :79:30]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  DCO dco (	// @[generators/baseband/src/main/scala/modem/DCO.scala:53:44]
    .clock            (io_adc_clock),
    .reset            (reset),
    .io_adcIn         (io_adcIn),
    .io_dcoLUTIndex   (_dco_io_dcoLUTIndex),
    .io_control_gain  (dco_io_control_r_gain),	// @[generators/baseband/src/main/scala/modem/DCO.scala:67:30]
    .io_control_reset (dco_io_control_r_reset)	// @[generators/baseband/src/main/scala/modem/DCO.scala:67:30]
  );
  AsyncQueue_20 controlQueue (	// @[generators/baseband/src/main/scala/modem/DCO.scala:56:28]
    .io_enq_clock      (clock),
    .io_enq_reset      (reset),
    .io_enq_valid      ({controlPrev_gain, controlPrev_reset} != {io_control_gain, io_control_reset}),	// @[generators/baseband/src/main/scala/modem/DCO.scala:61:28, :62:{44,51,66}]
    .io_enq_bits_gain  (io_control_gain),
    .io_enq_bits_reset (io_control_reset),
    .io_deq_clock      (io_adc_clock),
    .io_deq_reset      (reset),
    .io_deq_valid      (_controlQueue_io_deq_valid),
    .io_deq_bits_gain  (_controlQueue_io_deq_bits_gain),
    .io_deq_bits_reset (_controlQueue_io_deq_bits_reset)
  );
  AsyncQueue_17 idxQueue (	// @[generators/baseband/src/main/scala/modem/DCO.scala:70:24]
    .io_enq_clock (io_adc_clock),
    .io_enq_reset (reset),
    .io_enq_bits  ({3'h0, _dco_io_dcoLUTIndex}),	// @[generators/baseband/src/main/scala/modem/DCO.scala:53:44, :74:24]
    .io_deq_clock (clock),
    .io_deq_reset (reset),
    .io_deq_valid (_idxQueue_io_deq_valid),
    .io_deq_bits  (_idxQueue_io_deq_bits)
  );
  assign io_dcoLUTIndex = io_dcoLUTIndex_r[4:0];	// @[generators/baseband/src/main/scala/modem/DCO.scala:79:{18,30}]
endmodule

