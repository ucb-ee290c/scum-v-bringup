// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module SymbolToChipLUT(
  input  [3:0]  io_symbol,	// @[generators/baseband/src/main/scala/baseband/LRWPANLUT.scala:82:16]
  output [31:0] io_chip	// @[generators/baseband/src/main/scala/baseband/LRWPANLUT.scala:82:16]
);

  wire [15:0][31:0] _GEN = '{32'h1DEE0693, 32'h31DEE069, 32'h931DEE06, 32'h6931DEE0, 32'h6931DEE, 32'hE06931DE, 32'hEE06931D, 32'hDEE06931, 32'hB744AC39, 32'h9B744AC3, 32'h39B744AC, 32'hC39B744A, 32'hAC39B744, 32'h4AC39B74, 32'h44AC39B7, 32'h744AC39B};	// @[generators/baseband/src/main/scala/baseband/LRWPANLUT.scala:83:{20,29}, :84:17, :86:{25,34}, :87:17, :89:{25,34}, :90:17, :92:{25,34}, :93:17, :95:{25,34}, :96:17, :98:{25,34}, :99:17, :101:{25,34}, :102:17, :104:{25,34}, :105:17, :107:{25,34}, :108:17, :110:{25,34}, :111:17, :113:{25,35}, :114:17, :116:{25,35}, :117:17, :119:{25,35}, :120:17, :122:{25,35}, :123:17, :125:{25,35}, :126:17, :128:35]
  assign io_chip = _GEN[io_symbol];	// @[generators/baseband/src/main/scala/baseband/LRWPANLUT.scala:83:{20,29}, :84:17, :86:{25,34}, :87:17, :89:{25,34}, :90:17, :92:{25,34}, :93:17, :95:{25,34}, :96:17, :98:{25,34}, :99:17, :101:{25,34}, :102:17, :104:{25,34}, :105:17, :107:{25,34}, :108:17, :110:{25,34}, :111:17, :113:{25,35}, :114:17, :116:{25,35}, :117:17, :119:{25,35}, :120:17, :122:{25,35}, :123:17, :125:{25,35}, :126:17, :128:35]
endmodule

