// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module SPIFIFO(
  input        clock,
               reset,
  input  [1:0] io_ctrl_fmt_proto,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input        io_ctrl_fmt_endian,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
               io_ctrl_fmt_iodir,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input  [3:0] io_ctrl_fmt_len,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input  [1:0] io_ctrl_cs_mode,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input  [3:0] io_ctrl_wm_tx,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
               io_ctrl_wm_rx,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input        io_link_tx_ready,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  output       io_link_tx_valid,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  output [7:0] io_link_tx_bits,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input        io_link_rx_valid,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input  [7:0] io_link_rx_bits,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  output [7:0] io_link_cnt,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  output [1:0] io_link_fmt_proto,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  output       io_link_fmt_endian,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
               io_link_fmt_iodir,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
               io_link_cs_set,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
               io_link_cs_clear,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
               io_link_lock,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
               io_tx_ready,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input        io_tx_valid,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input  [7:0] io_tx_bits,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  input        io_rx_ready,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  output       io_rx_valid,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  output [7:0] io_rx_bits,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
  output       io_ip_txwm,	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
               io_ip_rxwm	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:14:14]
);

  wire [3:0] _rxq_io_count;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:23:19]
  wire       _txq_io_deq_valid;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:22:19]
  wire [3:0] _txq_io_count;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:22:19]
  wire       fire_tx = io_link_tx_ready & _txq_io_deq_valid;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:22:19, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  reg        rxen;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:30:21]
  wire       _GEN = io_ctrl_fmt_proto == 2'h1;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIConsts.scala:12:48]
  wire       _GEN_0 = io_ctrl_fmt_proto == 2'h2;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIConsts.scala:12:48]
  wire [3:0] _cnt_quot_T_3 = io_ctrl_fmt_proto == 2'h0 ? io_ctrl_fmt_len : 4'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIConsts.scala:12:48, src/main/scala/chisel3/util/Mux.scala:30:73]
  wire [2:0] _GEN_1 = _cnt_quot_T_3[2:0] | (_GEN ? io_ctrl_fmt_len[3:1] : 3'h0);	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIConsts.scala:12:48, generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:44:73, src/main/scala/chisel3/util/Mux.scala:30:73]
  reg  [1:0] cs_mode;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:49:24]
  always @(posedge clock) begin
    if (reset) begin
      rxen <= 1'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:30:21]
      cs_mode <= 2'h0;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIConsts.scala:12:48, generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:49:24]
    end
    else begin
      if (fire_tx)	// @[src/main/scala/chisel3/util/Decoupled.scala:52:35]
        rxen <= ~io_ctrl_fmt_iodir;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:30:21, :40:32]
      else	// @[src/main/scala/chisel3/util/Decoupled.scala:52:35]
        rxen <= ~io_link_rx_valid & rxen;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:30:21, :36:18, :37:10]
      cs_mode <= io_ctrl_cs_mode;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:49:24]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        rxen = _RANDOM[/*Zero width*/ 1'b0][0];	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:30:21]
        cs_mode = _RANDOM[/*Zero width*/ 1'b0][2:1];	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:30:21, :49:24]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  Queue_25 txq (	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:22:19]
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (io_tx_ready),
    .io_enq_valid (io_tx_valid),
    .io_enq_bits  (io_tx_bits),
    .io_deq_ready (io_link_tx_ready),
    .io_deq_valid (_txq_io_deq_valid),
    .io_deq_bits  (io_link_tx_bits),
    .io_count     (_txq_io_count)
  );
  Queue_25 rxq (	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:23:19]
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (/* unused */),
    .io_enq_valid (io_link_rx_valid & rxen),	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:30:21, :32:40]
    .io_enq_bits  (io_link_rx_bits),
    .io_deq_ready (io_rx_ready),
    .io_deq_valid (io_rx_valid),
    .io_deq_bits  (io_rx_bits),
    .io_count     (_rxq_io_count)
  );
  assign io_link_tx_valid = _txq_io_deq_valid;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:22:19]
  assign io_link_cnt = {4'h0, {_cnt_quot_T_3[3], _GEN_1[2], _GEN_1[1:0] | (_GEN_0 ? io_ctrl_fmt_len[3:2] : 2'h0)} + {3'h0, _GEN & io_ctrl_fmt_len[0] | _GEN_0 & (|(io_ctrl_fmt_len[1:0]))}};	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIConsts.scala:12:48, generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:44:73, :45:{83,92}, :47:{15,27}, src/main/scala/chisel3/util/Mux.scala:30:73]
  assign io_link_fmt_proto = io_ctrl_fmt_proto;
  assign io_link_fmt_endian = io_ctrl_fmt_endian;
  assign io_link_fmt_iodir = io_ctrl_fmt_iodir;
  assign io_link_cs_set = ~(&cs_mode);	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:49:24, :51:30, :55:21]
  assign io_link_cs_clear = cs_mode != io_ctrl_cs_mode | fire_tx & ~(cs_mode == 2'h2 | (&cs_mode));	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIConsts.scala:12:48, generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:49:24, :50:31, :51:30, :52:28, :53:{18,33}, :56:{33,45}, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  assign io_link_lock = _txq_io_deq_valid | rxen;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:22:19, :30:21, :59:36]
  assign io_ip_txwm = _txq_io_count < io_ctrl_wm_tx;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:22:19, :61:31]
  assign io_ip_rxwm = _rxq_io_count > io_ctrl_wm_rx;	// @[generators/rocket-chip-blocks/src/main/scala/devices/spi/SPIFIFO.scala:23:19, :62:31]
endmodule

