// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Dechopper(
  input        clock,
               reset,
  input  [6:0] io_input,	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:7:14]
  output [6:0] io_output,	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:7:14]
  input        io_chopper_clock,	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:7:14]
  input  [3:0] io_chopper_clock_delay	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:7:14]
);

  reg         shiftReg_0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_1;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_2;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_3;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_4;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_5;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_6;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_7;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_8;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_9;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_10;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_11;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_12;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_13;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_14;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  reg         shiftReg_15;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
  wire [15:0] _GEN = {{shiftReg_15}, {shiftReg_14}, {shiftReg_13}, {shiftReg_12}, {shiftReg_11}, {shiftReg_10}, {shiftReg_9}, {shiftReg_8}, {shiftReg_7}, {shiftReg_6}, {shiftReg_5}, {shiftReg_4}, {shiftReg_3}, {shiftReg_2}, {shiftReg_1}, {shiftReg_0}};	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25, :18:34]
  always @(posedge clock) begin
    if (reset) begin
      shiftReg_0 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_1 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_2 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_3 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_4 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_5 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_6 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_7 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_8 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_9 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_10 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_11 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_12 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_13 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_14 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_15 <= 1'h0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
    end
    else begin
      shiftReg_0 <= io_chopper_clock;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_1 <= shiftReg_0;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_2 <= shiftReg_1;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_3 <= shiftReg_2;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_4 <= shiftReg_3;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_5 <= shiftReg_4;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_6 <= shiftReg_5;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_7 <= shiftReg_6;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_8 <= shiftReg_7;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_9 <= shiftReg_8;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_10 <= shiftReg_9;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_11 <= shiftReg_10;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_12 <= shiftReg_11;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_13 <= shiftReg_12;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_14 <= shiftReg_13;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      shiftReg_15 <= shiftReg_14;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        shiftReg_0 = _RANDOM[/*Zero width*/ 1'b0][0];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_1 = _RANDOM[/*Zero width*/ 1'b0][1];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_2 = _RANDOM[/*Zero width*/ 1'b0][2];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_3 = _RANDOM[/*Zero width*/ 1'b0][3];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_4 = _RANDOM[/*Zero width*/ 1'b0][4];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_5 = _RANDOM[/*Zero width*/ 1'b0][5];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_6 = _RANDOM[/*Zero width*/ 1'b0][6];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_7 = _RANDOM[/*Zero width*/ 1'b0][7];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_8 = _RANDOM[/*Zero width*/ 1'b0][8];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_9 = _RANDOM[/*Zero width*/ 1'b0][9];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_10 = _RANDOM[/*Zero width*/ 1'b0][10];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_11 = _RANDOM[/*Zero width*/ 1'b0][11];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_12 = _RANDOM[/*Zero width*/ 1'b0][12];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_13 = _RANDOM[/*Zero width*/ 1'b0][13];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_14 = _RANDOM[/*Zero width*/ 1'b0][14];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
        shiftReg_15 = _RANDOM[/*Zero width*/ 1'b0][15];	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:13:25]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_output = (io_chopper_clock_delay == 4'h0 ? io_chopper_clock : _GEN[io_chopper_clock_delay - 4'h1]) ? io_input : io_input * 7'h7F;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/Dechopper.scala:18:{34,58}, :20:37, :23:{19,58}]
endmodule

