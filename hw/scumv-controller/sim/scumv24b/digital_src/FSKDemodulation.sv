// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module FSKDemodulation(
  input         clock,
                reset,
  input  [7:0]  io_i,	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:10:14]
                io_q,	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:10:14]
  output        io_out,	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:10:14]
  input         io_firCmd_valid,	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:10:14]
  input  [3:0]  io_firCmd_bits_fir,	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:10:14]
  input  [5:0]  io_firCmd_bits_coeff,	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:10:14]
  input  [21:0] io_firCmd_bits_value	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:10:14]
);

  wire [15:0] _lpf_f1_io_out_bits;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:57:22]
  wire [15:0] _lpf_f0_io_out_bits;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:56:22]
  wire [15:0] _match_cos_f1_io_out_bits;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:43:28]
  wire [15:0] _match_sin_f1_io_out_bits;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:42:28]
  wire [15:0] _match_cos_f0_io_out_bits;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:41:28]
  wire [15:0] _match_sin_f0_io_out_bits;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:40:28]
  wire [15:0] _hilbert_q_io_out_bits;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:32:25]
  wire [15:0] _hilbert_i_io_out_bits;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:31:25]
  reg  [7:0]  delay_i;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:20:24]
  reg  [7:0]  delay_q;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:21:24]
  reg  [15:0] hilbert_out;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:37:28]
  reg  [31:0] match_f0_out;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:50:29]
  reg  [31:0] match_f1_out;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:52:29]
  reg         guess;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:63:22]
  wire [31:0] _GEN = {{16{_match_sin_f0_io_out_bits[15]}}, _match_sin_f0_io_out_bits};	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:40:28, :50:55]
  wire [31:0] _GEN_0 = {{16{_match_cos_f0_io_out_bits[15]}}, _match_cos_f0_io_out_bits};	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:41:28, :51:58]
  wire [31:0] _GEN_1 = {{16{_match_sin_f1_io_out_bits[15]}}, _match_sin_f1_io_out_bits};	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:42:28, :52:55]
  wire [31:0] _GEN_2 = {{16{_match_cos_f1_io_out_bits[15]}}, _match_cos_f1_io_out_bits};	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:43:28, :53:58]
  always @(posedge clock) begin
    delay_i <= io_i;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:20:24]
    delay_q <= io_q;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:21:24]
    hilbert_out <= _hilbert_i_io_out_bits + _hilbert_q_io_out_bits;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:31:25, :32:25, :37:{28,51}]
    match_f0_out <= _GEN * _GEN + _GEN_0 * _GEN_0;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:50:{29,55}, :51:{31,58}]
    match_f1_out <= _GEN_1 * _GEN_1 + _GEN_2 * _GEN_2;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:52:{29,55}, :53:{31,58}]
    guess <= $signed(_lpf_f1_io_out_bits) >= $signed(_lpf_f0_io_out_bits);	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:56:22, :57:22, :63:{22,42}]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;
        end
        delay_i = _RANDOM[2'h0][7:0];	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:20:24]
        delay_q = _RANDOM[2'h0][15:8];	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:20:24, :21:24]
        hilbert_out = _RANDOM[2'h0][31:16];	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:20:24, :37:28]
        match_f0_out = _RANDOM[2'h1];	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:50:29]
        match_f1_out = _RANDOM[2'h2];	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:52:29]
        guess = _RANDOM[2'h3][0];	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:63:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  FIR_1 hilbert_i (	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:31:25]
    .clock                (clock),
    .reset                (reset),
    .io_in_bits           ({{4{~(delay_i[7])}}, delay_i[6:0], 5'h0}),	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:20:24, :24:{20,28,55}, :34:24]
    .io_out_bits          (_hilbert_i_io_out_bits),
    .io_firCmd_valid      (io_firCmd_valid),
    .io_firCmd_bits_fir   (io_firCmd_bits_fir),
    .io_firCmd_bits_coeff (io_firCmd_bits_coeff),
    .io_firCmd_bits_value (io_firCmd_bits_value)
  );
  FIR_2 hilbert_q (	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:32:25]
    .clock                (clock),
    .reset                (reset),
    .io_in_bits           ({{4{~(delay_q[7])}}, delay_q[6:0], 5'h0}),	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:21:24, :25:{20,28,55}, :34:24, :35:24]
    .io_out_bits          (_hilbert_q_io_out_bits),
    .io_firCmd_valid      (io_firCmd_valid),
    .io_firCmd_bits_fir   (io_firCmd_bits_fir),
    .io_firCmd_bits_coeff (io_firCmd_bits_coeff),
    .io_firCmd_bits_value (io_firCmd_bits_value)
  );
  FIR_3 match_sin_f0 (	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:40:28]
    .clock                (clock),
    .reset                (reset),
    .io_in_bits           (hilbert_out),	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:37:28]
    .io_out_bits          (_match_sin_f0_io_out_bits),
    .io_firCmd_valid      (io_firCmd_valid),
    .io_firCmd_bits_fir   (io_firCmd_bits_fir),
    .io_firCmd_bits_coeff (io_firCmd_bits_coeff),
    .io_firCmd_bits_value (io_firCmd_bits_value)
  );
  FIR_4 match_cos_f0 (	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:41:28]
    .clock                (clock),
    .reset                (reset),
    .io_in_bits           (hilbert_out),	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:37:28]
    .io_out_bits          (_match_cos_f0_io_out_bits),
    .io_firCmd_valid      (io_firCmd_valid),
    .io_firCmd_bits_fir   (io_firCmd_bits_fir),
    .io_firCmd_bits_coeff (io_firCmd_bits_coeff),
    .io_firCmd_bits_value (io_firCmd_bits_value)
  );
  FIR_5 match_sin_f1 (	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:42:28]
    .clock                (clock),
    .reset                (reset),
    .io_in_bits           (hilbert_out),	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:37:28]
    .io_out_bits          (_match_sin_f1_io_out_bits),
    .io_firCmd_valid      (io_firCmd_valid),
    .io_firCmd_bits_fir   (io_firCmd_bits_fir),
    .io_firCmd_bits_coeff (io_firCmd_bits_coeff),
    .io_firCmd_bits_value (io_firCmd_bits_value)
  );
  FIR_6 match_cos_f1 (	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:43:28]
    .clock                (clock),
    .reset                (reset),
    .io_in_bits           (hilbert_out),	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:37:28]
    .io_out_bits          (_match_cos_f1_io_out_bits),
    .io_firCmd_valid      (io_firCmd_valid),
    .io_firCmd_bits_fir   (io_firCmd_bits_fir),
    .io_firCmd_bits_coeff (io_firCmd_bits_coeff),
    .io_firCmd_bits_value (io_firCmd_bits_value)
  );
  FIR_7 lpf_f0 (	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:56:22]
    .clock                (clock),
    .reset                (reset),
    .io_in_bits           (match_f0_out[27:12]),	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:50:29, :59:21]
    .io_out_bits          (_lpf_f0_io_out_bits),
    .io_firCmd_valid      (io_firCmd_valid),
    .io_firCmd_bits_fir   (io_firCmd_bits_fir),
    .io_firCmd_bits_coeff (io_firCmd_bits_coeff),
    .io_firCmd_bits_value (io_firCmd_bits_value)
  );
  FIR_7 lpf_f1 (	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:57:22]
    .clock                (clock),
    .reset                (reset),
    .io_in_bits           (match_f1_out[27:12]),	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:52:29, :60:21]
    .io_out_bits          (_lpf_f1_io_out_bits),
    .io_firCmd_valid      (io_firCmd_valid),
    .io_firCmd_bits_fir   (io_firCmd_bits_fir),
    .io_firCmd_bits_coeff (io_firCmd_bits_coeff),
    .io_firCmd_bits_value (io_firCmd_bits_value)
  );
  assign io_out = guess;	// @[generators/baseband/src/main/scala/modem/FSKDemodulation.scala:63:22]
endmodule

