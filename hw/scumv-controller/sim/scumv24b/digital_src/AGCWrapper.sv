// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AGCWrapper(
  input        clock,
               reset,
  input  [7:0] io_adcIn,	// @[generators/baseband/src/main/scala/modem/AGC.scala:71:14]
  output [4:0] io_vgaLUTIndex,	// @[generators/baseband/src/main/scala/modem/AGC.scala:71:14]
  input  [7:0] io_control_sampleWindow,	// @[generators/baseband/src/main/scala/modem/AGC.scala:71:14]
               io_control_idealPeakToPeak,	// @[generators/baseband/src/main/scala/modem/AGC.scala:71:14]
               io_control_toleranceP2P,	// @[generators/baseband/src/main/scala/modem/AGC.scala:71:14]
               io_control_gainInc,	// @[generators/baseband/src/main/scala/modem/AGC.scala:71:14]
               io_control_gainDec,	// @[generators/baseband/src/main/scala/modem/AGC.scala:71:14]
  input        io_control_reset,	// @[generators/baseband/src/main/scala/modem/AGC.scala:71:14]
               io_adc_clock	// @[generators/baseband/src/main/scala/modem/AGC.scala:71:14]
);

  wire       _idxQueue_io_deq_valid;	// @[generators/baseband/src/main/scala/modem/AGC.scala:95:24]
  wire [7:0] _idxQueue_io_deq_bits;	// @[generators/baseband/src/main/scala/modem/AGC.scala:95:24]
  wire       _controlQueue_io_deq_valid;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28]
  wire [7:0] _controlQueue_io_deq_bits_sampleWindow;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28]
  wire [7:0] _controlQueue_io_deq_bits_idealPeakToPeak;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28]
  wire [7:0] _controlQueue_io_deq_bits_toleranceP2P;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28]
  wire [7:0] _controlQueue_io_deq_bits_gainInc;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28]
  wire [7:0] _controlQueue_io_deq_bits_gainDec;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28]
  wire       _controlQueue_io_deq_bits_reset;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28]
  wire [4:0] _agc_io_vgaLUTIndex;	// @[generators/baseband/src/main/scala/modem/AGC.scala:78:44]
  reg  [7:0] controlPrev_sampleWindow;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
  reg  [7:0] controlPrev_idealPeakToPeak;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
  reg  [7:0] controlPrev_toleranceP2P;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
  reg  [7:0] controlPrev_gainInc;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
  reg  [7:0] controlPrev_gainDec;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
  reg        controlPrev_reset;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
  reg  [7:0] agc_io_control_r_sampleWindow;	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
  reg  [7:0] agc_io_control_r_idealPeakToPeak;	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
  reg  [7:0] agc_io_control_r_toleranceP2P;	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
  reg  [7:0] agc_io_control_r_gainInc;	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
  reg  [7:0] agc_io_control_r_gainDec;	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
  reg        agc_io_control_r_reset;	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
  reg  [7:0] io_vgaLUTIndex_r;	// @[generators/baseband/src/main/scala/modem/AGC.scala:104:30]
  always @(posedge clock) begin
    controlPrev_sampleWindow <= io_control_sampleWindow;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
    controlPrev_idealPeakToPeak <= io_control_idealPeakToPeak;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
    controlPrev_toleranceP2P <= io_control_toleranceP2P;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
    controlPrev_gainInc <= io_control_gainInc;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
    controlPrev_gainDec <= io_control_gainDec;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
    controlPrev_reset <= io_control_reset;	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
    if (_controlQueue_io_deq_valid) begin	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28]
      agc_io_control_r_sampleWindow <= _controlQueue_io_deq_bits_sampleWindow;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28, :92:30]
      agc_io_control_r_idealPeakToPeak <= _controlQueue_io_deq_bits_idealPeakToPeak;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28, :92:30]
      agc_io_control_r_toleranceP2P <= _controlQueue_io_deq_bits_toleranceP2P;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28, :92:30]
      agc_io_control_r_gainInc <= _controlQueue_io_deq_bits_gainInc;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28, :92:30]
      agc_io_control_r_gainDec <= _controlQueue_io_deq_bits_gainDec;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28, :92:30]
      agc_io_control_r_reset <= _controlQueue_io_deq_bits_reset;	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28, :92:30]
    end
    if (_idxQueue_io_deq_valid)	// @[generators/baseband/src/main/scala/modem/AGC.scala:95:24]
      io_vgaLUTIndex_r <= _idxQueue_io_deq_bits;	// @[generators/baseband/src/main/scala/modem/AGC.scala:95:24, :104:30]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;
        end
        controlPrev_sampleWindow = _RANDOM[2'h0][7:0];	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
        controlPrev_idealPeakToPeak = _RANDOM[2'h0][15:8];	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
        controlPrev_toleranceP2P = _RANDOM[2'h0][23:16];	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
        controlPrev_gainInc = _RANDOM[2'h0][31:24];	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
        controlPrev_gainDec = _RANDOM[2'h1][7:0];	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
        controlPrev_reset = _RANDOM[2'h1][8];	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28]
        agc_io_control_r_sampleWindow = _RANDOM[2'h1][16:9];	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28, :92:30]
        agc_io_control_r_idealPeakToPeak = _RANDOM[2'h1][24:17];	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28, :92:30]
        agc_io_control_r_toleranceP2P = {_RANDOM[2'h1][31:25], _RANDOM[2'h2][0]};	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28, :92:30]
        agc_io_control_r_gainInc = _RANDOM[2'h2][8:1];	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
        agc_io_control_r_gainDec = _RANDOM[2'h2][16:9];	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
        agc_io_control_r_reset = _RANDOM[2'h2][17];	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
        io_vgaLUTIndex_r = _RANDOM[2'h2][25:18];	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30, :104:30]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  AGC agc (	// @[generators/baseband/src/main/scala/modem/AGC.scala:78:44]
    .clock                      (io_adc_clock),
    .reset                      (reset),
    .io_adcIn                   (io_adcIn),
    .io_vgaLUTIndex             (_agc_io_vgaLUTIndex),
    .io_control_sampleWindow    (agc_io_control_r_sampleWindow),	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
    .io_control_idealPeakToPeak (agc_io_control_r_idealPeakToPeak),	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
    .io_control_toleranceP2P    (agc_io_control_r_toleranceP2P),	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
    .io_control_gainInc         (agc_io_control_r_gainInc),	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
    .io_control_gainDec         (agc_io_control_r_gainDec),	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
    .io_control_reset           (agc_io_control_r_reset)	// @[generators/baseband/src/main/scala/modem/AGC.scala:92:30]
  );
  AsyncQueue_16 controlQueue (	// @[generators/baseband/src/main/scala/modem/AGC.scala:81:28]
    .io_enq_clock                (clock),
    .io_enq_reset                (reset),
    .io_enq_valid                ({controlPrev_sampleWindow, controlPrev_idealPeakToPeak, controlPrev_toleranceP2P, controlPrev_gainInc, controlPrev_gainDec, controlPrev_reset} != {io_control_sampleWindow, io_control_idealPeakToPeak, io_control_toleranceP2P, io_control_gainInc, io_control_gainDec, io_control_reset}),	// @[generators/baseband/src/main/scala/modem/AGC.scala:86:28, :87:{44,51,66}]
    .io_enq_bits_sampleWindow    (io_control_sampleWindow),
    .io_enq_bits_idealPeakToPeak (io_control_idealPeakToPeak),
    .io_enq_bits_toleranceP2P    (io_control_toleranceP2P),
    .io_enq_bits_gainInc         (io_control_gainInc),
    .io_enq_bits_gainDec         (io_control_gainDec),
    .io_enq_bits_reset           (io_control_reset),
    .io_deq_clock                (io_adc_clock),
    .io_deq_reset                (reset),
    .io_deq_valid                (_controlQueue_io_deq_valid),
    .io_deq_bits_sampleWindow    (_controlQueue_io_deq_bits_sampleWindow),
    .io_deq_bits_idealPeakToPeak (_controlQueue_io_deq_bits_idealPeakToPeak),
    .io_deq_bits_toleranceP2P    (_controlQueue_io_deq_bits_toleranceP2P),
    .io_deq_bits_gainInc         (_controlQueue_io_deq_bits_gainInc),
    .io_deq_bits_gainDec         (_controlQueue_io_deq_bits_gainDec),
    .io_deq_bits_reset           (_controlQueue_io_deq_bits_reset)
  );
  AsyncQueue_17 idxQueue (	// @[generators/baseband/src/main/scala/modem/AGC.scala:95:24]
    .io_enq_clock (io_adc_clock),
    .io_enq_reset (reset),
    .io_enq_bits  ({3'h0, _agc_io_vgaLUTIndex}),	// @[generators/baseband/src/main/scala/modem/AGC.scala:78:44, :99:24]
    .io_deq_clock (clock),
    .io_deq_reset (reset),
    .io_deq_valid (_idxQueue_io_deq_valid),
    .io_deq_bits  (_idxQueue_io_deq_bits)
  );
  assign io_vgaLUTIndex = io_vgaLUTIndex_r[4:0];	// @[generators/baseband/src/main/scala/modem/AGC.scala:104:{18,30}]
endmodule

