// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AFEFrontend(
  output        auto_mmio_in_a_ready,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  input         auto_mmio_in_a_valid,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  input  [2:0]  auto_mmio_in_a_bits_opcode,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
                auto_mmio_in_a_bits_param,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  input  [1:0]  auto_mmio_in_a_bits_size,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  input  [15:0] auto_mmio_in_a_bits_source,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  input  [14:0] auto_mmio_in_a_bits_address,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  input  [3:0]  auto_mmio_in_a_bits_mask,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  input  [31:0] auto_mmio_in_a_bits_data,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  input         auto_mmio_in_a_bits_corrupt,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
                auto_mmio_in_d_ready,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  output        auto_mmio_in_d_valid,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  output [2:0]  auto_mmio_in_d_bits_opcode,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  output [1:0]  auto_mmio_in_d_bits_size,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  output [15:0] auto_mmio_in_d_bits_source,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  output [31:0] auto_mmio_in_d_bits_data,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
  input         auto_clock_in_clock,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
                auto_clock_in_reset,	// @[generators/rocket-chip/src/main/scala/diplomacy/LazyModule.scala:366:18]
                io_adc_clock,	// @[generators/afe/src/main/scala/afe.scala:28:26]
                io_adc_output_valid,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  input  [9:0]  io_adc_output_bits,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  input         io_general_trim_afe_out_valid,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  input  [7:0]  io_general_trim_afe_out_bits,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output [6:0]  io_i_sel,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output        io_reset_afe_adc,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output [9:0]  io_r2r_dac_input,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output [2:0]  io_sensor_sel,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output        io_sensor_net_config,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output [4:0]  io_feedback_config,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output [1:0]  io_adc_input_sel,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output        io_select_digital_power,	// @[generators/afe/src/main/scala/afe.scala:28:26]
                io_select_analog_power,	// @[generators/afe/src/main/scala/afe.scala:28:26]
                io_select_dac_vdd,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output [7:0]  io_general_trim_afe_in,	// @[generators/afe/src/main/scala/afe.scala:28:26]
  output        io_adc_divided_clock	// @[generators/afe/src/main/scala/afe.scala:28:26]
);

  AFETL afefrontend (	// @[generators/afe/src/main/scala/afe.scala:23:31]
    .clock                               (auto_clock_in_clock),
    .reset                               (auto_clock_in_reset),
    .auto_control_xing_in_a_ready        (auto_mmio_in_a_ready),
    .auto_control_xing_in_a_valid        (auto_mmio_in_a_valid),
    .auto_control_xing_in_a_bits_opcode  (auto_mmio_in_a_bits_opcode),
    .auto_control_xing_in_a_bits_param   (auto_mmio_in_a_bits_param),
    .auto_control_xing_in_a_bits_size    (auto_mmio_in_a_bits_size),
    .auto_control_xing_in_a_bits_source  (auto_mmio_in_a_bits_source),
    .auto_control_xing_in_a_bits_address (auto_mmio_in_a_bits_address),
    .auto_control_xing_in_a_bits_mask    (auto_mmio_in_a_bits_mask),
    .auto_control_xing_in_a_bits_data    (auto_mmio_in_a_bits_data),
    .auto_control_xing_in_a_bits_corrupt (auto_mmio_in_a_bits_corrupt),
    .auto_control_xing_in_d_ready        (auto_mmio_in_d_ready),
    .auto_control_xing_in_d_valid        (auto_mmio_in_d_valid),
    .auto_control_xing_in_d_bits_opcode  (auto_mmio_in_d_bits_opcode),
    .auto_control_xing_in_d_bits_size    (auto_mmio_in_d_bits_size),
    .auto_control_xing_in_d_bits_source  (auto_mmio_in_d_bits_source),
    .auto_control_xing_in_d_bits_data    (auto_mmio_in_d_bits_data),
    .io_adc_clock                        (io_adc_clock),
    .io_adc_output_valid                 (io_adc_output_valid),
    .io_adc_output_bits                  (io_adc_output_bits),
    .io_general_trim_afe_out_valid       (io_general_trim_afe_out_valid),
    .io_general_trim_afe_out_bits        (io_general_trim_afe_out_bits),
    .io_i_sel                            (io_i_sel),
    .io_reset_afe_adc                    (io_reset_afe_adc),
    .io_r2r_dac_input                    (io_r2r_dac_input),
    .io_sensor_sel                       (io_sensor_sel),
    .io_sensor_net_config                (io_sensor_net_config),
    .io_feedback_config                  (io_feedback_config),
    .io_adc_input_sel                    (io_adc_input_sel),
    .io_select_digital_power             (io_select_digital_power),
    .io_select_analog_power              (io_select_analog_power),
    .io_select_dac_vdd                   (io_select_dac_vdd),
    .io_general_trim_afe_in              (io_general_trim_afe_in),
    .io_adc_divided_clock                (io_adc_divided_clock)
  );
endmodule

