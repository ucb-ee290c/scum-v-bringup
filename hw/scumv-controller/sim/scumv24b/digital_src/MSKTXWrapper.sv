// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module MSKTXWrapper(
  input        clock,
               reset,
  output [5:0] io_analog_modIndex,	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
  output       io_digital_in_ready,	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
  input        io_digital_in_valid,	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
               io_digital_in_bits,	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
  output       io_control_in_ready,	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
  input        io_control_in_valid,	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
  input  [8:0] io_control_in_bits_totalBytes,	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
  output       io_control_out_done,	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
  output [1:0] io_state,	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
  input        io_adc_clock	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:291:16]
);

  wire       _outputQueue_io_deq_valid;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:323:27]
  wire [1:0] _outputQueue_io_deq_bits_state;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:323:27]
  wire       _outputQueue_io_deq_bits_done;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:323:27]
  wire       _controlInputQueue_io_deq_valid;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:314:33]
  wire [8:0] _controlInputQueue_io_deq_bits_totalBytes;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:314:33]
  wire       _digInQueue_io_deq_valid;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:305:26]
  wire       _digInQueue_io_deq_bits;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:305:26]
  wire       _mskTX_io_digital_in_ready;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:303:46]
  wire       _mskTX_io_control_ready;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:303:46]
  wire [1:0] _mskTX_io_out_state;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:303:46]
  wire       _mskTX_io_out_done;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:303:46]
  reg  [1:0] outputIO_state;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:331:27]
  reg        outputIO_done;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:331:27]
  always @(posedge clock) begin
    if (_outputQueue_io_deq_valid) begin	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:323:27]
      outputIO_state <= _outputQueue_io_deq_bits_state;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:323:27, :331:27]
      outputIO_done <= _outputQueue_io_deq_bits_done;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:323:27, :331:27]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;
        outputIO_state = _RANDOM[/*Zero width*/ 1'b0][1:0];	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:331:27]
        outputIO_done = _RANDOM[/*Zero width*/ 1'b0][2];	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:331:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  MSKTX mskTX (	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:303:46]
    .clock                      (io_adc_clock),
    .reset                      (reset),
    .io_digital_in_ready        (_mskTX_io_digital_in_ready),
    .io_digital_in_valid        (_digInQueue_io_deq_valid),	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:305:26]
    .io_digital_in_bits         (_digInQueue_io_deq_bits),	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:305:26]
    .io_control_ready           (_mskTX_io_control_ready),
    .io_control_valid           (_controlInputQueue_io_deq_valid),	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:314:33]
    .io_control_bits_totalBytes (_controlInputQueue_io_deq_bits_totalBytes),	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:314:33]
    .io_out_state               (_mskTX_io_out_state),
    .io_out_done                (_mskTX_io_out_done),
    .io_modIndex                (io_analog_modIndex)
  );
  AsyncQueue_2 digInQueue (	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:305:26]
    .io_enq_clock (clock),
    .io_enq_reset (reset),
    .io_enq_ready (io_digital_in_ready),
    .io_enq_valid (io_digital_in_valid),
    .io_enq_bits  (io_digital_in_bits),
    .io_deq_clock (io_adc_clock),
    .io_deq_reset (reset),
    .io_deq_ready (_mskTX_io_digital_in_ready),	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:303:46]
    .io_deq_valid (_digInQueue_io_deq_valid),
    .io_deq_bits  (_digInQueue_io_deq_bits)
  );
  AsyncQueue_4 controlInputQueue (	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:314:33]
    .io_enq_clock           (clock),
    .io_enq_reset           (reset),
    .io_enq_ready           (io_control_in_ready),
    .io_enq_valid           (io_control_in_valid),
    .io_enq_bits_totalBytes (io_control_in_bits_totalBytes),
    .io_deq_clock           (io_adc_clock),
    .io_deq_reset           (reset),
    .io_deq_ready           (_mskTX_io_control_ready),	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:303:46]
    .io_deq_valid           (_controlInputQueue_io_deq_valid),
    .io_deq_bits_totalBytes (_controlInputQueue_io_deq_bits_totalBytes)
  );
  AsyncQueue_5 outputQueue (	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:323:27]
    .io_enq_clock      (io_adc_clock),
    .io_enq_reset      (reset),
    .io_enq_bits_state (_mskTX_io_out_state),	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:303:46]
    .io_enq_bits_done  (_mskTX_io_out_done),	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:303:46]
    .io_deq_clock      (clock),
    .io_deq_reset      (reset),
    .io_deq_valid      (_outputQueue_io_deq_valid),
    .io_deq_bits_state (_outputQueue_io_deq_bits_state),
    .io_deq_bits_done  (_outputQueue_io_deq_bits_done)
  );
  assign io_control_out_done = outputIO_done;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:331:27]
  assign io_state = outputIO_state;	// @[generators/baseband/src/main/scala/modem/FSKTX.scala:331:27]
endmodule

