// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module CICDecimator(
  input         clock,
                reset,
  input  [6:0]  io_input,	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:69:14]
  output        io_output_valid,	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:69:14]
  output [66:0] io_output_bits	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:69:14]
);

  wire        _combs_2_io_output_valid;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
  wire [66:0] _combs_2_io_output_bits;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
  wire        _combs_1_io_output_valid;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
  wire [66:0] _combs_1_io_output_bits;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
  wire        _combs_0_io_output_valid;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
  wire [66:0] _combs_0_io_output_bits;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
  wire        _decimator_io_output_valid;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:90:25]
  wire [66:0] _decimator_io_output_bits;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:90:25]
  wire [66:0] _integrators_2_io_output;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:81:11]
  wire [66:0] _integrators_1_io_output;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:81:11]
  wire [66:0] _integrators_0_io_output;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:81:11]
  wire [66:0] _firstStage_io_output;	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:76:26]
  Integrator_6 firstStage (	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:76:26]
    .clock     (clock),
    .reset     (reset),
    .io_input  (io_input),
    .io_output (_firstStage_io_output)
  );
  Integrator_7 integrators_0 (	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:81:11]
    .clock     (clock),
    .reset     (reset),
    .io_input  (_firstStage_io_output),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:76:26]
    .io_output (_integrators_0_io_output)
  );
  Integrator_7 integrators_1 (	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:81:11]
    .clock     (clock),
    .reset     (reset),
    .io_input  (_integrators_0_io_output),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:81:11]
    .io_output (_integrators_1_io_output)
  );
  Integrator_7 integrators_2 (	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:81:11]
    .clock     (clock),
    .reset     (reset),
    .io_input  (_integrators_1_io_output),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:81:11]
    .io_output (_integrators_2_io_output)
  );
  Decimator decimator (	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:90:25]
    .clock           (clock),
    .reset           (reset),
    .io_input        (_integrators_2_io_output),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:81:11]
    .io_output_valid (_decimator_io_output_valid),
    .io_output_bits  (_decimator_io_output_bits)
  );
  Comb combs_0 (	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .clock           (clock),
    .reset           (reset),
    .io_input_valid  (_decimator_io_output_valid),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:90:25]
    .io_input_bits   (_decimator_io_output_bits),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:90:25]
    .io_output_valid (_combs_0_io_output_valid),
    .io_output_bits  (_combs_0_io_output_bits)
  );
  Comb combs_1 (	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .clock           (clock),
    .reset           (reset),
    .io_input_valid  (_combs_0_io_output_valid),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .io_input_bits   (_combs_0_io_output_bits),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .io_output_valid (_combs_1_io_output_valid),
    .io_output_bits  (_combs_1_io_output_bits)
  );
  Comb combs_2 (	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .clock           (clock),
    .reset           (reset),
    .io_input_valid  (_combs_1_io_output_valid),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .io_input_bits   (_combs_1_io_output_bits),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .io_output_valid (_combs_2_io_output_valid),
    .io_output_bits  (_combs_2_io_output_bits)
  );
  Comb combs_3 (	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .clock           (clock),
    .reset           (reset),
    .io_input_valid  (_combs_2_io_output_valid),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .io_input_bits   (_combs_2_io_output_bits),	// @[generators/scumv-sensor-adc/src/main/scala/sensoradc/CIC.scala:95:11]
    .io_output_valid (io_output_valid),
    .io_output_bits  (io_output_bits)
  );
endmodule

