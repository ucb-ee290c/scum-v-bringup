// Generated by CIRCT unknown git version
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module Integrator(
  input  [31:0] io_window,	// @[generators/baseband/src/main/scala/modem/CDR.scala:48:14]
  output [6:0]  io_sum	// @[generators/baseband/src/main/scala/modem/CDR.scala:48:14]
);

  wire [2:0]  _io_sum_T = {{2{~(io_window[0])}}, 1'h1} + {{2{~(io_window[1])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [3:0]  _io_sum_T_1 = {_io_sum_T[2], _io_sum_T} + {{3{~(io_window[2])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [4:0]  _io_sum_T_2 = {_io_sum_T_1[3], _io_sum_T_1} + {{4{~(io_window[3])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [5:0]  _io_sum_T_3 = {_io_sum_T_2[4], _io_sum_T_2} + {{5{~(io_window[4])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [6:0]  _io_sum_T_4 = {_io_sum_T_3[5], _io_sum_T_3} + {{6{~(io_window[5])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [7:0]  _io_sum_T_5 = {_io_sum_T_4[6], _io_sum_T_4} + {{7{~(io_window[6])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [8:0]  _io_sum_T_6 = {_io_sum_T_5[7], _io_sum_T_5} + {{8{~(io_window[7])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [9:0]  _io_sum_T_7 = {_io_sum_T_6[8], _io_sum_T_6} + {{9{~(io_window[8])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [10:0] _io_sum_T_8 = {_io_sum_T_7[9], _io_sum_T_7} + {{10{~(io_window[9])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [11:0] _io_sum_T_9 = {_io_sum_T_8[10], _io_sum_T_8} + {{11{~(io_window[10])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  wire [12:0] _io_sum_T_10 = {_io_sum_T_9[11], _io_sum_T_9} + {{12{~(io_window[11])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
  assign io_sum = _io_sum_T_10[6:0] + {{6{~(io_window[12])}}, 1'h1} + {{6{~(io_window[13])}}, 1'h1} + {{6{~(io_window[14])}}, 1'h1} + {{6{~(io_window[15])}}, 1'h1} + {{6{~(io_window[16])}}, 1'h1} + {{6{~(io_window[17])}}, 1'h1} + {{6{~(io_window[18])}}, 1'h1} + {{6{~(io_window[19])}}, 1'h1} + {{6{~(io_window[20])}}, 1'h1} + {{6{~(io_window[21])}}, 1'h1} + {{6{~(io_window[22])}}, 1'h1} + {{6{~(io_window[23])}}, 1'h1} + {{6{~(io_window[24])}}, 1'h1} + {{6{~(io_window[25])}}, 1'h1} + {{6{~(io_window[26])}}, 1'h1} + {{6{~(io_window[27])}}, 1'h1} + {{6{~(io_window[28])}}, 1'h1} + {{6{~(io_window[29])}}, 1'h1} + {{6{~(io_window[30])}}, 1'h1} + {{6{~(io_window[31])}}, 1'h1};	// @[generators/baseband/src/main/scala/modem/CDR.scala:53:{50,60}, :54:27]
endmodule

